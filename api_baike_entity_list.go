// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetBaikeEntityList 分页拉取词条列表数据, 支持拉取租户内的全部词条。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/list
func (r *BaikeService) GetBaikeEntityList(ctx context.Context, request *GetBaikeEntityListReq, options ...MethodOptionFunc) (*GetBaikeEntityListResp, *Response, error) {
	if r.cli.mock.mockBaikeGetBaikeEntityList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#GetBaikeEntityList mock enable")
		return r.cli.mock.mockBaikeGetBaikeEntityList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "GetBaikeEntityList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBaikeEntityListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeGetBaikeEntityList mock BaikeGetBaikeEntityList method
func (r *Mock) MockBaikeGetBaikeEntityList(f func(ctx context.Context, request *GetBaikeEntityListReq, options ...MethodOptionFunc) (*GetBaikeEntityListResp, *Response, error)) {
	r.mockBaikeGetBaikeEntityList = f
}

// UnMockBaikeGetBaikeEntityList un-mock BaikeGetBaikeEntityList method
func (r *Mock) UnMockBaikeGetBaikeEntityList() {
	r.mockBaikeGetBaikeEntityList = nil
}

// GetBaikeEntityListReq ...
type GetBaikeEntityListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 20, 默认值: `20`, 最大值: `100`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c"
	Provider   *string `query:"provider" json:"-"`     // 相关外部系统【可用来过滤词条数据】, 示例值: "星云", 长度范围: `2` ～ `32` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetBaikeEntityListResp ...
type GetBaikeEntityListResp struct {
	Entities  []*GetBaikeEntityListRespEntity `json:"entities,omitempty"`   // 词条列表
	PageToken string                          `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
}

// GetBaikeEntityListRespEntity ...
type GetBaikeEntityListRespEntity struct {
	ID          string                                   `json:"id,omitempty"`           // 词条 ID （需要更新某个词条时填写, 若是创建新词条可不填写）
	MainKeys    []*GetBaikeEntityListRespEntityMainKey   `json:"main_keys,omitempty"`    // 词条名
	Aliases     []*GetBaikeEntityListRespEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                   `json:"description,omitempty"`  // 词条释义（纯文本格式）
	CreateTime  string                                   `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                   `json:"update_time,omitempty"`  // 词条最近更新时间
	RelatedMeta *GetBaikeEntityListRespEntityRelatedMeta `json:"related_meta,omitempty"` // 更多相关信息
	Statistics  *GetBaikeEntityListRespEntityStatistics  `json:"statistics,omitempty"`   // 当前词条收到的反馈数据
	OuterInfo   *GetBaikeEntityListRespEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部系统关联数据
	RichText    string                                   `json:"rich_text,omitempty"`    // 富文本格式（当填写富文本内容时, description字段将会失效可不填写）, 支持的格式参考[企业百科指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/overview)中的释义部分
}

// GetBaikeEntityListRespEntityAliase ...
type GetBaikeEntityListRespEntityAliase struct {
	Key           string                                           `json:"key,omitempty"`            // 名称的值
	DisplayStatus *GetBaikeEntityListRespEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 名称展示范围
}

// GetBaikeEntityListRespEntityAliaseDisplayStatus ...
type GetBaikeEntityListRespEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 对应名称是否在消息/云文档高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 对应名称是否在搜索结果中展示
}

// GetBaikeEntityListRespEntityMainKey ...
type GetBaikeEntityListRespEntityMainKey struct {
	Key           string                                            `json:"key,omitempty"`            // 名称的值
	DisplayStatus *GetBaikeEntityListRespEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 名称展示范围
}

// GetBaikeEntityListRespEntityMainKeyDisplayStatus ...
type GetBaikeEntityListRespEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 对应名称是否在消息/云文档高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 对应名称是否在搜索结果中展示
}

// GetBaikeEntityListRespEntityOuterInfo ...
type GetBaikeEntityListRespEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 外部系统（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 词条在外部系统中对应的唯一 ID（不能包含中横线 "-"）
}

// GetBaikeEntityListRespEntityRelatedMeta ...
type GetBaikeEntityListRespEntityRelatedMeta struct {
	Users           []*GetBaikeEntityListRespEntityRelatedMetaUser           `json:"users,omitempty"`           // 相关联系人
	Chats           []*GetBaikeEntityListRespEntityRelatedMetaChat           `json:"chats,omitempty"`           // 相关服务中的相关公开群
	Docs            []*GetBaikeEntityListRespEntityRelatedMetaDoc            `json:"docs,omitempty"`            // 相关云文档
	Oncalls         []*GetBaikeEntityListRespEntityRelatedMetaOncall         `json:"oncalls,omitempty"`         // 相关服务中的相关值班号
	Links           []*GetBaikeEntityListRespEntityRelatedMetaLink           `json:"links,omitempty"`           // 相关链接
	Abbreviations   []*GetBaikeEntityListRespEntityRelatedMetaAbbreviation   `json:"abbreviations,omitempty"`   // 相关词条
	Classifications []*GetBaikeEntityListRespEntityRelatedMetaClassification `json:"classifications,omitempty"` // 当前词条所属分类, 词条只能属于二级分类, 且每个一级分类下只能选择一个二级分类。
	Images          []*GetBaikeEntityListRespEntityRelatedMetaImage          `json:"images,omitempty"`          // 上传的图片
}

// GetBaikeEntityListRespEntityRelatedMetaAbbreviation ...
type GetBaikeEntityListRespEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 相关词条 ID
}

// GetBaikeEntityListRespEntityRelatedMetaChat ...
type GetBaikeEntityListRespEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntityRelatedMetaClassification ...
type GetBaikeEntityListRespEntityRelatedMetaClassification struct {
	ID       string `json:"id,omitempty"`        // 二级分类 ID
	Name     string `json:"name,omitempty"`      // 二级分类名称
	FatherID string `json:"father_id,omitempty"` // 对应一级分类 ID
}

// GetBaikeEntityListRespEntityRelatedMetaDoc ...
type GetBaikeEntityListRespEntityRelatedMetaDoc struct {
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntityRelatedMetaImage ...
type GetBaikeEntityListRespEntityRelatedMetaImage struct {
	Token string `json:"token,omitempty"` // 通过文件接口上传图片后, 获得的图片 token
}

// GetBaikeEntityListRespEntityRelatedMetaLink ...
type GetBaikeEntityListRespEntityRelatedMetaLink struct {
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntityRelatedMetaOncall ...
type GetBaikeEntityListRespEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntityRelatedMetaUser ...
type GetBaikeEntityListRespEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 对应相关信息 ID
	Title string `json:"title,omitempty"` // 对应相关信息的描述, 如相关联系人的描述、相关链接的标题
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntityStatistics ...
type GetBaikeEntityListRespEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 累计点赞
	DislikeCount int64 `json:"dislike_count,omitempty"` // 当前词条版本收到的负反馈数量
}

// getBaikeEntityListResp ...
type getBaikeEntityListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetBaikeEntityListResp `json:"data,omitempty"`
}
