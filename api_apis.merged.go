// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"encoding/json"
	"io"
)

// GetACSAccessRecordList
//
// 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录。
// 该接口返回满足查询参数的识别记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record/list
func (r *ACSService) GetACSAccessRecordList(ctx context.Context, request *GetACSAccessRecordListReq, options ...MethodOptionFunc) (*GetACSAccessRecordListResp, *Response, error) {
	if r.cli.mock.mockACSGetACSAccessRecordList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSAccessRecordList mock enable")
		return r.cli.mock.mockACSGetACSAccessRecordList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSAccessRecordList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/access_records",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSAccessRecordListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSAccessRecordList mock ACSGetACSAccessRecordList method
func (r *Mock) MockACSGetACSAccessRecordList(f func(ctx context.Context, request *GetACSAccessRecordListReq, options ...MethodOptionFunc) (*GetACSAccessRecordListResp, *Response, error)) {
	r.mockACSGetACSAccessRecordList = f
}

// UnMockACSGetACSAccessRecordList un-mock ACSGetACSAccessRecordList method
func (r *Mock) UnMockACSGetACSAccessRecordList() {
	r.mockACSGetACSAccessRecordList = nil
}

// GetACSAccessRecordListReq ...
type GetACSAccessRecordListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：100, 最大值：`500`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	From       int64   `query:"from" json:"-"`         // 记录开始时间，单位秒, 示例值：1624520521
	To         int64   `query:"to" json:"-"`           // 记录结束时间，单位秒，,时间跨度不能超过30天, 示例值：1624520521
	DeviceID   *string `query:"device_id" json:"-"`    // 门禁设备 ID, 示例值："7091146989218002577"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getACSAccessRecordListResp ...
type getACSAccessRecordListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetACSAccessRecordListResp `json:"data,omitempty"`
}

// GetACSAccessRecordListResp ...
type GetACSAccessRecordListResp struct {
	Items     []*GetACSAccessRecordListRespItem `json:"items,omitempty"`      // -
	PageToken string                            `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetACSAccessRecordListRespItem ...
type GetACSAccessRecordListRespItem struct {
	AccessRecordID string `json:"access_record_id,omitempty"` // 门禁记录 ID
	UserID         string `json:"user_id,omitempty"`          // 门禁记录所属用户 ID
	DeviceID       string `json:"device_id,omitempty"`        // 门禁设备 ID
	IsClockIn      bool   `json:"is_clock_in,omitempty"`      // 是否是打卡
	AccessTime     string `json:"access_time,omitempty"`      // 访问时间，单位秒
	AccessType     string `json:"access_type,omitempty"`      // 识别方式, 可选值有: `FA`：人脸识别方式
	AccessData     string `json:"access_data,omitempty"`      // 识别相关数据，根据 access_type 不同，取值不同
	IsDoorOpen     bool   `json:"is_door_open,omitempty"`     // 是否开门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSAccessRecordPhoto
//
// 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录，对于使用人脸识别方式进行开门的识别记录，还会有抓拍图。
// 可以用该接口下载开门时的人脸识别照片
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record-access_photo/get
func (r *ACSService) GetACSAccessRecordPhoto(ctx context.Context, request *GetACSAccessRecordPhotoReq, options ...MethodOptionFunc) (*GetACSAccessRecordPhotoResp, *Response, error) {
	if r.cli.mock.mockACSGetACSAccessRecordPhoto != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSAccessRecordPhoto mock enable")
		return r.cli.mock.mockACSGetACSAccessRecordPhoto(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSAccessRecordPhoto",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/access_records/:access_record_id/access_photo",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSAccessRecordPhotoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSAccessRecordPhoto mock ACSGetACSAccessRecordPhoto method
func (r *Mock) MockACSGetACSAccessRecordPhoto(f func(ctx context.Context, request *GetACSAccessRecordPhotoReq, options ...MethodOptionFunc) (*GetACSAccessRecordPhotoResp, *Response, error)) {
	r.mockACSGetACSAccessRecordPhoto = f
}

// UnMockACSGetACSAccessRecordPhoto un-mock ACSGetACSAccessRecordPhoto method
func (r *Mock) UnMockACSGetACSAccessRecordPhoto() {
	r.mockACSGetACSAccessRecordPhoto = nil
}

// GetACSAccessRecordPhotoReq ...
type GetACSAccessRecordPhotoReq struct {
	AccessRecordID string `path:"access_record_id" json:"-"` // 门禁访问记录 ID, 示例值："6939433228970082591"
}

// getACSAccessRecordPhotoResp ...
type getACSAccessRecordPhotoResp struct {
	IsFile bool                         `json:"is_file,omitempty"`
	Code   int64                        `json:"code,omitempty"`
	Msg    string                       `json:"msg,omitempty"`
	Data   *GetACSAccessRecordPhotoResp `json:"data,omitempty"`
}

func (r *getACSAccessRecordPhotoResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetACSAccessRecordPhotoResp{}
	}
	r.Data.File = file
}

// GetACSAccessRecordPhotoResp ...
type GetACSAccessRecordPhotoResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSDeviceList 使用该接口获取租户内所有设备
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/device/list
func (r *ACSService) GetACSDeviceList(ctx context.Context, request *GetACSDeviceListReq, options ...MethodOptionFunc) (*GetACSDeviceListResp, *Response, error) {
	if r.cli.mock.mockACSGetACSDeviceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSDeviceList mock enable")
		return r.cli.mock.mockACSGetACSDeviceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSDeviceList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/devices",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSDeviceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSDeviceList mock ACSGetACSDeviceList method
func (r *Mock) MockACSGetACSDeviceList(f func(ctx context.Context, request *GetACSDeviceListReq, options ...MethodOptionFunc) (*GetACSDeviceListResp, *Response, error)) {
	r.mockACSGetACSDeviceList = f
}

// UnMockACSGetACSDeviceList un-mock ACSGetACSDeviceList method
func (r *Mock) UnMockACSGetACSDeviceList() {
	r.mockACSGetACSDeviceList = nil
}

// GetACSDeviceListReq ...
type GetACSDeviceListReq struct {
}

// getACSDeviceListResp ...
type getACSDeviceListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetACSDeviceListResp `json:"data,omitempty"`
}

// GetACSDeviceListResp ...
type GetACSDeviceListResp struct {
	Items []*GetACSDeviceListRespItem `json:"items,omitempty"` // -
}

// GetACSDeviceListRespItem ...
type GetACSDeviceListRespItem struct {
	DeviceID   string `json:"device_id,omitempty"`   // 门禁设备 ID
	DeviceName string `json:"device_name,omitempty"` // 设备名称
	DeviceSn   string `json:"device_sn,omitempty"`   // 设备 SN 码
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSUserFace 对于已经录入人脸图片的用户，可以使用该接口下载用户人脸图片
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/get
func (r *ACSService) GetACSUserFace(ctx context.Context, request *GetACSUserFaceReq, options ...MethodOptionFunc) (*GetACSUserFaceResp, *Response, error) {
	if r.cli.mock.mockACSGetACSUserFace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSUserFace mock enable")
		return r.cli.mock.mockACSGetACSUserFace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSUserFace",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id/face",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSUserFaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSUserFace mock ACSGetACSUserFace method
func (r *Mock) MockACSGetACSUserFace(f func(ctx context.Context, request *GetACSUserFaceReq, options ...MethodOptionFunc) (*GetACSUserFaceResp, *Response, error)) {
	r.mockACSGetACSUserFace = f
}

// UnMockACSGetACSUserFace un-mock ACSGetACSUserFace method
func (r *Mock) UnMockACSGetACSUserFace() {
	r.mockACSGetACSUserFace = nil
}

// GetACSUserFaceReq ...
type GetACSUserFaceReq struct {
	IsCropped  *bool   `query:"is_cropped" json:"-"`   // 裁剪图, 示例值：true
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string  `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// getACSUserFaceResp ...
type getACSUserFaceResp struct {
	IsFile bool                `json:"is_file,omitempty"`
	Code   int64               `json:"code,omitempty"`
	Msg    string              `json:"msg,omitempty"`
	Data   *GetACSUserFaceResp `json:"data,omitempty"`
}

func (r *getACSUserFaceResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetACSUserFaceResp{}
	}
	r.Data.File = file
}

// GetACSUserFaceResp ...
type GetACSUserFaceResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateACSUserFace 用户需要录入人脸图片才可以使用门禁考勤机。使用该 API 上传门禁用户的人脸图片。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/update
func (r *ACSService) UpdateACSUserFace(ctx context.Context, request *UpdateACSUserFaceReq, options ...MethodOptionFunc) (*UpdateACSUserFaceResp, *Response, error) {
	if r.cli.mock.mockACSUpdateACSUserFace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#UpdateACSUserFace mock enable")
		return r.cli.mock.mockACSUpdateACSUserFace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "UpdateACSUserFace",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id/face",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(updateACSUserFaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSUpdateACSUserFace mock ACSUpdateACSUserFace method
func (r *Mock) MockACSUpdateACSUserFace(f func(ctx context.Context, request *UpdateACSUserFaceReq, options ...MethodOptionFunc) (*UpdateACSUserFaceResp, *Response, error)) {
	r.mockACSUpdateACSUserFace = f
}

// UnMockACSUpdateACSUserFace un-mock ACSUpdateACSUserFace method
func (r *Mock) UnMockACSUpdateACSUserFace() {
	r.mockACSUpdateACSUserFace = nil
}

// UpdateACSUserFaceReq ...
type UpdateACSUserFaceReq struct {
	UserIDType *IDType   `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string    `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Files      io.Reader `json:"files,omitempty"`        // 人脸图片内容, 示例值：jpg图片
	FileType   FileType  `json:"file_type,omitempty"`    // 文件类型,可选的类型有jpg,png, 示例值："jpg"
	FileName   string    `json:"file_name,omitempty"`    // 带后缀的文件名, 示例值："efeqz12f.jpg"
}

// updateACSUserFaceResp ...
type updateACSUserFaceResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateACSUserFaceResp `json:"data,omitempty"`
}

// UpdateACSUserFaceResp ...
type UpdateACSUserFaceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSUser 该接口用于获取智能门禁中单个用户的信息。
//
// 只能获取已加入智能门禁权限组的用户
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/get
func (r *ACSService) GetACSUser(ctx context.Context, request *GetACSUserReq, options ...MethodOptionFunc) (*GetACSUserResp, *Response, error) {
	if r.cli.mock.mockACSGetACSUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSUser mock enable")
		return r.cli.mock.mockACSGetACSUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSUser",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSUser mock ACSGetACSUser method
func (r *Mock) MockACSGetACSUser(f func(ctx context.Context, request *GetACSUserReq, options ...MethodOptionFunc) (*GetACSUserResp, *Response, error)) {
	r.mockACSGetACSUser = f
}

// UnMockACSGetACSUser un-mock ACSGetACSUser method
func (r *Mock) UnMockACSGetACSUser() {
	r.mockACSGetACSUser = nil
}

// GetACSUserReq ...
type GetACSUserReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string  `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// getACSUserResp ...
type getACSUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *GetACSUserResp `json:"data,omitempty"`
}

// GetACSUserResp ...
type GetACSUserResp struct {
	User *GetACSUserRespUser `json:"user,omitempty"` // 门禁用户信息
}

// GetACSUserRespUser ...
type GetACSUserRespUser struct {
	Feature *GetACSUserRespUserFeature `json:"feature,omitempty"` // 用户特征
	UserID  string                     `json:"user_id,omitempty"` // 用户 ID
}

// GetACSUserRespUserFeature ...
type GetACSUserRespUserFeature struct {
	Card         int64 `json:"card,omitempty"`          // 卡号
	FaceUploaded bool  `json:"face_uploaded,omitempty"` // 是否已上传人脸图片
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSUserList 使用该接口获取智能门禁中所有用户信息
//
// 只能获取已加入智能门禁权限组的用户
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/list
func (r *ACSService) GetACSUserList(ctx context.Context, request *GetACSUserListReq, options ...MethodOptionFunc) (*GetACSUserListResp, *Response, error) {
	if r.cli.mock.mockACSGetACSUserList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSUserList mock enable")
		return r.cli.mock.mockACSGetACSUserList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSUserList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSUserListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSUserList mock ACSGetACSUserList method
func (r *Mock) MockACSGetACSUserList(f func(ctx context.Context, request *GetACSUserListReq, options ...MethodOptionFunc) (*GetACSUserListResp, *Response, error)) {
	r.mockACSGetACSUserList = f
}

// UnMockACSGetACSUserList un-mock ACSGetACSUserList method
func (r *Mock) UnMockACSGetACSUserList() {
	r.mockACSGetACSUserList = nil
}

// GetACSUserListReq ...
type GetACSUserListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："10"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
}

// getACSUserListResp ...
type getACSUserListResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetACSUserListResp `json:"data,omitempty"`
}

// GetACSUserListResp ...
type GetACSUserListResp struct {
	Items     []*GetACSUserListRespItem `json:"items,omitempty"`      // -
	PageToken string                    `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                      `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetACSUserListRespItem ...
type GetACSUserListRespItem struct {
	Feature *GetACSUserListRespItemFeature `json:"feature,omitempty"` // 用户特征
	UserID  string                         `json:"user_id,omitempty"` // 用户 ID
}

// GetACSUserListRespItemFeature ...
type GetACSUserListRespItemFeature struct {
	Card         int64 `json:"card,omitempty"`          // 卡号
	FaceUploaded bool  `json:"face_uploaded,omitempty"` // 是否已上传人脸图片
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateACSUser 飞书智能门禁在人脸识别成功后会有韦根信号输出，输出用户的卡号。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/patch
func (r *ACSService) UpdateACSUser(ctx context.Context, request *UpdateACSUserReq, options ...MethodOptionFunc) (*UpdateACSUserResp, *Response, error) {
	if r.cli.mock.mockACSUpdateACSUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#UpdateACSUser mock enable")
		return r.cli.mock.mockACSUpdateACSUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "UpdateACSUser",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateACSUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSUpdateACSUser mock ACSUpdateACSUser method
func (r *Mock) MockACSUpdateACSUser(f func(ctx context.Context, request *UpdateACSUserReq, options ...MethodOptionFunc) (*UpdateACSUserResp, *Response, error)) {
	r.mockACSUpdateACSUser = f
}

// UnMockACSUpdateACSUser un-mock ACSUpdateACSUser method
func (r *Mock) UnMockACSUpdateACSUser() {
	r.mockACSUpdateACSUser = nil
}

// UpdateACSUserReq ...
type UpdateACSUserReq struct {
	UserIDType *IDType                  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string                   `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Feature    *UpdateACSUserReqFeature `json:"feature,omitempty"`      // 用户特征
}

// UpdateACSUserReqFeature ...
type UpdateACSUserReqFeature struct {
	Card *int64 `json:"card,omitempty"` // 卡号, 示例值：123456
}

// updateACSUserResp ...
type updateACSUserResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *UpdateACSUserResp `json:"data,omitempty"`
}

// UpdateACSUserResp ...
type UpdateACSUserResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAdminDeptStats 该接口用于获取部门维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
//
// - 只有企业自建应用才有权限调用此接口
// - 当天的数据会在第二天的早上九点半产出（UTC+8）
// - 部门维度的数据最多查询最近366天（包含366天）的数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_dept_stat/list
func (r *AdminService) GetAdminDeptStats(ctx context.Context, request *GetAdminDeptStatsReq, options ...MethodOptionFunc) (*GetAdminDeptStatsResp, *Response, error) {
	if r.cli.mock.mockAdminGetAdminDeptStats != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Admin#GetAdminDeptStats mock enable")
		return r.cli.mock.mockAdminGetAdminDeptStats(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "GetAdminDeptStats",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/admin_dept_stats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAdminDeptStatsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminGetAdminDeptStats mock AdminGetAdminDeptStats method
func (r *Mock) MockAdminGetAdminDeptStats(f func(ctx context.Context, request *GetAdminDeptStatsReq, options ...MethodOptionFunc) (*GetAdminDeptStatsResp, *Response, error)) {
	r.mockAdminGetAdminDeptStats = f
}

// UnMockAdminGetAdminDeptStats un-mock AdminGetAdminDeptStats method
func (r *Mock) UnMockAdminGetAdminDeptStats() {
	r.mockAdminGetAdminDeptStats = nil
}

// GetAdminDeptStatsReq ...
type GetAdminDeptStatsReq struct {
	DepartmentIDType  DepartmentIDType `query:"department_id_type" json:"-"`  // 部门ID类型, 示例值："open_department_id", 可选值有: `department_id`：部门的 ID, `open_department_id`：部门的 Open ID
	StartDate         string           `query:"start_date" json:"-"`          // 起始日期（包含），格式是YYYY-mm-dd, 示例值："2020-02-15"
	EndDate           string           `query:"end_date" json:"-"`            // 终止日期（包含），格式是YYYY-mm-dd，起止日期之间相差不能超过91天（包含91天）, 示例值："2020-02-15"
	DepartmentID      string           `query:"department_id" json:"-"`       // 部门的 ID，取决于department_id_type，仅支持根部门及其下前4级子部门, 示例值："od-382e2793cfc9471f892e8a672987654c"
	ContainsChildDept bool             `query:"contains_child_dept" json:"-"` // 是否包含子部门，如果该值为false，则只查出本部门直属用户活跃和功能使用数据；如果该值为true，则查出该部门以及其子部门（子部门层级最多不超过根部门下的前4级）的用户活跃和功能使用数据, 示例值：false
	PageSize          *int64           `query:"page_size" json:"-"`           // 分页大小，默认是10, 示例值：10, 取值范围：`1` ～ `20`
	PageToken         *string          `query:"page_token" json:"-"`          // 分页标记，第一次请求不填，表示从头开始遍历；当返回的has_more为true时，会返回新的page_token，再次调用接口，传入这个page_token，将获得下一页数据, 示例值："2"
}

// getAdminDeptStatsResp ...
type getAdminDeptStatsResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetAdminDeptStatsResp `json:"data,omitempty"`
}

// GetAdminDeptStatsResp ...
type GetAdminDeptStatsResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 分页查询时返回，代表是否还有更多数据
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，下一页分页的token
	Items     []*GetAdminDeptStatsRespItem `json:"items,omitempty"`      // 数据报表
}

// GetAdminDeptStatsRespItem ...
type GetAdminDeptStatsRespItem struct {
	Date                 string `json:"date,omitempty"`                    // 日期
	DepartmentID         string `json:"department_id,omitempty"`           // 部门的department_id 或者open_department_id
	DepartmentName       string `json:"department_name,omitempty"`         // 部门名字
	DepartmentPath       string `json:"department_path,omitempty"`         // 部门路径
	TotalUserNum         int64  `json:"total_user_num,omitempty"`          // 部门总人数
	ActiveUserNum        int64  `json:"active_user_num,omitempty"`         // 激活人数
	ActiveUserRate       string `json:"active_user_rate,omitempty"`        // 激活率
	SuiteDau             int64  `json:"suite_dau,omitempty"`               // 活跃人数
	SuiteActiveRate      string `json:"suite_active_rate,omitempty"`       // 活跃率
	NewUserNum           int64  `json:"new_user_num,omitempty"`            // 新用户数
	NewActiveNum         int64  `json:"new_active_num,omitempty"`          // 新激活数
	ResignUserNum        int64  `json:"resign_user_num,omitempty"`         // 离职人数
	IMDau                int64  `json:"im_dau,omitempty"`                  // 消息活跃人数
	SendMessengerUserNum int64  `json:"send_messenger_user_num,omitempty"` // 发送消息人数
	SendMessengerNum     int64  `json:"send_messenger_num,omitempty"`      // 发送消息数
	AvgSendMessengerNum  string `json:"avg_send_messenger_num,omitempty"`  // 人均发送消息数
	DocsDau              int64  `json:"docs_dau,omitempty"`                // 云文档活跃人数
	CreateDocsUserNum    int64  `json:"create_docs_user_num,omitempty"`    // 创建文件人数
	CreateDocsNum        int64  `json:"create_docs_num,omitempty"`         // 创建文件数
	AvgCreateDocsNum     string `json:"avg_create_docs_num,omitempty"`     // 人均创建文件数
	CalDau               int64  `json:"cal_dau,omitempty"`                 // 日历活跃人数
	CreateCalUserNum     int64  `json:"create_cal_user_num,omitempty"`     // 创建日程人数
	CreateCalNum         int64  `json:"create_cal_num,omitempty"`          // 创建日程数
	AvgCreateCalNum      string `json:"avg_create_cal_num,omitempty"`      // 人均创建日程数
	VCDau                int64  `json:"vc_dau,omitempty"`                  // 音视频会议活跃人数
	VCDuration           int64  `json:"vc_duration,omitempty"`             // 会议时长（分钟）
	AvgVCDuration        string `json:"avg_vc_duration,omitempty"`         // 人均会议时长（分钟）
	AvgDuration          string `json:"avg_duration,omitempty"`            // 人均飞书使用时长（分钟）
	TaskDau              int64  `json:"task_dau,omitempty"`                // 任务活跃人数
	CreateTaskUserNum    int64  `json:"create_task_user_num,omitempty"`    // 创建任务人数
	CreateTaskNum        int64  `json:"create_task_num,omitempty"`         // 创建任务数
	AvgCreateTaskNum     string `json:"avg_create_task_num,omitempty"`     // 人均创建任务数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAdminUserStats 用于获取用户维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
//
// - 只有企业自建应用才有权限调用此接口
// - 当天的数据会在第二天的早上九点半产出（UTC+8）
// - 用户维度的数据最多查询最近31天的数据（包含31天）的数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_user_stat/list
func (r *AdminService) GetAdminUserStats(ctx context.Context, request *GetAdminUserStatsReq, options ...MethodOptionFunc) (*GetAdminUserStatsResp, *Response, error) {
	if r.cli.mock.mockAdminGetAdminUserStats != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Admin#GetAdminUserStats mock enable")
		return r.cli.mock.mockAdminGetAdminUserStats(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "GetAdminUserStats",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/admin_user_stats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAdminUserStatsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminGetAdminUserStats mock AdminGetAdminUserStats method
func (r *Mock) MockAdminGetAdminUserStats(f func(ctx context.Context, request *GetAdminUserStatsReq, options ...MethodOptionFunc) (*GetAdminUserStatsResp, *Response, error)) {
	r.mockAdminGetAdminUserStats = f
}

// UnMockAdminGetAdminUserStats un-mock AdminGetAdminUserStats method
func (r *Mock) UnMockAdminGetAdminUserStats() {
	r.mockAdminGetAdminUserStats = nil
}

// GetAdminUserStatsReq ...
type GetAdminUserStatsReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 部门ID类型, 示例值："open_department_id", 可选值有: `department_id`：部门的 ID, `open_department_id`：部门的 Open ID
	StartDate        string            `query:"start_date" json:"-"`         // 起始日期（包含），格式是YYYY-mm-dd, 示例值："2020-02-15"
	EndDate          string            `query:"end_date" json:"-"`           // 终止日期（包含），格式是YYYY-mm-dd。起止日期之间相差不能超过31天（包含31天）, 示例值："2020-02-15"
	DepartmentID     *string           `query:"department_id" json:"-"`      // 部门的 ID，取决于department_id_type, 示例值："od-382e2793cfc9471f892e8a672987654c"
	UserID           *string           `query:"user_id" json:"-"`            // 用户的open_id，user_id或者union_id，取决于user_id_type, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小，默认是10, 示例值：10, 取值范围：`1` ～ `20`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；当返回的has_more为true时，会返回新的page_token，再次调用接口，传入这个page_token，将获得下一页数据, 示例值："2"
}

// getAdminUserStatsResp ...
type getAdminUserStatsResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetAdminUserStatsResp `json:"data,omitempty"`
}

// GetAdminUserStatsResp ...
type GetAdminUserStatsResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否有下一页数据
	PageToken string                       `json:"page_token,omitempty"` // 下一页分页的token
	Items     []*GetAdminUserStatsRespItem `json:"items,omitempty"`      // 数据报表
}

// GetAdminUserStatsRespItem ...
type GetAdminUserStatsRespItem struct {
	Date             string `json:"date,omitempty"`               // 日期
	UserID           string `json:"user_id,omitempty"`            // 用户ID
	UserName         string `json:"user_name,omitempty"`          // 用户名
	DepartmentName   string `json:"department_name,omitempty"`    // 部门名
	DepartmentPath   string `json:"department_path,omitempty"`    // 部门路径
	CreateTime       string `json:"create_time,omitempty"`        // 账号创建时间
	UserActiveFlag   int64  `json:"user_active_flag,omitempty"`   // 用户激活状态, 可选值有: `0`：未激活, `1`：已激活
	RegisterTime     string `json:"register_time,omitempty"`      // 激活时间
	SuiteActiveFlag  int64  `json:"suite_active_flag,omitempty"`  // 用户活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	LastActiveTime   string `json:"last_active_time,omitempty"`   // 最近活跃时间
	IMActiveFlag     int64  `json:"im_active_flag,omitempty"`     // 用户消息活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	SendMessengerNum int64  `json:"send_messenger_num,omitempty"` // 发送消息数
	DocsActiveFlag   int64  `json:"docs_active_flag,omitempty"`   // 用户云文档活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	CreateDocsNum    int64  `json:"create_docs_num,omitempty"`    // 创建文件数
	CalActiveFlag    int64  `json:"cal_active_flag,omitempty"`    // 用户日历活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	CreateCalNum     int64  `json:"create_cal_num,omitempty"`     // 创建日程数
	VCActiveFlag     int64  `json:"vc_active_flag,omitempty"`     // 用户音视频会议活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	VCDuration       int64  `json:"vc_duration,omitempty"`        // 会议时长
	ActiveOs         string `json:"active_os,omitempty"`          // 活跃设备
	CreateTaskNum    int64  `json:"create_task_num,omitempty"`    // 创建任务数
	VCNum            int64  `json:"vc_num,omitempty"`             // 会议数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AdminResetPassword
//
// 重置用户的企业邮箱密码，仅当用户的邮箱和企业邮箱(别名)一致时生效，可用于处理飞书企业邮箱登录死锁的问题。
// 邮箱死锁：当用户的登录凭证与飞书企业邮箱一致时，目前飞书登录流程要求用户输入验证码，由于飞书邮箱无单独的帐号体系，则未登录时无法收取邮箱验证码，即陷入死锁
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/password/reset
func (r *AdminService) AdminResetPassword(ctx context.Context, request *AdminResetPasswordReq, options ...MethodOptionFunc) (*AdminResetPasswordResp, *Response, error) {
	if r.cli.mock.mockAdminAdminResetPassword != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Admin#AdminResetPassword mock enable")
		return r.cli.mock.mockAdminAdminResetPassword(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "AdminResetPassword",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/password/reset",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(adminResetPasswordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminAdminResetPassword mock AdminAdminResetPassword method
func (r *Mock) MockAdminAdminResetPassword(f func(ctx context.Context, request *AdminResetPasswordReq, options ...MethodOptionFunc) (*AdminResetPasswordResp, *Response, error)) {
	r.mockAdminAdminResetPassword = f
}

// UnMockAdminAdminResetPassword un-mock AdminAdminResetPassword method
func (r *Mock) UnMockAdminAdminResetPassword() {
	r.mockAdminAdminResetPassword = nil
}

// AdminResetPasswordReq ...
type AdminResetPasswordReq struct {
	UserIDType IDType                         `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Password   *AdminResetPasswordReqPassword `json:"password,omitempty"`     // 需要重置的密码参数，不少于8个字符，字母、数字和符号，至少三选二
	UserID     string                         `json:"user_id,omitempty"`      // 待修改密码的用户ID，只针对邮箱登录凭证与企业邮箱(包括别名)相等的用户生效, 示例值："abc123", 长度范围：`0` ～ `200` 字符
}

// AdminResetPasswordReqPassword ...
type AdminResetPasswordReqPassword struct {
	EntEmailPassword string `json:"ent_email_password,omitempty"` // 企业邮箱密码, 示例值："abcd*efg"
}

// adminResetPasswordResp ...
type adminResetPasswordResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *AdminResetPasswordResp `json:"data,omitempty"`
}

// AdminResetPasswordResp ...
type AdminResetPasswordResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DetectFaceAttributes 检测图片中的人脸属性和质量等信息
//
// 注意：返回值为 -1 表示该功能还暂未实现
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/face_detection-v1/image/detect_face_attributes
func (r *AIService) DetectFaceAttributes(ctx context.Context, request *DetectFaceAttributesReq, options ...MethodOptionFunc) (*DetectFaceAttributesResp, *Response, error) {
	if r.cli.mock.mockAIDetectFaceAttributes != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#DetectFaceAttributes mock enable")
		return r.cli.mock.mockAIDetectFaceAttributes(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "DetectFaceAttributes",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/face_detection/v1/image/detect_face_attributes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(detectFaceAttributesResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIDetectFaceAttributes mock AIDetectFaceAttributes method
func (r *Mock) MockAIDetectFaceAttributes(f func(ctx context.Context, request *DetectFaceAttributesReq, options ...MethodOptionFunc) (*DetectFaceAttributesResp, *Response, error)) {
	r.mockAIDetectFaceAttributes = f
}

// UnMockAIDetectFaceAttributes un-mock AIDetectFaceAttributes method
func (r *Mock) UnMockAIDetectFaceAttributes() {
	r.mockAIDetectFaceAttributes = nil
}

// DetectFaceAttributesReq ...
type DetectFaceAttributesReq struct {
	Image *string `json:"image,omitempty"` // 图片 base64 数据, 示例值："图片 base64 后的字符串"
}

// detectFaceAttributesResp ...
type detectFaceAttributesResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *DetectFaceAttributesResp `json:"data,omitempty"`
}

// DetectFaceAttributesResp ...
type DetectFaceAttributesResp struct {
	ImageInfo *DetectFaceAttributesRespImageInfo  `json:"image_info,omitempty"` // 图片信息
	FaceInfos []*DetectFaceAttributesRespFaceInfo `json:"face_infos,omitempty"` // 人脸信息列表
}

// DetectFaceAttributesRespImageInfo ...
type DetectFaceAttributesRespImageInfo struct {
	Width  int64 `json:"width,omitempty"`  // 图片的宽度
	Height int64 `json:"height,omitempty"` // 图片的高度
}

// DetectFaceAttributesRespFaceInfo ...
type DetectFaceAttributesRespFaceInfo struct {
	Position  *DetectFaceAttributesRespFaceInfoPosition  `json:"position,omitempty"`  // 人脸位置信息
	Attribute *DetectFaceAttributesRespFaceInfoAttribute `json:"attribute,omitempty"` // 人脸属性信息
	Quality   *DetectFaceAttributesRespFaceInfoQuality   `json:"quality,omitempty"`   // 人脸质量信息
}

// DetectFaceAttributesRespFaceInfoPosition ...
type DetectFaceAttributesRespFaceInfoPosition struct {
	UpperLeft  *DetectFaceAttributesRespFaceInfoPositionUpperLeft  `json:"upper_left,omitempty"`  // 人脸框的左上角坐标
	LowerRight *DetectFaceAttributesRespFaceInfoPositionLowerRight `json:"lower_right,omitempty"` // 人脸框的右下角坐标
}

// DetectFaceAttributesRespFaceInfoPositionUpperLeft ...
type DetectFaceAttributesRespFaceInfoPositionUpperLeft struct {
	X float64 `json:"x,omitempty"` // 横轴坐标
	Y float64 `json:"y,omitempty"` // 纵轴坐标
}

// DetectFaceAttributesRespFaceInfoPositionLowerRight ...
type DetectFaceAttributesRespFaceInfoPositionLowerRight struct {
	X float64 `json:"x,omitempty"` // 横轴坐标
	Y float64 `json:"y,omitempty"` // 纵轴坐标
}

// DetectFaceAttributesRespFaceInfoAttribute ...
type DetectFaceAttributesRespFaceInfoAttribute struct {
	Gender  *DetectFaceAttributesRespFaceInfoAttributeGender  `json:"gender,omitempty"`  // 性别信息：0 男性，1 女性
	Age     int64                                             `json:"age,omitempty"`     // 年龄大小
	Emotion *DetectFaceAttributesRespFaceInfoAttributeEmotion `json:"emotion,omitempty"` // 情绪：0 自然, 1 高兴，2 惊讶，3 害怕，4 悲伤，5 生气, 6 厌恶
	Beauty  int64                                             `json:"beauty,omitempty"`  // 颜值打分：[0, 100]
	Pose    *DetectFaceAttributesRespFaceInfoAttributePose    `json:"pose,omitempty"`    // 人脸姿态
	Hat     *DetectFaceAttributesRespFaceInfoAttributeHat     `json:"hat,omitempty"`     // 帽子：0 未戴帽子，1 戴帽子
	Glass   *DetectFaceAttributesRespFaceInfoAttributeGlass   `json:"glass,omitempty"`   // 眼镜：0 未戴眼镜，1 戴眼镜
	Mask    *DetectFaceAttributesRespFaceInfoAttributeMask    `json:"mask,omitempty"`    // 口罩：0 未戴口罩，1 戴口罩
}

// DetectFaceAttributesRespFaceInfoAttributeGender ...
type DetectFaceAttributesRespFaceInfoAttributeGender struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributeEmotion ...
type DetectFaceAttributesRespFaceInfoAttributeEmotion struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributePose ...
type DetectFaceAttributesRespFaceInfoAttributePose struct {
	Pitch int64 `json:"pitch,omitempty"` // 脸部上下偏移 [-90, 90]
	Yaw   int64 `json:"yaw,omitempty"`   // 脸部左右偏移 [-90, 90]
	Roll  int64 `json:"roll,omitempty"`  // 平面旋转 [-90, 90]
}

// DetectFaceAttributesRespFaceInfoAttributeHat ...
type DetectFaceAttributesRespFaceInfoAttributeHat struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributeGlass ...
type DetectFaceAttributesRespFaceInfoAttributeGlass struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributeMask ...
type DetectFaceAttributesRespFaceInfoAttributeMask struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoQuality ...
type DetectFaceAttributesRespFaceInfoQuality struct {
	Sharpness  float64                                         `json:"sharpness,omitempty"`  // 清晰度，值越高越清晰
	Brightness float64                                         `json:"brightness,omitempty"` // 亮度
	Occlude    *DetectFaceAttributesRespFaceInfoQualityOcclude `json:"occlude,omitempty"`    // 面部遮挡属性
}

// DetectFaceAttributesRespFaceInfoQualityOcclude ...
type DetectFaceAttributesRespFaceInfoQualityOcclude struct {
	Eyebrow  float64 `json:"eyebrow,omitempty"`   // 眉毛被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Nose     float64 `json:"nose,omitempty"`      // 鼻子被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Cheek    float64 `json:"cheek,omitempty"`     // 脸颊被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Mouth    float64 `json:"mouth,omitempty"`     // 嘴被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Chin     float64 `json:"chin,omitempty"`      // 下巴被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	LeftEye  float64 `json:"left_eye,omitempty"`  // 左眼睛被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	RightEye float64 `json:"right_eye,omitempty"` // 右眼睛被遮挡情况：[0, 1] 值越大被遮挡的概率越高
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DetectTextLanguage 机器翻译 (MT)，支持 100 多种语言识别，返回符合 ISO 639-1 标准
//
// 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/detect
func (r *AIService) DetectTextLanguage(ctx context.Context, request *DetectTextLanguageReq, options ...MethodOptionFunc) (*DetectTextLanguageResp, *Response, error) {
	if r.cli.mock.mockAIDetectTextLanguage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#DetectTextLanguage mock enable")
		return r.cli.mock.mockAIDetectTextLanguage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "DetectTextLanguage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/translation/v1/text/detect",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(detectTextLanguageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIDetectTextLanguage mock AIDetectTextLanguage method
func (r *Mock) MockAIDetectTextLanguage(f func(ctx context.Context, request *DetectTextLanguageReq, options ...MethodOptionFunc) (*DetectTextLanguageResp, *Response, error)) {
	r.mockAIDetectTextLanguage = f
}

// UnMockAIDetectTextLanguage un-mock AIDetectTextLanguage method
func (r *Mock) UnMockAIDetectTextLanguage() {
	r.mockAIDetectTextLanguage = nil
}

// DetectTextLanguageReq ...
type DetectTextLanguageReq struct {
	Text string `json:"text,omitempty"` // 需要被识别语种的文本, 示例值："你好"
}

// detectTextLanguageResp ...
type detectTextLanguageResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DetectTextLanguageResp `json:"data,omitempty"`
}

// DetectTextLanguageResp ...
type DetectTextLanguageResp struct {
	Language string `json:"language,omitempty"` // 识别的文本语种，返回符合 ISO 639-1 标准
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RecognizeBasicImage 可识别图片中的文字，按图片中的区域划分，分段返回文本列表
//
// 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/optical_char_recognition-v1/image/basic_recognize
func (r *AIService) RecognizeBasicImage(ctx context.Context, request *RecognizeBasicImageReq, options ...MethodOptionFunc) (*RecognizeBasicImageResp, *Response, error) {
	if r.cli.mock.mockAIRecognizeBasicImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#RecognizeBasicImage mock enable")
		return r.cli.mock.mockAIRecognizeBasicImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "RecognizeBasicImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/optical_char_recognition/v1/image/basic_recognize",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(recognizeBasicImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIRecognizeBasicImage mock AIRecognizeBasicImage method
func (r *Mock) MockAIRecognizeBasicImage(f func(ctx context.Context, request *RecognizeBasicImageReq, options ...MethodOptionFunc) (*RecognizeBasicImageResp, *Response, error)) {
	r.mockAIRecognizeBasicImage = f
}

// UnMockAIRecognizeBasicImage un-mock AIRecognizeBasicImage method
func (r *Mock) UnMockAIRecognizeBasicImage() {
	r.mockAIRecognizeBasicImage = nil
}

// RecognizeBasicImageReq ...
type RecognizeBasicImageReq struct {
	Image *string `json:"image,omitempty"` // base64 后的图片数据, 示例值："base64后的图片二进制数据"
}

// recognizeBasicImageResp ...
type recognizeBasicImageResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *RecognizeBasicImageResp `json:"data,omitempty"`
}

// RecognizeBasicImageResp ...
type RecognizeBasicImageResp struct {
	TextList []string `json:"text_list,omitempty"` // 按区域识别，返回文本列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RecognizeSpeechFile 语音文件识别接口，上传整段语音文件进行一次性识别。接口适合 60 秒以内音频识别
//
// 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/speech_to_text-v1/speech/file_recognize
func (r *AIService) RecognizeSpeechFile(ctx context.Context, request *RecognizeSpeechFileReq, options ...MethodOptionFunc) (*RecognizeSpeechFileResp, *Response, error) {
	if r.cli.mock.mockAIRecognizeSpeechFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#RecognizeSpeechFile mock enable")
		return r.cli.mock.mockAIRecognizeSpeechFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "RecognizeSpeechFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/speech_to_text/v1/speech/file_recognize",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(recognizeSpeechFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIRecognizeSpeechFile mock AIRecognizeSpeechFile method
func (r *Mock) MockAIRecognizeSpeechFile(f func(ctx context.Context, request *RecognizeSpeechFileReq, options ...MethodOptionFunc) (*RecognizeSpeechFileResp, *Response, error)) {
	r.mockAIRecognizeSpeechFile = f
}

// UnMockAIRecognizeSpeechFile un-mock AIRecognizeSpeechFile method
func (r *Mock) UnMockAIRecognizeSpeechFile() {
	r.mockAIRecognizeSpeechFile = nil
}

// RecognizeSpeechFileReq ...
type RecognizeSpeechFileReq struct {
	Speech *RecognizeSpeechFileReqSpeech `json:"speech,omitempty"` // 语音资源
	Config *RecognizeSpeechFileReqConfig `json:"config,omitempty"` // 配置属性
}

// RecognizeSpeechFileReqSpeech ...
type RecognizeSpeechFileReqSpeech struct {
	Speech *string `json:"speech,omitempty"` // pcm格式音频文件（文件识别）或音频分片（流式识别）经base64编码后的内容, 示例值："PdmrfE267Cd/Z9KpmNFh71A2PSJZxSp7+8upCg=="
}

// RecognizeSpeechFileReqConfig ...
type RecognizeSpeechFileReqConfig struct {
	FileID     string `json:"file_id,omitempty"`     // 仅包含字母数字和下划线的 16 位字符串作为文件的标识，用户生成, 示例值："qwe12dd34567890w"
	Format     string `json:"format,omitempty"`      // 语音格式，目前仅支持：pcm, 示例值："pcm"
	EngineType string `json:"engine_type,omitempty"` // 引擎类型，目前仅支持：16k_auto 中英混合, 示例值："16k_auto"
}

// recognizeSpeechFileResp ...
type recognizeSpeechFileResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *RecognizeSpeechFileResp `json:"data,omitempty"`
}

// RecognizeSpeechFileResp ...
type RecognizeSpeechFileResp struct {
	RecognitionText string `json:"recognition_text,omitempty"` // 语音识别后的文本信息
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RecognizeSpeechStream 语音流式接口，将整个音频文件分片进行传入模型。能够实时返回数据。建议每个音频分片的大小为 100-200ms
//
// 单租户限流：20 路（一个 stream_id 称为一路会话），同租户下的应用没有限流，共享本租户的 20路限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/speech_to_text-v1/speech/stream_recognize
func (r *AIService) RecognizeSpeechStream(ctx context.Context, request *RecognizeSpeechStreamReq, options ...MethodOptionFunc) (*RecognizeSpeechStreamResp, *Response, error) {
	if r.cli.mock.mockAIRecognizeSpeechStream != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#RecognizeSpeechStream mock enable")
		return r.cli.mock.mockAIRecognizeSpeechStream(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "RecognizeSpeechStream",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/speech_to_text/v1/speech/stream_recognize",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(recognizeSpeechStreamResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIRecognizeSpeechStream mock AIRecognizeSpeechStream method
func (r *Mock) MockAIRecognizeSpeechStream(f func(ctx context.Context, request *RecognizeSpeechStreamReq, options ...MethodOptionFunc) (*RecognizeSpeechStreamResp, *Response, error)) {
	r.mockAIRecognizeSpeechStream = f
}

// UnMockAIRecognizeSpeechStream un-mock AIRecognizeSpeechStream method
func (r *Mock) UnMockAIRecognizeSpeechStream() {
	r.mockAIRecognizeSpeechStream = nil
}

// RecognizeSpeechStreamReq ...
type RecognizeSpeechStreamReq struct {
	Speech *RecognizeSpeechStreamReqSpeech `json:"speech,omitempty"` // 语音资源
	Config *RecognizeSpeechStreamReqConfig `json:"config,omitempty"` // 配置属性
}

// RecognizeSpeechStreamReqSpeech ...
type RecognizeSpeechStreamReqSpeech struct {
	Speech *string `json:"speech,omitempty"` // pcm格式音频文件（文件识别）或音频分片（流式识别）经base64编码后的内容, 示例值："PdmrfE267Cd/Z9KpmNFh71A2PSJZxSp7+8upCg=="
}

// RecognizeSpeechStreamReqConfig ...
type RecognizeSpeechStreamReqConfig struct {
	StreamID   string `json:"stream_id,omitempty"`   // 仅包含字母数字和下划线的 16 位字符串作为同一数据流的标识，用户生成, 示例值："asd1234567890ddd"
	SequenceID int64  `json:"sequence_id,omitempty"` // 数据流分片的序号，序号从 0 开始，每次请求递增 1, 示例值：1
	Action     int64  `json:"action,omitempty"`      // 数据流标记：1 首包，2 正常结束，等待结果返回，3 中断数据流不返回最终结果, 示例值：1
	Format     string `json:"format,omitempty"`      // 语音格式，目前仅支持：pcm, 示例值："pcm"
	EngineType string `json:"engine_type,omitempty"` // 引擎类型，目前仅支持：16k_auto 中英混合, 示例值："16k_auto"
}

// recognizeSpeechStreamResp ...
type recognizeSpeechStreamResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *RecognizeSpeechStreamResp `json:"data,omitempty"`
}

// RecognizeSpeechStreamResp ...
type RecognizeSpeechStreamResp struct {
	StreamID        string `json:"stream_id,omitempty"`        // 16 位 String 随机串作为同一数据流的标识
	SequenceID      int64  `json:"sequence_id,omitempty"`      // 数据流分片的序号，序号从 0 开始，每次请求递增 1
	RecognitionText string `json:"recognition_text,omitempty"` // 语音流识别后的文本信息
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// TranslateText 机器翻译 (MT)，支持中日英（zh、ja、en）三语互译
//
// 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/translation-v1/text/translate
func (r *AIService) TranslateText(ctx context.Context, request *TranslateTextReq, options ...MethodOptionFunc) (*TranslateTextResp, *Response, error) {
	if r.cli.mock.mockAITranslateText != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#TranslateText mock enable")
		return r.cli.mock.mockAITranslateText(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "TranslateText",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/translation/v1/text/translate",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(translateTextResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAITranslateText mock AITranslateText method
func (r *Mock) MockAITranslateText(f func(ctx context.Context, request *TranslateTextReq, options ...MethodOptionFunc) (*TranslateTextResp, *Response, error)) {
	r.mockAITranslateText = f
}

// UnMockAITranslateText un-mock AITranslateText method
func (r *Mock) UnMockAITranslateText() {
	r.mockAITranslateText = nil
}

// TranslateTextReq ...
type TranslateTextReq struct {
	SourceLanguage string                      `json:"source_language,omitempty"` // 源语言, 示例值："zh"
	Text           string                      `json:"text,omitempty"`            // 源文本, 示例值："尝试使用一下飞书吧"
	TargetLanguage string                      `json:"target_language,omitempty"` // 目标语言, 示例值："en"
	Glossary       []*TranslateTextReqGlossary `json:"glossary,omitempty"`        // 请求级术语表，携带术语，仅在本次翻译中生效（最多能携带 128个术语词）
}

// TranslateTextReqGlossary ...
type TranslateTextReqGlossary struct {
	From string `json:"from,omitempty"` // 原文, 示例值："飞书"
	To   string `json:"to,omitempty"`   // 译文, 示例值："Lark"
}

// translateTextResp ...
type translateTextResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *TranslateTextResp `json:"data,omitempty"`
}

// TranslateTextResp ...
type TranslateTextResp struct {
	Text string `json:"text,omitempty"` // 翻译后的文本
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationAppAdminUserList
//
// 查询审核应用的管理员列表，返回最新10个管理员账户id列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucDOwYjL3gDM24yN4AjN
func (r *ApplicationService) GetApplicationAppAdminUserList(ctx context.Context, request *GetApplicationAppAdminUserListReq, options ...MethodOptionFunc) (*GetApplicationAppAdminUserListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationAppAdminUserList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationAppAdminUserList mock enable")
		return r.cli.mock.mockApplicationGetApplicationAppAdminUserList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationAppAdminUserList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/user/v4/app_admin_user/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationAppAdminUserListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationAppAdminUserList mock ApplicationGetApplicationAppAdminUserList method
func (r *Mock) MockApplicationGetApplicationAppAdminUserList(f func(ctx context.Context, request *GetApplicationAppAdminUserListReq, options ...MethodOptionFunc) (*GetApplicationAppAdminUserListResp, *Response, error)) {
	r.mockApplicationGetApplicationAppAdminUserList = f
}

// UnMockApplicationGetApplicationAppAdminUserList un-mock ApplicationGetApplicationAppAdminUserList method
func (r *Mock) UnMockApplicationGetApplicationAppAdminUserList() {
	r.mockApplicationGetApplicationAppAdminUserList = nil
}

// GetApplicationAppAdminUserListReq ...
type GetApplicationAppAdminUserListReq struct {
}

// getApplicationAppAdminUserListResp ...
type getApplicationAppAdminUserListResp struct {
	Code int64                               `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 返回码描述
	Data *GetApplicationAppAdminUserListResp `json:"data,omitempty"` // -
}

// GetApplicationAppAdminUserListResp ...
type GetApplicationAppAdminUserListResp struct {
	UserList []*GetApplicationAppAdminUserListRespUser `json:"user_list,omitempty"` // 管理员列表
}

// GetApplicationAppAdminUserListRespUser ...
type GetApplicationAppAdminUserListRespUser struct {
	OpenID *GetApplicationAppAdminUserListRespUserOpenID `json:"open_id,omitempty"` // 某管理员的open_id
}

// GetApplicationAppAdminUserListRespUserOpenID ...
type GetApplicationAppAdminUserListRespUserOpenID struct {
	UserID  string `json:"user_id,omitempty"`  // 某管理员的user_id
	UnionID string `json:"union_id,omitempty"` // 某管理员的union_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationAppList
//
// 该接口用于查询企业安装的应用列表，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDN3UjL2QzN14iN0cTN
func (r *ApplicationService) GetApplicationAppList(ctx context.Context, request *GetApplicationAppListReq, options ...MethodOptionFunc) (*GetApplicationAppListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationAppList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationAppList mock enable")
		return r.cli.mock.mockApplicationGetApplicationAppList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationAppList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v3/app/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationAppListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationAppList mock ApplicationGetApplicationAppList method
func (r *Mock) MockApplicationGetApplicationAppList(f func(ctx context.Context, request *GetApplicationAppListReq, options ...MethodOptionFunc) (*GetApplicationAppListResp, *Response, error)) {
	r.mockApplicationGetApplicationAppList = f
}

// UnMockApplicationGetApplicationAppList un-mock ApplicationGetApplicationAppList method
func (r *Mock) UnMockApplicationGetApplicationAppList() {
	r.mockApplicationGetApplicationAppList = nil
}

// GetApplicationAppListReq ...
type GetApplicationAppListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页起始位置标示，不填表示从头开始（不保证 page_token 一定为数字，请填入上一次请求返回的 page_token）
	PageSize  *int64  `query:"page_size" json:"-"`  // 单页需求最大个数（最大 100），0 自动最大个数
	Lang      *string `query:"lang" json:"-"`       // 优先展示的应用信息的语言版本（zh_cn：中文，en_us：英文，ja_jp：日文）
	Status    *int64  `query:"status" json:"-"`     // 要返回的应用的状态，0:停用；1:启用；-1:全部，默认为 -1
}

// getApplicationAppListResp ...
type getApplicationAppListResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationAppListResp `json:"data,omitempty"` // 返回的业务信息，仅 code = 0 时有效
}

// GetApplicationAppListResp ...
type GetApplicationAppListResp struct {
	PageToken  string                            `json:"page_token,omitempty"`  // 下一个请求页应当给的起始位置
	PageSize   int64                             `json:"page_size,omitempty"`   // 本次请求实际返回的页大小
	TotalCount int64                             `json:"total_count,omitempty"` // 可用的应用总数
	HasMore    int64                             `json:"has_more,omitempty"`    // 是否还有更多应用
	Lang       string                            `json:"lang,omitempty"`        // 当前选择的版本语言
	AppList    *GetApplicationAppListRespAppList `json:"app_list,omitempty"`    // 应用列表
}

// GetApplicationAppListRespAppList ...
type GetApplicationAppListRespAppList struct {
	AppID                string `json:"app_id,omitempty"`                 // 应用 ID
	PrimaryLanguage      string `json:"primary_language,omitempty"`       // 应用首选语言
	AppName              string `json:"app_name,omitempty"`               // 应用名称
	Description          string `json:"description,omitempty"`            // 应用描述
	AvatarURL            string `json:"avatar_url,omitempty"`             // 应用 icon
	AppSceneType         int64  `json:"app_scene_type,omitempty"`         // 应用类型，0：企业自建应用；1：应用商店应用
	Status               int64  `json:"status,omitempty"`                 // 启停状态，0：停用；1：启用
	MobileDefaultAbility int64  `json:"mobile_default_ability,omitempty"` // 移动端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
	PcDefaultAbility     int64  `json:"pc_default_ability,omitempty"`     // PC客户端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationAppVisibility
//
// 该接口用于查询应用在该企业内可以被使用的范围，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM3UjLyIzN14iMycTN
func (r *ApplicationService) GetApplicationAppVisibility(ctx context.Context, request *GetApplicationAppVisibilityReq, options ...MethodOptionFunc) (*GetApplicationAppVisibilityResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationAppVisibility != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationAppVisibility mock enable")
		return r.cli.mock.mockApplicationGetApplicationAppVisibility(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationAppVisibility",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v2/app/visibility",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationAppVisibilityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationAppVisibility mock ApplicationGetApplicationAppVisibility method
func (r *Mock) MockApplicationGetApplicationAppVisibility(f func(ctx context.Context, request *GetApplicationAppVisibilityReq, options ...MethodOptionFunc) (*GetApplicationAppVisibilityResp, *Response, error)) {
	r.mockApplicationGetApplicationAppVisibility = f
}

// UnMockApplicationGetApplicationAppVisibility un-mock ApplicationGetApplicationAppVisibility method
func (r *Mock) UnMockApplicationGetApplicationAppVisibility() {
	r.mockApplicationGetApplicationAppVisibility = nil
}

// GetApplicationAppVisibilityReq ...
type GetApplicationAppVisibilityReq struct {
	AppID         string  `query:"app_id" json:"-"`          // 目标应用的 ID
	UserPageToken *string `query:"user_page_token" json:"-"` // 分页拉取用户列表起始位置标示，不填表示从头开始
	UserPageSize  *int64  `query:"user_page_size" json:"-"`  // 本次拉取用户列表最大个数(最大值 1000 ，0 自动最大个数 )
}

// getApplicationAppVisibilityResp ...
type getApplicationAppVisibilityResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationAppVisibilityResp `json:"data,omitempty"` // 返回的业务信息
}

// GetApplicationAppVisibilityResp ...
type GetApplicationAppVisibilityResp struct {
	Departments    []*GetApplicationAppVisibilityRespDepartment `json:"departments,omitempty"`       // 可用部门列表
	Users          []*GetApplicationAppVisibilityRespUser       `json:"users,omitempty"`             // 可用用户列表（仅包含单独设置的用户，可用部门、用户组中的用户未展开）
	IsVisibleToAll int64                                        `json:"is_visible_to_all,omitempty"` // 是否全员可见，1：是，0：否
	HasMoreUsers   int64                                        `json:"has_more_users,omitempty"`    // 是否还有更多可见用户，1：是，0：否
	UserPageToken  string                                       `json:"user_page_token,omitempty"`   // 拉取下一页用户列表时使用的 user_page_token
}

// GetApplicationAppVisibilityRespDepartment ...
type GetApplicationAppVisibilityRespDepartment struct {
	ID string `json:"id,omitempty"` // 自定义 department_id
}

// GetApplicationAppVisibilityRespUser ...
type GetApplicationAppVisibilityRespUser struct {
	UserID string `json:"user_id,omitempty"` // 用户的 user_id，只返回给申请了 user_id 权限的企业自建应用
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApplicationAppVisibility
//
// 该接口用于增加或者删除指定应用被哪些人可用，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucDN3UjL3QzN14yN0cTN
func (r *ApplicationService) UpdateApplicationAppVisibility(ctx context.Context, request *UpdateApplicationAppVisibilityReq, options ...MethodOptionFunc) (*UpdateApplicationAppVisibilityResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationAppVisibility != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationAppVisibility mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationAppVisibility(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationAppVisibility",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v3/app/update_visibility",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationAppVisibilityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplicationAppVisibility mock ApplicationUpdateApplicationAppVisibility method
func (r *Mock) MockApplicationUpdateApplicationAppVisibility(f func(ctx context.Context, request *UpdateApplicationAppVisibilityReq, options ...MethodOptionFunc) (*UpdateApplicationAppVisibilityResp, *Response, error)) {
	r.mockApplicationUpdateApplicationAppVisibility = f
}

// UnMockApplicationUpdateApplicationAppVisibility un-mock ApplicationUpdateApplicationAppVisibility method
func (r *Mock) UnMockApplicationUpdateApplicationAppVisibility() {
	r.mockApplicationUpdateApplicationAppVisibility = nil
}

// UpdateApplicationAppVisibilityReq ...
type UpdateApplicationAppVisibilityReq struct {
	AppID           string                                     `json:"app_id,omitempty"`             // 目标应用的 ID
	DelUsers        *UpdateApplicationAppVisibilityReqDelUsers `json:"del_users,omitempty"`          // 删除的用户列表，元素个数不超过 500，**先增加后删除**
	AddUsers        *UpdateApplicationAppVisibilityReqAddUsers `json:"add_users,omitempty"`          // 增加的用户列表，元素个数不超过500，**先增加后删除**
	IsVisiableToAll *int64                                     `json:"is_visiable_to_all,omitempty"` // 是否全员可见，0：否；1：是；不填：继续当前状态不改变
	AddDepartments  []string                                   `json:"add_departments,omitempty"`    // 添加的部门列表，元素个数不超过 500，**先增加后删除**
	DelDepartments  []string                                   `json:"del_departments,omitempty"`    // 删除的部门列表，元素个数不超过 500，**先增加后删除**
}

// UpdateApplicationAppVisibilityReqDelUsers ...
type UpdateApplicationAppVisibilityReqDelUsers struct {
	OpenID *string `json:"open_id,omitempty"` // 与 user_id 至少给其中之一，user_id 优先于 open_id
	UserID *string `json:"user_id,omitempty"`
}

// UpdateApplicationAppVisibilityReqAddUsers ...
type UpdateApplicationAppVisibilityReqAddUsers struct {
	OpenID *string `json:"open_id,omitempty"` // 与 user_id 至少给其中之一，user_id 优先于 open_id
	UserID *string `json:"user_id,omitempty"`
}

// updateApplicationAppVisibilityResp ...
type updateApplicationAppVisibilityResp struct {
	Code int64                               `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 返回码的描述
	Data *UpdateApplicationAppVisibilityResp `json:"data,omitempty"` // 返回的业务信息
}

// UpdateApplicationAppVisibilityResp ...
type UpdateApplicationAppVisibilityResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationFeedbackList 查询应用的反馈数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/list
func (r *ApplicationService) GetApplicationFeedbackList(ctx context.Context, request *GetApplicationFeedbackListReq, options ...MethodOptionFunc) (*GetApplicationFeedbackListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationFeedbackList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationFeedbackList mock enable")
		return r.cli.mock.mockApplicationGetApplicationFeedbackList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationFeedbackList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/feedbacks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationFeedbackListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationFeedbackList mock ApplicationGetApplicationFeedbackList method
func (r *Mock) MockApplicationGetApplicationFeedbackList(f func(ctx context.Context, request *GetApplicationFeedbackListReq, options ...MethodOptionFunc) (*GetApplicationFeedbackListResp, *Response, error)) {
	r.mockApplicationGetApplicationFeedbackList = f
}

// UnMockApplicationGetApplicationFeedbackList un-mock ApplicationGetApplicationFeedbackList method
func (r *Mock) UnMockApplicationGetApplicationFeedbackList() {
	r.mockApplicationGetApplicationFeedbackList = nil
}

// GetApplicationFeedbackListReq ...
type GetApplicationFeedbackListReq struct {
	FromDate     *string `query:"from_date" json:"-"`     // 查询的起始日期，格式为yyyy-mm-dd。不填则默认为当前日期减去180天。, 示例值："2022-01-30"
	ToDate       *string `query:"to_date" json:"-"`       // 查询的结束日期，格式为yyyy-mm-dd。不填默认为当前日期, 示例值："2022-01-30"
	FeedbackType *int64  `query:"feedback_type" json:"-"` // 反馈类型，不填写则表示查询所有反馈类型。, 示例值：1, 可选值有: `1`：故障反馈, `2`：产品建议
	Status       *int64  `query:"status" json:"-"`        // 反馈处理状态，不填写则表示查询所有处理类型。, 示例值：0, 可选值有: `0`：反馈未处理, `1`：反馈已处理, `2`：反馈处理中, `3`：反馈已关闭
	UserIDType   *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken    *string `query:"page_token" json:"-"`    // 分页拉取反馈列表起始位置标示，不填表示从头开始, 示例值：""7064688334618378259""
	PageSize     *int64  `query:"page_size" json:"-"`     // 本次拉取反馈列表最大个数, 示例值：100, 默认值: `100`, 取值范围：`1` ～ `100`
	AppID        string  `path:"app_id" json:"-"`         // 目标应用 ID, 示例值："cli_9f115af860f7901b"
}

// getApplicationFeedbackListResp ...
type getApplicationFeedbackListResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationFeedbackListResp `json:"data,omitempty"`
}

// GetApplicationFeedbackListResp ...
type GetApplicationFeedbackListResp struct {
	FeedbackList []*GetApplicationFeedbackListRespFeedback `json:"feedback_list,omitempty"` // 应用的反馈列表
	HasMore      bool                                      `json:"has_more,omitempty"`      // 是否还有更多用户反馈列表，true：是，false：否
	PageToken    string                                    `json:"page_token,omitempty"`    // 拉取下一页应用反馈列表时使用的 page_token
}

// GetApplicationFeedbackListRespFeedback ...
type GetApplicationFeedbackListRespFeedback struct {
	FeedbackID   string   `json:"feedback_id,omitempty"`   // 应用反馈 ID，应用反馈记录唯一标识
	AppID        string   `json:"app_id,omitempty"`        // 被反馈应用ID
	FeedbackTime string   `json:"feedback_time,omitempty"` // 反馈提交时间，格式为yyyy-mm-dd hh:mm:ss
	TenantName   string   `json:"tenant_name,omitempty"`   // 反馈用户的租户名, 查询 isv 应用时返回
	FeedbackType int64    `json:"feedback_type,omitempty"` // 反馈类型, 可选值有: `1`：故障反馈, `2`：产品建议
	Status       int64    `json:"status,omitempty"`        // 反馈处理状态, 可选值有: `0`：反馈未处理, `1`：反馈已处理, `2`：反馈处理中, `3`：反馈已关闭
	FaultType    []int64  `json:"fault_type,omitempty"`    // 故障类型列表：1: 黑屏 2: 白屏 3: 无法打开小程序  4: 卡顿 5: 小程序闪退 6: 页面加载慢 7: 死机 8: 其他异常
	FaultTime    string   `json:"fault_time,omitempty"`    // 故障时间，格式为yyyy-mm-dd hh:mm:ss
	Source       int64    `json:"source,omitempty"`        // 反馈来源：1： 小程序 2：网页应用 3：机器人 4：webSDK, 可选值有: `1`：小程序, `2`：网页应用, `3`：机器人, `4`：WebSDK
	Contact      string   `json:"contact,omitempty"`       // 用户联系方式，只有用户填写联系方式后返回,**字段权限要求（满足任一）**：,获取用户邮箱信息,获取用户手机号
	UpdateTime   string   `json:"update_time,omitempty"`   // 反馈处理时间，格式为yyyy-mm-dd hh:mm:ss
	Description  string   `json:"description,omitempty"`   // 反馈问题描述
	UserID       string   `json:"user_id,omitempty"`       // 反馈用户id，租户内用户的唯一标识 ，ID值与查询参数中的user_id_type对应
	OperatorID   string   `json:"operator_id,omitempty"`   // 操作者id，租户内用户的唯一标识, ID值与查询参数中的user_id_type 对应
	Images       []string `json:"images,omitempty"`        // 反馈图片url列表，url 过期时间三天
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApplicationFeedback 更新应用的反馈数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-feedback/patch
func (r *ApplicationService) UpdateApplicationFeedback(ctx context.Context, request *UpdateApplicationFeedbackReq, options ...MethodOptionFunc) (*UpdateApplicationFeedbackResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationFeedback != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationFeedback mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationFeedback(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationFeedback",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/feedbacks/:feedback_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationFeedbackResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplicationFeedback mock ApplicationUpdateApplicationFeedback method
func (r *Mock) MockApplicationUpdateApplicationFeedback(f func(ctx context.Context, request *UpdateApplicationFeedbackReq, options ...MethodOptionFunc) (*UpdateApplicationFeedbackResp, *Response, error)) {
	r.mockApplicationUpdateApplicationFeedback = f
}

// UnMockApplicationUpdateApplicationFeedback un-mock ApplicationUpdateApplicationFeedback method
func (r *Mock) UnMockApplicationUpdateApplicationFeedback() {
	r.mockApplicationUpdateApplicationFeedback = nil
}

// UpdateApplicationFeedbackReq ...
type UpdateApplicationFeedbackReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Status     int64   `query:"status" json:"-"`       // 反馈处理状态, 示例值：1, 可选值有: `0`：反馈未处理, `1`：反馈已处理, `2`：反馈处理中, `3`：反馈已关闭
	OperatorID string  `query:"operator_id" json:"-"`  // 反馈处理人员id，租户内用户的唯一标识, ID值与查询参数中的user_id_type 对应, 示例值："ou_9565b69967831233761cc2f11b4c089f"
	AppID      string  `path:"app_id" json:"-"`        // 目标应用 ID, 示例值："cli_9f115af860f7901b"
	FeedbackID string  `path:"feedback_id" json:"-"`   // 应用反馈记录id, 示例值："7057888018203574291"
}

// updateApplicationFeedbackResp ...
type updateApplicationFeedbackResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *UpdateApplicationFeedbackResp `json:"data,omitempty"`
}

// UpdateApplicationFeedbackResp ...
type UpdateApplicationFeedbackResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplication 根据app_id获取应用的基础信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/get
func (r *ApplicationService) GetApplication(ctx context.Context, request *GetApplicationReq, options ...MethodOptionFunc) (*GetApplicationResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplication mock enable")
		return r.cli.mock.mockApplicationGetApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplication mock ApplicationGetApplication method
func (r *Mock) MockApplicationGetApplication(f func(ctx context.Context, request *GetApplicationReq, options ...MethodOptionFunc) (*GetApplicationResp, *Response, error)) {
	r.mockApplicationGetApplication = f
}

// UnMockApplicationGetApplication un-mock ApplicationGetApplication method
func (r *Mock) UnMockApplicationGetApplication() {
	r.mockApplicationGetApplication = nil
}

// GetApplicationReq ...
type GetApplicationReq struct {
	Lang       string  `query:"lang" json:"-"`         // 指定获取应用在该语言下的信息, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文, 最小长度：`1` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppID      string  `path:"app_id" json:"-"`        // 应用的 app_id，需要查询其他应用信息时，必须申请[获取应用信息](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)权限，仅查询本应用信息时，可填入 "me" 或者应用自身 app_id, 示例值："cli_9b445f5258795107"
}

// getApplicationResp ...
type getApplicationResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationResp `json:"data,omitempty"`
}

// GetApplicationResp ...
type GetApplicationResp struct {
	App *GetApplicationRespApp `json:"app,omitempty"` // 应用数据
}

// GetApplicationRespApp ...
type GetApplicationRespApp struct {
	AppID            string                        `json:"app_id,omitempty"`             // 应用的 app_id
	CreatorID        string                        `json:"creator_id,omitempty"`         // 应用创建者（所有者）
	Status           int64                         `json:"status,omitempty"`             // 应用状态, 可选值有: `0`：停用状态, `1`：启用状态, `2`：未启用状态, `3`：未知状态
	SceneType        int64                         `json:"scene_type,omitempty"`         // 应用类型, 可选值有: `0`：自建应用, `1`：应用商店应用, `2`：个人应用商店应用, `3`：未知应用类型
	RedirectURLs     []string                      `json:"redirect_urls,omitempty"`      // 安全设置中的重定向 URL
	OnlineVersionID  string                        `json:"online_version_id,omitempty"`  // 发布在线上的应用版本 ID，若没有则为空
	UnauditVersionID string                        `json:"unaudit_version_id,omitempty"` // 在审核中的版本 ID，若没有则为空
	AppName          string                        `json:"app_name,omitempty"`           // 应用名称
	AvatarURL        string                        `json:"avatar_url,omitempty"`         // 应用图标 url
	Description      string                        `json:"description,omitempty"`        // 应用默认描述
	Scopes           []*GetApplicationRespAppScope `json:"scopes,omitempty"`             // 应用权限列表
	BackHomeURL      string                        `json:"back_home_url,omitempty"`      // 后台主页地址
	I18n             []*GetApplicationRespAppI18n  `json:"i18n,omitempty"`               // 应用的国际化信息列表
	PrimaryLanguage  string                        `json:"primary_language,omitempty"`   // 应用主语言, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	CommonCategories []string                      `json:"common_categories,omitempty"`  // 应用分类的国际化描述
}

// GetApplicationRespAppScope ...
type GetApplicationRespAppScope struct {
	Scope       string `json:"scope,omitempty"`       // 应用权限
	Description string `json:"description,omitempty"` // 应用权限的国际化描述
	Level       int64  `json:"level,omitempty"`       // 权限等级描述, 可选值有: `1`：普通权限, `2`：高级权限, `3`：超敏感权限, `0`：未知等级
}

// GetApplicationRespAppI18n ...
type GetApplicationRespAppI18n struct {
	I18nKey     string `json:"i18n_key,omitempty"`    // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name        string `json:"name,omitempty"`        // 应用国际化名称
	Description string `json:"description,omitempty"` // 应用国际化描述（副标题）
	HelpUse     string `json:"help_use,omitempty"`    // 帮助国际化文档链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// IsApplicationUserAdmin
//
// 该接口用于查询用户是否为应用管理员。
// > 此处应用管理员是指可以进入企业管理后台对应用进行审核和管理的企业管理员，并不是应用的开发者。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITN1EjLyUTNx4iM1UTM
func (r *ApplicationService) IsApplicationUserAdmin(ctx context.Context, request *IsApplicationUserAdminReq, options ...MethodOptionFunc) (*IsApplicationUserAdminResp, *Response, error) {
	if r.cli.mock.mockApplicationIsApplicationUserAdmin != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#IsApplicationUserAdmin mock enable")
		return r.cli.mock.mockApplicationIsApplicationUserAdmin(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "IsApplicationUserAdmin",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v3/is_user_admin",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(isApplicationUserAdminResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationIsApplicationUserAdmin mock ApplicationIsApplicationUserAdmin method
func (r *Mock) MockApplicationIsApplicationUserAdmin(f func(ctx context.Context, request *IsApplicationUserAdminReq, options ...MethodOptionFunc) (*IsApplicationUserAdminResp, *Response, error)) {
	r.mockApplicationIsApplicationUserAdmin = f
}

// UnMockApplicationIsApplicationUserAdmin un-mock ApplicationIsApplicationUserAdmin method
func (r *Mock) UnMockApplicationIsApplicationUserAdmin() {
	r.mockApplicationIsApplicationUserAdmin = nil
}

// IsApplicationUserAdminReq ...
type IsApplicationUserAdminReq struct {
	OpenID     *string `query:"open_id" json:"-"`     // 用户 open_id，open_id 和 employee_id 两个参数必须包含其一，若同时传入取 open_id
	EmployeeID *string `query:"employee_id" json:"-"` // 用户 employee_id（同通讯录 v3 版本中的 user_id），open_id 和 employee_id 两个参数必须包含其一，若同时传入取 open_id
}

// isApplicationUserAdminResp ...
type isApplicationUserAdminResp struct {
	Code int64                       `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *IsApplicationUserAdminResp `json:"data,omitempty"` // 返回的业务信息
}

// IsApplicationUserAdminResp ...
type IsApplicationUserAdminResp struct {
	IsAppAdmin bool `json:"is_app_admin,omitempty"` // 用户是否为管理员，true 为是，false 为否
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationOrder
//
// 该接口用于查询某个订单的具体信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITNwUjLyUDM14iM1ATN
func (r *ApplicationService) GetApplicationOrder(ctx context.Context, request *GetApplicationOrderReq, options ...MethodOptionFunc) (*GetApplicationOrderResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationOrder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationOrder mock enable")
		return r.cli.mock.mockApplicationGetApplicationOrder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationOrder",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/pay/v1/order/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationOrderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationOrder mock ApplicationGetApplicationOrder method
func (r *Mock) MockApplicationGetApplicationOrder(f func(ctx context.Context, request *GetApplicationOrderReq, options ...MethodOptionFunc) (*GetApplicationOrderResp, *Response, error)) {
	r.mockApplicationGetApplicationOrder = f
}

// UnMockApplicationGetApplicationOrder un-mock ApplicationGetApplicationOrder method
func (r *Mock) UnMockApplicationGetApplicationOrder() {
	r.mockApplicationGetApplicationOrder = nil
}

// GetApplicationOrderReq ...
type GetApplicationOrderReq struct {
	OrderID string `query:"order_id" json:"-"` // 订单ID
}

// getApplicationOrderResp ...
type getApplicationOrderResp struct {
	Code int64                    `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationOrderResp `json:"data,omitempty"` // 返回的业务信息
}

// GetApplicationOrderResp ...
type GetApplicationOrderResp struct {
	Order *GetApplicationOrderRespOrder `json:"order,omitempty"` // 订单信息
}

// GetApplicationOrderRespOrder ...
type GetApplicationOrderRespOrder struct {
	OrderID       string `json:"order_id,omitempty"`        // 订单ID，唯一标识
	PricePlanID   string `json:"price_plan_id,omitempty"`   // 价格方案ID，唯一标识
	PricePlanType string `json:"price_plan_type,omitempty"` // 价格方案类型 "trial" -试用；"permanent"-一次性付费；"per_year"-企业年付费；"per_month"-企业月付费；"per_seat_per_year"-按人按年付费；"per_seat_per_month"-按人按月付费；"permanent_count"-按次付费；
	Seats         int64  `json:"seats,omitempty"`           // 实际购买人数 仅对price_plan_type为per_seat_per_year和per_seat_per_month 有效
	BuyCount      int64  `json:"buy_count,omitempty"`       // 购买数量 总是为1
	CreateTime    string `json:"create_time,omitempty"`     // 订单创建时间戳
	PayTime       string `json:"pay_time,omitempty"`        // 订单支付时间戳
	Status        string `json:"status,omitempty"`          // 订单当前状态，"normal" -正常；"refund"-已退款；
	BuyType       string `json:"buy_type,omitempty"`        // 购买类型，"buy" - 普通购买;"upgrade"-为升级购买(仅price_plan_type 为per_year，per_month，per_seat_per_year，per_seat_per_month时可升级购买);"renew" - 续费购买；
	SrcOrderID    string `json:"src_order_id,omitempty"`    // 源订单ID，当前订单为升级购买时，即buy_type为upgrade时，此字段记录源订单等ID
	DstOrderID    string `json:"dst_order_id,omitempty"`    // 升级后的新订单ID，当前订单如果做过升级购买，此字段记录升级购买后生成的新订单ID，当前订单仍然有效
	OrderPayPrice int64  `json:"order_pay_price,omitempty"` // 订单实际支付金额, 单位分
	TenantKey     string `json:"tenant_key,omitempty"`      // 租户唯一标识
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationOrderList
//
// 该接口用于分页查询应用租户下的已付费订单，每次购买对应一个唯一的订单，订单会记录购买的套餐的相关信息，业务方需要自行处理套餐的有效期和付费方案的升级。
// >  备注：免费模式的应用不会产生订单，仅收费应用会产生订单 (含免费版)。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETNwUjLxUDM14SM1ATN
func (r *ApplicationService) GetApplicationOrderList(ctx context.Context, request *GetApplicationOrderListReq, options ...MethodOptionFunc) (*GetApplicationOrderListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationOrderList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationOrderList mock enable")
		return r.cli.mock.mockApplicationGetApplicationOrderList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationOrderList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/pay/v1/order/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationOrderListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationOrderList mock ApplicationGetApplicationOrderList method
func (r *Mock) MockApplicationGetApplicationOrderList(f func(ctx context.Context, request *GetApplicationOrderListReq, options ...MethodOptionFunc) (*GetApplicationOrderListResp, *Response, error)) {
	r.mockApplicationGetApplicationOrderList = f
}

// UnMockApplicationGetApplicationOrderList un-mock ApplicationGetApplicationOrderList method
func (r *Mock) UnMockApplicationGetApplicationOrderList() {
	r.mockApplicationGetApplicationOrderList = nil
}

// GetApplicationOrderListReq ...
type GetApplicationOrderListReq struct {
	Status    *string `query:"status" json:"-"`     // 获取用户购买套餐信息设置的过滤条件, normal为正常状态，refunded为已退款，该字段为空或者all表示所有，未支付的订单无法查到
	PageSize  int64   `query:"page_size" json:"-"`  // `每页显示的订单数量`
	PageToken *string `query:"page_token" json:"-"` // 翻页标识，可以从上次请求的响应中获取，不填或者为空时表示从开头获取
	TenantKey *string `query:"tenant_key" json:"-"` // 购买应用的租户唯一标识，为空表示获取应用下所有订单，有值表示获取应用下该租户购买的订单
}

// getApplicationOrderListResp ...
type getApplicationOrderListResp struct {
	Code int64                        `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationOrderListResp `json:"data,omitempty"` // 返回的业务信息
}

// GetApplicationOrderListResp ...
type GetApplicationOrderListResp struct {
	Total     int64                                 `json:"total,omitempty"`      // 总订单数
	HasMore   bool                                  `json:"has_more,omitempty"`   // 是否还有数据，true还有数据，false没有数据
	PageToken string                                `json:"page_token,omitempty"` // 下一页数据的标识，可作为请求下一页数据的参数，当has_more为false时该字段为空
	OrderList *GetApplicationOrderListRespOrderList `json:"order_list,omitempty"` // 订单信息列表
}

// GetApplicationOrderListRespOrderList ...
type GetApplicationOrderListRespOrderList struct {
	OrderID       string `json:"order_id,omitempty"`        // 订单ID，唯一标识
	PricePlanID   string `json:"price_plan_id,omitempty"`   // 价格方案ID，唯一标识
	PricePlanType string `json:"price_plan_type,omitempty"` // 价格方案类型 。 可选值包括："trial" -试用；"permanent"-免费；"per_year"-企业年付费；"per_month"-企业月付费；"per_seat_per_year"-按人按年付费；"per_seat_per_month"-按人按月付费；"permanent_count"-按次付费；
	Seats         int64  `json:"seats,omitempty"`           // 实际购买人数 仅对price_plan_type为per_seat_per_year和per_seat_per_month 有效
	BuyCount      int64  `json:"buy_count,omitempty"`       // 购买数量 总是为1
	CreateTime    string `json:"create_time,omitempty"`     // 订单创建时间戳
	PayTime       string `json:"pay_time,omitempty"`        // 订单支付时间戳
	Status        string `json:"status,omitempty"`          // 订单当前状态，"normal" -正常；"refund"-已退款；
	BuyType       string `json:"buy_type,omitempty"`        // 购买类型，"buy" - 普通购买;"upgrade"-为升级购买(仅price_plan_type 为per_year，per_month，per_seat_per_year，per_seat_per_month时可升级购买);"renew" - 续费购买；
	SrcOrderID    string `json:"src_order_id,omitempty"`    // 源订单ID，当前订单为升级购买时，即buy_type为upgrade时，此字段记录源订单等ID
	DstOrderID    string `json:"dst_order_id,omitempty"`    // 升级后的新订单ID，当前订单如果做过升级购买，此字段记录升级购买后生成的新订单ID，当前订单仍然有效
	OrderPayPrice int64  `json:"order_pay_price,omitempty"` // 订单实际支付金额, 单位分
	TenantKey     string `json:"tenant_key,omitempty"`      // 租户唯一标识
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CheckUserIsInApplicationPaidScope
//
// 当付费套餐是按人数收费 或者 限制最大使用人数时，开放平台会引导企业管理员设置“付费功能开通范围”。  但是受开通范围限制，部分用户就无法使用对应的付费功能。  可以通过此接口，在付费功能点入口判断是否允许某个用户进入使用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNwUjLwUDM14CM1ATN
func (r *ApplicationService) CheckUserIsInApplicationPaidScope(ctx context.Context, request *CheckUserIsInApplicationPaidScopeReq, options ...MethodOptionFunc) (*CheckUserIsInApplicationPaidScopeResp, *Response, error) {
	if r.cli.mock.mockApplicationCheckUserIsInApplicationPaidScope != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#CheckUserIsInApplicationPaidScope mock enable")
		return r.cli.mock.mockApplicationCheckUserIsInApplicationPaidScope(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "CheckUserIsInApplicationPaidScope",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/pay/v1/paid_scope/check_user",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(checkUserIsInApplicationPaidScopeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationCheckUserIsInApplicationPaidScope mock ApplicationCheckUserIsInApplicationPaidScope method
func (r *Mock) MockApplicationCheckUserIsInApplicationPaidScope(f func(ctx context.Context, request *CheckUserIsInApplicationPaidScopeReq, options ...MethodOptionFunc) (*CheckUserIsInApplicationPaidScopeResp, *Response, error)) {
	r.mockApplicationCheckUserIsInApplicationPaidScope = f
}

// UnMockApplicationCheckUserIsInApplicationPaidScope un-mock ApplicationCheckUserIsInApplicationPaidScope method
func (r *Mock) UnMockApplicationCheckUserIsInApplicationPaidScope() {
	r.mockApplicationCheckUserIsInApplicationPaidScope = nil
}

// CheckUserIsInApplicationPaidScopeReq ...
type CheckUserIsInApplicationPaidScopeReq struct {
	OpenID *string `query:"open_id" json:"-"` // 用户 open_id，open_id 和 user_id 两个参数必须包含其一，若同时传入取 open_id
	UserID *string `query:"user_id" json:"-"` // 用户 user_id，user_id 和 open_id 两个参数必须包含其一，若同时传入取 open_id
}

// checkUserIsInApplicationPaidScopeResp ...
type checkUserIsInApplicationPaidScopeResp struct {
	Code int64                                  `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                                 `json:"msg,omitempty"`  // 返回码的描述
	Data *CheckUserIsInApplicationPaidScopeResp `json:"data,omitempty"` // 返回的业务信息
}

// CheckUserIsInApplicationPaidScopeResp ...
type CheckUserIsInApplicationPaidScopeResp struct {
	Status          string `json:"status,omitempty"`            // 用户是否在开通范围中，"valid" -该用户在开通范围中，"not_in_scope"-该用户不在开通范围中，"no_active_license"-企业未购买任何价格方案或价格方案已过期，"exceeds_maximum_limit"-企业当前配置的付费功能开通范围人数超出限制，需提醒管理员调整
	PricePlanID     string `json:"price_plan_id,omitempty"`     // 租户当前使用的「价格方案ID」，对应开发者后台中「价格方案配置」中的「价格方案」
	IsTrial         bool   `json:"is_trial,omitempty"`          // 是否为试用版本，true-是试用版本；false-非试用版本
	ServiceStopTime string `json:"service_stop_time,omitempty"` // 租户当前有生效价格方案时表示价格方案的到期时间，为时间unix时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUnderAuditList 查看本企业下所有待审核的自建应用列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/underauditlist
func (r *ApplicationService) GetApplicationUnderAuditList(ctx context.Context, request *GetApplicationUnderAuditListReq, options ...MethodOptionFunc) (*GetApplicationUnderAuditListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUnderAuditList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUnderAuditList mock enable")
		return r.cli.mock.mockApplicationGetApplicationUnderAuditList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUnderAuditList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/underauditlist",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUnderAuditListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUnderAuditList mock ApplicationGetApplicationUnderAuditList method
func (r *Mock) MockApplicationGetApplicationUnderAuditList(f func(ctx context.Context, request *GetApplicationUnderAuditListReq, options ...MethodOptionFunc) (*GetApplicationUnderAuditListResp, *Response, error)) {
	r.mockApplicationGetApplicationUnderAuditList = f
}

// UnMockApplicationGetApplicationUnderAuditList un-mock ApplicationGetApplicationUnderAuditList method
func (r *Mock) UnMockApplicationGetApplicationUnderAuditList() {
	r.mockApplicationGetApplicationUnderAuditList = nil
}

// GetApplicationUnderAuditListReq ...
type GetApplicationUnderAuditListReq struct {
	Lang       string  `query:"lang" json:"-"`         // 指定返回的语言, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文, 最小长度：`1` 字符
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："new-e3c5a0627cdf0c2e057da7257b90376a"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`50`
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getApplicationUnderAuditListResp ...
type getApplicationUnderAuditListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationUnderAuditListResp `json:"data,omitempty"`
}

// GetApplicationUnderAuditListResp ...
type GetApplicationUnderAuditListResp struct {
	Items     []*GetApplicationUnderAuditListRespItem `json:"items,omitempty"`      // 待审核应用列表
	HasMore   bool                                    `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                  `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetApplicationUnderAuditListRespItem ...
type GetApplicationUnderAuditListRespItem struct {
	AppID            string                                       `json:"app_id,omitempty"`             // 应用的 app_id
	CreatorID        string                                       `json:"creator_id,omitempty"`         // 应用创建者（所有者）
	Status           int64                                        `json:"status,omitempty"`             // 应用状态, 可选值有: `0`：停用状态, `1`：启用状态, `2`：未启用状态, `3`：未知状态
	SceneType        int64                                        `json:"scene_type,omitempty"`         // 应用类型, 可选值有: `0`：自建应用, `1`：应用商店应用, `2`：个人应用商店应用, `3`：未知应用类型
	RedirectURLs     []string                                     `json:"redirect_urls,omitempty"`      // 安全设置中的重定向 URL
	OnlineVersionID  string                                       `json:"online_version_id,omitempty"`  // 发布在线上的应用版本 ID，若没有则为空
	UnauditVersionID string                                       `json:"unaudit_version_id,omitempty"` // 在审核中的版本 ID，若没有则为空
	AppName          string                                       `json:"app_name,omitempty"`           // 应用名称
	AvatarURL        string                                       `json:"avatar_url,omitempty"`         // 应用图标 url
	Description      string                                       `json:"description,omitempty"`        // 应用默认描述
	Scopes           []*GetApplicationUnderAuditListRespItemScope `json:"scopes,omitempty"`             // 应用权限列表
	BackHomeURL      string                                       `json:"back_home_url,omitempty"`      // 后台主页地址
	I18n             []*GetApplicationUnderAuditListRespItemI18n  `json:"i18n,omitempty"`               // 应用的国际化信息列表
	PrimaryLanguage  string                                       `json:"primary_language,omitempty"`   // 应用主语言, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	CommonCategories []string                                     `json:"common_categories,omitempty"`  // 应用分类的国际化描述
}

// GetApplicationUnderAuditListRespItemScope ...
type GetApplicationUnderAuditListRespItemScope struct {
	Scope       string `json:"scope,omitempty"`       // 应用权限
	Description string `json:"description,omitempty"` // 应用权限的国际化描述
	Level       int64  `json:"level,omitempty"`       // 权限等级描述, 可选值有: `1`：普通权限, `2`：高级权限, `3`：超敏感权限, `0`：未知等级
}

// GetApplicationUnderAuditListRespItemI18n ...
type GetApplicationUnderAuditListRespItemI18n struct {
	I18nKey     string `json:"i18n_key,omitempty"`    // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name        string `json:"name,omitempty"`        // 应用国际化名称
	Description string `json:"description,omitempty"` // 应用国际化描述（副标题）
	HelpUse     string `json:"help_use,omitempty"`    // 帮助国际化文档链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApplication 更新应用的分组信息（分组会影响应用在工作台中的分类情况，请谨慎更新）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/patch
func (r *ApplicationService) UpdateApplication(ctx context.Context, request *UpdateApplicationReq, options ...MethodOptionFunc) (*UpdateApplicationResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplication mock enable")
		return r.cli.mock.mockApplicationUpdateApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplication",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplication mock ApplicationUpdateApplication method
func (r *Mock) MockApplicationUpdateApplication(f func(ctx context.Context, request *UpdateApplicationReq, options ...MethodOptionFunc) (*UpdateApplicationResp, *Response, error)) {
	r.mockApplicationUpdateApplication = f
}

// UnMockApplicationUpdateApplication un-mock ApplicationUpdateApplication method
func (r *Mock) UnMockApplicationUpdateApplication() {
	r.mockApplicationUpdateApplication = nil
}

// UpdateApplicationReq ...
type UpdateApplicationReq struct {
	Lang             string   `query:"lang" json:"-"`              // 指定返回的语言, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	AppID            string   `path:"app_id" json:"-"`             // 应用的 id, 示例值："cli_9b445f5258795107"
	CommonCategories []string `json:"common_categories,omitempty"` // 应用分类的国际化描述, 长度范围：`1` ～ `3`
}

// updateApplicationResp ...
type updateApplicationResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateApplicationResp `json:"data,omitempty"`
}

// UpdateApplicationResp ...
type UpdateApplicationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUsageOverview 查看应用在某一天/某一周/某一个月的使用数据，可以查看租户整体对应用的使用情况，也可以分部门查看。
//
// 1. 仅支持企业版/旗舰版租户使用
// 2. 一般每天早上10点产出前一天的数据
// 3. 已经支持的指标包括：应用的活跃用户数、累计用户数、新增用户数
// 4. 数据从飞书3.46版本开始统计，使用飞书版本3.45及以下版本的用户数据不会被统计到
// 5. 按照部门查看数据时，会展示当前部门以及其子部门的整体使用情况
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_usage/overview
func (r *ApplicationService) GetApplicationUsageOverview(ctx context.Context, request *GetApplicationUsageOverviewReq, options ...MethodOptionFunc) (*GetApplicationUsageOverviewResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUsageOverview != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUsageOverview mock enable")
		return r.cli.mock.mockApplicationGetApplicationUsageOverview(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUsageOverview",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/app_usage/overview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUsageOverviewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUsageOverview mock ApplicationGetApplicationUsageOverview method
func (r *Mock) MockApplicationGetApplicationUsageOverview(f func(ctx context.Context, request *GetApplicationUsageOverviewReq, options ...MethodOptionFunc) (*GetApplicationUsageOverviewResp, *Response, error)) {
	r.mockApplicationGetApplicationUsageOverview = f
}

// UnMockApplicationGetApplicationUsageOverview un-mock ApplicationGetApplicationUsageOverview method
func (r *Mock) UnMockApplicationGetApplicationUsageOverview() {
	r.mockApplicationGetApplicationUsageOverview = nil
}

// GetApplicationUsageOverviewReq ...
type GetApplicationUsageOverviewReq struct {
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	AppID            string            `path:"app_id" json:"-"`              // 目标应用 ID, 示例值："cli_9f115af860f7901b"
	Date             string            `json:"date,omitempty"`               // 查询日期，格式为yyyy-mm-dd，若cycle_type为1，date可以为任何自然日；若cycle_type为2，则输入的date必须为周一； 若cycle_type为3，则输入的date必须为每月1号, 示例值："2021-07-08"
	CycleType        int64             `json:"cycle_type,omitempty"`         // 活跃周期的统计类型, 示例值：1, 可选值有: `1`：日活，指自然日，返回当前日期所在日的数据, `2`：周活，指自然周，返回当前日期所在周的数据。若到查询时当周还没结束，则返回周一到当前日期的数值。例如在2021/7/15 查询2021/7/5 这一周的数据，则代表的是2021/7/5 ~ 2021/7/11。但若是在2021/7/8 查询2021/7/5 这一周的数据，则返回的是2021/7/5 ~ 2021/7/7 的数据, `3`：月活，指自然月，返回当前日期所在月的数据。若不满一个月则返回当月1日到截止日期前的数据。例如在2021/8/15 查询 7月的数据，则代表2021/7/1~2021/7/31。 若在2021/8/15 查询8月的数据，则代表2021/8/1~2021/8/14的数据
	DepartmentID     *string           `json:"department_id,omitempty"`      // 查询的部门id，获取方法可参考[部门ID概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview),  若部门id为空，则返回当前租户的使用数据；若填写部门id，则返回当前部门的使用数据（包含子部门的用户）； ,  若路径参数中department_id_type为空或者为open_department_id，则此处应该填写部门的 open_department_id；若路径参数中department_id_type为department_id，则此处应该填写部门的 department_id。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	Ability          string            `json:"ability,omitempty"`            // 能力类型，按能力类型进行筛选，返回对应能力的活跃数据, 示例值："app", 可选值有: `app`：返回应用整体的数据, `mp`：返回小程序能力的数据, `h5`：返回网页能力的数据, `bot`：返回机器人能力的数据
}

// getApplicationUsageOverviewResp ...
type getApplicationUsageOverviewResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationUsageOverviewResp `json:"data,omitempty"`
}

// GetApplicationUsageOverviewResp ...
type GetApplicationUsageOverviewResp struct {
	Items []*GetApplicationUsageOverviewRespItem `json:"items,omitempty"` // 员工使用应用概览数据
}

// GetApplicationUsageOverviewRespItem ...
type GetApplicationUsageOverviewRespItem struct {
	MetricName  string `json:"metric_name,omitempty"`  // 指标名称，uv：活跃用户数，total_users：累计用户数，new_users：新增用户数
	MetricValue int64  `json:"metric_value,omitempty"` // 指标值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUsageTrend
//
// 查询应用在指定时间段内企业员工的使用趋势信息。
// 此接口目前仅支持小程序的使用情况查询，不支持网页应用和机器人应用的使用情况查询;仅支持查询自建应用，不支持查询商店应用
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITN0YjLyUDN24iM1QjN
func (r *ApplicationService) GetApplicationUsageTrend(ctx context.Context, request *GetApplicationUsageTrendReq, options ...MethodOptionFunc) (*GetApplicationUsageTrendResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUsageTrend != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUsageTrend mock enable")
		return r.cli.mock.mockApplicationGetApplicationUsageTrend(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUsageTrend",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_usage_trend",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUsageTrendResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUsageTrend mock ApplicationGetApplicationUsageTrend method
func (r *Mock) MockApplicationGetApplicationUsageTrend(f func(ctx context.Context, request *GetApplicationUsageTrendReq, options ...MethodOptionFunc) (*GetApplicationUsageTrendResp, *Response, error)) {
	r.mockApplicationGetApplicationUsageTrend = f
}

// UnMockApplicationGetApplicationUsageTrend un-mock ApplicationGetApplicationUsageTrend method
func (r *Mock) UnMockApplicationGetApplicationUsageTrend() {
	r.mockApplicationGetApplicationUsageTrend = nil
}

// GetApplicationUsageTrendReq ...
type GetApplicationUsageTrendReq struct {
	AppID        string                               `json:"app_id,omitempty"`        // 目标应用的 ID，支持自建应用
	Ability      string                               `json:"ability,omitempty"`       // 应用能力，mp：小程序
	TimeStart    int64                                `json:"time_start,omitempty"`    // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd      int64                                `json:"time_end,omitempty"`      // 截止时间戳（秒），时间跨度最长支持180天
	TimeInterval int64                                `json:"time_interval,omitempty"` // 步长（秒），最小步长为60秒，需满足(${time_end} - ${time_start}) / ${time_interval} <= 2*24*60
	Filters      []*GetApplicationUsageTrendReqFilter `json:"filters,omitempty"`       // 过滤条件
}

// GetApplicationUsageTrendReqFilter ...
type GetApplicationUsageTrendReqFilter struct {
	Key   string `json:"key,omitempty"`   // 过滤字段，支持`department_id`
	Op    string `json:"op,omitempty"`    // 过滤操作，支持`in`、`=`
	Value string `json:"value,omitempty"` // 过滤字段值，多个使用英文逗号分隔
}

// getApplicationUsageTrendResp ...
type getApplicationUsageTrendResp struct {
	Code int64                         `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUsageTrendResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

// GetApplicationUsageTrendResp ...
type GetApplicationUsageTrendResp struct {
	Item map[string]*GetApplicationUsageTrendRespItem `json:"item,omitempty"` // 返回项
}

// GetApplicationUsageTrendRespItem ...
type GetApplicationUsageTrendRespItem struct {
	Trends []*GetApplicationUsageTrendRespItemTrend `json:"trends,omitempty"` // 趋势数据
}

// GetApplicationUsageTrendRespItemTrend ...
type GetApplicationUsageTrendRespItemTrend struct {
	Timestamp int64 `json:"timestamp,omitempty"` // 时间戳
	Pv        int64 `json:"pv,omitempty"`        // 应用使用pv
	Uv        int64 `json:"uv,omitempty"`        // 应用使用uv
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUserAdminScope
//
// 该接口用于获取应用管理员的管理范围，即该应用管理员能够管理哪些部门。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzN3QjLzczN04yM3cDN
func (r *ApplicationService) GetApplicationUserAdminScope(ctx context.Context, request *GetApplicationUserAdminScopeReq, options ...MethodOptionFunc) (*GetApplicationUserAdminScopeResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUserAdminScope != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUserAdminScope mock enable")
		return r.cli.mock.mockApplicationGetApplicationUserAdminScope(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUserAdminScope",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v1/user/admin_scope/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUserAdminScopeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUserAdminScope mock ApplicationGetApplicationUserAdminScope method
func (r *Mock) MockApplicationGetApplicationUserAdminScope(f func(ctx context.Context, request *GetApplicationUserAdminScopeReq, options ...MethodOptionFunc) (*GetApplicationUserAdminScopeResp, *Response, error)) {
	r.mockApplicationGetApplicationUserAdminScope = f
}

// UnMockApplicationGetApplicationUserAdminScope un-mock ApplicationGetApplicationUserAdminScope method
func (r *Mock) UnMockApplicationGetApplicationUserAdminScope() {
	r.mockApplicationGetApplicationUserAdminScope = nil
}

// GetApplicationUserAdminScopeReq ...
type GetApplicationUserAdminScopeReq struct {
	EmployeeID string `query:"employee_id" json:"-"` // 支持通过 open_id 或者 employee_id 查询，不支持混合两种 ID 进行查询，其中 employee_id 同通讯录 v3 版本中的 user_id
	OpenID     string `query:"open_id" json:"-"`     // 支持通过 open_id 或者 employee_id 查询，不支持混合两种 ID 进行查询，其中 employee_id 同通讯录 v3 版本中的 user_id
}

// getApplicationUserAdminScopeResp ...
type getApplicationUserAdminScopeResp struct {
	Code int64                             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUserAdminScopeResp `json:"data,omitempty"` // 返回业务数据
}

// GetApplicationUserAdminScopeResp ...
type GetApplicationUserAdminScopeResp struct {
	IsAll          bool     `json:"is_all,omitempty"`          // 是否管理所有部门
	DepartmentList []string `json:"department_list,omitempty"` // 管理的部门列表，当 is_all 为 true 时，不返回该字段
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUserVisibleApp
//
// 该接口用于查询用户可用的应用列表，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjM3UjLzIzN14yMycTN
func (r *ApplicationService) GetApplicationUserVisibleApp(ctx context.Context, request *GetApplicationUserVisibleAppReq, options ...MethodOptionFunc) (*GetApplicationUserVisibleAppResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUserVisibleApp != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUserVisibleApp mock enable")
		return r.cli.mock.mockApplicationGetApplicationUserVisibleApp(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUserVisibleApp",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/user/visible_apps",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUserVisibleAppResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUserVisibleApp mock ApplicationGetApplicationUserVisibleApp method
func (r *Mock) MockApplicationGetApplicationUserVisibleApp(f func(ctx context.Context, request *GetApplicationUserVisibleAppReq, options ...MethodOptionFunc) (*GetApplicationUserVisibleAppResp, *Response, error)) {
	r.mockApplicationGetApplicationUserVisibleApp = f
}

// UnMockApplicationGetApplicationUserVisibleApp un-mock ApplicationGetApplicationUserVisibleApp method
func (r *Mock) UnMockApplicationGetApplicationUserVisibleApp() {
	r.mockApplicationGetApplicationUserVisibleApp = nil
}

// GetApplicationUserVisibleAppReq ...
type GetApplicationUserVisibleAppReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页起始位置标示，不填表示从头开始
	PageSize  *int64  `query:"page_size" json:"-"`  // 单页需求最大个数（最大 100），0 自动最大个数
	Lang      *string `query:"lang" json:"-"`       // 优先展示的应用信息的语言版本（zh_cn：中文，en_us：英文，ja_jp：日文）
	OpenID    *string `query:"open_id" json:"-"`    // 目标用户 open_id
	UserID    *string `query:"user_id" json:"-"`    // 目标用户 user_id，与 open_id 至少给其中之一，user_id 优先于 open_id
}

// getApplicationUserVisibleAppResp ...
type getApplicationUserVisibleAppResp struct {
	Code int64                             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUserVisibleAppResp `json:"data,omitempty"` // 返回的业务信息，仅 code = 0 时有效
}

// GetApplicationUserVisibleAppResp ...
type GetApplicationUserVisibleAppResp struct {
	PageToken  string                                   `json:"page_token,omitempty"`  // 下一个请求页应当给的起始位置
	PageSize   int64                                    `json:"page_size,omitempty"`   // 本次请求实际返回的页大小
	TotalCount int64                                    `json:"total_count,omitempty"` // 可用的应用总数
	HasMore    int64                                    `json:"has_more,omitempty"`    // 是否还有更多应用
	Lang       string                                   `json:"lang,omitempty"`        // 当前选择的版本语言
	AppList    *GetApplicationUserVisibleAppRespAppList `json:"app_list,omitempty"`    // 应用列表
}

// GetApplicationUserVisibleAppRespAppList ...
type GetApplicationUserVisibleAppRespAppList struct {
	AppID                string `json:"app_id,omitempty"`                 // 应用 ID
	PrimaryLanguage      string `json:"primary_language,omitempty"`       // 应用首选语言
	AppName              string `json:"app_name,omitempty"`               // 应用名称
	Description          string `json:"description,omitempty"`            // 应用描述
	AvatarURL            string `json:"avatar_url,omitempty"`             // 应用 icon
	AppSceneType         int64  `json:"app_scene_type,omitempty"`         // 应用类型，0：企业自建应用；1：应用商店应用
	Status               int64  `json:"status,omitempty"`                 // 启停状态，0：停用；1：启用
	MobileDefaultAbility int64  `json:"mobile_default_ability,omitempty"` // 移动端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
	PcDefaultAbility     int64  `json:"pc_default_ability,omitempty"`     // PC客户端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationVersion 根据 app_id，version_id 获取对应应用版本的信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/get
func (r *ApplicationService) GetApplicationVersion(ctx context.Context, request *GetApplicationVersionReq, options ...MethodOptionFunc) (*GetApplicationVersionResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationVersion != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationVersion mock enable")
		return r.cli.mock.mockApplicationGetApplicationVersion(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationVersion",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/app_versions/:version_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationVersionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationVersion mock ApplicationGetApplicationVersion method
func (r *Mock) MockApplicationGetApplicationVersion(f func(ctx context.Context, request *GetApplicationVersionReq, options ...MethodOptionFunc) (*GetApplicationVersionResp, *Response, error)) {
	r.mockApplicationGetApplicationVersion = f
}

// UnMockApplicationGetApplicationVersion un-mock ApplicationGetApplicationVersion method
func (r *Mock) UnMockApplicationGetApplicationVersion() {
	r.mockApplicationGetApplicationVersion = nil
}

// GetApplicationVersionReq ...
type GetApplicationVersionReq struct {
	Lang       string  `query:"lang" json:"-"`         // 应用信息的语言版本, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文, 最小长度：`1` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppID      string  `path:"app_id" json:"-"`        // 应用的 app_id，需要查询其他应用版本信息时，必须申请[获取应用版本信息](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)权限，仅查询本应用版本信息时，可填入 "me" 或者应用自身 app_id, 示例值："cli_9f3ca975326b501b"
	VersionID  string  `path:"version_id" json:"-"`    // 唯一标识应用版本的 ID, 示例值："oav_d317f090b7258ad0372aa53963cda70d"
}

// getApplicationVersionResp ...
type getApplicationVersionResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationVersionResp `json:"data,omitempty"`
}

// GetApplicationVersionResp ...
type GetApplicationVersionResp struct {
	AppVersion *GetApplicationVersionRespAppVersion `json:"app_version,omitempty"` // 应用版本信息
}

// GetApplicationVersionRespAppVersion ...
type GetApplicationVersionRespAppVersion struct {
	AppID            string                                      `json:"app_id,omitempty"`            // 应用 id
	Version          string                                      `json:"version,omitempty"`           // 在开发者后台填入的应用版本号
	VersionID        string                                      `json:"version_id,omitempty"`        // 唯一标识应用版本的 ID
	AppName          string                                      `json:"app_name,omitempty"`          // 应用默认名称
	AvatarURL        string                                      `json:"avatar_url,omitempty"`        // 应用头像 url
	Description      string                                      `json:"description,omitempty"`       // 应用默认描述
	Scopes           []*GetApplicationVersionRespAppVersionScope `json:"scopes,omitempty"`            // 应用权限列表
	BackHomeURL      string                                      `json:"back_home_url,omitempty"`     // 后台主页地址
	I18n             []*GetApplicationVersionRespAppVersionI18n  `json:"i18n,omitempty"`              // 应用的国际化信息列表
	CommonCategories []string                                    `json:"common_categories,omitempty"` // 应用分类的国际化描述
	Events           []string                                    `json:"events,omitempty"`            // 应用已订阅开放平台事件列表
	Status           int64                                       `json:"status,omitempty"`            // 版本状态, 可选值有: `0`：未知状态, `1`：审核通过, `2`：审核拒绝, `3`：审核中, `4`：未提交审核
	CreateTime       string                                      `json:"create_time,omitempty"`       // 版本创建时间（单位：s）
	PublishTime      string                                      `json:"publish_time,omitempty"`      // 版本发布时间（单位：s）
	Ability          *GetApplicationVersionRespAppVersionAbility `json:"ability,omitempty"`           // 当前版本下应用开启的能力
	Remark           *GetApplicationVersionRespAppVersionRemark  `json:"remark,omitempty"`            // 跟随应用版本的信息
}

// GetApplicationVersionRespAppVersionScope ...
type GetApplicationVersionRespAppVersionScope struct {
	Scope       string `json:"scope,omitempty"`       // 应用权限
	Description string `json:"description,omitempty"` // 应用权限的国际化描述
	Level       int64  `json:"level,omitempty"`       // 权限等级描述, 可选值有: `1`：普通权限, `2`：高级权限, `3`：超敏感权限, `0`：未知等级
}

// GetApplicationVersionRespAppVersionI18n ...
type GetApplicationVersionRespAppVersionI18n struct {
	I18nKey     string `json:"i18n_key,omitempty"`    // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name        string `json:"name,omitempty"`        // 应用国际化名称
	Description string `json:"description,omitempty"` // 应用国际化描述（副标题）
	HelpUse     string `json:"help_use,omitempty"`    // 帮助国际化文档链接
}

// GetApplicationVersionRespAppVersionAbility ...
type GetApplicationVersionRespAppVersionAbility struct {
	Gadget           *GetApplicationVersionRespAppVersionAbilityGadget            `json:"gadget,omitempty"`            // 小程序能力
	WebApp           *GetApplicationVersionRespAppVersionAbilityWebApp            `json:"web_app,omitempty"`           // 网页能力
	Bot              *GetApplicationVersionRespAppVersionAbilityBot               `json:"bot,omitempty"`               // 机器人能力
	WorkplaceWidgets []*GetApplicationVersionRespAppVersionAbilityWorkplaceWidget `json:"workplace_widgets,omitempty"` // 小组件能力
	Navigate         *GetApplicationVersionRespAppVersionAbilityNavigate          `json:"navigate,omitempty"`          // 主导航小程序
	CloudDoc         *GetApplicationVersionRespAppVersionAbilityCloudDoc          `json:"cloud_doc,omitempty"`         // 云文档应用
	DocsBlocks       []*GetApplicationVersionRespAppVersionAbilityDocsBlock       `json:"docs_blocks,omitempty"`       // 云文档小组件
	MessageAction    *GetApplicationVersionRespAppVersionAbilityMessageAction     `json:"message_action,omitempty"`    // 消息快捷操作
	PlusMenu         *GetApplicationVersionRespAppVersionAbilityPlusMenu          `json:"plus_menu,omitempty"`         // 加号菜单
}

// GetApplicationVersionRespAppVersionAbilityGadget ...
type GetApplicationVersionRespAppVersionAbilityGadget struct {
	EnablePcMode         int64    `json:"enable_pc_mode,omitempty"`          // pc 支持的小程序模式，bit 位表示, 可选值有: `1`：sidebar 模式, `2`：pc 模式, `4`：主导航模式
	SchemaURLs           []string `json:"schema_urls,omitempty"`             // schema url 列表
	PcUseMobilePkg       bool     `json:"pc_use_mobile_pkg,omitempty"`       // pc 端是否使用小程序版本
	PcVersion            string   `json:"pc_version,omitempty"`              // pc 的小程序版本号
	MobileVersion        string   `json:"mobile_version,omitempty"`          // 移动端小程序版本号
	MobileMinLarkVersion string   `json:"mobile_min_lark_version,omitempty"` // 移动端兼容的最低飞书版本
	PcMinLarkVersion     string   `json:"pc_min_lark_version,omitempty"`     // pc 端兼容的最低飞书版本
}

// GetApplicationVersionRespAppVersionAbilityWebApp ...
type GetApplicationVersionRespAppVersionAbilityWebApp struct {
	PcURL     string `json:"pc_url,omitempty"`     // pc 端 url
	MobileURL string `json:"mobile_url,omitempty"` // 移动端 url
}

// GetApplicationVersionRespAppVersionAbilityBot ...
type GetApplicationVersionRespAppVersionAbilityBot struct {
	CardRequestURL string `json:"card_request_url,omitempty"` // 消息卡片回调地址
}

// GetApplicationVersionRespAppVersionAbilityWorkplaceWidget ...
type GetApplicationVersionRespAppVersionAbilityWorkplaceWidget struct {
	MinLarkVersion string `json:"min_lark_version,omitempty"` // 最低兼容 lark 版本号
}

// GetApplicationVersionRespAppVersionAbilityNavigate ...
type GetApplicationVersionRespAppVersionAbilityNavigate struct {
	Pc     *GetApplicationVersionRespAppVersionAbilityNavigatePc     `json:"pc,omitempty"`     // pc 端主导航信息
	Mobile *GetApplicationVersionRespAppVersionAbilityNavigateMobile `json:"mobile,omitempty"` // 移动端主导航信息
}

// GetApplicationVersionRespAppVersionAbilityNavigatePc ...
type GetApplicationVersionRespAppVersionAbilityNavigatePc struct {
	Version       string `json:"version,omitempty"`         // 主导航小程序版本号
	ImageURL      string `json:"image_url,omitempty"`       // 默认图片 url
	HoverImageURL string `json:"hover_image_url,omitempty"` // 选中态图片 url
}

// GetApplicationVersionRespAppVersionAbilityNavigateMobile ...
type GetApplicationVersionRespAppVersionAbilityNavigateMobile struct {
	Version       string `json:"version,omitempty"`         // 主导航小程序版本号
	ImageURL      string `json:"image_url,omitempty"`       // 默认图片 url
	HoverImageURL string `json:"hover_image_url,omitempty"` // 选中态图片 url
}

// GetApplicationVersionRespAppVersionAbilityCloudDoc ...
type GetApplicationVersionRespAppVersionAbilityCloudDoc struct {
	SpaceURL string                                                    `json:"space_url,omitempty"` // 云空间重定向 url
	I18n     []*GetApplicationVersionRespAppVersionAbilityCloudDocI18n `json:"i18n,omitempty"`      // 国际化信息
	IconURL  string                                                    `json:"icon_url,omitempty"`  // 图标链接
	Mode     int64                                                     `json:"mode,omitempty"`      // 云文档支持模式, 可选值有: `0`：未知, `1`：移动端
}

// GetApplicationVersionRespAppVersionAbilityCloudDocI18n ...
type GetApplicationVersionRespAppVersionAbilityCloudDocI18n struct {
	I18nKey          string `json:"i18n_key,omitempty"`          // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name             string `json:"name,omitempty"`              // 云文档国际化名称
	ReadDescription  string `json:"read_description,omitempty"`  // 云文档国际化读权限说明
	WriteDescription string `json:"write_description,omitempty"` // 云文档国际化写权限说明
}

// GetApplicationVersionRespAppVersionAbilityDocsBlock ...
type GetApplicationVersionRespAppVersionAbilityDocsBlock struct {
	BlockTypeID   string                                                     `json:"block_type_id,omitempty"`   // BlockTypeID
	I18n          []*GetApplicationVersionRespAppVersionAbilityDocsBlockI18n `json:"i18n,omitempty"`            // block 的国际化信息
	MobileIconURL string                                                     `json:"mobile_icon_url,omitempty"` // 移动端 icon 链接
	PcIconURL     string                                                     `json:"pc_icon_url,omitempty"`     // pc 端口 icon 链接
}

// GetApplicationVersionRespAppVersionAbilityDocsBlockI18n ...
type GetApplicationVersionRespAppVersionAbilityDocsBlockI18n struct {
	I18nKey string `json:"i18n_key,omitempty"` // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name    string `json:"name,omitempty"`     // 名称
}

// GetApplicationVersionRespAppVersionAbilityMessageAction ...
type GetApplicationVersionRespAppVersionAbilityMessageAction struct {
	PcAppLink     string                                                         `json:"pc_app_link,omitempty"`     // pc 端链接
	MobileAppLink string                                                         `json:"mobile_app_link,omitempty"` // 移动端链接
	I18n          []*GetApplicationVersionRespAppVersionAbilityMessageActionI18n `json:"i18n,omitempty"`            // 国际化信息
}

// GetApplicationVersionRespAppVersionAbilityMessageActionI18n ...
type GetApplicationVersionRespAppVersionAbilityMessageActionI18n struct {
	I18nKey string `json:"i18n_key,omitempty"` // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name    string `json:"name,omitempty"`     // 国际化名称
}

// GetApplicationVersionRespAppVersionAbilityPlusMenu ...
type GetApplicationVersionRespAppVersionAbilityPlusMenu struct {
	PcAppLink     string `json:"pc_app_link,omitempty"`     // pc 端链接
	MobileAppLink string `json:"mobile_app_link,omitempty"` // 移动端链接
}

// GetApplicationVersionRespAppVersionRemark ...
type GetApplicationVersionRespAppVersionRemark struct {
	Remark       string                                               `json:"remark,omitempty"`        // 备注说明
	UpdateRemark string                                               `json:"update_remark,omitempty"` // 更新说明
	Visibility   *GetApplicationVersionRespAppVersionRemarkVisibility `json:"visibility,omitempty"`    // 应用当前版本开发者编辑的可见性建议，若开发者未编辑可见性建议，则该字段无内容
}

// GetApplicationVersionRespAppVersionRemarkVisibility ...
type GetApplicationVersionRespAppVersionRemarkVisibility struct {
	IsAll         bool                                                              `json:"is_all,omitempty"`         // 是否全员可见
	VisibleList   *GetApplicationVersionRespAppVersionRemarkVisibilityVisibleList   `json:"visible_list,omitempty"`   // 可见名单
	InvisibleList *GetApplicationVersionRespAppVersionRemarkVisibilityInvisibleList `json:"invisible_list,omitempty"` // 不可见名单
}

// GetApplicationVersionRespAppVersionRemarkVisibilityVisibleList ...
type GetApplicationVersionRespAppVersionRemarkVisibilityVisibleList struct {
	OpenIDs       []string `json:"open_ids,omitempty"`       // 可见性成员 open_id 列表
	DepartmentIDs []string `json:"department_ids,omitempty"` // 可见性部门的 id 列表
}

// GetApplicationVersionRespAppVersionRemarkVisibilityInvisibleList ...
type GetApplicationVersionRespAppVersionRemarkVisibilityInvisibleList struct {
	OpenIDs       []string `json:"open_ids,omitempty"`       // 可见性成员 open_id 列表
	DepartmentIDs []string `json:"department_ids,omitempty"` // 可见性部门的 id 列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApplicationVersion 通过接口来更新应用版本的审核结果：通过后应用可以直接上架；拒绝后则开发者可以看到拒绝理由，并在修改后再次申请发布。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/patch
func (r *ApplicationService) UpdateApplicationVersion(ctx context.Context, request *UpdateApplicationVersionReq, options ...MethodOptionFunc) (*UpdateApplicationVersionResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationVersion != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationVersion mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationVersion(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationVersion",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/app_versions/:version_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationVersionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplicationVersion mock ApplicationUpdateApplicationVersion method
func (r *Mock) MockApplicationUpdateApplicationVersion(f func(ctx context.Context, request *UpdateApplicationVersionReq, options ...MethodOptionFunc) (*UpdateApplicationVersionResp, *Response, error)) {
	r.mockApplicationUpdateApplicationVersion = f
}

// UnMockApplicationUpdateApplicationVersion un-mock ApplicationUpdateApplicationVersion method
func (r *Mock) UnMockApplicationUpdateApplicationVersion() {
	r.mockApplicationUpdateApplicationVersion = nil
}

// UpdateApplicationVersionReq ...
type UpdateApplicationVersionReq struct {
	UserIDType   IDType  `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	OperatorID   string  `query:"operator_id" json:"-"`   // 操作者的 open_id, 示例值："ou_4065981088f8ef67a504ba8bd6b24d85"
	RejectReason *string `query:"reject_reason" json:"-"` // 当修改版本状态为被驳回时，这一项必填, 示例值："拒绝理由"
	AppID        string  `path:"app_id" json:"-"`         // 应用 id, 示例值："cli_9f3ca975326b501b"
	VersionID    string  `path:"version_id" json:"-"`     // 唯一标识应用版本的 ID, 示例值："oav_d317f090b7258ad0372aa53963cda70d"
	Status       *int64  `json:"status,omitempty"`        // 版本状态, 示例值：1, 可选值有: `0`：未知状态, `1`：审核通过, `2`：审核拒绝, `3`：审核中, `4`：未提交审核
}

// updateApplicationVersionResp ...
type updateApplicationVersionResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UpdateApplicationVersionResp `json:"data,omitempty"`
}

// UpdateApplicationVersionResp ...
type UpdateApplicationVersionResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApproval
//
// 根据 Approval Code 获取某个审批定义的详情，用于构造创建审批实例的请求。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADNyUjLwQjM14CM0ITN
func (r *ApprovalService) GetApproval(ctx context.Context, request *GetApprovalReq, options ...MethodOptionFunc) (*GetApprovalResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApproval mock enable")
		return r.cli.mock.mockApprovalGetApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApproval",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/approval/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApproval mock ApprovalGetApproval method
func (r *Mock) MockApprovalGetApproval(f func(ctx context.Context, request *GetApprovalReq, options ...MethodOptionFunc) (*GetApprovalResp, *Response, error)) {
	r.mockApprovalGetApproval = f
}

// UnMockApprovalGetApproval un-mock ApprovalGetApproval method
func (r *Mock) UnMockApprovalGetApproval() {
	r.mockApprovalGetApproval = nil
}

// GetApprovalReq ...
type GetApprovalReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	Locale       *string `json:"locale,omitempty"`        // zh-CN - 中文<br>en-US - 英文  <br>ja-JP - 日文
}

// getApprovalResp ...
type getApprovalResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalResp `json:"data,omitempty"` // 返回业务信息
}

// GetApprovalResp ...
type GetApprovalResp struct {
	ApprovalName string                   `json:"approval_name,omitempty"` // 审批名称
	Status       string                   `json:"status,omitempty"`        // 审批定义状态<br>ACTIVE -已启用<br>INACTIVE -已停用<br>DELETED -已删除<br>UNKNOWN -未知
	Form         ApprovalWidgetList       `json:"form,omitempty"`          // json 数组，**控件信息**
	NodeList     []*GetApprovalRespNode   `json:"node_list,omitempty"`     // 节点信息
	Viewers      []*GetApprovalRespViewer `json:"viewers,omitempty"`       // 可见人列表
}

// GetApprovalRespNode ...
type GetApprovalRespNode struct {
	Name         string  `json:"name,omitempty"`           // 节点名称
	NeedApprover bool    `json:"need_approver,omitempty"`  // 是否发起人自选节点<br>true - 发起审批时需要提交审批人
	NodeID       string  `json:"node_id,omitempty"`        // 节点 ID
	CustomNodeID *string `json:"custom_node_id,omitempty"` // 节点自定义 ID，如果没有设置则不返回
	NodeType     string  `json:"node_type,omitempty"`      // 审批方式<br>AND -会签<br>OR - 或签<br>SEQUENTIAL -依次审批<br>CC_NODE -抄送节点
}

// GetApprovalRespViewer ...
type GetApprovalRespViewer struct {
	Type   string  `json:"type,omitempty"`    // 可见人类型，分别有：<br>TENANT：租户内可见<br>DEPARTMENT：指定部门<br> USER：指定用户<br> ROLE：指定角色<br> USER_GROUP：指定用户组<br>NONE：任何人都不可见
	OpenID *string `json:"open_id,omitempty"` // 在可见人类型为DEPARTMENT时，open_id为部门的open_id<br>在可见人类型为USER时，open_id为用户的open_id<br>在可见人类型为ROLE时，open_id为角色的open_id<br>在可见人类型为USER_GROUP时，open_id为用户组的open_id
	UserID *string `json:"user_id,omitempty"` // 在可见人类型为USER时，表示可见人用户id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateApprovalCarbonCopy
//
// 通过接口可以将当前审批实例抄送给其他人。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADOzYjLwgzM24CM4MjN
func (r *ApprovalService) CreateApprovalCarbonCopy(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error) {
	if r.cli.mock.mockApprovalCreateApprovalCarbonCopy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CreateApprovalCarbonCopy mock enable")
		return r.cli.mock.mockApprovalCreateApprovalCarbonCopy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CreateApprovalCarbonCopy",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/cc",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createApprovalCarbonCopyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCreateApprovalCarbonCopy mock ApprovalCreateApprovalCarbonCopy method
func (r *Mock) MockApprovalCreateApprovalCarbonCopy(f func(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error)) {
	r.mockApprovalCreateApprovalCarbonCopy = f
}

// UnMockApprovalCreateApprovalCarbonCopy un-mock ApprovalCreateApprovalCarbonCopy method
func (r *Mock) UnMockApprovalCreateApprovalCarbonCopy() {
	r.mockApprovalCreateApprovalCarbonCopy = nil
}

// CreateApprovalCarbonCopyReq ...
type CreateApprovalCarbonCopyReq struct {
	ApprovalCode string   `json:"approval_code,omitempty"` // 审批定义 code
	InstanceCode string   `json:"instance_code,omitempty"` // 审批实例 code
	UserID       *string  `json:"user_id,omitempty"`       // 发起抄送的人的 user_id
	OpenID       *string  `json:"open_id,omitempty"`       // 发起抄送的人的 open_id，如果传了 user_id 则优先使用 user_id，二者不能同时为空
	CcUserIDs    []string `json:"cc_user_ids,omitempty"`   // 被抄送人的 user_id 列表
	CcOpenIDs    []string `json:"cc_open_ids,omitempty"`   // 被抄送人的 open_id 列表，与 cc_user_ids 不可同时为空
	Comment      *string  `json:"comment,omitempty"`       // 抄送留言
}

// createApprovalCarbonCopyResp ...
type createApprovalCarbonCopyResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *CreateApprovalCarbonCopyResp `json:"data,omitempty"`
}

// CreateApprovalCarbonCopyResp ...
type CreateApprovalCarbonCopyResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchApprovalCarbonCopy
//
// 该接口通过不同条件查询审批系统中符合条件的审批抄送列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUjMxYjL1ITM24SNyEjN
func (r *ApprovalService) SearchApprovalCarbonCopy(ctx context.Context, request *SearchApprovalCarbonCopyReq, options ...MethodOptionFunc) (*SearchApprovalCarbonCopyResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalCarbonCopy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalCarbonCopy mock enable")
		return r.cli.mock.mockApprovalSearchApprovalCarbonCopy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalCarbonCopy",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/cc/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalCarbonCopyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalCarbonCopy mock ApprovalSearchApprovalCarbonCopy method
func (r *Mock) MockApprovalSearchApprovalCarbonCopy(f func(ctx context.Context, request *SearchApprovalCarbonCopyReq, options ...MethodOptionFunc) (*SearchApprovalCarbonCopyResp, *Response, error)) {
	r.mockApprovalSearchApprovalCarbonCopy = f
}

// UnMockApprovalSearchApprovalCarbonCopy un-mock ApprovalSearchApprovalCarbonCopy method
func (r *Mock) UnMockApprovalSearchApprovalCarbonCopy() {
	r.mockApprovalSearchApprovalCarbonCopy = nil
}

// SearchApprovalCarbonCopyReq ...
type SearchApprovalCarbonCopyReq struct {
	UserID             *string `json:"user_id,omitempty"`              // 用户 id
	ApprovalCode       *string `json:"approval_code,omitempty"`        // 审批定义 code
	InstanceCode       *string `json:"instance_code,omitempty"`        // 审批实例 code
	InstanceExternalID *string `json:"instance_external_id,omitempty"` // 审批实例第三方 id<br>注：和 approval_code 取并集
	GroupExternalID    *string `json:"group_external_id,omitempty"`    // 审批定义分组第三方 id<br>注：和 instance_code 取并集
	CcTitle            *string `json:"cc_title,omitempty"`             // 审批抄送标题（只有第三方审批有）
	ReadStatus         *string `json:"read_status,omitempty"`          // 审批抄送状态<br>READ:  已读<br>UNREAD: 未读<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	CcCreateTimeFrom   *int64  `json:"CcCreateTimeFrom,omitempty"`     // 抄送查询开始时间 (unix毫秒时间戳)
	CcCreateTimeTo     *int64  `json:"CcCreateTimeTo,omitempty"`       // 抄送查询结束时间 (unix毫秒时间戳)
	Locale             *string `json:"locale,omitempty"`               // 地区 （zh-CN、en-US、ja-JP）
	Offset             *int64  `json:"offset,omitempty"`               // 查询偏移量<br>注：不得超过10000
	Limit              *int64  `json:"limit,omitempty"`                // 查询限制量<br>注：不得超过200<br>不设置默认查询10条数据
}

// searchApprovalCarbonCopyResp ...
type searchApprovalCarbonCopyResp struct {
	Code int64                         `json:"code,omitempty"` // 是
	Msg  string                        `json:"msg,omitempty"`  // 是
	Data *SearchApprovalCarbonCopyResp `json:"data,omitempty"` // 返回业务信息
}

// SearchApprovalCarbonCopyResp ...
type SearchApprovalCarbonCopyResp struct {
}

// SearchApprovalCarbonCopyRespApproval ...
type SearchApprovalCarbonCopyRespApproval struct {
	Code       string                                        `json:"code,omitempty"`        // 审批定义 code
	Name       string                                        `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                          `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalCarbonCopyRespApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalCarbonCopyRespApprovalExternal ...
type SearchApprovalCarbonCopyRespApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalCarbonCopyRespGroup ...
type SearchApprovalCarbonCopyRespGroup struct {
	ExternalID string `json:"external_id,omitempty"` // 审批定义分组外部 id
	Name       string `json:"name,omitempty"`        // 审批定义分组名称
}

// SearchApprovalCarbonCopyRespInstance ...
type SearchApprovalCarbonCopyRespInstance struct {
	Code       string                                    `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                    `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                    `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                     `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                     `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                    `json:"status,omitempty"`      // 审批实例状态
	Title      string                                    `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                    `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                    `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalCarbonCopyRespInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalCarbonCopyRespInstanceLink ...
type SearchApprovalCarbonCopyRespInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

// SearchApprovalCarbonCopyRespCc ...
type SearchApprovalCarbonCopyRespCc struct {
	UserID     string                              `json:"user_id,omitempty"`     // 审批抄送发起人 id
	CreateTime int64                               `json:"create_time,omitempty"` // 审批抄送开始时间
	ReadStatus string                              `json:"read_status,omitempty"` // 审批抄送状态
	Title      string                              `json:"title,omitempty"`       // 审批抄送名称
	Extra      string                              `json:"extra,omitempty"`       // 审批抄送扩展字段
	Link       *SearchApprovalCarbonCopyRespCcLink `json:"link,omitempty"`        // 审批抄送链接
}

// SearchApprovalCarbonCopyRespCcLink ...
type SearchApprovalCarbonCopyRespCcLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批抄送 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批抄送移动端链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApprovalExternalList
//
// 该接口用于获取三方审批的状态。用户传入查询条件，接口返回满足条件的审批实例的状态。
// 该接口支持多种参数的组合, 包括如下组合：
// 1. 通过 instance_ids 获取指定实例的任务状态
// 2. 通过 user_ids 获取指定用户的任务状态
// 3. 通过 status 获取指定状态的所有任务
// 4. 获取下一批数据
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukjNyYjL5YjM24SO2IjN/external_status
func (r *ApprovalService) GetApprovalExternalList(ctx context.Context, request *GetApprovalExternalListReq, options ...MethodOptionFunc) (*GetApprovalExternalListResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalExternalList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalExternalList mock enable")
		return r.cli.mock.mockApprovalGetApprovalExternalList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalExternalList",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/external/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalExternalListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalExternalList mock ApprovalGetApprovalExternalList method
func (r *Mock) MockApprovalGetApprovalExternalList(f func(ctx context.Context, request *GetApprovalExternalListReq, options ...MethodOptionFunc) (*GetApprovalExternalListResp, *Response, error)) {
	r.mockApprovalGetApprovalExternalList = f
}

// UnMockApprovalGetApprovalExternalList un-mock ApprovalGetApprovalExternalList method
func (r *Mock) UnMockApprovalGetApprovalExternalList() {
	r.mockApprovalGetApprovalExternalList = nil
}

// GetApprovalExternalListReq ...
type GetApprovalExternalListReq struct {
	ApprovalCodes []string `json:"approval_codes,omitempty"` // 审批定义 Code，用于指定只获取这些定义下的数据
	InstanceIDs   []string `json:"instance_ids,omitempty"`   // 审批实例 ID, 用于指定只获取这些实例下的数据，最多支持 20 个
	UserIDs       []string `json:"user_ids,omitempty"`       // 审批人 user_id，用于指定只获取这些用户的数据
	Status        *string  `json:"status,omitempty"`         // 审批任务状态，用于指定获取该状态下的数据，状态值参照 [三方审批任务状态枚举](https://open.feishu.cn/document/ukTMukTMukTM/uczM3UjL3MzN14yNzcTN)
	ScrollID      *string  `json:"scroll_id,omitempty"`      // 通过 status 获取所有任务的请求，数据是分批返回的，使用 scroll_id 获取下一批数据
}

// getApprovalExternalListResp ...
type getApprovalExternalListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  *string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalExternalListResp `json:"data,omitempty"`
}

// GetApprovalExternalListResp ...
type GetApprovalExternalListResp struct {
	InstanceID   string                             `json:"instance_id,omitempty"`   // 审批实例 ID
	ApprovalCode string                             `json:"approval_code,omitempty"` // 审批对应的 approval_code
	ApprovalID   string                             `json:"approval_id,omitempty"`   // 审批的id
	Status       string                             `json:"status,omitempty"`        // 审批实例当前的状态，参考[三方审批实例状态枚举](https://open.feishu.cn/document/ukTMukTMukTM/uczM3UjL3MzN14yNzcTN)
	UpdateTime   int64                              `json:"update_time,omitempty"`   // 审批实例最后更新时间，单位 毫秒
	Tasks        []*GetApprovalExternalListRespTask `json:"tasks,omitempty"`         // 审批实例下的审批任务
}

// GetApprovalExternalListRespTask ...
type GetApprovalExternalListRespTask struct {
	ID         string `json:"id,omitempty"`          // 审批任务 ID
	Status     string `json:"status,omitempty"`      // 审批任务状态，状态值参照 [三方审批任务状态枚举](https://open.feishu.cn/document/ukTMukTMukTM/uczM3UjL3MzN14yNzcTN)
	UpdateTime int64  `json:"update_time,omitempty"` // 审批任务最后更新时间，单位 毫秒
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadApprovalFile
//
// 当审批表单中有图片或附件控件时，开发者需在创建审批实例前通过审批上传文件接口将文件上传到审批系统，且附件上传大小限制为50M，图片上传大小为10M。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDOyUjL1gjM14SN4ITN
func (r *ApprovalService) UploadApprovalFile(ctx context.Context, request *UploadApprovalFileReq, options ...MethodOptionFunc) (*UploadApprovalFileResp, *Response, error) {
	if r.cli.mock.mockApprovalUploadApprovalFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#UploadApprovalFile mock enable")
		return r.cli.mock.mockApprovalUploadApprovalFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "UploadApprovalFile",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/file/upload",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadApprovalFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalUploadApprovalFile mock ApprovalUploadApprovalFile method
func (r *Mock) MockApprovalUploadApprovalFile(f func(ctx context.Context, request *UploadApprovalFileReq, options ...MethodOptionFunc) (*UploadApprovalFileResp, *Response, error)) {
	r.mockApprovalUploadApprovalFile = f
}

// UnMockApprovalUploadApprovalFile un-mock ApprovalUploadApprovalFile method
func (r *Mock) UnMockApprovalUploadApprovalFile() {
	r.mockApprovalUploadApprovalFile = nil
}

// UploadApprovalFileReq ...
type UploadApprovalFileReq struct {
	Name    string    `json:"name,omitempty"`    // 文件名（需包含文件扩展名，如“文件.doc”
	Type    string    `json:"type,omitempty"`    // 文件类型（image 或 attachment）
	Content io.Reader `json:"content,omitempty"` // 文件
}

// uploadApprovalFileResp ...
type uploadApprovalFileResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                  `json:"msg,omitempty"`  // 返回码的描述
	Data *UploadApprovalFileResp `json:"data,omitempty"` // 返回业务信息
}

// UploadApprovalFileResp ...
type UploadApprovalFileResp struct {
	Code string `json:"code,omitempty"` // 文件标识码（用于创建审批实例）
	URL  string `json:"url,omitempty"`  // 文件 url
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApprovalUserTaskList 根据用户和任务分组查询任务列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/query
func (r *ApprovalService) GetApprovalUserTaskList(ctx context.Context, request *GetApprovalUserTaskListReq, options ...MethodOptionFunc) (*GetApprovalUserTaskListResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalUserTaskList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalUserTaskList mock enable")
		return r.cli.mock.mockApprovalGetApprovalUserTaskList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalUserTaskList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getApprovalUserTaskListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalUserTaskList mock ApprovalGetApprovalUserTaskList method
func (r *Mock) MockApprovalGetApprovalUserTaskList(f func(ctx context.Context, request *GetApprovalUserTaskListReq, options ...MethodOptionFunc) (*GetApprovalUserTaskListResp, *Response, error)) {
	r.mockApprovalGetApprovalUserTaskList = f
}

// UnMockApprovalGetApprovalUserTaskList un-mock ApprovalGetApprovalUserTaskList method
func (r *Mock) UnMockApprovalGetApprovalUserTaskList() {
	r.mockApprovalGetApprovalUserTaskList = nil
}

// GetApprovalUserTaskListReq ...
type GetApprovalUserTaskListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：100, 最大值：`200`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1"
	UserID     string  `query:"user_id" json:"-"`      // 需要查询的 User ID, 示例值："example_user_id"
	Topic      string  `query:"topic" json:"-"`        // 需要查询的任务分组主题，如「待办」、「已办」等, 示例值："1", 可选值有: `1`：待办审批, `2`：已办审批, `3`：已发起审批, `17`：未读知会, `18`：已读知会
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getApprovalUserTaskListResp ...
type getApprovalUserTaskListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetApprovalUserTaskListResp `json:"data,omitempty"`
}

// GetApprovalUserTaskListResp ...
type GetApprovalUserTaskListResp struct {
	Tasks     []*GetApprovalUserTaskListRespTask `json:"tasks,omitempty"`      // 任务列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
	Count     *GetApprovalUserTaskListRespCount  `json:"count,omitempty"`      // 列表计数，只在分页第一页返回
}

// GetApprovalUserTaskListRespTask ...
type GetApprovalUserTaskListRespTask struct {
	Topic               string                               `json:"topic,omitempty"`                 // 任务所属的任务分组，如「待办」、「已办」等, 可选值有: `1`：待办审批, `2`：已办审批, `3`：已发起审批, `17`：未读知会, `18`：已读知会
	UserID              string                               `json:"user_id,omitempty"`               // 任务所属的用户 ID
	Title               string                               `json:"title,omitempty"`                 // 任务题目
	URLs                *GetApprovalUserTaskListRespTaskURLs `json:"urls,omitempty"`                  // 任务相关 URL
	ProcessExternalID   string                               `json:"process_external_id,omitempty"`   // 流程三方 ID，仅第三方流程，需要在当前租户、当前 APP 内唯一
	TaskExternalID      string                               `json:"task_external_id,omitempty"`      // 任务三方 ID，仅第三方流程，需要在当前流程实例内唯一
	Status              string                               `json:"status,omitempty"`                // 任务状态, 可选值有: `1`：待办, `2`：已办, `17`：未读, `18`：已读, `33`：处理中，标记完成用, `34`：撤回
	ProcessStatus       string                               `json:"process_status,omitempty"`        // 流程实例状态, 可选值有: `0`：无流程状态，不展示对应标签, `1`：流程实例流转中, `2`：已通过, `3`：已拒绝, `4`：已撤销, `5`：已终止
	DefinitionCode      string                               `json:"definition_code,omitempty"`       // 流程定义 Code
	Initiators          []string                             `json:"initiators,omitempty"`            // 发起人 ID 列表
	InitiatorNames      []string                             `json:"initiator_names,omitempty"`       // 发起人姓名列表
	TaskID              string                               `json:"task_id,omitempty"`               // 任务 ID，全局唯一
	ProcessID           string                               `json:"process_id,omitempty"`            // 流程 ID，全局唯一
	ProcessCode         string                               `json:"process_code,omitempty"`          // 流程 Code
	DefinitionGroupID   string                               `json:"definition_group_id,omitempty"`   // 流程定义分组 ID
	DefinitionGroupName string                               `json:"definition_group_name,omitempty"` // 流程定义分组名称
	DefinitionID        string                               `json:"definition_id,omitempty"`         // 流程定义 ID
	DefinitionName      string                               `json:"definition_name,omitempty"`       // 流程定义名称
}

// GetApprovalUserTaskListRespTaskURLs ...
type GetApprovalUserTaskListRespTaskURLs struct {
	Helpdesk string `json:"helpdesk,omitempty"` // 帮助服务台 URL
	Mobile   string `json:"mobile,omitempty"`   // 移动端 URL
	Pc       string `json:"pc,omitempty"`       // PC 端 URL
}

// GetApprovalUserTaskListRespCount ...
type GetApprovalUserTaskListRespCount struct {
	Total   int64 `json:"total,omitempty"`    // 总数，大于等于 1000 个项目时将返回 999
	HasMore bool  `json:"has_more,omitempty"` // 还有更多，当大于等于 1000 时将返回 true
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddApprovalInstanceSign
//
// 对于单个审批任务进行加签操作。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-task-addsign
func (r *ApprovalService) AddApprovalInstanceSign(ctx context.Context, request *AddApprovalInstanceSignReq, options ...MethodOptionFunc) (*AddApprovalInstanceSignResp, *Response, error) {
	if r.cli.mock.mockApprovalAddApprovalInstanceSign != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#AddApprovalInstanceSign mock enable")
		return r.cli.mock.mockApprovalAddApprovalInstanceSign(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "AddApprovalInstanceSign",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/add_sign",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(addApprovalInstanceSignResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalAddApprovalInstanceSign mock ApprovalAddApprovalInstanceSign method
func (r *Mock) MockApprovalAddApprovalInstanceSign(f func(ctx context.Context, request *AddApprovalInstanceSignReq, options ...MethodOptionFunc) (*AddApprovalInstanceSignResp, *Response, error)) {
	r.mockApprovalAddApprovalInstanceSign = f
}

// UnMockApprovalAddApprovalInstanceSign un-mock ApprovalAddApprovalInstanceSign method
func (r *Mock) UnMockApprovalAddApprovalInstanceSign() {
	r.mockApprovalAddApprovalInstanceSign = nil
}

// AddApprovalInstanceSignReq ...
type AddApprovalInstanceSignReq struct {
	ApprovalCode   string   `json:"approval_code,omitempty"`     // 审批定义 Code
	InstanceCode   string   `json:"instance_code,omitempty"`     // 审批实例 Code
	UserID         string   `json:"user_id,omitempty"`           // 操作用户
	TaskID         string   `json:"task_id,omitempty"`           // 任务 ID<br>审批实例详情task_list中id，详情请参考[](https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN)
	Comment        *string  `json:"comment,omitempty"`           // 意见
	AddSignUserIDs []string `json:"add_sign_user_ids,omitempty"` // 被加签人id
	AddSignType    string   `json:"add_sign_type,omitempty"`     // 1/2/3分别代表前加签/后加签/并加签
	ApprovalMethod *string  `json:"approval_method,omitempty"`   // 仅在前加签、后加签时需要填写，1/2 分别代表或签/会签
}

// addApprovalInstanceSignResp ...
type addApprovalInstanceSignResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *AddApprovalInstanceSignResp `json:"data,omitempty"`
}

// AddApprovalInstanceSignResp ...
type AddApprovalInstanceSignResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ApproveApprovalInstance
//
// 对于单个审批任务进行同意操作。同意后审批流程会流转到下一个审批人。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMDNyUjLzQjM14yM0ITN
func (r *ApprovalService) ApproveApprovalInstance(ctx context.Context, request *ApproveApprovalInstanceReq, options ...MethodOptionFunc) (*ApproveApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalApproveApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#ApproveApprovalInstance mock enable")
		return r.cli.mock.mockApprovalApproveApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "ApproveApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/approve",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(approveApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalApproveApprovalInstance mock ApprovalApproveApprovalInstance method
func (r *Mock) MockApprovalApproveApprovalInstance(f func(ctx context.Context, request *ApproveApprovalInstanceReq, options ...MethodOptionFunc) (*ApproveApprovalInstanceResp, *Response, error)) {
	r.mockApprovalApproveApprovalInstance = f
}

// UnMockApprovalApproveApprovalInstance un-mock ApprovalApproveApprovalInstance method
func (r *Mock) UnMockApprovalApproveApprovalInstance() {
	r.mockApprovalApproveApprovalInstance = nil
}

// ApproveApprovalInstanceReq ...
type ApproveApprovalInstanceReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code
	OpenID       *string `json:"open_id,omitempty"`       // 用户open_id，如果没有user_id，必须要有open_id
	UserID       string  `json:"user_id,omitempty"`       // 操作用户
	TaskID       string  `json:"task_id,omitempty"`       // 任务 ID<br>审批实例详情task_list中id，详情请参考[](https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN)
	Comment      *string `json:"comment,omitempty"`       // 意见
}

// approveApprovalInstanceResp ...
type approveApprovalInstanceResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *ApproveApprovalInstanceResp `json:"data,omitempty"`
}

// ApproveApprovalInstanceResp ...
type ApproveApprovalInstanceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CancelApprovalInstance
//
// 对于状态为“审批中”的单个审批实例进行撤销操作，撤销后审批流程结束
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDNyUjL2QjM14iN0ITN
func (r *ApprovalService) CancelApprovalInstance(ctx context.Context, request *CancelApprovalInstanceReq, options ...MethodOptionFunc) (*CancelApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalCancelApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CancelApprovalInstance mock enable")
		return r.cli.mock.mockApprovalCancelApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CancelApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/cancel",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(cancelApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCancelApprovalInstance mock ApprovalCancelApprovalInstance method
func (r *Mock) MockApprovalCancelApprovalInstance(f func(ctx context.Context, request *CancelApprovalInstanceReq, options ...MethodOptionFunc) (*CancelApprovalInstanceResp, *Response, error)) {
	r.mockApprovalCancelApprovalInstance = f
}

// UnMockApprovalCancelApprovalInstance un-mock ApprovalCancelApprovalInstance method
func (r *Mock) UnMockApprovalCancelApprovalInstance() {
	r.mockApprovalCancelApprovalInstance = nil
}

// CancelApprovalInstanceReq ...
type CancelApprovalInstanceReq struct {
	ApprovalCode  string `json:"approval_code,omitempty"` // 审批定义Code
	InstanceCode  string `json:"instance_code,omitempty"` // 审批实例Code
	UserID        string `json:"user_id,omitempty"`       // 操作用户
	OpenID        string `json:"open_id,omitempty"`       // 某个应用下用户的唯一标识，根据userID、openID、TenantId获得Lark用户。
	NotifyStarter *bool  `json:"notifyStarter,omitempty"` // 如果为true，撤回实例的时候会收到一条消息提醒。
}

// cancelApprovalInstanceResp ...
type cancelApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *CancelApprovalInstanceResp `json:"data,omitempty"`
}

// CancelApprovalInstanceResp ...
type CancelApprovalInstanceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateApprovalInstance
//
// 创建一个审批实例，调用方需对审批定义的表单有详细了解，将按照定义的表单结构，将表单 Value 通过接口传入。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIDNyUjLyQjM14iM0ITN
func (r *ApprovalService) CreateApprovalInstance(ctx context.Context, request *CreateApprovalInstanceReq, options ...MethodOptionFunc) (*CreateApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalCreateApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CreateApprovalInstance mock enable")
		return r.cli.mock.mockApprovalCreateApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CreateApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCreateApprovalInstance mock ApprovalCreateApprovalInstance method
func (r *Mock) MockApprovalCreateApprovalInstance(f func(ctx context.Context, request *CreateApprovalInstanceReq, options ...MethodOptionFunc) (*CreateApprovalInstanceResp, *Response, error)) {
	r.mockApprovalCreateApprovalInstance = f
}

// UnMockApprovalCreateApprovalInstance un-mock ApprovalCreateApprovalInstance method
func (r *Mock) UnMockApprovalCreateApprovalInstance() {
	r.mockApprovalCreateApprovalInstance = nil
}

// CreateApprovalInstanceReq ...
type CreateApprovalInstanceReq struct {
	ApprovalCode           string              `json:"approval_code,omitempty"`              // 审批定义 code
	UserID                 *string             `json:"user_id,omitempty"`                    // 发起审批用户
	OpenID                 string              `json:"open_id,omitempty"`                    // 发起审批用户 open id, 如果传了 user_id 则优先使用 user_id
	DepartmentID           *string             `json:"department_id,omitempty"`              // 发起审批用户部门id，如果用户只属于一个部门，可以不填。如果属于多个部门，默认会选择部门列表第一个部门
	Form                   ApprovalWidgetList  `json:"form,omitempty"`                       // json 数组，**控件值**
	NodeApproverUserIDList map[string][]string `json:"node_approver_user_id_list,omitempty"` // 如果有发起人自选节点，则需要填写对应节点的审批人<br>key:  node id 或 custom node id , 通过 [查看审批定义](https://open.feishu.cn/document/ukTMukTMukTM/uADNyUjLwQjM14CM0ITN) 获取<br> value: 审批人列表
	NodeApproverOpenIDList map[string][]string `json:"node_approver_open_id_list,omitempty"` // 审批人发起人自选 open id，与上述node_approver_user_id_list字段取并集
	NodeCcUserIDList       map[string][]string `json:"node_cc_user_id_list,omitempty"`       // 如果有发起人自选节点，则可填写对应节点的抄送人<br>key:  node id 或 custom node id , 通过 [查看审批定义](https://open.feishu.cn/document/ukTMukTMukTM/uADNyUjLwQjM14CM0ITN) 获取<br> value: 审批人列表<br>单个节点最多选择20位抄送人
	NodeCcOpenIDList       map[string][]string `json:"node_cc_open_id_list,omitempty"`       // 抄送人发起人自选 open id<br>单个节点最多选择20位抄送人
	UUID                   *string             `json:"uuid,omitempty"`                       // 审批实例 uuid，用于幂等操作, 每个租户下面的唯一key，同一个 uuid 只能用于创建一个审批实例，如果冲突，返回错误码 60012 ，格式建议为 XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX，不区分大小写
}

// createApprovalInstanceResp ...
type createApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *CreateApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// CreateApprovalInstanceResp ...
type CreateApprovalInstanceResp struct {
	InstanceCode string `json:"instance_code,omitempty"` // 审批实例 Code
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApprovalInstance
//
// 通过审批实例 Instance Code  获取审批实例详情。Instance Code 由 [批量获取审批实例](https://open.feishu.cn/document/ukTMukTMukTM/uQDOyUjL0gjM14CN4ITN) 接口获取。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN
func (r *ApprovalService) GetApprovalInstance(ctx context.Context, request *GetApprovalInstanceReq, options ...MethodOptionFunc) (*GetApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalInstance mock enable")
		return r.cli.mock.mockApprovalGetApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalInstance mock ApprovalGetApprovalInstance method
func (r *Mock) MockApprovalGetApprovalInstance(f func(ctx context.Context, request *GetApprovalInstanceReq, options ...MethodOptionFunc) (*GetApprovalInstanceResp, *Response, error)) {
	r.mockApprovalGetApprovalInstance = f
}

// UnMockApprovalGetApprovalInstance un-mock ApprovalGetApprovalInstance method
func (r *Mock) UnMockApprovalGetApprovalInstance() {
	r.mockApprovalGetApprovalInstance = nil
}

// GetApprovalInstanceReq ...
type GetApprovalInstanceReq struct {
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code, 若在创建的时候传了uuid, 也可以通过传uuid获取
	Locale       *string `json:"locale,omitempty"`        // zh-CN - 中文<br>en-US - 英文<br>ja-JP - 日文
	UserID       *string `json:"user_id,omitempty"`       // 发起审批用户,平台级审批时使用
	OpenID       *string `json:"open_id,omitempty"`       // 发起审批用户 open id
}

// getApprovalInstanceResp ...
type getApprovalInstanceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// GetApprovalInstanceResp ...
type GetApprovalInstanceResp struct {
	ApprovalCode string                             `json:"approval_code,omitempty"` // 审批定义 Code
	ApprovalName string                             `json:"approval_name,omitempty"` // 审批名称
	StartTime    int64                              `json:"start_time,omitempty"`    // 审批创建时间
	EndTime      int64                              `json:"end_time,omitempty"`      // 审批完成时间，未完成为 0
	UserID       string                             `json:"user_id,omitempty"`       // 发起审批用户
	OpenID       string                             `json:"open_id,omitempty"`       // 发起审批用户 open id
	SerialNumber string                             `json:"serial_number,omitempty"` // 审批单编号
	DepartmentID string                             `json:"department_id,omitempty"` // 发起审批用户所在部门
	Status       string                             `json:"status,omitempty"`        // 审批实例状态<br>PENDING    - 审批中<br>APPROVED - 通过<br>REJECTED  - 拒绝<br>CANCELED -  撤回<br>DELETED    -  删除
	UUID         string                             `json:"uuid,omitempty"`          // 用户的唯一标识id
	Form         ApprovalWidgetList                 `json:"form,omitempty"`          // json字符串，**控件值**
	TaskList     []*GetApprovalInstanceRespTask     `json:"task_list,omitempty"`     // 审批任务列表
	CommentList  []*GetApprovalInstanceRespComment  `json:"comment_list,omitempty"`  // 评论列表
	Timeline     []*GetApprovalInstanceRespTimeline `json:"timeline,omitempty"`      // 审批动态
}

// GetApprovalInstanceRespTask ...
type GetApprovalInstanceRespTask struct {
	ID           string  `json:"id,omitempty"`             // task id
	UserID       *string `json:"user_id,omitempty"`        // 审批人<br>自动通过、自动拒绝 task user_id 为空
	OpenID       *string `json:"open_id,omitempty"`        // 审批人 open id
	Status       string  `json:"status,omitempty"`         // 任务状态<br>PENDING - 审批中<br>APPROVED - 同意<br>REJECTED  - 拒绝<br>TRANSFERRED - 已转交<br>DONE -  完成
	NodeID       *string `json:"node_id,omitempty"`        // task 所属节点 id
	NodeName     *string `json:"node_name,omitempty"`      // task 所属节点名称
	CustomNodeID *string `json:"custom_node_id,omitempty"` // task 所属节点自定义 id, 如果没设置自定义 id, 则不返回该字段
	Type         string  `json:"type,omitempty"`           // 审批方式<br>AND -会签<br>OR - 或签<br>AUTO_PASS -自动通过<br>AUTO_REJECT - 自动拒绝<br>SEQUENTIAL - 按顺序
	StartTime    int64   `json:"start_time,omitempty"`     // task 开始时间
	EndTime      int64   `json:"end_time,omitempty"`       // task 完成时间, 未完成为 0
}

// GetApprovalInstanceRespComment ...
type GetApprovalInstanceRespComment struct {
	ID         string `json:"id,omitempty"`          // comment id
	UserID     string `json:"user_id,omitempty"`     // 发表评论用户
	OpenID     string `json:"open_id,omitempty"`     // 发表评论用户 open id
	Comment    string `json:"comment,omitempty"`     // 评论内容
	CreateTime int64  `json:"create_time,omitempty"` // 评论时间
}

// GetApprovalInstanceRespTimeline ...
type GetApprovalInstanceRespTimeline struct {
	Type                 string                                   `json:"type,omitempty"`                   // 动态类型，不同类型 ext 内的 user_id_list 含义不一样<br>START - 审批开始<br>PASS - 通过<br>REJECT  - 拒绝<br>AUTO_PASS -  自动通过<br>AUTO_REJECT - 自动拒绝<br>REMOVE_REPEAT - 去重<br>TRANSFER - 转交 <br>ADD_APPROVER_BEFORE  - 前加签<br>ADD_APPROVER -  并加签<br>ADD_APPROVER_AFTER -  后加签 <br>DELETE_APPROVER  - 减签<br>ROLLBACK_SELECTED -  指定回退<br>ROLLBACK - 全部回退<br>CANCEL -  撤回<br>DELETE - 删除<br>CC - 抄送
	CreateTime           int64                                    `json:"create_time,omitempty"`            // 发生时间
	UserID               *string                                  `json:"user_id,omitempty"`                // 动态产生用户
	OpenID               *string                                  `json:"open_id,omitempty"`                // 动态产生用户 open id
	UserIDList           []string                                 `json:"user_id_list,omitempty"`           // 被抄送人列表
	OpenIDList           []string                                 `json:"open_id_list,omitempty"`           // 被抄送人列表
	TaskID               *string                                  `json:"task_id,omitempty"`                // 产生动态关联的task_id
	Comment              *string                                  `json:"comment,omitempty"`                // 理由
	CcUserList           []*GetApprovalInstanceRespTimelineCcUser `json:"cc_user_list,omitempty"`           // 抄送人列表
	Ext                  *GetApprovalInstanceRespTimelineExt      `json:"ext,omitempty"`                    // 动态其他信息，目前包括 user_id_list, user_id
	NodeKey              *string                                  `json:"node_key,omitempty"`               // 产生task的节点key
	ModifiedInstanceCode *string                                  `json:"modified_instance_code,omitempty"` // 修改的原实例 code,仅在查询修改实例时显示该字段
	RevertedInstanceCode *string                                  `json:"reverted_instance_code,omitempty"` // 撤销的原实例 code,仅在查询撤销实例时显示该字段
}

// GetApprovalInstanceRespTimelineCcUser ...
type GetApprovalInstanceRespTimelineCcUser struct {
	UserID *string `json:"user_id,omitempty"` // 抄送人 user id
	CcID   *string `json:"cc_id,omitempty"`   // 审批实例内抄送唯一标识
	OpenID *string `json:"open_id,omitempty"` // 抄送人 open id
}

// GetApprovalInstanceRespTimelineExt ...
type GetApprovalInstanceRespTimelineExt struct {
	UserIDList []string `json:"user_id_list,omitempty"` // **type类型** - **user_id_list 含义**<br>TRANSFER - 被转交人 <br>ADD_APPROVER_BEFORE  -  被加签人<br>ADD_APPROVER -   被加签人<br>ADD_APPROVER_AFTER -   被加签人 <br>DELETE_APPROVER  - 被减签人
	OpenIDList []string `json:"open_id_list,omitempty"` // user_id_list 对应的 open id
	UserID     *string  `json:"user_id,omitempty"`      // **type类型** - **user_id 含义**<br>CC - 抄送人
	OpenID     *string  `json:"open_id,omitempty"`      // user_id 对应的 open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApprovalInstanceList
//
// 根据 approval_code 批量获取审批实例的 instance_code，用于拉取租户下某个审批定义的全部审批实例。
// 默认以审批创建时间排序。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQDOyUjL0gjM14CN4ITN
func (r *ApprovalService) GetApprovalInstanceList(ctx context.Context, request *GetApprovalInstanceListReq, options ...MethodOptionFunc) (*GetApprovalInstanceListResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalInstanceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalInstanceList mock enable")
		return r.cli.mock.mockApprovalGetApprovalInstanceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalInstanceList",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalInstanceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalInstanceList mock ApprovalGetApprovalInstanceList method
func (r *Mock) MockApprovalGetApprovalInstanceList(f func(ctx context.Context, request *GetApprovalInstanceListReq, options ...MethodOptionFunc) (*GetApprovalInstanceListResp, *Response, error)) {
	r.mockApprovalGetApprovalInstanceList = f
}

// UnMockApprovalGetApprovalInstanceList un-mock ApprovalGetApprovalInstanceList method
func (r *Mock) UnMockApprovalGetApprovalInstanceList() {
	r.mockApprovalGetApprovalInstanceList = nil
}

// GetApprovalInstanceListReq ...
type GetApprovalInstanceListReq struct {
	ApprovalCode string `json:"approval_code,omitempty"` // 审批定义唯一标识
	StartTime    int64  `json:"start_time,omitempty"`    // 审批实例创建时间区间（毫秒）
	EndTime      int64  `json:"end_time,omitempty"`      // 审批实例创建时间区间（毫秒）
	Offset       int64  `json:"offset,omitempty"`        // 查询偏移量
	Limit        int64  `json:"limit,omitempty"`         // 查询限制量 注:不得大于100
}

// getApprovalInstanceListResp ...
type getApprovalInstanceListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalInstanceListResp `json:"data,omitempty"` // 返回业务信息
}

// GetApprovalInstanceListResp ...
type GetApprovalInstanceListResp struct {
	InstanceCodeList []string `json:"instance_code_list,omitempty"` // 审批实例 Code
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PreviewApprovalInstance
//
// 提交审批前，预览审批流程。或者发起审批后，在某一审批节点预览后续流程
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-preview
func (r *ApprovalService) PreviewApprovalInstance(ctx context.Context, request *PreviewApprovalInstanceReq, options ...MethodOptionFunc) (*PreviewApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalPreviewApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#PreviewApprovalInstance mock enable")
		return r.cli.mock.mockApprovalPreviewApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "PreviewApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/preview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(previewApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalPreviewApprovalInstance mock ApprovalPreviewApprovalInstance method
func (r *Mock) MockApprovalPreviewApprovalInstance(f func(ctx context.Context, request *PreviewApprovalInstanceReq, options ...MethodOptionFunc) (*PreviewApprovalInstanceResp, *Response, error)) {
	r.mockApprovalPreviewApprovalInstance = f
}

// UnMockApprovalPreviewApprovalInstance un-mock ApprovalPreviewApprovalInstance method
func (r *Mock) UnMockApprovalPreviewApprovalInstance() {
	r.mockApprovalPreviewApprovalInstance = nil
}

// PreviewApprovalInstanceReq ...
type PreviewApprovalInstanceReq struct {
	UserIDType   *IDType                         `query:"user_id_type" json:"-"`  // 默认为open_id, 对于open_id(ou_开头)类型，user_id_type为open_id, 对于employeeID(8位字符串，如f7cb567e)类型，user_id_type为user_id
	ApprovalCode *string                         `json:"approval_code,omitempty"` // 审批定义 Code
	UserID       string                          `json:"user_id,omitempty"`       // 发起审批用户，employeid或者openid
	DepartmentID *string                         `json:"department_id,omitempty"` // 发起审批用户部门，如果用户只属于一个部门，可以不填，如果属于多个部门，必须填其中一个部门
	Form         *PreviewApprovalInstanceReqForm `json:"form,omitempty"`          // JSON字符串，控件值。提交审批之前，查看预览流程时，该字段必填
	InstanceCode *string                         `json:"instance_code,omitempty"` // 审批实例code
	TaskID       *string                         `json:"task_id,omitempty"`       // 若审批实例已存在，则传递当前审批任务对应的task_id, 并且user_id需要传task的指派人
}

// PreviewApprovalInstanceReqForm ...
type PreviewApprovalInstanceReqForm struct {
	ID    string `json:"id,omitempty"`    // 控件ID，也可以使用自定义 ID custom_id 的值
	Type  string `json:"type,omitempty"`  // 控件类型
	Value string `json:"value,omitempty"` // 控件值，不同类型的值格式不一样
}

// previewApprovalInstanceResp ...
type previewApprovalInstanceResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *PreviewApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// PreviewApprovalInstanceResp ...
type PreviewApprovalInstanceResp struct {
	PreviewNodes       []string `json:"preview_nodes,omitempty"`         // 预览节点信息
	UserIDList         []string `json:"user_id_list,omitempty"`          // 审批人id列表
	EndCcIDList        []string `json:"end_cc_id_list,omitempty"`        // 审批结束抄送人id列表
	NodeID             string   `json:"node_id,omitempty"`               // 节点id
	NodeName           string   `json:"node_name,omitempty"`             // 节点名称
	NodeType           string   `json:"node_type,omitempty"`             // 节点类型：<br>AND：会签<br>OR: 或签
	CustomNodeID       string   `json:"custom_node_id,omitempty"`        // 用户自定义节点id
	Comments           []string `json:"comments,omitempty"`              // 节点的说明信息
	IsEmptyLogic       bool     `json:"is_empty_logic,omitempty"`        // 审批人是否为空，若为空，则user_id_list为兜底审批人id列表
	IsApproverTypeFree bool     `json:"is_approver_type_free,omitempty"` // 是否发起人自选节点
	HasCcTypeFree      bool     `json:"has_cc_type_free,omitempty"`      // 节点是否支持抄送人自选
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RejectApprovalInstance
//
// 对于单个审批任务进行拒绝操作。拒绝后审批流程结束。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQDNyUjL0QjM14CN0ITN
func (r *ApprovalService) RejectApprovalInstance(ctx context.Context, request *RejectApprovalInstanceReq, options ...MethodOptionFunc) (*RejectApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalRejectApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#RejectApprovalInstance mock enable")
		return r.cli.mock.mockApprovalRejectApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "RejectApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/reject",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(rejectApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalRejectApprovalInstance mock ApprovalRejectApprovalInstance method
func (r *Mock) MockApprovalRejectApprovalInstance(f func(ctx context.Context, request *RejectApprovalInstanceReq, options ...MethodOptionFunc) (*RejectApprovalInstanceResp, *Response, error)) {
	r.mockApprovalRejectApprovalInstance = f
}

// UnMockApprovalRejectApprovalInstance un-mock ApprovalRejectApprovalInstance method
func (r *Mock) UnMockApprovalRejectApprovalInstance() {
	r.mockApprovalRejectApprovalInstance = nil
}

// RejectApprovalInstanceReq ...
type RejectApprovalInstanceReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code
	OpenID       string  `json:"open_id,omitempty"`       // 用户open_id，如果没有user_id，必须要有open_id
	UserID       string  `json:"user_id,omitempty"`       // 操作用户
	TaskID       string  `json:"task_id,omitempty"`       // 任务 ID<br>审批实例详情task_list中id，详情请参考[](https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN)
	Comment      *string `json:"comment,omitempty"`       // 意见
}

// rejectApprovalInstanceResp ...
type rejectApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *RejectApprovalInstanceResp `json:"data,omitempty"`
}

// RejectApprovalInstanceResp ...
type RejectApprovalInstanceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RollbackApprovalInstance
//
// 从当前审批任务，退回到已审批的一个或多个任务节点。退回后，已审批节点重新生成审批任务
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-task-return
func (r *ApprovalService) RollbackApprovalInstance(ctx context.Context, request *RollbackApprovalInstanceReq, options ...MethodOptionFunc) (*RollbackApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalRollbackApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#RollbackApprovalInstance mock enable")
		return r.cli.mock.mockApprovalRollbackApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "RollbackApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/specified_rollback",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(rollbackApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalRollbackApprovalInstance mock ApprovalRollbackApprovalInstance method
func (r *Mock) MockApprovalRollbackApprovalInstance(f func(ctx context.Context, request *RollbackApprovalInstanceReq, options ...MethodOptionFunc) (*RollbackApprovalInstanceResp, *Response, error)) {
	r.mockApprovalRollbackApprovalInstance = f
}

// UnMockApprovalRollbackApprovalInstance un-mock ApprovalRollbackApprovalInstance method
func (r *Mock) UnMockApprovalRollbackApprovalInstance() {
	r.mockApprovalRollbackApprovalInstance = nil
}

// RollbackApprovalInstanceReq ...
type RollbackApprovalInstanceReq struct {
	UserIDType     *IDType  `query:"user_id_type" json:"-"`      // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID         string   `json:"task_id,omitempty"`           // 当前审批任务ID，从实例详情中获取task_list中获取，必须是PENDING的任务id
	UserID         string   `json:"user_id,omitempty"`           // 当前审批任务审批人open_id，从实例详情中获取task_list中获取，必须是PENDING的任务的审批人open_id
	Reason         string   `json:"reason,omitempty"`            // 退回原因
	TaskDefKeyList []string `json:"task_def_key_list,omitempty"` // 指定退回的任务node_key，从实例详情中获取timeline中获取，必须是PASS的任务node_key
}

// rollbackApprovalInstanceResp ...
type rollbackApprovalInstanceResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *RollbackApprovalInstanceResp `json:"data,omitempty"`
}

// RollbackApprovalInstanceResp ...
type RollbackApprovalInstanceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchApprovalInstance
//
// 该接口通过不同条件查询审批系统中符合条件的审批实例列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQjMxYjL0ITM24CNyEjN
func (r *ApprovalService) SearchApprovalInstance(ctx context.Context, request *SearchApprovalInstanceReq, options ...MethodOptionFunc) (*SearchApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalInstance mock enable")
		return r.cli.mock.mockApprovalSearchApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalInstance mock ApprovalSearchApprovalInstance method
func (r *Mock) MockApprovalSearchApprovalInstance(f func(ctx context.Context, request *SearchApprovalInstanceReq, options ...MethodOptionFunc) (*SearchApprovalInstanceResp, *Response, error)) {
	r.mockApprovalSearchApprovalInstance = f
}

// UnMockApprovalSearchApprovalInstance un-mock ApprovalSearchApprovalInstance method
func (r *Mock) UnMockApprovalSearchApprovalInstance() {
	r.mockApprovalSearchApprovalInstance = nil
}

// SearchApprovalInstanceReq ...
type SearchApprovalInstanceReq struct {
	UserID                string  `json:"user_id,omitempty"`                  // 用户 id
	ApprovalCode          *string `json:"approval_code,omitempty"`            // 审批定义 code
	InstanceCode          *string `json:"instance_code,omitempty"`            // 审批实例 code
	InstanceExternalID    *string `json:"instance_external_id,omitempty"`     // 审批实例第三方 id <br>注：和 approval_code 取并集
	GroupExternalID       *string `json:"group_external_id,omitempty"`        // 审批定义分组第三方 id <br>注：和 instance_code 取并集
	InstanceTitle         *string `json:"instance_title,omitempty"`           // 审批实例标题（只有第三方审批有）
	InstanceStatus        *string `json:"instance_status,omitempty"`          // 审批实例状态<br>REJECT：拒绝<br>PENDING：审批中<br>RECALL：撤回<br>DELETED： 已删除<br>APPROVED：通过<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	InstanceStartTimeFrom *int64  `json:"instance_start_time_from,omitempty"` // 实例查询开始时间（unix毫秒时间戳）
	InstanceStartTimeTo   *int64  `json:"instance_start_time_to,omitempty"`   // 实例查询结束时间  (unix毫秒时间戳)
	Locale                *string `json:"locale,omitempty"`                   // 地区 （zh-CN、en-US、ja-JP）
	Offset                *int64  `json:"offset,omitempty"`                   // 查询偏移量 <br>注：不得超过10000
	Limit                 *int64  `json:"limit,omitempty"`                    // 查询限制量 <br>注：不得超过200<br>不设置默认查询10条数据
}

// searchApprovalInstanceResp ...
type searchApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *SearchApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// SearchApprovalInstanceResp ...
type SearchApprovalInstanceResp struct {
	Count        int64                                 `json:"count,omitempty"`         // 查询返回条数
	InstanceList []*SearchApprovalInstanceRespInstance `json:"instance_list,omitempty"` // 审批实例列表
}

// SearchApprovalInstanceRespInstance ...
type SearchApprovalInstanceRespInstance struct {
	Approval *SearchApprovalInstanceRespInstanceApproval `json:"approval,omitempty"` // 审批定义
	Group    *SearchApprovalInstanceRespInstanceGroup    `json:"group,omitempty"`    // 审批定义分组
	Instance *SearchApprovalInstanceRespInstanceInstance `json:"instance,omitempty"` // 审批实例信息
}

// SearchApprovalInstanceRespInstanceApproval ...
type SearchApprovalInstanceRespInstanceApproval struct {
	Code       string                                              `json:"code,omitempty"`        // 审批定义 code
	Name       string                                              `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                                `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalInstanceRespInstanceApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalInstanceRespInstanceApprovalExternal ...
type SearchApprovalInstanceRespInstanceApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalInstanceRespInstanceGroup ...
type SearchApprovalInstanceRespInstanceGroup struct {
	ExternalID *SearchApprovalInstanceRespInstanceGroupExternalID `json:"external_id,omitempty"` // 审批定义分组外部 id
}

// SearchApprovalInstanceRespInstanceGroupExternalID ...
type SearchApprovalInstanceRespInstanceGroupExternalID struct {
	Name string `json:"name,omitempty"` // 审批定义分组名称
}

// SearchApprovalInstanceRespInstanceInstance ...
type SearchApprovalInstanceRespInstanceInstance struct {
	Code       string                                          `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                          `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                          `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                           `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                           `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                          `json:"status,omitempty"`      // 审批实例状态
	Title      string                                          `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                          `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                          `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalInstanceRespInstanceInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalInstanceRespInstanceInstanceLink ...
type SearchApprovalInstanceRespInstanceInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// TransferApprovalInstance
//
// 对于单个审批任务进行转交操作。转交后审批流程流转给被转交人。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDNyUjL1QjM14SN0ITN
func (r *ApprovalService) TransferApprovalInstance(ctx context.Context, request *TransferApprovalInstanceReq, options ...MethodOptionFunc) (*TransferApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalTransferApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#TransferApprovalInstance mock enable")
		return r.cli.mock.mockApprovalTransferApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "TransferApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/transfer",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(transferApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalTransferApprovalInstance mock ApprovalTransferApprovalInstance method
func (r *Mock) MockApprovalTransferApprovalInstance(f func(ctx context.Context, request *TransferApprovalInstanceReq, options ...MethodOptionFunc) (*TransferApprovalInstanceResp, *Response, error)) {
	r.mockApprovalTransferApprovalInstance = f
}

// UnMockApprovalTransferApprovalInstance un-mock ApprovalTransferApprovalInstance method
func (r *Mock) UnMockApprovalTransferApprovalInstance() {
	r.mockApprovalTransferApprovalInstance = nil
}

// TransferApprovalInstanceReq ...
type TransferApprovalInstanceReq struct {
	ApprovalCode   string  `json:"approval_code,omitempty"`    // 审批定义 Code
	InstanceCode   string  `json:"instance_code,omitempty"`    // 审批实例 Code
	UserID         string  `json:"user_id,omitempty"`          // 操作用户
	TaskID         string  `json:"task_id,omitempty"`          // 任务 ID<br>审批实例详情task_list中id，详情请参考[](https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN)
	Comment        *string `json:"comment,omitempty"`          // 意见
	TransferUserID string  `json:"transfer_user_id,omitempty"` // 被转交人唯一 ID
	OpenID         *string `json:"open_id,omitempty"`          // 用户open_id <br>如果没有user_id，必须要有open_id
	TransferOpenID *string `json:"transfer_open_id,omitempty"` // 被转交人open_id <br>如果没有transfer_user_id，必须要有transfer_open_id
}

// transferApprovalInstanceResp ...
type transferApprovalInstanceResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *TransferApprovalInstanceResp `json:"data,omitempty"`
}

// TransferApprovalInstanceResp ...
type TransferApprovalInstanceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendApprovalMessage
//
// 此接口可以用来通过飞书审批的Bot推送消息给用户，当有新的审批待办，或者审批待办的状态有更新时，可以通过飞书审批的Bot告知用户。当然开发者也可以利用开放平台的能力自建一个全新的Bot，用来推送审批相关信息。如果出现推送成功，但是没有收到消息，可能是因为开通了审批机器人的聚合推送。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDNyYjL4QjM24CO0IjN
func (r *ApprovalService) SendApprovalMessage(ctx context.Context, request *SendApprovalMessageReq, options ...MethodOptionFunc) (*SendApprovalMessageResp, *Response, error) {
	if r.cli.mock.mockApprovalSendApprovalMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SendApprovalMessage mock enable")
		return r.cli.mock.mockApprovalSendApprovalMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SendApprovalMessage",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v1/message/send",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(sendApprovalMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSendApprovalMessage mock ApprovalSendApprovalMessage method
func (r *Mock) MockApprovalSendApprovalMessage(f func(ctx context.Context, request *SendApprovalMessageReq, options ...MethodOptionFunc) (*SendApprovalMessageResp, *Response, error)) {
	r.mockApprovalSendApprovalMessage = f
}

// UnMockApprovalSendApprovalMessage un-mock ApprovalSendApprovalMessage method
func (r *Mock) UnMockApprovalSendApprovalMessage() {
	r.mockApprovalSendApprovalMessage = nil
}

// SendApprovalMessageReq ...
type SendApprovalMessageReq struct {
}

// sendApprovalMessageResp ...
type sendApprovalMessageResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 返回码的描述
	Data *SendApprovalMessageResp `json:"data,omitempty"` // 返回业务信息
}

// SendApprovalMessageResp ...
type SendApprovalMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // 消息 id ，用于卡片更新
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApprovalMessage
//
// 此接口可以根据审批bot消息id及相应状态，更新相应的审批bot消息，只可用于更新待审批模板的bot消息。例如，给用户推送了审批待办消息，当用户处理该消息后，可以将之前推送的Bot消息更新为已审批。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAjNyYjLwYjM24CM2IjN
func (r *ApprovalService) UpdateApprovalMessage(ctx context.Context, request *UpdateApprovalMessageReq, options ...MethodOptionFunc) (*UpdateApprovalMessageResp, *Response, error) {
	if r.cli.mock.mockApprovalUpdateApprovalMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#UpdateApprovalMessage mock enable")
		return r.cli.mock.mockApprovalUpdateApprovalMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "UpdateApprovalMessage",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v1/message/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApprovalMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalUpdateApprovalMessage mock ApprovalUpdateApprovalMessage method
func (r *Mock) MockApprovalUpdateApprovalMessage(f func(ctx context.Context, request *UpdateApprovalMessageReq, options ...MethodOptionFunc) (*UpdateApprovalMessageResp, *Response, error)) {
	r.mockApprovalUpdateApprovalMessage = f
}

// UnMockApprovalUpdateApprovalMessage un-mock ApprovalUpdateApprovalMessage method
func (r *Mock) UnMockApprovalUpdateApprovalMessage() {
	r.mockApprovalUpdateApprovalMessage = nil
}

// UpdateApprovalMessageReq ...
type UpdateApprovalMessageReq struct {
	MessageID        string  `json:"message_id,omitempty"`         // 卡片 id，发送卡片时会拿到
	Status           string  `json:"status,omitempty"`             // 状态类型，用于更新第一个action文字内容，枚举：<br> APPROVED:-已同意<br>REJECTED:-已拒绝<br>CANCELLED:-已撤回<br>FORWARDED:-已转交<br>ROLLBACK:-已回退<br>ADD:-已加签<br>DELETED:-已删除<br>PROCESSED:-已处理<br>CUSTOM:-自定义按钮状态
	StatusName       *string `json:"status_name,omitempty"`        // status=CUSTOM时可以自定义审批同意/拒绝后title状态
	DetailActionName *string `json:"detail_action_name,omitempty"` // status=CUSTOM时可以自定义审批同意/拒绝后“查看详情按钮名称”
	I18nResources    *string `json:"i18n_resources,omitempty"`     // i18n国际化文案
}

// updateApprovalMessageResp ...
type updateApprovalMessageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述
	Data *UpdateApprovalMessageResp `json:"data,omitempty"` // 返回业务信息
}

// UpdateApprovalMessageResp ...
type UpdateApprovalMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // 消息 id ，用于卡片更新、撤回
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeApprovalSubscription
//
// 应用订阅 approval_code 后，该应用就可以收到该审批定义对应实例的事件通知。同一应用只需要订阅一次，无需重复订阅。
// 当应用不希望再收到审批事件时，可以使用取消订阅接口进行取消，取消后将不再给应用推送消息。
// 订阅和取消订阅都是应用维度的，多个应用可以同时订阅同一个 approval_code，每个应用都能收到审批事件。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucDOyUjL3gjM14yN4ITN
func (r *ApprovalService) SubscribeApprovalSubscription(ctx context.Context, request *SubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*SubscribeApprovalSubscriptionResp, *Response, error) {
	if r.cli.mock.mockApprovalSubscribeApprovalSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SubscribeApprovalSubscription mock enable")
		return r.cli.mock.mockApprovalSubscribeApprovalSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SubscribeApprovalSubscription",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/subscription/subscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(subscribeApprovalSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSubscribeApprovalSubscription mock ApprovalSubscribeApprovalSubscription method
func (r *Mock) MockApprovalSubscribeApprovalSubscription(f func(ctx context.Context, request *SubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*SubscribeApprovalSubscriptionResp, *Response, error)) {
	r.mockApprovalSubscribeApprovalSubscription = f
}

// UnMockApprovalSubscribeApprovalSubscription un-mock ApprovalSubscribeApprovalSubscription method
func (r *Mock) UnMockApprovalSubscribeApprovalSubscription() {
	r.mockApprovalSubscribeApprovalSubscription = nil
}

// SubscribeApprovalSubscriptionReq ...
type SubscribeApprovalSubscriptionReq struct {
	ApprovalCode string `json:"approval_code,omitempty"` // 审批定义唯一标识
}

// subscribeApprovalSubscriptionResp ...
type subscribeApprovalSubscriptionResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                             `json:"msg,omitempty"`  // 返回码的描述
	Data *SubscribeApprovalSubscriptionResp `json:"data,omitempty"`
}

// SubscribeApprovalSubscriptionResp ...
type SubscribeApprovalSubscriptionResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnsubscribeApprovalSubscription
//
// 取消订阅 approval_code 后，无法再收到该审批定义对应实例的事件通知。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDOyUjL4gjM14CO4ITN
func (r *ApprovalService) UnsubscribeApprovalSubscription(ctx context.Context, request *UnsubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*UnsubscribeApprovalSubscriptionResp, *Response, error) {
	if r.cli.mock.mockApprovalUnsubscribeApprovalSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#UnsubscribeApprovalSubscription mock enable")
		return r.cli.mock.mockApprovalUnsubscribeApprovalSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "UnsubscribeApprovalSubscription",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/subscription/unsubscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(unsubscribeApprovalSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalUnsubscribeApprovalSubscription mock ApprovalUnsubscribeApprovalSubscription method
func (r *Mock) MockApprovalUnsubscribeApprovalSubscription(f func(ctx context.Context, request *UnsubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*UnsubscribeApprovalSubscriptionResp, *Response, error)) {
	r.mockApprovalUnsubscribeApprovalSubscription = f
}

// UnMockApprovalUnsubscribeApprovalSubscription un-mock ApprovalUnsubscribeApprovalSubscription method
func (r *Mock) UnMockApprovalUnsubscribeApprovalSubscription() {
	r.mockApprovalUnsubscribeApprovalSubscription = nil
}

// UnsubscribeApprovalSubscriptionReq ...
type UnsubscribeApprovalSubscriptionReq struct {
	ApprovalCode string `json:"approval_code,omitempty"` // 审批定义唯一标识
}

// unsubscribeApprovalSubscriptionResp ...
type unsubscribeApprovalSubscriptionResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                               `json:"msg,omitempty"`  // 返回码的描述
	Data *UnsubscribeApprovalSubscriptionResp `json:"data,omitempty"`
}

// UnsubscribeApprovalSubscriptionResp ...
type UnsubscribeApprovalSubscriptionResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchApprovalTask
//
// 该接口通过不同条件查询审批系统中符合条件的审批任务列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYjMxYjL2ITM24iNyEjN
func (r *ApprovalService) SearchApprovalTask(ctx context.Context, request *SearchApprovalTaskReq, options ...MethodOptionFunc) (*SearchApprovalTaskResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalTask mock enable")
		return r.cli.mock.mockApprovalSearchApprovalTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalTask",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/task/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalTask mock ApprovalSearchApprovalTask method
func (r *Mock) MockApprovalSearchApprovalTask(f func(ctx context.Context, request *SearchApprovalTaskReq, options ...MethodOptionFunc) (*SearchApprovalTaskResp, *Response, error)) {
	r.mockApprovalSearchApprovalTask = f
}

// UnMockApprovalSearchApprovalTask un-mock ApprovalSearchApprovalTask method
func (r *Mock) UnMockApprovalSearchApprovalTask() {
	r.mockApprovalSearchApprovalTask = nil
}

// SearchApprovalTaskReq ...
type SearchApprovalTaskReq struct {
	UserID             *string `json:"user_id,omitempty"`              // 用户 id
	ApprovalCode       *string `json:"approval_code,omitempty"`        // 审批定义 code
	InstanceCode       *string `json:"instance_code,omitempty"`        // 审批实例 code
	InstanceExternalID *string `json:"instance_external_id,omitempty"` // 审批实例第三方 id<br>注：和 approval_code 取并集
	GroupExternalID    *string `json:"group_external_id,omitempty"`    // 审批定义分组第三方 id<br>注：和 instance_code 取并集
	TaskTitle          *string `json:"task_title,omitempty"`           // 审批任务标题（只有第三方审批有）
	TaskStatus         *string `json:"task_status,omitempty"`          // 审批任务状态<br>PENDING:   审批中<br>APPROVED:   通过<br>REJECTED:   拒绝<br>TRANSFERRED:转交<br> DONE:      已完成<br>RM_REPEAT:  去重<br> PROCESSED:  已处理<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	TaskStartTimeFrom  *int64  `json:"task_start_time_from,omitempty"` // 任务查询开始时间 (unix毫秒时间戳)
	TaskStartTimeTo    *int64  `json:"task_start_time_to,omitempty"`   // 任务查询结束时间 (unix毫秒时间戳)
	Locale             *string `json:"locale,omitempty"`               // 地区（zh-CN、en-US、ja-JP）
	Offset             *int64  `json:"offset,omitempty"`               // 查询偏移量<br>注：不得超过10000
	Limit              *int64  `json:"limit,omitempty"`                // 查询限制量<br>注：不得超过200<br>不设置默认查询10条数据
}

// searchApprovalTaskResp ...
type searchApprovalTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                  `json:"msg,omitempty"`  // 返回码的描述
	Data *SearchApprovalTaskResp `json:"data,omitempty"` // 返回业务信息
}

// SearchApprovalTaskResp ...
type SearchApprovalTaskResp struct {
	Count    int64                         `json:"count,omitempty"`     // 查询返回条数
	TaskList []*SearchApprovalTaskRespTask `json:"task_list,omitempty"` // 审批任务列表
}

// SearchApprovalTaskRespTask ...
type SearchApprovalTaskRespTask struct {
	Approval *SearchApprovalTaskRespTaskApproval `json:"approval,omitempty"` // 审批定义
	Group    *SearchApprovalTaskRespTaskGroup    `json:"group,omitempty"`    // 审批定义分组
	Instance *SearchApprovalTaskRespTaskInstance `json:"instance,omitempty"` // 审批实例信息
	Task     *SearchApprovalTaskRespTaskTask     `json:"task,omitempty"`     // 审批任务
}

// SearchApprovalTaskRespTaskApproval ...
type SearchApprovalTaskRespTaskApproval struct {
	Code       string                                      `json:"code,omitempty"`        // 审批定义 code
	Name       string                                      `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                        `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalTaskRespTaskApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalTaskRespTaskApprovalExternal ...
type SearchApprovalTaskRespTaskApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalTaskRespTaskGroup ...
type SearchApprovalTaskRespTaskGroup struct {
	ExternalID string `json:"external_id,omitempty"` // 审批定义分组外部 id
	Name       string `json:"name,omitempty"`        // 审批定义分组名称
}

// SearchApprovalTaskRespTaskInstance ...
type SearchApprovalTaskRespTaskInstance struct {
	Code       string                                  `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                  `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                  `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                   `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                   `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                  `json:"status,omitempty"`      // 审批实例状态
	Title      string                                  `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                  `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                  `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalTaskRespTaskInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalTaskRespTaskInstanceLink ...
type SearchApprovalTaskRespTaskInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

// SearchApprovalTaskRespTaskTask ...
type SearchApprovalTaskRespTaskTask struct {
	StartTime int64                               `json:"start_time,omitempty"` // 审批任务开始时间
	UserID    string                              `json:"user_id,omitempty"`    // 审批任务发起人 id
	EndTime   int64                               `json:"end_time,omitempty"`   // 审批任务结束时间
	Title     string                              `json:"title,omitempty"`      // 审批任务名称
	Status    string                              `json:"status,omitempty"`     // 审批任务状态
	Extra     string                              `json:"extra,omitempty"`      // 审批任务扩展字段
	Link      *SearchApprovalTaskRespTaskTaskLink `json:"link,omitempty"`       // 审批任务链接
}

// SearchApprovalTaskRespTaskTaskLink ...
type SearchApprovalTaskRespTaskTaskLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批任务 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批任务移动端链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadAttendanceFile 通过文件 ID 下载指定的文件。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/download
func (r *AttendanceService) DownloadAttendanceFile(ctx context.Context, request *DownloadAttendanceFileReq, options ...MethodOptionFunc) (*DownloadAttendanceFileResp, *Response, error) {
	if r.cli.mock.mockAttendanceDownloadAttendanceFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DownloadAttendanceFile mock enable")
		return r.cli.mock.mockAttendanceDownloadAttendanceFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DownloadAttendanceFile",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/files/:file_id/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadAttendanceFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceDownloadAttendanceFile mock AttendanceDownloadAttendanceFile method
func (r *Mock) MockAttendanceDownloadAttendanceFile(f func(ctx context.Context, request *DownloadAttendanceFileReq, options ...MethodOptionFunc) (*DownloadAttendanceFileResp, *Response, error)) {
	r.mockAttendanceDownloadAttendanceFile = f
}

// UnMockAttendanceDownloadAttendanceFile un-mock AttendanceDownloadAttendanceFile method
func (r *Mock) UnMockAttendanceDownloadAttendanceFile() {
	r.mockAttendanceDownloadAttendanceFile = nil
}

// DownloadAttendanceFileReq ...
type DownloadAttendanceFileReq struct {
	FileID string `path:"file_id" json:"-"` // 文件 ID, 示例值："xxxxxb306842b1c189bc5212eefxxxxx"
}

// downloadAttendanceFileResp ...
type downloadAttendanceFileResp struct {
	IsFile bool                        `json:"is_file,omitempty"`
	Code   int64                       `json:"code,omitempty"`
	Msg    string                      `json:"msg,omitempty"`
	Data   *DownloadAttendanceFileResp `json:"data,omitempty"`
}

func (r *downloadAttendanceFileResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadAttendanceFileResp{}
	}
	r.Data.File = file
}

// DownloadAttendanceFileResp ...
type DownloadAttendanceFileResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadAttendanceFile 上传文件并获取文件 ID，可用于“修改用户设置”接口中的 face_key 参数。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload
func (r *AttendanceService) UploadAttendanceFile(ctx context.Context, request *UploadAttendanceFileReq, options ...MethodOptionFunc) (*UploadAttendanceFileResp, *Response, error) {
	if r.cli.mock.mockAttendanceUploadAttendanceFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UploadAttendanceFile mock enable")
		return r.cli.mock.mockAttendanceUploadAttendanceFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UploadAttendanceFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/files/upload",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadAttendanceFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUploadAttendanceFile mock AttendanceUploadAttendanceFile method
func (r *Mock) MockAttendanceUploadAttendanceFile(f func(ctx context.Context, request *UploadAttendanceFileReq, options ...MethodOptionFunc) (*UploadAttendanceFileResp, *Response, error)) {
	r.mockAttendanceUploadAttendanceFile = f
}

// UnMockAttendanceUploadAttendanceFile un-mock AttendanceUploadAttendanceFile method
func (r *Mock) UnMockAttendanceUploadAttendanceFile() {
	r.mockAttendanceUploadAttendanceFile = nil
}

// UploadAttendanceFileReq ...
type UploadAttendanceFileReq struct {
	FileName string    `query:"file_name" json:"-"` // 带后缀的文件名, 示例值："人脸照片.jpg"
	File     io.Reader `json:"file,omitempty"`      // 文件内容, 示例值：二进制文件
}

// uploadAttendanceFileResp ...
type uploadAttendanceFileResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UploadAttendanceFileResp `json:"data,omitempty"`
}

// UploadAttendanceFileResp ...
type UploadAttendanceFileResp struct {
	File *UploadAttendanceFileRespFile `json:"file,omitempty"` // 文件
}

// UploadAttendanceFileRespFile ...
type UploadAttendanceFileRespFile struct {
	FileID string `json:"file_id,omitempty"` // 文件 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceGroup
//
// 考勤组，是对部门或者员工在某个特定场所及特定时间段内的出勤情况（包括上下班、迟到、早退、病假、婚假、丧假、公休、工作时间、加班情况等）的一种规则设定。
// 通过设置考勤组，可以从部门、员工两个维度，来设定考勤方式、考勤时间、考勤地点等考勤规则。
// 出于安全考虑，目前通过该接口只允许修改自己创建的考勤组。
// ## 考勤组负责人
// 考勤组负责人可修改该考勤组的排班，并查看该考勤组的考勤数据。
// 如果考勤组负责人同时被企业管理员赋予了考勤管理员的角色，则该考勤组负责人还拥有考勤管理员的权限，可以编辑及删除考勤规则。
// ## 考勤组人员
// 可按部门、员工两个维度，设置需要参加考勤或无需参加考勤的人员。
// - 若是按部门维度添加的考勤人员，当有新员工加入该部门时，其会自动加入该考勤组。
// - 若是按员工维度添加的考勤人员，当其上级部门被添加到其他考勤组时，该员工不会更换考勤组。
// ## 考勤组类型
// 提供 3 种不同的考勤类型：固定班制、排班制、自由班制。
// - 固定班制：指考勤组内每位人员的上下班时间一致，适用于上下班时间固定或无需安排多个班次的考勤组。
// - 排班制：指考勤组人员的上下班时间不完全一致，可自定义安排每位人员的上下班时间，适用于存在多个班次如早晚班的考勤组。
// - 自由班制：指没有具体的班次，考勤组人员可以在打卡时段内自由打卡，按照打卡时段统计上班时长。
// ## 考勤班次
// - 固定班制下，需设置周一到周日每天安排哪个班次，以及可针对特殊日期进行打卡设置。
// - 排班制下，需对考勤组内每一位人员的每一天进行班次指定。
// - 自由班制下，需设置一天中最早打卡时间和最晚打卡时间，以及一周中哪几天需要打卡。
// ## 考勤方式
// 支持 3 种考勤方式：GPS 打卡、Wi-Fi 打卡、考勤机打卡。
// - GPS 打卡：需设置经纬度信息及考勤地点名称。
// - Wi-Fi 打卡：需设置 Wi-Fi 名称及 Wi-Fi 的 MAC 地址。
// - 考勤机打卡：需设置考勤机名称及考勤机序号。
// ## 考勤其他设置
// - 规则设置：支持设置是否允许外勤打卡，是否允许补卡以及一个月补卡的次数，是否允许 PC 端打卡。
// - 安全设置：支持设置是否开启人脸识别打卡，以及什么情况下开启人脸识别。
// - 统计设置：支持设置考勤组人员是否可以查看到某些维度的统计数据。
// - 加班设置：支持配置加班时间的计算规则。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create
func (r *AttendanceService) CreateAttendanceGroup(ctx context.Context, request *CreateAttendanceGroupReq, options ...MethodOptionFunc) (*CreateAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceGroup mock AttendanceCreateAttendanceGroup method
func (r *Mock) MockAttendanceCreateAttendanceGroup(f func(ctx context.Context, request *CreateAttendanceGroupReq, options ...MethodOptionFunc) (*CreateAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceGroup = f
}

// UnMockAttendanceCreateAttendanceGroup un-mock AttendanceCreateAttendanceGroup method
func (r *Mock) UnMockAttendanceCreateAttendanceGroup() {
	r.mockAttendanceCreateAttendanceGroup = nil
}

// CreateAttendanceGroupReq ...
type CreateAttendanceGroupReq struct {
	EmployeeType EmployeeType                   `query:"employee_type" json:"-"` // 用户 ID 的类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	DeptType     string                         `query:"dept_type" json:"-"`     // 部门 ID 的类型, 示例值："od-fcb45c28a45311afd441b8869541ece8", 可选值有: `open_id`：暂时只支持部门的 openid
	Group        *CreateAttendanceGroupReqGroup `json:"group,omitempty"`         // 6921319402260496386
}

// CreateAttendanceGroupReqGroup ...
type CreateAttendanceGroupReqGroup struct {
	GroupID                *string                                               `json:"group_id,omitempty"`                   // 考勤组 ID（仅修改时提供）, 需要从“获取打卡结果”的接口中获取 groupId, 示例值："6919358128597097404"
	GroupName              string                                                `json:"group_name,omitempty"`                 // 考勤组名称, 示例值："开心考勤"
	TimeZone               string                                                `json:"time_zone,omitempty"`                  // 时区, 示例值："Asia/Shanghai"
	BindDeptIDs            []string                                              `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID, 示例值：od-fcb45c28a45311afd440b7869541fce8
	ExceptDeptIDs          []string                                              `json:"except_dept_ids,omitempty"`            // 排除的部门 ID, 示例值：od-fcb45c28a45311afd440b7869541fce8
	BindUserIDs            []string                                              `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID, 示例值：52aa1fa1
	ExceptUserIDs          []string                                              `json:"except_user_ids,omitempty"`            // 排除的用户 ID, 示例值：52aa1fa1
	GroupLeaderIDs         []string                                              `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段, 示例值：2bg4a9be
	AllowOutPunch          *bool                                                 `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡, 示例值：true
	AllowPcPunch           *bool                                                 `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡, 示例值：true
	AllowRemedy            *bool                                                 `json:"allow_remedy,omitempty"`               // 是否限制补卡, 示例值：true
	RemedyLimit            *bool                                                 `json:"remedy_limit,omitempty"`               // 是否限制补卡次数, 示例值：true
	RemedyLimitCount       *int64                                                `json:"remedy_limit_count,omitempty"`         // 补卡次数, 示例值：3
	RemedyDateLimit        *bool                                                 `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间, 示例值：true
	RemedyDateNum          *int64                                                `json:"remedy_date_num,omitempty"`            // 补卡时间，几天内补卡, 示例值：3
	ShowCumulativeTime     *bool                                                 `json:"show_cumulative_time,omitempty"`       // 是否展示累计时长, 示例值：true
	ShowOverTime           *bool                                                 `json:"show_over_time,omitempty"`             // 是否展示加班时长, 示例值：true
	HideStaffPunchTime     *bool                                                 `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡详情, 示例值：true
	FacePunch              *bool                                                 `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡, 示例值：true
	FacePunchCfg           *int64                                                `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别, 示例值：1
	FaceDowngrade          *bool                                                 `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡, 示例值：true
	ReplaceBasicPic        *bool                                                 `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片, 示例值：true
	Machines               []*CreateAttendanceGroupReqGroupMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               *int64                                                `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）, 示例值：300
	Locations              []*CreateAttendanceGroupReqGroupLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                 `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制, 3：自由班制, 示例值：0
	PunchDayShiftIDs       []string                                              `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填, 示例值：6921319402260496386
	FreePunchCfg           *CreateAttendanceGroupReqGroupFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                 `json:"calendar_id,omitempty"`                // 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1, 示例值：1
	NeedPunchSpecialDays   []*CreateAttendanceGroupReqGroupNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*CreateAttendanceGroupReqGroupNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   *bool                                                 `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡, 示例值：true
	EffectNow              *bool                                                 `json:"effect_now,omitempty"`                 // 是否立即生效，默认 false, 示例值：true
	RemedyPeriodType       *int64                                                `json:"remedy_period_type,omitempty"`         // 补卡周期类型, 示例值：0
	RemedyPeriodCustomDate *int64                                                `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期起始日期, 示例值：1
	PunchType              *int64                                                `json:"punch_type,omitempty"`                 // 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡, 示例值：1
}

// CreateAttendanceGroupReqGroupMachine ...
type CreateAttendanceGroupReqGroupMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号, 示例值："FS0701"
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称, 示例值："创实 9 楼"
}

// CreateAttendanceGroupReqGroupLocation ...
type CreateAttendanceGroupReqGroupLocation struct {
	LocationName string   `json:"location_name,omitempty"` // 地址名称, 示例值："浙江省杭州市余杭区五常街道木桥头西溪八方城"
	LocationType int64    `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wi-Fi，8：IP, 示例值：1
	Latitude     *float64 `json:"latitude,omitempty"`      // 地址纬度, 示例值：30.28994
	Longitude    *float64 `json:"longitude,omitempty"`     // 地址经度, 示例值：120.04509
	Ssid         *string  `json:"ssid,omitempty"`          // Wi-Fi 名称, 示例值："TP-Link-af12ca"
	Bssid        *string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址, 示例值："08:00:20:0A:8C:6D"
	MapType      *int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌, 示例值：1
	Address      *string  `json:"address,omitempty"`       // 地址名称, 示例值："北京市海淀区中航广场"
	Ip           *string  `json:"ip,omitempty"`            // IP 地址, 示例值："122.224.123.146"
	Feature      *string  `json:"feature,omitempty"`       // 额外信息，例如：运营商信息, 示例值："中国电信"
	GpsRange     *int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围, 示例值：300
}

// CreateAttendanceGroupReqGroupFreePunchCfg ...
type CreateAttendanceGroupReqGroupFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制打卡开始时间, 示例值："7:00"
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制打卡结束时间, 示例值："18:00"
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班, 示例值：1111100
	WorkDayNoPunchAsLack *bool  `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡, 示例值：true
}

// CreateAttendanceGroupReqGroupNeedPunchSpecialDay ...
type CreateAttendanceGroupReqGroupNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期, 示例值：20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID, 示例值："6919668827865513935"
}

// CreateAttendanceGroupReqGroupNoNeedPunchSpecialDay ...
type CreateAttendanceGroupReqGroupNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期, 示例值：20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID, 示例值："6919668827865513935"
}

// createAttendanceGroupResp ...
type createAttendanceGroupResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceGroupResp `json:"data,omitempty"`
}

// CreateAttendanceGroupResp ...
type CreateAttendanceGroupResp struct {
	Group *CreateAttendanceGroupRespGroup `json:"group,omitempty"` // 6921319402260496386
}

// CreateAttendanceGroupRespGroup ...
type CreateAttendanceGroupRespGroup struct {
	GroupID                string                                                 `json:"group_id,omitempty"`                   // 考勤组 ID（仅修改时提供）, 需要从“获取打卡结果”的接口中获取 groupId
	GroupName              string                                                 `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                                 `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                               `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                               `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                               `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                               `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                               `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	AllowOutPunch          bool                                                   `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                                   `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                                   `json:"allow_remedy,omitempty"`               // 是否限制补卡
	RemedyLimit            bool                                                   `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                                  `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyDateLimit        bool                                                   `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                                  `json:"remedy_date_num,omitempty"`            // 补卡时间，几天内补卡
	ShowCumulativeTime     bool                                                   `json:"show_cumulative_time,omitempty"`       // 是否展示累计时长
	ShowOverTime           bool                                                   `json:"show_over_time,omitempty"`             // 是否展示加班时长
	HideStaffPunchTime     bool                                                   `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡详情
	FacePunch              bool                                                   `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                                  `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                                   `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                                   `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*CreateAttendanceGroupRespGroupMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                                  `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*CreateAttendanceGroupRespGroupLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                  `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制, 3：自由班制
	PunchDayShiftIDs       []string                                               `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *CreateAttendanceGroupRespGroupFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                  `json:"calendar_id,omitempty"`                // 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1
	NeedPunchSpecialDays   []*CreateAttendanceGroupRespGroupNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*CreateAttendanceGroupRespGroupNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                                   `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡
	EffectNow              bool                                                   `json:"effect_now,omitempty"`                 // 是否立即生效，默认 false
	RemedyPeriodType       int64                                                  `json:"remedy_period_type,omitempty"`         // 补卡周期类型
	RemedyPeriodCustomDate int64                                                  `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期起始日期
	PunchType              int64                                                  `json:"punch_type,omitempty"`                 // 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡
}

// CreateAttendanceGroupRespGroupMachine ...
type CreateAttendanceGroupRespGroupMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

// CreateAttendanceGroupRespGroupLocation ...
type CreateAttendanceGroupRespGroupLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wi-Fi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如：运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围
}

// CreateAttendanceGroupRespGroupFreePunchCfg ...
type CreateAttendanceGroupRespGroupFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

// CreateAttendanceGroupRespGroupNeedPunchSpecialDay ...
type CreateAttendanceGroupRespGroupNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// CreateAttendanceGroupRespGroupNoNeedPunchSpecialDay ...
type CreateAttendanceGroupRespGroupNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteAttendanceGroup 通过班次 ID 删除班次。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/delete
func (r *AttendanceService) DeleteAttendanceGroup(ctx context.Context, request *DeleteAttendanceGroupReq, options ...MethodOptionFunc) (*DeleteAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceDeleteAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceDeleteAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DeleteAttendanceGroup",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceDeleteAttendanceGroup mock AttendanceDeleteAttendanceGroup method
func (r *Mock) MockAttendanceDeleteAttendanceGroup(f func(ctx context.Context, request *DeleteAttendanceGroupReq, options ...MethodOptionFunc) (*DeleteAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceDeleteAttendanceGroup = f
}

// UnMockAttendanceDeleteAttendanceGroup un-mock AttendanceDeleteAttendanceGroup method
func (r *Mock) UnMockAttendanceDeleteAttendanceGroup() {
	r.mockAttendanceDeleteAttendanceGroup = nil
}

// DeleteAttendanceGroupReq ...
type DeleteAttendanceGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query), 示例值："6919358128597097404"
}

// deleteAttendanceGroupResp ...
type deleteAttendanceGroupResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteAttendanceGroupResp `json:"data,omitempty"`
}

// DeleteAttendanceGroupResp ...
type DeleteAttendanceGroupResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceGroup 通过考勤组 ID 获取考勤组详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get
func (r *AttendanceService) GetAttendanceGroup(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceGroup mock AttendanceGetAttendanceGroup method
func (r *Mock) MockAttendanceGetAttendanceGroup(f func(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceGetAttendanceGroup = f
}

// UnMockAttendanceGetAttendanceGroup un-mock AttendanceGetAttendanceGroup method
func (r *Mock) UnMockAttendanceGetAttendanceGroup() {
	r.mockAttendanceGetAttendanceGroup = nil
}

// GetAttendanceGroupReq ...
type GetAttendanceGroupReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 的类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employeeId, `employee_no`：员工工号
	DeptType     string       `query:"dept_type" json:"-"`     // 部门 ID 的类型, 示例值："od-fcb45c28a45311afd441b8869541ece8", 可选值有: `open_id`：暂时只支持部门的 openid
	GroupID      string       `path:"group_id" json:"-"`       // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query), 示例值："6919358128597097404"
}

// getAttendanceGroupResp ...
type getAttendanceGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceGroupResp `json:"data,omitempty"`
}

// GetAttendanceGroupResp ...
type GetAttendanceGroupResp struct {
	GroupID                string                                         `json:"group_id,omitempty"`                   // 考勤组 ID（仅修改时提供）, 需要从“获取打卡结果”的接口中获取 groupId
	GroupName              string                                         `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                         `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                       `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                       `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                       `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                       `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                       `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	AllowOutPunch          bool                                           `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                           `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                           `json:"allow_remedy,omitempty"`               // 是否限制补卡
	RemedyLimit            bool                                           `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                          `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyDateLimit        bool                                           `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                          `json:"remedy_date_num,omitempty"`            // 补卡时间，几天内补卡
	ShowCumulativeTime     bool                                           `json:"show_cumulative_time,omitempty"`       // 是否展示累计时长
	ShowOverTime           bool                                           `json:"show_over_time,omitempty"`             // 是否展示加班时长
	HideStaffPunchTime     bool                                           `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡详情
	FacePunch              bool                                           `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                          `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                           `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                           `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*GetAttendanceGroupRespMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                          `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*GetAttendanceGroupRespLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                          `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制, 3：自由班制
	PunchDayShiftIDs       []string                                       `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *GetAttendanceGroupRespFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                          `json:"calendar_id,omitempty"`                // 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1
	NeedPunchSpecialDays   []*GetAttendanceGroupRespNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*GetAttendanceGroupRespNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                           `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡
	EffectNow              bool                                           `json:"effect_now,omitempty"`                 // 是否立即生效，默认 false
	RemedyPeriodType       int64                                          `json:"remedy_period_type,omitempty"`         // 补卡周期类型
	RemedyPeriodCustomDate int64                                          `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期起始日期
	PunchType              int64                                          `json:"punch_type,omitempty"`                 // 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡
}

// GetAttendanceGroupRespMachine ...
type GetAttendanceGroupRespMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

// GetAttendanceGroupRespLocation ...
type GetAttendanceGroupRespLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wi-Fi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如：运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围
}

// GetAttendanceGroupRespFreePunchCfg ...
type GetAttendanceGroupRespFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

// GetAttendanceGroupRespNeedPunchSpecialDay ...
type GetAttendanceGroupRespNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// GetAttendanceGroupRespNoNeedPunchSpecialDay ...
type GetAttendanceGroupRespNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceGroupList 翻页获取所有考勤组列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/list
func (r *AttendanceService) GetAttendanceGroupList(ctx context.Context, request *GetAttendanceGroupListReq, options ...MethodOptionFunc) (*GetAttendanceGroupListResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceGroupList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceGroupList mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceGroupList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceGroupList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceGroupListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceGroupList mock AttendanceGetAttendanceGroupList method
func (r *Mock) MockAttendanceGetAttendanceGroupList(f func(ctx context.Context, request *GetAttendanceGroupListReq, options ...MethodOptionFunc) (*GetAttendanceGroupListResp, *Response, error)) {
	r.mockAttendanceGetAttendanceGroupList = f
}

// UnMockAttendanceGetAttendanceGroupList un-mock AttendanceGetAttendanceGroupList method
func (r *Mock) UnMockAttendanceGetAttendanceGroupList() {
	r.mockAttendanceGetAttendanceGroupList = nil
}

// GetAttendanceGroupListReq ...
type GetAttendanceGroupListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："wgNOR1rmxogRvAsGl6CXlQ=="
}

// getAttendanceGroupListResp ...
type getAttendanceGroupListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceGroupListResp `json:"data,omitempty"`
}

// GetAttendanceGroupListResp ...
type GetAttendanceGroupListResp struct {
	GroupList []*GetAttendanceGroupListRespGroup `json:"group_list,omitempty"` // 考勤组列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetAttendanceGroupListRespGroup ...
type GetAttendanceGroupListRespGroup struct {
	GroupID   string `json:"group_id,omitempty"`   // 考勤组 ID
	GroupName string `json:"group_name,omitempty"` // 考勤组名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchAttendanceGroup 按考勤组名称查询考勤组摘要信息。查询条件支持名称精确匹配和模糊匹配两种方式。查询结果按考勤组修改时间 desc 排序，且最大记录数为 10 条。
//
// 该接口依赖的数据和考勤组主数据间存在数据同步延时（正常数据同步 2 秒以内），因此在使用该接口时需注意评估数据延迟潜在风险。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search
func (r *AttendanceService) SearchAttendanceGroup(ctx context.Context, request *SearchAttendanceGroupReq, options ...MethodOptionFunc) (*SearchAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceSearchAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#SearchAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceSearchAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "SearchAttendanceGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceSearchAttendanceGroup mock AttendanceSearchAttendanceGroup method
func (r *Mock) MockAttendanceSearchAttendanceGroup(f func(ctx context.Context, request *SearchAttendanceGroupReq, options ...MethodOptionFunc) (*SearchAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceSearchAttendanceGroup = f
}

// UnMockAttendanceSearchAttendanceGroup un-mock AttendanceSearchAttendanceGroup method
func (r *Mock) UnMockAttendanceSearchAttendanceGroup() {
	r.mockAttendanceSearchAttendanceGroup = nil
}

// SearchAttendanceGroupReq ...
type SearchAttendanceGroupReq struct {
	GroupName      string `json:"group_name,omitempty"`      // 考勤组名称, 示例值："考勤组1"
	ExactlyMatched *bool  `json:"exactly_matched,omitempty"` // 是否精准匹配，默认为 false：模糊匹配；true：精准匹配, 示例值：true
}

// searchAttendanceGroupResp ...
type searchAttendanceGroupResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *SearchAttendanceGroupResp `json:"data,omitempty"`
}

// SearchAttendanceGroupResp ...
type SearchAttendanceGroupResp struct {
	GroupList []*SearchAttendanceGroupRespGroup `json:"group_list,omitempty"` // 考勤组列表
}

// SearchAttendanceGroupRespGroup ...
type SearchAttendanceGroupRespGroup struct {
	GroupID   string `json:"group_id,omitempty"`   // 考勤组 ID
	GroupName string `json:"group_name,omitempty"` // 考勤组名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceRemedyApproval
//
// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口更新写入飞书考勤系统中的三方系统审批状态，例如请假、加班、外出、出差、补卡等审批，状态包括通过、不通过、撤销等。
// 发起状态的审批才可以被更新为通过、不通过，已经通过的审批才可以被更新为撤销。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/notify-approval-status-update2
func (r *AttendanceService) UpdateAttendanceRemedyApproval(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceRemedyApproval mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceRemedyApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/approval_infos/process",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceRemedyApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUpdateAttendanceRemedyApproval mock AttendanceUpdateAttendanceRemedyApproval method
func (r *Mock) MockAttendanceUpdateAttendanceRemedyApproval(f func(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceRemedyApproval = f
}

// UnMockAttendanceUpdateAttendanceRemedyApproval un-mock AttendanceUpdateAttendanceRemedyApproval method
func (r *Mock) UnMockAttendanceUpdateAttendanceRemedyApproval() {
	r.mockAttendanceUpdateAttendanceRemedyApproval = nil
}

// UpdateAttendanceRemedyApprovalReq ...
type UpdateAttendanceRemedyApprovalReq struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID，获取方式：1）[获取审批通过数据](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/get-user-attendance-data2) 2）[写入审批结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/add-approved-data-in-feishu-attendance2) 3）[通知补卡审批发起（补卡情况下）](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create)
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：撤销
}

// updateAttendanceRemedyApprovalResp ...
type updateAttendanceRemedyApprovalResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceRemedyApprovalResp `json:"data,omitempty"` // -
}

// UpdateAttendanceRemedyApprovalResp ...
type UpdateAttendanceRemedyApprovalResp struct {
	ApprovalInfo *UpdateAttendanceRemedyApprovalRespApprovalInfo `json:"approval_info,omitempty"`
}

// UpdateAttendanceRemedyApprovalRespApprovalInfo ...
type UpdateAttendanceRemedyApprovalRespApprovalInfo struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：已撤销
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceShift 班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。
//
// - 创建一个考勤组前，必须先创建一个或者多个班次。
// - 一个公司内的班次是共享的，你可以直接引用他人创建的班次，但是需要注意的是，若他人修改了班次，会影响到你的考勤组及其考勤结果。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create
func (r *AttendanceService) CreateAttendanceShift(ctx context.Context, request *CreateAttendanceShiftReq, options ...MethodOptionFunc) (*CreateAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceShift mock AttendanceCreateAttendanceShift method
func (r *Mock) MockAttendanceCreateAttendanceShift(f func(ctx context.Context, request *CreateAttendanceShiftReq, options ...MethodOptionFunc) (*CreateAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceShift = f
}

// UnMockAttendanceCreateAttendanceShift un-mock AttendanceCreateAttendanceShift method
func (r *Mock) UnMockAttendanceCreateAttendanceShift() {
	r.mockAttendanceCreateAttendanceShift = nil
}

// CreateAttendanceShiftReq ...
type CreateAttendanceShiftReq struct {
	ShiftName         string                                       `json:"shift_name,omitempty"`            // 班次名称, 示例值："早班"
	PunchTimes        int64                                        `json:"punch_times,omitempty"`           // 打卡次数, 示例值：1
	IsFlexible        *bool                                        `json:"is_flexible,omitempty"`           // 是否弹性打卡, 示例值：false
	FlexibleMinutes   *int64                                       `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间, 示例值：60
	NoNeedOff         *bool                                        `json:"no_need_off,omitempty"`           // 不需要打下班卡, 示例值：true
	PunchTimeRule     []*CreateAttendanceShiftReqPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule []*CreateAttendanceShiftReqLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      []*CreateAttendanceShiftReqRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// CreateAttendanceShiftReqPunchTimeRule ...
type CreateAttendanceShiftReqPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间, 示例值："9:00"
	OffTime             string `json:"off_time,omitempty"`               // 下班时间, 示例值："18:00, 第二天凌晨2点, 26:00"
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到, 示例值：30
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡, 示例值：60
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡, 示例值：60
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退, 示例值：30
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡, 示例值：60
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡, 示例值：60
}

// CreateAttendanceShiftReqLateOffLateOnRule ...
type CreateAttendanceShiftReqLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久, 示例值：60
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久, 示例值：30
}

// CreateAttendanceShiftReqRestTimeRule ...
type CreateAttendanceShiftReqRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始, 示例值："13:00"
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束, 示例值："14:00"
}

// createAttendanceShiftResp ...
type createAttendanceShiftResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceShiftResp `json:"data,omitempty"`
}

// CreateAttendanceShiftResp ...
type CreateAttendanceShiftResp struct {
	Shift *CreateAttendanceShiftRespShift `json:"shift,omitempty"` // 班次
}

// CreateAttendanceShiftRespShift ...
type CreateAttendanceShiftRespShift struct {
	ShiftID           string                                             `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                             `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                              `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                               `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                              `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间
	NoNeedOff         bool                                               `json:"no_need_off,omitempty"`           // 不需要打下班卡
	PunchTimeRule     []*CreateAttendanceShiftRespShiftPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule []*CreateAttendanceShiftRespShiftLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      []*CreateAttendanceShiftRespShiftRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// CreateAttendanceShiftRespShiftPunchTimeRule ...
type CreateAttendanceShiftRespShiftPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡
}

// CreateAttendanceShiftRespShiftLateOffLateOnRule ...
type CreateAttendanceShiftRespShiftLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久
}

// CreateAttendanceShiftRespShiftRestTimeRule ...
type CreateAttendanceShiftRespShiftRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteAttendanceShift 通过班次 ID 删除班次。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/delete
func (r *AttendanceService) DeleteAttendanceShift(ctx context.Context, request *DeleteAttendanceShiftReq, options ...MethodOptionFunc) (*DeleteAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceDeleteAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceDeleteAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DeleteAttendanceShift",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/:shift_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceDeleteAttendanceShift mock AttendanceDeleteAttendanceShift method
func (r *Mock) MockAttendanceDeleteAttendanceShift(f func(ctx context.Context, request *DeleteAttendanceShiftReq, options ...MethodOptionFunc) (*DeleteAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceDeleteAttendanceShift = f
}

// UnMockAttendanceDeleteAttendanceShift un-mock AttendanceDeleteAttendanceShift method
func (r *Mock) UnMockAttendanceDeleteAttendanceShift() {
	r.mockAttendanceDeleteAttendanceShift = nil
}

// DeleteAttendanceShiftReq ...
type DeleteAttendanceShiftReq struct {
	ShiftID string `path:"shift_id" json:"-"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create), 示例值："6919358778597097404"
}

// deleteAttendanceShiftResp ...
type deleteAttendanceShiftResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteAttendanceShiftResp `json:"data,omitempty"`
}

// DeleteAttendanceShiftResp ...
type DeleteAttendanceShiftResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceShift 通过班次的名称查询班次信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query
func (r *AttendanceService) GetAttendanceShift(ctx context.Context, request *GetAttendanceShiftReq, options ...MethodOptionFunc) (*GetAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceShift mock AttendanceGetAttendanceShift method
func (r *Mock) MockAttendanceGetAttendanceShift(f func(ctx context.Context, request *GetAttendanceShiftReq, options ...MethodOptionFunc) (*GetAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceGetAttendanceShift = f
}

// UnMockAttendanceGetAttendanceShift un-mock AttendanceGetAttendanceShift method
func (r *Mock) UnMockAttendanceGetAttendanceShift() {
	r.mockAttendanceGetAttendanceShift = nil
}

// GetAttendanceShiftReq ...
type GetAttendanceShiftReq struct {
	ShiftName string `query:"shift_name" json:"-"` // 班次名称, 示例值："早班"
}

// getAttendanceShiftResp ...
type getAttendanceShiftResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceShiftResp `json:"data,omitempty"`
}

// GetAttendanceShiftResp ...
type GetAttendanceShiftResp struct {
	ShiftID           string                                     `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                     `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                      `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                       `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                      `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间
	NoNeedOff         bool                                       `json:"no_need_off,omitempty"`           // 不需要打下班卡
	PunchTimeRule     []*GetAttendanceShiftRespPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule []*GetAttendanceShiftRespLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      []*GetAttendanceShiftRespRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// GetAttendanceShiftRespPunchTimeRule ...
type GetAttendanceShiftRespPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡
}

// GetAttendanceShiftRespLateOffLateOnRule ...
type GetAttendanceShiftRespLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久
}

// GetAttendanceShiftRespRestTimeRule ...
type GetAttendanceShiftRespRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceShiftDetail 通过班次 ID 获取班次详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get
func (r *AttendanceService) GetAttendanceShiftDetail(ctx context.Context, request *GetAttendanceShiftDetailReq, options ...MethodOptionFunc) (*GetAttendanceShiftDetailResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceShiftDetail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceShiftDetail mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceShiftDetail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceShiftDetail",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/:shift_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceShiftDetailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceShiftDetail mock AttendanceGetAttendanceShiftDetail method
func (r *Mock) MockAttendanceGetAttendanceShiftDetail(f func(ctx context.Context, request *GetAttendanceShiftDetailReq, options ...MethodOptionFunc) (*GetAttendanceShiftDetailResp, *Response, error)) {
	r.mockAttendanceGetAttendanceShiftDetail = f
}

// UnMockAttendanceGetAttendanceShiftDetail un-mock AttendanceGetAttendanceShiftDetail method
func (r *Mock) UnMockAttendanceGetAttendanceShiftDetail() {
	r.mockAttendanceGetAttendanceShiftDetail = nil
}

// GetAttendanceShiftDetailReq ...
type GetAttendanceShiftDetailReq struct {
	ShiftID string `path:"shift_id" json:"-"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create), 示例值："6919358778597097404"
}

// getAttendanceShiftDetailResp ...
type getAttendanceShiftDetailResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceShiftDetailResp `json:"data,omitempty"`
}

// GetAttendanceShiftDetailResp ...
type GetAttendanceShiftDetailResp struct {
	ShiftID           string                                           `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                           `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                            `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                             `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                            `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间
	NoNeedOff         bool                                             `json:"no_need_off,omitempty"`           // 不需要打下班卡
	PunchTimeRule     []*GetAttendanceShiftDetailRespPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule []*GetAttendanceShiftDetailRespLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      []*GetAttendanceShiftDetailRespRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// GetAttendanceShiftDetailRespPunchTimeRule ...
type GetAttendanceShiftDetailRespPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡
}

// GetAttendanceShiftDetailRespLateOffLateOnRule ...
type GetAttendanceShiftDetailRespLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久
}

// GetAttendanceShiftDetailRespRestTimeRule ...
type GetAttendanceShiftDetailRespRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceShiftList 翻页获取所有班次列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/list
func (r *AttendanceService) GetAttendanceShiftList(ctx context.Context, request *GetAttendanceShiftListReq, options ...MethodOptionFunc) (*GetAttendanceShiftListResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceShiftList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceShiftList mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceShiftList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceShiftList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceShiftListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceShiftList mock AttendanceGetAttendanceShiftList method
func (r *Mock) MockAttendanceGetAttendanceShiftList(f func(ctx context.Context, request *GetAttendanceShiftListReq, options ...MethodOptionFunc) (*GetAttendanceShiftListResp, *Response, error)) {
	r.mockAttendanceGetAttendanceShiftList = f
}

// UnMockAttendanceGetAttendanceShiftList un-mock AttendanceGetAttendanceShiftList method
func (r *Mock) UnMockAttendanceGetAttendanceShiftList() {
	r.mockAttendanceGetAttendanceShiftList = nil
}

// GetAttendanceShiftListReq ...
type GetAttendanceShiftListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："YrkvQ1wGaPVta45tkxuGiQ=="
}

// getAttendanceShiftListResp ...
type getAttendanceShiftListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceShiftListResp `json:"data,omitempty"`
}

// GetAttendanceShiftListResp ...
type GetAttendanceShiftListResp struct {
	ShiftList []*GetAttendanceShiftListRespShift `json:"shift_list,omitempty"` // 班次列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetAttendanceShiftListRespShift ...
type GetAttendanceShiftListRespShift struct {
	ShiftID           string                                              `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                              `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                               `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                                `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                               `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间
	NoNeedOff         bool                                                `json:"no_need_off,omitempty"`           // 不需要打下班卡
	PunchTimeRule     []*GetAttendanceShiftListRespShiftPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule []*GetAttendanceShiftListRespShiftLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      []*GetAttendanceShiftListRespShiftRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// GetAttendanceShiftListRespShiftPunchTimeRule ...
type GetAttendanceShiftListRespShiftPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡
}

// GetAttendanceShiftListRespShiftLateOffLateOnRule ...
type GetAttendanceShiftListRespShiftLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久
}

// GetAttendanceShiftListRespShiftRestTimeRule ...
type GetAttendanceShiftListRespShiftRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceUserApproval
//
// 由于部分企业使用的是自己的审批系统，而不是飞书审批系统，因此员工的请假、加班等数据无法流入到飞书考勤系统中，导致员工在请假时间段内依然收到打卡提醒，并且被记为缺卡。
// 对于这些只使用飞书考勤系统，而未使用飞书审批系统的企业，可以通过考勤开放接口的形式，将三方审批结果数据回写到飞书的考勤系统中。
// 目前支持加班、请假、出差和外出这四种审批结果的写入。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_approval/add-approved-data-in-feishu-attendance2
func (r *AttendanceService) CreateAttendanceUserApproval(ctx context.Context, request *CreateAttendanceUserApprovalReq, options ...MethodOptionFunc) (*CreateAttendanceUserApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceUserApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceUserApproval mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceUserApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceUserApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_approvals",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceUserApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceUserApproval mock AttendanceCreateAttendanceUserApproval method
func (r *Mock) MockAttendanceCreateAttendanceUserApproval(f func(ctx context.Context, request *CreateAttendanceUserApprovalReq, options ...MethodOptionFunc) (*CreateAttendanceUserApprovalResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceUserApproval = f
}

// UnMockAttendanceCreateAttendanceUserApproval un-mock AttendanceCreateAttendanceUserApproval method
func (r *Mock) UnMockAttendanceCreateAttendanceUserApproval() {
	r.mockAttendanceCreateAttendanceUserApproval = nil
}

// CreateAttendanceUserApprovalReq ...
type CreateAttendanceUserApprovalReq struct {
	EmployeeType EmployeeType                                 `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID），employee_no（员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号）】，示例值："employee_id"
	UserApproval *CreateAttendanceUserApprovalReqUserApproval `json:"user_approval,omitempty"` // 审批信息
}

// CreateAttendanceUserApprovalReqUserApproval ...
type CreateAttendanceUserApprovalReqUserApproval struct {
	UserID        string                                                     `json:"user_id,omitempty"`        // 审批发起人
	Date          string                                                     `json:"date,omitempty"`           // 审批作用时间
	Outs          []*CreateAttendanceUserApprovalReqUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*CreateAttendanceUserApprovalReqUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*CreateAttendanceUserApprovalReqUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*CreateAttendanceUserApprovalReqUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

// CreateAttendanceUserApprovalReqUserApprovalOut ...
type CreateAttendanceUserApprovalReqUserApprovalOut struct {
	UniqID        string     `json:"uniq_id,omitempty"`        // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit          int64      `json:"unit,omitempty"`           // 外出时长单位，可用值：【1：上半天；2：下半天；3：全天；4：小时。】
	Interval      int64      `json:"interval,omitempty"`       // 假期时长（单位秒）
	StartTime     string     `json:"start_time,omitempty"`     // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime       string     `json:"end_time,omitempty"`       // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames     *I18nNames `json:"i18n_names,omitempty"`     // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale string     `json:"default_locale,omitempty"` // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason        string     `json:"reason,omitempty"`         // 外出理由
}

// CreateAttendanceUserApprovalReqUserApprovalLeave ...
type CreateAttendanceUserApprovalReqUserApprovalLeave struct {
	UniqID        string     `json:"uniq_id,omitempty"`        // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit          int64      `json:"unit,omitempty"`           // 假期时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval      int64      `json:"interval,omitempty"`       // 假期时长（单位秒）
	StartTime     string     `json:"start_time,omitempty"`     // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime       string     `json:"end_time,omitempty"`       // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames     *I18nNames `json:"i18n_names,omitempty"`     // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale string     `json:"default_locale,omitempty"` // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason        string     `json:"reason,omitempty"`         // 请假理由，必选字段
}

// CreateAttendanceUserApprovalReqUserApprovalOvertimeWork ...
type CreateAttendanceUserApprovalReqUserApprovalOvertimeWork struct {
	Duration  float64 `json:"duration,omitempty"`   // 加班时长
	Unit      int64   `json:"unit,omitempty"`       // 加班时长单位，可用值：【1（天），2（小时）】
	Category  int64   `json:"category,omitempty"`   // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type      int64   `json:"type,omitempty"`       // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费）】
	StartTime string  `json:"start_time,omitempty"` // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime   string  `json:"end_time,omitempty"`   // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// CreateAttendanceUserApprovalReqUserApprovalTrip ...
type CreateAttendanceUserApprovalReqUserApprovalTrip struct {
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// createAttendanceUserApprovalResp ...
type createAttendanceUserApprovalResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceUserApprovalResp `json:"data,omitempty"` // -
}

// CreateAttendanceUserApprovalResp ...
type CreateAttendanceUserApprovalResp struct {
	UserApprovals []*CreateAttendanceUserApprovalRespUserApproval `json:"user_approvals,omitempty"` // 审批结果列表
}

// CreateAttendanceUserApprovalRespUserApproval ...
type CreateAttendanceUserApprovalRespUserApproval struct {
	UserID        string                                                      `json:"user_id,omitempty"`        // 审批用户 ID
	Date          string                                                      `json:"date,omitempty"`           // 审批作用时间
	Outs          []*CreateAttendanceUserApprovalRespUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*CreateAttendanceUserApprovalRespUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*CreateAttendanceUserApprovalRespUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*CreateAttendanceUserApprovalRespUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

// CreateAttendanceUserApprovalRespUserApprovalOut ...
type CreateAttendanceUserApprovalRespUserApprovalOut struct {
	ApprovalID       string     `json:"approval_id,omitempty"`        // 审批实例ID
	UniqID           string     `json:"uniq_id,omitempty"`            // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 外出时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 假期时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason           string     `json:"reason,omitempty"`             // 外出理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间
}

// CreateAttendanceUserApprovalRespUserApprovalLeave ...
type CreateAttendanceUserApprovalRespUserApprovalLeave struct {
	ApprovalID       string     `json:"approval_id,omitempty"`        // 审批实例ID
	UniqID           string     `json:"uniq_id,omitempty"`            // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 假期时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 假期时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason           string     `json:"reason,omitempty"`             // 请假理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// CreateAttendanceUserApprovalRespUserApprovalOvertimeWork ...
type CreateAttendanceUserApprovalRespUserApprovalOvertimeWork struct {
	ApprovalID string  `json:"approval_id,omitempty"` // 审批实例ID
	Duration   float64 `json:"duration,omitempty"`    // 加班时长
	Unit       int64   `json:"unit,omitempty"`        // 加班时长单位，可用值：【1（天），2（小时）】
	Category   int64   `json:"category,omitempty"`    // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type       int64   `json:"type,omitempty"`        // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费），3（关联加班规则，没有调休或加班费）】
	StartTime  string  `json:"start_time,omitempty"`  // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime    string  `json:"end_time,omitempty"`    // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// CreateAttendanceUserApprovalRespUserApprovalTrip ...
type CreateAttendanceUserApprovalRespUserApprovalTrip struct {
	ApprovalID       string `json:"approval_id,omitempty"`        // 审批实例ID
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserApproval
//
// 获取员工在某段时间内的请假、加班、外出和出差四种审批的通过数据。
// 请假的假期时长字段(interval)，暂未开放提供，待后续提供。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/get-user-attendance-data2
func (r *AttendanceService) GetAttendanceUserApproval(ctx context.Context, request *GetAttendanceUserApprovalReq, options ...MethodOptionFunc) (*GetAttendanceUserApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserApproval mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_approvals/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserApproval mock AttendanceGetAttendanceUserApproval method
func (r *Mock) MockAttendanceGetAttendanceUserApproval(f func(ctx context.Context, request *GetAttendanceUserApprovalReq, options ...MethodOptionFunc) (*GetAttendanceUserApprovalResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserApproval = f
}

// UnMockAttendanceGetAttendanceUserApproval un-mock AttendanceGetAttendanceUserApproval method
func (r *Mock) UnMockAttendanceGetAttendanceUserApproval() {
	r.mockAttendanceGetAttendanceUserApproval = nil
}

// GetAttendanceUserApprovalReq ...
type GetAttendanceUserApprovalReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 的员工工号类型，必选字段，可用值：【employee_id（员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID），employee_no（员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号）】，示例值："employee_id"
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表
	CheckDateFrom int64        `json:"check_date_from,omitempty"` // 查询的起始工作日
	CheckDateTo   int64        `json:"check_date_to,omitempty"`   // 查询的结束工作日，与 check_date_from 的时间间隔不超过30天
}

// getAttendanceUserApprovalResp ...
type getAttendanceUserApprovalResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserApprovalResp `json:"data,omitempty"` // -
}

// GetAttendanceUserApprovalResp ...
type GetAttendanceUserApprovalResp struct {
	UserApprovals []*GetAttendanceUserApprovalRespUserApproval `json:"user_approvals,omitempty"` // 审批结果列表
}

// GetAttendanceUserApprovalRespUserApproval ...
type GetAttendanceUserApprovalRespUserApproval struct {
	UserID        string                                                   `json:"user_id,omitempty"`        // 审批用户 ID
	Date          string                                                   `json:"date,omitempty"`           // 审批作用时间
	Outs          []*GetAttendanceUserApprovalRespUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*GetAttendanceUserApprovalRespUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*GetAttendanceUserApprovalRespUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*GetAttendanceUserApprovalRespUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

// GetAttendanceUserApprovalRespUserApprovalOut ...
type GetAttendanceUserApprovalRespUserApprovalOut struct {
	UniqID           string     `json:"uniq_id,omitempty"`            // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 外出时长单位，可用值：【1：上半天；2：下半天；3：全天；4：小时。】
	Interval         int64      `json:"interval,omitempty"`           // 外出时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason           string     `json:"reason,omitempty"`             // 外出理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间
}

// GetAttendanceUserApprovalRespUserApprovalLeave ...
type GetAttendanceUserApprovalRespUserApprovalLeave struct {
	UniqID           string     `json:"uniq_id,omitempty"`            // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 假期时长单位，可用值：【1（天），0（小时），4（分钟）】
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason           string     `json:"reason,omitempty"`             // 请假理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// GetAttendanceUserApprovalRespUserApprovalOvertimeWork ...
type GetAttendanceUserApprovalRespUserApprovalOvertimeWork struct {
	Duration  float64 `json:"duration,omitempty"`   // 加班时长
	Unit      int64   `json:"unit,omitempty"`       // 加班时长单位，可用值：【1（天），2（小时）】
	Category  int64   `json:"category,omitempty"`   // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type      int64   `json:"type,omitempty"`       // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费）】
	StartTime string  `json:"start_time,omitempty"` // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime   string  `json:"end_time,omitempty"`   // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// GetAttendanceUserApprovalRespUserApprovalTrip ...
type GetAttendanceUserApprovalRespUserApprovalTrip struct {
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchCreateAttendanceUserDailyShift 班表是用来描述考勤组内人员每天按哪个班次进行上班。目前班表支持按一个整月对一位或多位人员进行排班。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/batch_create
func (r *AttendanceService) BatchCreateAttendanceUserDailyShift(ctx context.Context, request *BatchCreateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchCreateAttendanceUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchCreateAttendanceUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceBatchCreateAttendanceUserDailyShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchCreateAttendanceUserDailyShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_daily_shifts/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchCreateAttendanceUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceBatchCreateAttendanceUserDailyShift mock AttendanceBatchCreateAttendanceUserDailyShift method
func (r *Mock) MockAttendanceBatchCreateAttendanceUserDailyShift(f func(ctx context.Context, request *BatchCreateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceBatchCreateAttendanceUserDailyShift = f
}

// UnMockAttendanceBatchCreateAttendanceUserDailyShift un-mock AttendanceBatchCreateAttendanceUserDailyShift method
func (r *Mock) UnMockAttendanceBatchCreateAttendanceUserDailyShift() {
	r.mockAttendanceBatchCreateAttendanceUserDailyShift = nil
}

// BatchCreateAttendanceUserDailyShiftReq ...
type BatchCreateAttendanceUserDailyShiftReq struct {
	EmployeeType    EmployeeType                                            `query:"employee_type" json:"-"`     // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserDailyShifts []*BatchCreateAttendanceUserDailyShiftReqUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// BatchCreateAttendanceUserDailyShiftReqUserDailyShift ...
type BatchCreateAttendanceUserDailyShiftReqUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query), 示例值："6737202939523236110"
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create), 示例值："6753520403404030215"
	Month   int64  `json:"month,omitempty"`    // 月份, 示例值：202101
	UserID  string `json:"user_id,omitempty"`  // 用户 ID, 示例值："abd754f7"
	DayNo   int64  `json:"day_no,omitempty"`   // 日期, 示例值：21
}

// batchCreateAttendanceUserDailyShiftResp ...
type batchCreateAttendanceUserDailyShiftResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateAttendanceUserDailyShiftResp `json:"data,omitempty"`
}

// BatchCreateAttendanceUserDailyShiftResp ...
type BatchCreateAttendanceUserDailyShiftResp struct {
	UserDailyShifts []*BatchCreateAttendanceUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// BatchCreateAttendanceUserDailyShiftRespUserDailyShift ...
type BatchCreateAttendanceUserDailyShiftRespUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户 ID
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserDailyShift 支持查询多个用户的排班情况，查询的时间跨度不能超过 30 天。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/query
func (r *AttendanceService) GetAttendanceUserDailyShift(ctx context.Context, request *GetAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*GetAttendanceUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserDailyShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserDailyShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_daily_shifts/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserDailyShift mock AttendanceGetAttendanceUserDailyShift method
func (r *Mock) MockAttendanceGetAttendanceUserDailyShift(f func(ctx context.Context, request *GetAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*GetAttendanceUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserDailyShift = f
}

// UnMockAttendanceGetAttendanceUserDailyShift un-mock AttendanceGetAttendanceUserDailyShift method
func (r *Mock) UnMockAttendanceGetAttendanceUserDailyShift() {
	r.mockAttendanceGetAttendanceUserDailyShift = nil
}

// GetAttendanceUserDailyShiftReq ...
type GetAttendanceUserDailyShiftReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表, 示例值：["abd754f7"]
	CheckDateFrom int64        `json:"check_date_from,omitempty"` // 查询的起始工作日, 示例值：20190817
	CheckDateTo   int64        `json:"check_date_to,omitempty"`   // 查询的结束工作日, 示例值：20190820
}

// getAttendanceUserDailyShiftResp ...
type getAttendanceUserDailyShiftResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserDailyShiftResp `json:"data,omitempty"`
}

// GetAttendanceUserDailyShiftResp ...
type GetAttendanceUserDailyShiftResp struct {
	UserDailyShifts []*GetAttendanceUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// GetAttendanceUserDailyShiftRespUserDailyShift ...
type GetAttendanceUserDailyShiftRespUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户 ID
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchCreateAttendanceUserFlow 导入授权内员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。
//
// 适用于考勤机数据导入等场景。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create
func (r *AttendanceService) BatchCreateAttendanceUserFlow(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchCreateAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchCreateAttendanceUserFlow",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchCreateAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceBatchCreateAttendanceUserFlow mock AttendanceBatchCreateAttendanceUserFlow method
func (r *Mock) MockAttendanceBatchCreateAttendanceUserFlow(f func(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceBatchCreateAttendanceUserFlow = f
}

// UnMockAttendanceBatchCreateAttendanceUserFlow un-mock AttendanceBatchCreateAttendanceUserFlow method
func (r *Mock) UnMockAttendanceBatchCreateAttendanceUserFlow() {
	r.mockAttendanceBatchCreateAttendanceUserFlow = nil
}

// BatchCreateAttendanceUserFlowReq ...
type BatchCreateAttendanceUserFlowReq struct {
	EmployeeType EmployeeType                                  `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 和 creator_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	FlowRecords  []*BatchCreateAttendanceUserFlowReqFlowRecord `json:"flow_records,omitempty"`  // 打卡流水记录列表
}

// BatchCreateAttendanceUserFlowReqFlowRecord ...
type BatchCreateAttendanceUserFlowReqFlowRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID, 示例值："abd754f7"
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID, 示例值："abd754f7"
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息, 示例值："西溪八方城"
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳, 示例值："1611476284"
	Comment      string   `json:"comment,omitempty"`       // 打卡备注, 示例值："上班打卡"
	RecordID     *string  `json:"record_id,omitempty"`     // 打卡记录 ID, 示例值："6709359313699356941"
	Longitude    *float64 `json:"longitude,omitempty"`     // 打卡经度, 示例值：30.28991
	Latitude     *float64 `json:"latitude,omitempty"`      // 打卡纬度, 示例值：120.04513
	Ssid         *string  `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID, 示例值："b0:b8:67:5c:1d:72"
	Bssid        *string  `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址, 示例值："b0:b8:67:5c:1d:72"
	IsField      *bool    `json:"is_field,omitempty"`      // 是否为外勤打卡, 示例值：true
	IsWifi       *bool    `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡, 示例值：true
	Type         *int64   `json:"type,omitempty"`          // 记录生成方式, 示例值：0, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表, 示例值：https://time.clockin.biz/manage/download/6840389754748502021
	DeviceID     *string  `json:"device_id,omitempty"`     // 打卡设备 ID, 示例值："99e0609ee053448596502691a81428654d7ded64c7bd85acd982d26b3636c37d"
}

// batchCreateAttendanceUserFlowResp ...
type batchCreateAttendanceUserFlowResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateAttendanceUserFlowResp `json:"data,omitempty"`
}

// BatchCreateAttendanceUserFlowResp ...
type BatchCreateAttendanceUserFlowResp struct {
	FlowRecords []*BatchCreateAttendanceUserFlowRespFlowRecord `json:"flow_records,omitempty"` // 打卡流水记录列表
}

// BatchCreateAttendanceUserFlowRespFlowRecord ...
type BatchCreateAttendanceUserFlowRespFlowRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetAttendanceUserFlow 批量查询授权内员工的实际打卡流水记录。例如，企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，但是该员工在这期间打了多次卡，该接口会把所有的打卡记录都返回。
//
// 如果只需获取打卡结果，而不需要详细的打卡数据，可使用“获取打卡结果”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query
func (r *AttendanceService) BatchGetAttendanceUserFlow(ctx context.Context, request *BatchGetAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchGetAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchGetAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchGetAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceBatchGetAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchGetAttendanceUserFlow",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceBatchGetAttendanceUserFlow mock AttendanceBatchGetAttendanceUserFlow method
func (r *Mock) MockAttendanceBatchGetAttendanceUserFlow(f func(ctx context.Context, request *BatchGetAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchGetAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceBatchGetAttendanceUserFlow = f
}

// UnMockAttendanceBatchGetAttendanceUserFlow un-mock AttendanceBatchGetAttendanceUserFlow method
func (r *Mock) UnMockAttendanceBatchGetAttendanceUserFlow() {
	r.mockAttendanceBatchGetAttendanceUserFlow = nil
}

// BatchGetAttendanceUserFlowReq ...
type BatchGetAttendanceUserFlowReq struct {
	EmployeeType          EmployeeType `query:"employee_type" json:"-"`           // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	IncludeTerminatedUser *bool        `query:"include_terminated_user" json:"-"` // 由于新入职用户可以复用已离职用户的employee_no/employee_id。如果true，返回employee_no/employee_id对应的所有在职+离职用户数据；如果false，只返回employee_no/employee_id对应的在职或最近一个离职用户数据, 示例值：true
	UserIDs               []string     `json:"user_ids,omitempty"`                // employee_no 或 employee_id 列表，长度不超过 50, 示例值：[ "abd754f7"]
	CheckTimeFrom         string       `json:"check_time_from,omitempty"`         // 查询的起始时间，时间戳, 示例值："1566641088"
	CheckTimeTo           string       `json:"check_time_to,omitempty"`           // 查询的结束时间，时间戳, 示例值："1566641088"
}

// batchGetAttendanceUserFlowResp ...
type batchGetAttendanceUserFlowResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetAttendanceUserFlowResp `json:"data,omitempty"`
}

// BatchGetAttendanceUserFlowResp ...
type BatchGetAttendanceUserFlowResp struct {
	UserFlowResults []*BatchGetAttendanceUserFlowRespUserFlowResult `json:"user_flow_results,omitempty"` // 打卡记录列表
}

// BatchGetAttendanceUserFlowRespUserFlowResult ...
type BatchGetAttendanceUserFlowRespUserFlowResult struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserFlow 通过打卡记录 ID 获取用户的打卡流水记录。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/get
func (r *AttendanceService) GetAttendanceUserFlow(ctx context.Context, request *GetAttendanceUserFlowReq, options ...MethodOptionFunc) (*GetAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserFlow",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/:user_flow_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserFlow mock AttendanceGetAttendanceUserFlow method
func (r *Mock) MockAttendanceGetAttendanceUserFlow(f func(ctx context.Context, request *GetAttendanceUserFlowReq, options ...MethodOptionFunc) (*GetAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserFlow = f
}

// UnMockAttendanceGetAttendanceUserFlow un-mock AttendanceGetAttendanceUserFlow method
func (r *Mock) UnMockAttendanceGetAttendanceUserFlow() {
	r.mockAttendanceGetAttendanceUserFlow = nil
}

// GetAttendanceUserFlowReq ...
type GetAttendanceUserFlowReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 响应体中的 user_id 和 creator_id 的员工工号类型, 示例值："employee_id", 可选值有: `open_id`：开放 openID, `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserFlowID   string       `path:"user_flow_id" json:"-"`   // 打卡流水记录 ID，获取方式：1）[批量查询打卡流水记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query) 2）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query) 3）[导入打卡流水记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create), 示例值："6708236686834352397"
}

// getAttendanceUserFlowResp ...
type getAttendanceUserFlowResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserFlowResp `json:"data,omitempty"`
}

// GetAttendanceUserFlowResp ...
type GetAttendanceUserFlowResp struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserSettingList 批量查询授权内员工的用户设置信息，包括人脸照片文件 ID、人脸照片更新时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/query
func (r *AttendanceService) GetAttendanceUserSettingList(ctx context.Context, request *GetAttendanceUserSettingListReq, options ...MethodOptionFunc) (*GetAttendanceUserSettingListResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserSettingList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserSettingList mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserSettingList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserSettingList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_settings/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserSettingListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserSettingList mock AttendanceGetAttendanceUserSettingList method
func (r *Mock) MockAttendanceGetAttendanceUserSettingList(f func(ctx context.Context, request *GetAttendanceUserSettingListReq, options ...MethodOptionFunc) (*GetAttendanceUserSettingListResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserSettingList = f
}

// UnMockAttendanceGetAttendanceUserSettingList un-mock AttendanceGetAttendanceUserSettingList method
func (r *Mock) UnMockAttendanceGetAttendanceUserSettingList() {
	r.mockAttendanceGetAttendanceUserSettingList = nil
}

// GetAttendanceUserSettingListReq ...
type GetAttendanceUserSettingListReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserIDs      []string     `json:"user_ids,omitempty"`      // employee_no 或 employee_id 列表, 示例值：["abd754f7"], 最大长度：`100`
}

// getAttendanceUserSettingListResp ...
type getAttendanceUserSettingListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserSettingListResp `json:"data,omitempty"`
}

// GetAttendanceUserSettingListResp ...
type GetAttendanceUserSettingListResp struct {
	UserSettings []*GetAttendanceUserSettingListRespUserSetting `json:"user_settings,omitempty"` // 用户设置信息列表
}

// GetAttendanceUserSettingListRespUserSetting ...
type GetAttendanceUserSettingListRespUserSetting struct {
	UserID            string `json:"user_id,omitempty"`              // 用户 ID
	FaceKey           string `json:"face_key,omitempty"`             // 人脸照片文件 ID，获取方式：[文件上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload)
	FaceKeyUpdateTime string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceUserSetting 修改授权内员工的用户设置信息，包括人脸照片文件 ID。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/modify
func (r *AttendanceService) UpdateAttendanceUserSetting(ctx context.Context, request *UpdateAttendanceUserSettingReq, options ...MethodOptionFunc) (*UpdateAttendanceUserSettingResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceUserSetting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceUserSetting mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceUserSetting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceUserSetting",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_settings/modify",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceUserSettingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUpdateAttendanceUserSetting mock AttendanceUpdateAttendanceUserSetting method
func (r *Mock) MockAttendanceUpdateAttendanceUserSetting(f func(ctx context.Context, request *UpdateAttendanceUserSettingReq, options ...MethodOptionFunc) (*UpdateAttendanceUserSettingResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceUserSetting = f
}

// UnMockAttendanceUpdateAttendanceUserSetting un-mock AttendanceUpdateAttendanceUserSetting method
func (r *Mock) UnMockAttendanceUpdateAttendanceUserSetting() {
	r.mockAttendanceUpdateAttendanceUserSetting = nil
}

// UpdateAttendanceUserSettingReq ...
type UpdateAttendanceUserSettingReq struct {
	EmployeeType EmployeeType                               `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserSetting  *UpdateAttendanceUserSettingReqUserSetting `json:"user_setting,omitempty"`  // 用户设置
}

// UpdateAttendanceUserSettingReqUserSetting ...
type UpdateAttendanceUserSettingReqUserSetting struct {
	UserID            string  `json:"user_id,omitempty"`              // 用户 ID, 示例值："abd754f7"
	FaceKey           string  `json:"face_key,omitempty"`             // 人脸照片文件 ID，获取方式：[文件上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload), 示例值："xxxxxb306842b1c189bc5212eefxxxxx"
	FaceKeyUpdateTime *string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳, 示例值："1625681917"
}

// updateAttendanceUserSettingResp ...
type updateAttendanceUserSettingResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceUserSettingResp `json:"data,omitempty"`
}

// UpdateAttendanceUserSettingResp ...
type UpdateAttendanceUserSettingResp struct {
	UserSetting *UpdateAttendanceUserSettingRespUserSetting `json:"user_setting,omitempty"` // 用户设置
}

// UpdateAttendanceUserSettingRespUserSetting ...
type UpdateAttendanceUserSettingRespUserSetting struct {
	UserID            string `json:"user_id,omitempty"`              // 用户 ID
	FaceKey           string `json:"face_key,omitempty"`             // 人脸照片文件 ID，获取方式：[文件上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload)
	FaceKeyUpdateTime string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserStatsData 查询日度统计或月度统计的统计数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_data/query
func (r *AttendanceService) GetAttendanceUserStatsData(ctx context.Context, request *GetAttendanceUserStatsDataReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsDataResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserStatsData != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserStatsData mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserStatsData(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserStatsData",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_datas/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserStatsDataResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserStatsData mock AttendanceGetAttendanceUserStatsData method
func (r *Mock) MockAttendanceGetAttendanceUserStatsData(f func(ctx context.Context, request *GetAttendanceUserStatsDataReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsDataResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserStatsData = f
}

// UnMockAttendanceGetAttendanceUserStatsData un-mock AttendanceGetAttendanceUserStatsData method
func (r *Mock) UnMockAttendanceGetAttendanceUserStatsData() {
	r.mockAttendanceGetAttendanceUserStatsData = nil
}

// GetAttendanceUserStatsDataReq ...
type GetAttendanceUserStatsDataReq struct {
	EmployeeType     EmployeeType `query:"employee_type" json:"-"`      // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	Locale           string       `json:"locale,omitempty"`             // 语言类型, 示例值："zh", 可选值有: `en`：英语, `ja`：日语, `zh`：中文
	StatsType        string       `json:"stats_type,omitempty"`         // 统计类型, 示例值："month", 可选值有: `daily`：日度统计, `month`：月度统计
	StartDate        int64        `json:"start_date,omitempty"`         // 开始时间, 示例值：20210316
	EndDate          int64        `json:"end_date,omitempty"`           // 结束时间,（时间间隔不超过 40 天）, 示例值：20210323
	UserIDs          []string     `json:"user_ids,omitempty"`           // 查询的用户 ID 列表,（用户数量不超过 200）, 示例值：[,        "ec8ddg56",,        "4dbb52f2",,        "4167842e",    ]
	NeedHistory      *bool        `json:"need_history,omitempty"`       // 是否需要历史数据, 示例值：true
	CurrentGroupOnly *bool        `json:"current_group_only,omitempty"` // 只展示当前考勤组, 示例值：true
}

// getAttendanceUserStatsDataResp ...
type getAttendanceUserStatsDataResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserStatsDataResp `json:"data,omitempty"`
}

// GetAttendanceUserStatsDataResp ...
type GetAttendanceUserStatsDataResp struct {
	UserDatas []*GetAttendanceUserStatsDataRespUserData `json:"user_datas,omitempty"` // 用户统计数据
}

// GetAttendanceUserStatsDataRespUserData ...
type GetAttendanceUserStatsDataRespUserData struct {
	Name   string                                        `json:"name,omitempty"`    // 用户姓名
	UserID string                                        `json:"user_id,omitempty"` // 用户 ID
	Datas  []*GetAttendanceUserStatsDataRespUserDataData `json:"datas,omitempty"`   // 用户的统计数据
}

// GetAttendanceUserStatsDataRespUserDataData ...
type GetAttendanceUserStatsDataRespUserDataData struct {
	Code     string                                               `json:"code,omitempty"`     // 字段编号
	Value    string                                               `json:"value,omitempty"`    // 数据值
	Features []*GetAttendanceUserStatsDataRespUserDataDataFeature `json:"features,omitempty"` // 数据属性
}

// GetAttendanceUserStatsDataRespUserDataDataFeature ...
type GetAttendanceUserStatsDataRespUserDataDataFeature struct {
	Key   string `json:"key,omitempty"`   // 统计数据列附加属性的名称
	Value string `json:"value,omitempty"` // 统计数据列附加属性的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserStatsField 查询考勤统计支持的日度统计或月度统计的统计表头。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_field/query
func (r *AttendanceService) GetAttendanceUserStatsField(ctx context.Context, request *GetAttendanceUserStatsFieldReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsFieldResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserStatsField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserStatsField mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserStatsField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserStatsField",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_fields/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserStatsFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserStatsField mock AttendanceGetAttendanceUserStatsField method
func (r *Mock) MockAttendanceGetAttendanceUserStatsField(f func(ctx context.Context, request *GetAttendanceUserStatsFieldReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsFieldResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserStatsField = f
}

// UnMockAttendanceGetAttendanceUserStatsField un-mock AttendanceGetAttendanceUserStatsField method
func (r *Mock) UnMockAttendanceGetAttendanceUserStatsField() {
	r.mockAttendanceGetAttendanceUserStatsField = nil
}

// GetAttendanceUserStatsFieldReq ...
type GetAttendanceUserStatsFieldReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	Locale       string       `json:"locale,omitempty"`        // 语言类型, 示例值："zh", 可选值有: `en`：英语, `ja`：日语, `zh`：中文
	StatsType    string       `json:"stats_type,omitempty"`    // 统计类型, 示例值："daily", 可选值有: `daily`：日度统计, `month`：月度统计
	StartDate    int64        `json:"start_date,omitempty"`    // 开始时间, 示例值：20210316
	EndDate      int64        `json:"end_date,omitempty"`      // 结束时间（时间间隔不超过 40 天）, 示例值：20210323
}

// getAttendanceUserStatsFieldResp ...
type getAttendanceUserStatsFieldResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserStatsFieldResp `json:"data,omitempty"`
}

// GetAttendanceUserStatsFieldResp ...
type GetAttendanceUserStatsFieldResp struct {
	UserStatsField *GetAttendanceUserStatsFieldRespUserStatsField `json:"user_stats_field,omitempty"` // 统计数据表头
}

// GetAttendanceUserStatsFieldRespUserStatsField ...
type GetAttendanceUserStatsFieldRespUserStatsField struct {
	StatsType string                                                `json:"stats_type,omitempty"` // 统计类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                                `json:"user_id,omitempty"`    // 用户 ID
	Fields    []*GetAttendanceUserStatsFieldRespUserStatsFieldField `json:"fields,omitempty"`     // 字段列表
}

// GetAttendanceUserStatsFieldRespUserStatsFieldField ...
type GetAttendanceUserStatsFieldRespUserStatsFieldField struct {
	Code        string                                                          `json:"code,omitempty"`         // 字段编号
	Title       string                                                          `json:"title,omitempty"`        // 字段名称
	ChildFields []*GetAttendanceUserStatsFieldRespUserStatsFieldFieldChildField `json:"child_fields,omitempty"` // 子字段列表
}

// GetAttendanceUserStatsFieldRespUserStatsFieldFieldChildField ...
type GetAttendanceUserStatsFieldRespUserStatsFieldFieldChildField struct {
	Code     string `json:"code,omitempty"`      // 子字段编号
	Title    string `json:"title,omitempty"`     // 子字段名称
	TimeUnit string `json:"time_unit,omitempty"` // 时间单位
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserStatsView 查询开发者定制的日度统计或月度统计的统计报表表头设置信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query
func (r *AttendanceService) GetAttendanceUserStatsView(ctx context.Context, request *GetAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsViewResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserStatsView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserStatsView mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserStatsView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserStatsView",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_views/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserStatsViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserStatsView mock AttendanceGetAttendanceUserStatsView method
func (r *Mock) MockAttendanceGetAttendanceUserStatsView(f func(ctx context.Context, request *GetAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsViewResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserStatsView = f
}

// UnMockAttendanceGetAttendanceUserStatsView un-mock AttendanceGetAttendanceUserStatsView method
func (r *Mock) UnMockAttendanceGetAttendanceUserStatsView() {
	r.mockAttendanceGetAttendanceUserStatsView = nil
}

// GetAttendanceUserStatsViewReq ...
type GetAttendanceUserStatsViewReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	Locale       string       `json:"locale,omitempty"`        // 语言类型, 示例值："zh", 可选值有: `en`：英语, `ja`：日语, `zh`：中文
	StatsType    string       `json:"stats_type,omitempty"`    // 统计类型, 示例值："daily", 可选值有: `daily`：日度统计, `month`：月度统计
}

// getAttendanceUserStatsViewResp ...
type getAttendanceUserStatsViewResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserStatsViewResp `json:"data,omitempty"`
}

// GetAttendanceUserStatsViewResp ...
type GetAttendanceUserStatsViewResp struct {
	View *GetAttendanceUserStatsViewRespView `json:"view,omitempty"` // 统计视图
}

// GetAttendanceUserStatsViewRespView ...
type GetAttendanceUserStatsViewRespView struct {
	ViewID    string                                    `json:"view_id,omitempty"`    // 视图 ID
	StatsType string                                    `json:"stats_type,omitempty"` // 视图类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                    `json:"user_id,omitempty"`    // 用户 ID
	Items     []*GetAttendanceUserStatsViewRespViewItem `json:"items,omitempty"`      // 用户设置字段
}

// GetAttendanceUserStatsViewRespViewItem ...
type GetAttendanceUserStatsViewRespViewItem struct {
	Code       string                                             `json:"code,omitempty"`        // 标题编号
	Title      string                                             `json:"title,omitempty"`       // 标题名称
	ChildItems []*GetAttendanceUserStatsViewRespViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

// GetAttendanceUserStatsViewRespViewItemChildItem ...
type GetAttendanceUserStatsViewRespViewItemChildItem struct {
	Code       string `json:"code,omitempty"`        // 子标题编号
	Value      string `json:"value,omitempty"`       // 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）
	Title      string `json:"title,omitempty"`       // 子标题名称
	ColumnType int64  `json:"column_type,omitempty"` // 列类型
	ReadOnly   bool   `json:"read_only,omitempty"`   // 是否只读
	MinValue   string `json:"min_value,omitempty"`   // 最小值
	MaxValue   string `json:"max_value,omitempty"`   // 最大值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceUserStatsView 更新开发者定制的日度统计或月度统计的统计报表表头设置信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/update
func (r *AttendanceService) UpdateAttendanceUserStatsView(ctx context.Context, request *UpdateAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*UpdateAttendanceUserStatsViewResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceUserStatsView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceUserStatsView mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceUserStatsView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceUserStatsView",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_views/:user_stats_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceUserStatsViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUpdateAttendanceUserStatsView mock AttendanceUpdateAttendanceUserStatsView method
func (r *Mock) MockAttendanceUpdateAttendanceUserStatsView(f func(ctx context.Context, request *UpdateAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*UpdateAttendanceUserStatsViewResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceUserStatsView = f
}

// UnMockAttendanceUpdateAttendanceUserStatsView un-mock AttendanceUpdateAttendanceUserStatsView method
func (r *Mock) UnMockAttendanceUpdateAttendanceUserStatsView() {
	r.mockAttendanceUpdateAttendanceUserStatsView = nil
}

// UpdateAttendanceUserStatsViewReq ...
type UpdateAttendanceUserStatsViewReq struct {
	EmployeeType    EmployeeType                          `query:"employee_type" json:"-"`     // 员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserStatsViewID string                                `path:"user_stats_view_id" json:"-"` // 用户视图 ID，获取方式：1）[查询统计设置](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query), 示例值："TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
	View            *UpdateAttendanceUserStatsViewReqView `json:"view,omitempty"`              // 统计设置
}

// UpdateAttendanceUserStatsViewReqView ...
type UpdateAttendanceUserStatsViewReqView struct {
	ViewID    string                                      `json:"view_id,omitempty"`    // 视图 ID, 示例值："TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
	StatsType string                                      `json:"stats_type,omitempty"` // 视图类型, 示例值："month", 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                      `json:"user_id,omitempty"`    // 用户 ID, 示例值："ec8ddg56"
	Items     []*UpdateAttendanceUserStatsViewReqViewItem `json:"items,omitempty"`      // 用户设置字段
}

// UpdateAttendanceUserStatsViewReqViewItem ...
type UpdateAttendanceUserStatsViewReqViewItem struct {
	Code       string                                               `json:"code,omitempty"`        // 标题编号, 示例值："522"
	ChildItems []*UpdateAttendanceUserStatsViewReqViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

// UpdateAttendanceUserStatsViewReqViewItemChildItem ...
type UpdateAttendanceUserStatsViewReqViewItemChildItem struct {
	Code  string `json:"code,omitempty"`  // 子标题编号, 示例值："50101"
	Value string `json:"value,omitempty"` // 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）, 示例值："0"
}

// updateAttendanceUserStatsViewResp ...
type updateAttendanceUserStatsViewResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceUserStatsViewResp `json:"data,omitempty"`
}

// UpdateAttendanceUserStatsViewResp ...
type UpdateAttendanceUserStatsViewResp struct {
	View *UpdateAttendanceUserStatsViewRespView `json:"view,omitempty"` // 视图
}

// UpdateAttendanceUserStatsViewRespView ...
type UpdateAttendanceUserStatsViewRespView struct {
	ViewID    string                                       `json:"view_id,omitempty"`    // 视图 ID
	StatsType string                                       `json:"stats_type,omitempty"` // 视图类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                       `json:"user_id,omitempty"`    // 用户 ID
	Items     []*UpdateAttendanceUserStatsViewRespViewItem `json:"items,omitempty"`      // 用户设置字段
}

// UpdateAttendanceUserStatsViewRespViewItem ...
type UpdateAttendanceUserStatsViewRespViewItem struct {
	Code       string                                                `json:"code,omitempty"`        // 标题编号
	Title      string                                                `json:"title,omitempty"`       // 标题名称
	ChildItems []*UpdateAttendanceUserStatsViewRespViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

// UpdateAttendanceUserStatsViewRespViewItemChildItem ...
type UpdateAttendanceUserStatsViewRespViewItemChildItem struct {
	Code       string `json:"code,omitempty"`        // 子标题编号
	Value      string `json:"value,omitempty"`       // 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）
	Title      string `json:"title,omitempty"`       // 子标题名称
	ColumnType int64  `json:"column_type,omitempty"` // 列类型
	ReadOnly   bool   `json:"read_only,omitempty"`   // 是否只读
	MinValue   string `json:"min_value,omitempty"`   // 最小值
	MaxValue   string `json:"max_value,omitempty"`   // 最大值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTask 获取企业内员工的实际打卡结果，包括上班打卡结果和下班打卡结果。
//
// - 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。
// - 如果要获取打卡的详细数据，如打卡位置等信息，可使用“获取打卡流水记录”或“批量查询打卡流水记录”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query
func (r *AttendanceService) GetAttendanceUserTask(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTask mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserTask mock AttendanceGetAttendanceUserTask method
func (r *Mock) MockAttendanceGetAttendanceUserTask(f func(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTask = f
}

// UnMockAttendanceGetAttendanceUserTask un-mock AttendanceGetAttendanceUserTask method
func (r *Mock) UnMockAttendanceGetAttendanceUserTask() {
	r.mockAttendanceGetAttendanceUserTask = nil
}

// GetAttendanceUserTaskReq ...
type GetAttendanceUserTaskReq struct {
	EmployeeType          EmployeeType `query:"employee_type" json:"-"`           // 员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	IgnoreInvalidUsers    *bool        `query:"ignore_invalid_users" json:"-"`    // 是否忽略无效和没有权限的用户。如果 true，则返回有效用户的信息，并告知无效和没有权限的用户信息；如果 false，且 user_ids 中存在无效或没有权限的用户，则返回错误, 示例值：true
	IncludeTerminatedUser *bool        `query:"include_terminated_user" json:"-"` // 由于新入职员工可以复用已离职员工的 employee_no/employee_id，如果 true，则返回 employee_no/employee_id 对应的所有在职 + 离职员工的数据；如果 false，则只返回 employee_no/employee_id 对应的在职或最近一个离职员工的数据, 示例值：true
	UserIDs               []string     `json:"user_ids,omitempty"`                // employee_no 或 employee_id 列表, 示例值：abd754f7
	CheckDateFrom         int64        `json:"check_date_from,omitempty"`         // 查询的起始工作日, 示例值：20190817
	CheckDateTo           int64        `json:"check_date_to,omitempty"`           // 查询的结束工作日, 示例值：20190820
}

// getAttendanceUserTaskResp ...
type getAttendanceUserTaskResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskResp `json:"data,omitempty"`
}

// GetAttendanceUserTaskResp ...
type GetAttendanceUserTaskResp struct {
	UserTaskResults     []*GetAttendanceUserTaskRespUserTaskResult `json:"user_task_results,omitempty"`     // 打卡任务列表
	InvalidUserIDs      []string                                   `json:"invalid_user_ids,omitempty"`      // 无效用户 ID 列表
	UnauthorizedUserIDs []string                                   `json:"unauthorized_user_ids,omitempty"` // 没有权限用户 ID 列表
}

// GetAttendanceUserTaskRespUserTaskResult ...
type GetAttendanceUserTaskRespUserTaskResult struct {
	ResultID     string                                           `json:"result_id,omitempty"`     // 打卡记录 ID
	UserID       string                                           `json:"user_id,omitempty"`       // 用户 ID
	EmployeeName string                                           `json:"employee_name,omitempty"` // 用户姓名
	Day          int64                                            `json:"day,omitempty"`           // 日期
	GroupID      string                                           `json:"group_id,omitempty"`      // 考勤组 ID
	ShiftID      string                                           `json:"shift_id,omitempty"`      // 班次 ID
	Records      []*GetAttendanceUserTaskRespUserTaskResultRecord `json:"records,omitempty"`       // 用户考勤记录
}

// GetAttendanceUserTaskRespUserTaskResultRecord ...
type GetAttendanceUserTaskRespUserTaskResultRecord struct {
	CheckInRecordID          string                                                       `json:"check_in_record_id,omitempty"`          // 上班打卡记录 ID
	CheckInRecord            *GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord  `json:"check_in_record,omitempty"`             // 上班打卡记录
	CheckOutRecordID         string                                                       `json:"check_out_record_id,omitempty"`         // 下班打卡记录 ID
	CheckOutRecord           *GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord `json:"check_out_record,omitempty"`            // 下班打卡记录
	CheckInResult            string                                                       `json:"check_in_result,omitempty"`             // 上班打卡结果, 可选值有: `NoNeedCheck`：无需打卡, `SystemCheck`：系统打卡, `Normal`：正常, `Early`：早退, `Late`：迟到, `Lack`：缺卡
	CheckOutResult           string                                                       `json:"check_out_result,omitempty"`            // 下班打卡结果, 可选值有: `NoNeedCheck`：无需打卡, `SystemCheck`：系统打卡, `Normal`：正常, `Early`：早退, `Late`：迟到, `Lack`：缺卡
	CheckInResultSupplement  string                                                       `json:"check_in_result_supplement,omitempty"`  // 上班打卡结果补充, 可选值有: `None`：无, `ManagerModification`：管理员修改, `CardReplacement`：补卡通过, `ShiftChange`：换班, `Travel`：出差, `Leave`：请假, `GoOut`：外出, `CardReplacementApplication`：补卡申请中, `FieldPunch`：外勤打卡
	CheckOutResultSupplement string                                                       `json:"check_out_result_supplement,omitempty"` // 下班打卡结果补充, 可选值有: `None`：无, `ManagerModification`：管理员修改, `CardReplacement`：补卡通过, `ShiftChange`：换班, `Travel`：出差, `Leave`：请假, `GoOut`：外出, `CardReplacementApplication`：补卡申请中, `FieldPunch`：外勤打卡
	CheckInShiftTime         string                                                       `json:"check_in_shift_time,omitempty"`         // 上班打卡时间
	CheckOutShiftTime        string                                                       `json:"check_out_shift_time,omitempty"`        // 下班打卡时间
}

// GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord ...
type GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord ...
type GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTaskRemedyAllowedRemedyList 获取用户某天可以补的第几次上 / 下班卡的时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query_user_allowed_remedys
func (r *AttendanceService) GetAttendanceUserTaskRemedyAllowedRemedyList(ctx context.Context, request *GetAttendanceUserTaskRemedyAllowedRemedyListReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyAllowedRemedyListResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTaskRemedyAllowedRemedyList mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTaskRemedyAllowedRemedyList",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskRemedyAllowedRemedyListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList mock AttendanceGetAttendanceUserTaskRemedyAllowedRemedyList method
func (r *Mock) MockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList(f func(ctx context.Context, request *GetAttendanceUserTaskRemedyAllowedRemedyListReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyAllowedRemedyListResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList = f
}

// UnMockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList un-mock AttendanceGetAttendanceUserTaskRemedyAllowedRemedyList method
func (r *Mock) UnMockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList() {
	r.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList = nil
}

// GetAttendanceUserTaskRemedyAllowedRemedyListReq ...
type GetAttendanceUserTaskRemedyAllowedRemedyListReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID, 示例值："abd754f7"
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期, 示例值：20210104
}

// getAttendanceUserTaskRemedyAllowedRemedyListResp ...
type getAttendanceUserTaskRemedyAllowedRemedyListResp struct {
	Code int64                                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                            `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskRemedyAllowedRemedyListResp `json:"data,omitempty"`
}

// GetAttendanceUserTaskRemedyAllowedRemedyListResp ...
type GetAttendanceUserTaskRemedyAllowedRemedyListResp struct {
	UserAllowedRemedys []*GetAttendanceUserTaskRemedyAllowedRemedyListRespUserAllowedRemedy `json:"user_allowed_remedys,omitempty"` // 用户可补卡时间
}

// GetAttendanceUserTaskRemedyAllowedRemedyListRespUserAllowedRemedy ...
type GetAttendanceUserTaskRemedyAllowedRemedyListRespUserAllowedRemedy struct {
	UserID          string `json:"user_id,omitempty"`           // 用户 ID
	RemedyDate      int64  `json:"remedy_date,omitempty"`       // 补卡日期
	IsFreePunch     bool   `json:"is_free_punch,omitempty"`     // 是否为自由班次，若为自由班次，则不用选择考虑第几次上下班，直接选择补卡时间即可
	PunchNo         int64  `json:"punch_no,omitempty"`          // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班
	WorkType        int64  `json:"work_type,omitempty"`         // 上班 / 下班，1：上班，2：下班
	PunchStatus     string `json:"punch_status,omitempty"`      // 打卡状态，Early：早退，Late：迟到，Lack：缺卡
	NormalPunchTime string `json:"normal_punch_time,omitempty"` // 正常的应打卡时间，时间格式为 yyyy-MM-dd HH:mm
	RemedyStartTime string `json:"remedy_start_time,omitempty"` // 可选的补卡时间的最小值，时间格式为 yyyy-MM-dd HH:mm
	RemedyEndTime   string `json:"remedy_end_time,omitempty"`   // 可选的补卡时间的最大值，时间格式为 yyyy-MM-dd HH:mm
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceUserTaskRemedy 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书考勤系统中。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create
func (r *AttendanceService) CreateAttendanceUserTaskRemedy(ctx context.Context, request *CreateAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*CreateAttendanceUserTaskRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceUserTaskRemedy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceUserTaskRemedy mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceUserTaskRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceUserTaskRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceUserTaskRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceUserTaskRemedy mock AttendanceCreateAttendanceUserTaskRemedy method
func (r *Mock) MockAttendanceCreateAttendanceUserTaskRemedy(f func(ctx context.Context, request *CreateAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*CreateAttendanceUserTaskRemedyResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceUserTaskRemedy = f
}

// UnMockAttendanceCreateAttendanceUserTaskRemedy un-mock AttendanceCreateAttendanceUserTaskRemedy method
func (r *Mock) UnMockAttendanceCreateAttendanceUserTaskRemedy() {
	r.mockAttendanceCreateAttendanceUserTaskRemedy = nil
}

// CreateAttendanceUserTaskRemedyReq ...
type CreateAttendanceUserTaskRemedyReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID, 示例值："abd754f7"
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期, 示例值：20210701
	PunchNo      int64        `json:"punch_no,omitempty"`      // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0, 示例值：0
	WorkType     int64        `json:"work_type,omitempty"`     // 上班 / 下班，1：上班，2：下班，自由班制填 0, 示例值：1
	ApprovalID   *string      `json:"approval_id,omitempty"`   // 审批 ID, 示例值："6737202939523236113"
	RemedyTime   string       `json:"remedy_time,omitempty"`   // 补卡时间，时间格式为 yyyy-MM-dd HH:mm, 示例值："2021-07-01 08:00"
	Status       *int64       `json:"status,omitempty"`        // 补卡状态（默认为审批中）, 示例值：2, 可选值有: `0`：审批中, `2`：已通过, `3`：已取消, `4`：通过后撤回
	Reason       string       `json:"reason,omitempty"`        // 补卡原因, 示例值："忘记打卡"
	Time         *string      `json:"time,omitempty"`          // 补卡时间，精确到秒的时间戳, 示例值："1611476284"
	TimeZone     *string      `json:"time_zone,omitempty"`     // 补卡时考勤组时区, 示例值："Asia/Shanghai"
	CreateTime   *string      `json:"create_time,omitempty"`   // 补卡发起时间，精确到秒的时间戳, 示例值："1611476284"
	UpdateTime   *string      `json:"update_time,omitempty"`   // 补卡状态更新时间，精确到秒的时间戳, 示例值："1611476284"
}

// createAttendanceUserTaskRemedyResp ...
type createAttendanceUserTaskRemedyResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceUserTaskRemedyResp `json:"data,omitempty"`
}

// CreateAttendanceUserTaskRemedyResp ...
type CreateAttendanceUserTaskRemedyResp struct {
	UserRemedy *CreateAttendanceUserTaskRemedyRespUserRemedy `json:"user_remedy,omitempty"` // 补卡审批信息
}

// CreateAttendanceUserTaskRemedyRespUserRemedy ...
type CreateAttendanceUserTaskRemedyRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班 / 下班，1：上班，2：下班，自由班制填 0
	ApprovalID string `json:"approval_id,omitempty"` // 审批 ID
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Status     int64  `json:"status,omitempty"`      // 补卡状态（默认为审批中）, 可选值有: `0`：审批中, `2`：已通过, `3`：已取消, `4`：通过后撤回
	Reason     string `json:"reason,omitempty"`      // 补卡原因
	Time       string `json:"time,omitempty"`        // 补卡时间，精确到秒的时间戳
	TimeZone   string `json:"time_zone,omitempty"`   // 补卡时考勤组时区
	CreateTime string `json:"create_time,omitempty"` // 补卡发起时间，精确到秒的时间戳
	UpdateTime string `json:"update_time,omitempty"` // 补卡状态更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTaskRemedy 获取授权内员工的补卡记录。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query
func (r *AttendanceService) GetAttendanceUserTaskRemedy(ctx context.Context, request *GetAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTaskRemedy mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTaskRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserTaskRemedy mock AttendanceGetAttendanceUserTaskRemedy method
func (r *Mock) MockAttendanceGetAttendanceUserTaskRemedy(f func(ctx context.Context, request *GetAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTaskRemedy = f
}

// UnMockAttendanceGetAttendanceUserTaskRemedy un-mock AttendanceGetAttendanceUserTaskRemedy method
func (r *Mock) UnMockAttendanceGetAttendanceUserTaskRemedy() {
	r.mockAttendanceGetAttendanceUserTaskRemedy = nil
}

// GetAttendanceUserTaskRemedyReq ...
type GetAttendanceUserTaskRemedyReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表, 示例值：["abd754f7"]
	CheckTimeFrom string       `json:"check_time_from,omitempty"` // 查询的起始时间，精确到秒的时间戳, 示例值："1566641088"
	CheckTimeTo   string       `json:"check_time_to,omitempty"`   // 查询的结束时间，精确到秒的时间戳, 示例值："1592561088"
}

// getAttendanceUserTaskRemedyResp ...
type getAttendanceUserTaskRemedyResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskRemedyResp `json:"data,omitempty"`
}

// GetAttendanceUserTaskRemedyResp ...
type GetAttendanceUserTaskRemedyResp struct {
	UserRemedys []*GetAttendanceUserTaskRemedyRespUserRemedy `json:"user_remedys,omitempty"` // 补卡记录列表
}

// GetAttendanceUserTaskRemedyRespUserRemedy ...
type GetAttendanceUserTaskRemedyRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班 / 下班，1：上班，2：下班，自由班制填 0
	ApprovalID string `json:"approval_id,omitempty"` // 审批 ID
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Status     int64  `json:"status,omitempty"`      // 补卡状态（默认为审批中）, 可选值有: `0`：审批中, `2`：已通过, `3`：已取消, `4`：通过后撤回
	Reason     string `json:"reason,omitempty"`      // 补卡原因
	Time       string `json:"time,omitempty"`        // 补卡时间，精确到秒的时间戳
	TimeZone   string `json:"time_zone,omitempty"`   // 补卡时考勤组时区
	CreateTime string `json:"create_time,omitempty"` // 补卡发起时间，精确到秒的时间戳
	UpdateTime string `json:"update_time,omitempty"` // 补卡状态更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAccessToken 获取登录预授权码 code 对应的登录用户身份。
//
// 该接口仅适用于通过[第三方网站免登](https://open.feishu.cn/document/ukTMukTMukTM/uETOwYjLxkDM24SM5AjN)文档中的登录方式获取的预授权码，小程序登录中用户身份的获取，请使用[小程序 code2session 接口](https://open.feishu.cn/document/uYjL24iN/ukjM04SOyQjL5IDN)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token
func (r *AuthService) GetAccessToken(ctx context.Context, request *GetAccessTokenReq, options ...MethodOptionFunc) (*GetAccessTokenResp, *Response, error) {
	if r.cli.mock.mockAuthGetAccessToken != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#GetAccessToken mock enable")
		return r.cli.mock.mockAuthGetAccessToken(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "GetAccessToken",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/access_token",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedAppAccessToken:  true,
		NeedUserAccessToken: true,
	}
	resp := new(getAccessTokenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthGetAccessToken mock AuthGetAccessToken method
func (r *Mock) MockAuthGetAccessToken(f func(ctx context.Context, request *GetAccessTokenReq, options ...MethodOptionFunc) (*GetAccessTokenResp, *Response, error)) {
	r.mockAuthGetAccessToken = f
}

// UnMockAuthGetAccessToken un-mock AuthGetAccessToken method
func (r *Mock) UnMockAuthGetAccessToken() {
	r.mockAuthGetAccessToken = nil
}

// GetAccessTokenReq ...
type GetAccessTokenReq struct {
	GrantType string `json:"grant_type,omitempty"` // 授权类型，本流程中，此值为："authorization_code", 示例值："authorization_code"
	Code      string `json:"code,omitempty"`       // 来自[请求身份验证](https://open.feishu.cn/document/ukTMukTMukTM/ukzN4UjL5cDO14SO3gTN)流程，用户扫码登录后会自动302到redirect_uri并带上此参数, 示例值："xMSldislSkdK"
}

// getAccessTokenResp ...
type getAccessTokenResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetAccessTokenResp `json:"data,omitempty"`
}

// GetAccessTokenResp ...
type GetAccessTokenResp struct {
	AccessToken      string `json:"access_token,omitempty"`       // user_access_token，用于获取用户资源
	TokenType        string `json:"token_type,omitempty"`         // token 类型
	ExpiresIn        int64  `json:"expires_in,omitempty"`         // access_token 的有效期，单位: 秒
	Name             string `json:"name,omitempty"`               // 用户姓名
	EnName           string `json:"en_name,omitempty"`            // 用户英文名称
	AvatarURL        string `json:"avatar_url,omitempty"`         // 用户头像
	AvatarThumb      string `json:"avatar_thumb,omitempty"`       // 用户头像 72x72
	AvatarMiddle     string `json:"avatar_middle,omitempty"`      // 用户头像 240x240
	AvatarBig        string `json:"avatar_big,omitempty"`         // 用户头像 640x640
	OpenID           string `json:"open_id,omitempty"`            // 用户在应用内的唯一标识
	UnionID          string `json:"union_id,omitempty"`           // 用户统一ID
	Email            string `json:"email,omitempty"`              // 用户邮箱, 字段权限要求: 获取用户邮箱信息
	EnterpriseEmail  string `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,      ,**字段权限要求（满足任一）**：,获取用户雇佣信息
	UserID           string `json:"user_id,omitempty"`            // 用户 user_id, 字段权限要求: 获取用户 user ID
	Mobile           string `json:"mobile,omitempty"`             // 用户手机号, 字段权限要求: 获取用户手机号
	TenantKey        string `json:"tenant_key,omitempty"`         // 当前企业标识
	RefreshExpiresIn int64  `json:"refresh_expires_in,omitempty"` // refresh_token 的有效期，单位: 秒
	RefreshToken     string `json:"refresh_token,omitempty"`      // 刷新用户 access_token 时使用的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RefreshAccessToken user_access_token 具有一定的时效性，默认最长有效期为7200秒。该接口用于在 user_access_token 过期时用 refresh_token 重新获取 access_token。此时会返回新的 refresh_token，再次刷新 access_token 时需要使用新的 refresh_token。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/refresh_access_token
func (r *AuthService) RefreshAccessToken(ctx context.Context, request *RefreshAccessTokenReq, options ...MethodOptionFunc) (*RefreshAccessTokenResp, *Response, error) {
	if r.cli.mock.mockAuthRefreshAccessToken != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#RefreshAccessToken mock enable")
		return r.cli.mock.mockAuthRefreshAccessToken(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "RefreshAccessToken",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/refresh_access_token",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedAppAccessToken:  true,
		NeedUserAccessToken: true,
	}
	resp := new(refreshAccessTokenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthRefreshAccessToken mock AuthRefreshAccessToken method
func (r *Mock) MockAuthRefreshAccessToken(f func(ctx context.Context, request *RefreshAccessTokenReq, options ...MethodOptionFunc) (*RefreshAccessTokenResp, *Response, error)) {
	r.mockAuthRefreshAccessToken = f
}

// UnMockAuthRefreshAccessToken un-mock AuthRefreshAccessToken method
func (r *Mock) UnMockAuthRefreshAccessToken() {
	r.mockAuthRefreshAccessToken = nil
}

// RefreshAccessTokenReq ...
type RefreshAccessTokenReq struct {
	GrantType    string `json:"grant_type,omitempty"`    // 授权类型，本流程中，此值为："refresh_token", 示例值："refresh_token"
	RefreshToken string `json:"refresh_token,omitempty"` // 来自[获取登录用户身份](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token) 或 本接口返回值, 示例值："ur-oQ0mMq6MCcueAv0pwx2fQQhxqv__CbLu6G8ySFwafeKww2Def2BJdOkW3.9gCFM.LBQgFri901QaqeuL"
}

// refreshAccessTokenResp ...
type refreshAccessTokenResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *RefreshAccessTokenResp `json:"data,omitempty"`
}

// RefreshAccessTokenResp ...
type RefreshAccessTokenResp struct {
	AccessToken      string `json:"access_token,omitempty"`       // user_access_token，用于获取用户资源
	TokenType        string `json:"token_type,omitempty"`         // token 类型
	ExpiresIn        int64  `json:"expires_in,omitempty"`         // access_token 的有效期，单位: 秒
	Name             string `json:"name,omitempty"`               // 用户姓名
	EnName           string `json:"en_name,omitempty"`            // 用户英文名称
	AvatarURL        string `json:"avatar_url,omitempty"`         // 用户头像
	AvatarThumb      string `json:"avatar_thumb,omitempty"`       // 用户头像 72x72
	AvatarMiddle     string `json:"avatar_middle,omitempty"`      // 用户头像 240x240
	AvatarBig        string `json:"avatar_big,omitempty"`         // 用户头像 640x640
	OpenID           string `json:"open_id,omitempty"`            // 用户在应用内的唯一标识
	UnionID          string `json:"union_id,omitempty"`           // 用户统一ID
	Email            string `json:"email,omitempty"`              // 用户邮箱, 字段权限要求: 获取用户邮箱信息
	UserID           string `json:"user_id,omitempty"`            // 用户 user_id, 字段权限要求: 获取用户 user ID
	Mobile           string `json:"mobile,omitempty"`             // 用户手机号, 字段权限要求: 获取用户手机号
	TenantKey        string `json:"tenant_key,omitempty"`         // 当前企业标识
	RefreshExpiresIn int64  `json:"refresh_expires_in,omitempty"` // refresh_token 的有效期，单位: 秒
	RefreshToken     string `json:"refresh_token,omitempty"`      // 刷新用户 access_token 时使用的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ResendAppTicket 飞书每隔 1 小时会给应用推送一次最新的 app_ticket，应用也可以主动调用此接口，触发飞书进行及时的重新推送。（该接口并不能直接获取app_ticket，而是触发事件推送）
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/auth-v3/auth/app_ticket_resend
func (r *AuthService) ResendAppTicket(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error) {
	if r.cli.mock.mockAuthResendAppTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#ResendAppTicket mock enable")
		return r.cli.mock.mockAuthResendAppTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:        "Auth",
		API:          "ResendAppTicket",
		Method:       "POST",
		URL:          r.cli.openBaseURL + "/open-apis/auth/v3/app_ticket/resend",
		Body:         request,
		MethodOption: newMethodOption(options),
	}
	resp := new(resendAppTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthResendAppTicket mock AuthResendAppTicket method
func (r *Mock) MockAuthResendAppTicket(f func(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error)) {
	r.mockAuthResendAppTicket = f
}

// UnMockAuthResendAppTicket un-mock AuthResendAppTicket method
func (r *Mock) UnMockAuthResendAppTicket() {
	r.mockAuthResendAppTicket = nil
}

// ResendAppTicketReq ...
type ResendAppTicketReq struct {
	AppID     string `json:"app_id,omitempty"`     // 应用唯一标识，创建应用后获得, 示例值："cli_slkdjalasdkjasd"
	AppSecret string `json:"app_secret,omitempty"` // 应用秘钥，创建应用后获得, 示例值："dskLLdkasdjlasdKK"
}

// resendAppTicketResp ...
type resendAppTicketResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *ResendAppTicketResp `json:"data,omitempty"`
}

// ResendAppTicketResp ...
type ResendAppTicketResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserInfo 通过 user_access_token 获取登录用户的信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/user_info
func (r *AuthService) GetUserInfo(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error) {
	if r.cli.mock.mockAuthGetUserInfo != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#GetUserInfo mock enable")
		return r.cli.mock.mockAuthGetUserInfo(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "GetUserInfo",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/user_info",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getUserInfoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthGetUserInfo mock AuthGetUserInfo method
func (r *Mock) MockAuthGetUserInfo(f func(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error)) {
	r.mockAuthGetUserInfo = f
}

// UnMockAuthGetUserInfo un-mock AuthGetUserInfo method
func (r *Mock) UnMockAuthGetUserInfo() {
	r.mockAuthGetUserInfo = nil
}

// GetUserInfoReq ...
type GetUserInfoReq struct {
}

// getUserInfoResp ...
type getUserInfoResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetUserInfoResp `json:"data,omitempty"`
}

// GetUserInfoResp ...
type GetUserInfoResp struct {
	Name            string `json:"name,omitempty"`             // 用户姓名
	EnName          string `json:"en_name,omitempty"`          // 用户英文名称
	AvatarURL       string `json:"avatar_url,omitempty"`       // 用户头像
	AvatarThumb     string `json:"avatar_thumb,omitempty"`     // 用户头像 72x72
	AvatarMiddle    string `json:"avatar_middle,omitempty"`    // 用户头像 240x240
	AvatarBig       string `json:"avatar_big,omitempty"`       // 用户头像 640x640
	OpenID          string `json:"open_id,omitempty"`          // 用户在应用内的唯一标识
	UnionID         string `json:"union_id,omitempty"`         // 用户对ISV的唯一标识，对于同一个ISV，用户在其名下所有应用的union_id相同
	Email           string `json:"email,omitempty"`            // 用户邮箱, 字段权限要求: 获取用户邮箱信息
	EnterpriseEmail string `json:"enterprise_email,omitempty"` // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,      ,**字段权限要求（满足任一）**：,获取用户雇佣信息
	UserID          string `json:"user_id,omitempty"`          // 用户 user_id, 字段权限要求: 获取用户 user ID
	Mobile          string `json:"mobile,omitempty"`           // 用户手机号, 字段权限要求: 获取用户手机号
	TenantKey       string `json:"tenant_key,omitempty"`       // 当前企业标识
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBaikeDraft 草稿是单独的定义，并不和实体词进行绑定，创建草稿不等于创建实体词。创建草稿可能是创建实体词或更新实体词
//
// 需百科管理员审批通过后生效。当使用 user_access_token 访问时，会有 bot 通知对应用户审批结果。tenant_access_token 则不会触发通知
// · 当 entity_id 字段不为空时表示更新该实体词<br>
// · 当 entity_id 字段为空时表示创建新的实体词<br>
// · 当 entity_id 字段为空且 outer_info 字段不为空时，会根据已有数据判断是创建还是更新实体词。原则为：当 outer_info 字段已经和已有实体词绑定，则会触发更新，若无绑定的实体词，则会创建一个新的和 outer_info 绑定的实体词
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/create
func (r *BaikeService) CreateBaikeDraft(ctx context.Context, request *CreateBaikeDraftReq, options ...MethodOptionFunc) (*CreateBaikeDraftResp, *Response, error) {
	if r.cli.mock.mockBaikeCreateBaikeDraft != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#CreateBaikeDraft mock enable")
		return r.cli.mock.mockBaikeCreateBaikeDraft(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "CreateBaikeDraft",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/drafts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBaikeDraftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeCreateBaikeDraft mock BaikeCreateBaikeDraft method
func (r *Mock) MockBaikeCreateBaikeDraft(f func(ctx context.Context, request *CreateBaikeDraftReq, options ...MethodOptionFunc) (*CreateBaikeDraftResp, *Response, error)) {
	r.mockBaikeCreateBaikeDraft = f
}

// UnMockBaikeCreateBaikeDraft un-mock BaikeCreateBaikeDraft method
func (r *Mock) UnMockBaikeCreateBaikeDraft() {
	r.mockBaikeCreateBaikeDraft = nil
}

// CreateBaikeDraftReq ...
type CreateBaikeDraftReq struct {
	UserIDType  *IDType                         `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ID          *string                         `json:"id,omitempty"`           // 词条 Id, 示例值："enterprise_40217521"
	MainKeys    []*CreateBaikeDraftReqMainKey   `json:"main_keys,omitempty"`    // 主关键词, 最大长度：`1`
	Aliases     []*CreateBaikeDraftReqAliase    `json:"aliases,omitempty"`      // 别名, 最大长度：`10`
	Description string                          `json:"description,omitempty"`  // 详情信息, 示例值："企业百科是飞书提供的一款知识管理工具，通过企业百科可以帮助企业将分散的知识信息进行聚合，并通过UGC的方式，促进企业知识的保鲜和流通"
	RelatedMeta *CreateBaikeDraftReqRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	OuterInfo   *CreateBaikeDraftReqOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// CreateBaikeDraftReqMainKey ...
type CreateBaikeDraftReqMainKey struct {
	Key           string                                   `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeDraftReqMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftReqMainKeyDisplayStatus ...
type CreateBaikeDraftReqMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeDraftReqAliase ...
type CreateBaikeDraftReqAliase struct {
	Key           string                                  `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeDraftReqAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftReqAliaseDisplayStatus ...
type CreateBaikeDraftReqAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeDraftReqRelatedMeta ...
type CreateBaikeDraftReqRelatedMeta struct {
	Users         []*CreateBaikeDraftReqRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeDraftReqRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeDraftReqRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeDraftReqRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeDraftReqRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeDraftReqRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeDraftReqRelatedMetaUser ...
type CreateBaikeDraftReqRelatedMetaUser struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
}

// CreateBaikeDraftReqRelatedMetaChat ...
type CreateBaikeDraftReqRelatedMetaChat struct {
	ID string `json:"id,omitempty"` // 数据 id, 示例值："ou-xxxxxx"
}

// CreateBaikeDraftReqRelatedMetaDoc ...
type CreateBaikeDraftReqRelatedMetaDoc struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeDraftReqRelatedMetaOncall ...
type CreateBaikeDraftReqRelatedMetaOncall struct {
	ID string `json:"id,omitempty"` // 数据 id, 示例值："ou-xxxxxx"
}

// CreateBaikeDraftReqRelatedMetaLink ...
type CreateBaikeDraftReqRelatedMetaLink struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeDraftReqRelatedMetaAbbreviation ...
type CreateBaikeDraftReqRelatedMetaAbbreviation struct {
	ID *string `json:"id,omitempty"` // 词条 id, 示例值："enterprise_51587960"
}

// CreateBaikeDraftReqOuterInfo ...
type CreateBaikeDraftReqOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）, 示例值："星云", 长度范围：`2` ～ `32` 字符
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）, 示例值："12345", 长度范围：`1` ～ `64` 字符
}

// createBaikeDraftResp ...
type createBaikeDraftResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *CreateBaikeDraftResp `json:"data,omitempty"`
}

// CreateBaikeDraftResp ...
type CreateBaikeDraftResp struct {
	Draft *CreateBaikeDraftRespDraft `json:"draft,omitempty"` // 草稿
}

// CreateBaikeDraftRespDraft ...
type CreateBaikeDraftRespDraft struct {
	DraftID string                           `json:"draft_id,omitempty"` // 草稿 Id
	Entity  *CreateBaikeDraftRespDraftEntity `json:"entity,omitempty"`   // 实体词
}

// CreateBaikeDraftRespDraftEntity ...
type CreateBaikeDraftRespDraftEntity struct {
	ID          string                                      `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*CreateBaikeDraftRespDraftEntityMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*CreateBaikeDraftRespDraftEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                      `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                      `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                      `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *CreateBaikeDraftRespDraftEntityRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                    `json:"categories,omitempty"`   // 词条标签
	Statistics  *CreateBaikeDraftRespDraftEntityStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *CreateBaikeDraftRespDraftEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// CreateBaikeDraftRespDraftEntityMainKey ...
type CreateBaikeDraftRespDraftEntityMainKey struct {
	Key           string                                               `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeDraftRespDraftEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftRespDraftEntityMainKeyDisplayStatus ...
type CreateBaikeDraftRespDraftEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeDraftRespDraftEntityAliase ...
type CreateBaikeDraftRespDraftEntityAliase struct {
	Key           string                                              `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeDraftRespDraftEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftRespDraftEntityAliaseDisplayStatus ...
type CreateBaikeDraftRespDraftEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeDraftRespDraftEntityRelatedMeta ...
type CreateBaikeDraftRespDraftEntityRelatedMeta struct {
	Users         []*CreateBaikeDraftRespDraftEntityRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeDraftRespDraftEntityRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeDraftRespDraftEntityRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeDraftRespDraftEntityRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeDraftRespDraftEntityRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeDraftRespDraftEntityRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeDraftRespDraftEntityRelatedMetaUser ...
type CreateBaikeDraftRespDraftEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaChat ...
type CreateBaikeDraftRespDraftEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaDoc ...
type CreateBaikeDraftRespDraftEntityRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaOncall ...
type CreateBaikeDraftRespDraftEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaLink ...
type CreateBaikeDraftRespDraftEntityRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaAbbreviation ...
type CreateBaikeDraftRespDraftEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// CreateBaikeDraftRespDraftEntityStatistics ...
type CreateBaikeDraftRespDraftEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// CreateBaikeDraftRespDraftEntityOuterInfo ...
type CreateBaikeDraftRespDraftEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBaikeUpdate 根据 draft_id 更新草稿内容，已审批的草稿无法编辑
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/update
func (r *BaikeService) CreateBaikeUpdate(ctx context.Context, request *CreateBaikeUpdateReq, options ...MethodOptionFunc) (*CreateBaikeUpdateResp, *Response, error) {
	if r.cli.mock.mockBaikeCreateBaikeUpdate != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#CreateBaikeUpdate mock enable")
		return r.cli.mock.mockBaikeCreateBaikeUpdate(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "CreateBaikeUpdate",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/drafts/:draft_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBaikeUpdateResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeCreateBaikeUpdate mock BaikeCreateBaikeUpdate method
func (r *Mock) MockBaikeCreateBaikeUpdate(f func(ctx context.Context, request *CreateBaikeUpdateReq, options ...MethodOptionFunc) (*CreateBaikeUpdateResp, *Response, error)) {
	r.mockBaikeCreateBaikeUpdate = f
}

// UnMockBaikeCreateBaikeUpdate un-mock BaikeCreateBaikeUpdate method
func (r *Mock) UnMockBaikeCreateBaikeUpdate() {
	r.mockBaikeCreateBaikeUpdate = nil
}

// CreateBaikeUpdateReq ...
type CreateBaikeUpdateReq struct {
	UserIDType  *IDType                          `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DraftID     string                           `path:"draft_id" json:"-"`      // 草稿 Id, 示例值："5347"
	ID          *string                          `json:"id,omitempty"`           // 词条 Id, 示例值："enterprise_40217521"
	MainKeys    []*CreateBaikeUpdateReqMainKey   `json:"main_keys,omitempty"`    // 主关键词, 最大长度：`1`
	Aliases     []*CreateBaikeUpdateReqAliase    `json:"aliases,omitempty"`      // 别名, 最大长度：`10`
	Description string                           `json:"description,omitempty"`  // 详情信息, 示例值："企业百科是飞书提供的一款知识管理工具，通过企业百科可以帮助企业将分散的知识信息进行聚合，并通过UGC的方式，促进企业知识的保鲜和流通"
	RelatedMeta *CreateBaikeUpdateReqRelatedMeta `json:"related_meta,omitempty"` // 相关数据
}

// CreateBaikeUpdateReqMainKey ...
type CreateBaikeUpdateReqMainKey struct {
	Key           string                                    `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeUpdateReqMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateReqMainKeyDisplayStatus ...
type CreateBaikeUpdateReqMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeUpdateReqAliase ...
type CreateBaikeUpdateReqAliase struct {
	Key           string                                   `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeUpdateReqAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateReqAliaseDisplayStatus ...
type CreateBaikeUpdateReqAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeUpdateReqRelatedMeta ...
type CreateBaikeUpdateReqRelatedMeta struct {
	Users         []*CreateBaikeUpdateReqRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeUpdateReqRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeUpdateReqRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeUpdateReqRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeUpdateReqRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeUpdateReqRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeUpdateReqRelatedMetaUser ...
type CreateBaikeUpdateReqRelatedMetaUser struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN"
}

// CreateBaikeUpdateReqRelatedMetaChat ...
type CreateBaikeUpdateReqRelatedMetaChat struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN"
}

// CreateBaikeUpdateReqRelatedMetaDoc ...
type CreateBaikeUpdateReqRelatedMetaDoc struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeUpdateReqRelatedMetaOncall ...
type CreateBaikeUpdateReqRelatedMetaOncall struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN"
}

// CreateBaikeUpdateReqRelatedMetaLink ...
type CreateBaikeUpdateReqRelatedMetaLink struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeUpdateReqRelatedMetaAbbreviation ...
type CreateBaikeUpdateReqRelatedMetaAbbreviation struct {
	ID *string `json:"id,omitempty"` // 词条 id, 示例值："enterprise_51587960"
}

// createBaikeUpdateResp ...
type createBaikeUpdateResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateBaikeUpdateResp `json:"data,omitempty"`
}

// CreateBaikeUpdateResp ...
type CreateBaikeUpdateResp struct {
	Draft *CreateBaikeUpdateRespDraft `json:"draft,omitempty"` // 草稿
}

// CreateBaikeUpdateRespDraft ...
type CreateBaikeUpdateRespDraft struct {
	DraftID string                            `json:"draft_id,omitempty"` // 草稿 Id
	Entity  *CreateBaikeUpdateRespDraftEntity `json:"entity,omitempty"`   // 实体词
}

// CreateBaikeUpdateRespDraftEntity ...
type CreateBaikeUpdateRespDraftEntity struct {
	ID          string                                       `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*CreateBaikeUpdateRespDraftEntityMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*CreateBaikeUpdateRespDraftEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                       `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                       `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                       `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *CreateBaikeUpdateRespDraftEntityRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                     `json:"categories,omitempty"`   // 词条标签
	Statistics  *CreateBaikeUpdateRespDraftEntityStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *CreateBaikeUpdateRespDraftEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// CreateBaikeUpdateRespDraftEntityMainKey ...
type CreateBaikeUpdateRespDraftEntityMainKey struct {
	Key           string                                                `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeUpdateRespDraftEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateRespDraftEntityMainKeyDisplayStatus ...
type CreateBaikeUpdateRespDraftEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeUpdateRespDraftEntityAliase ...
type CreateBaikeUpdateRespDraftEntityAliase struct {
	Key           string                                               `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeUpdateRespDraftEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateRespDraftEntityAliaseDisplayStatus ...
type CreateBaikeUpdateRespDraftEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeUpdateRespDraftEntityRelatedMeta ...
type CreateBaikeUpdateRespDraftEntityRelatedMeta struct {
	Users         []*CreateBaikeUpdateRespDraftEntityRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeUpdateRespDraftEntityRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeUpdateRespDraftEntityRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeUpdateRespDraftEntityRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeUpdateRespDraftEntityRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeUpdateRespDraftEntityRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaUser ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaChat ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaDoc ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaOncall ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaLink ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaAbbreviation ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// CreateBaikeUpdateRespDraftEntityStatistics ...
type CreateBaikeUpdateRespDraftEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// CreateBaikeUpdateRespDraftEntityOuterInfo ...
type CreateBaikeUpdateRespDraftEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBaikeEntity 通过词条 id 拉取对应的实体词详情信息
//
// 也支持通过 provider 和 outer_id 返回对应实体的详情数据。此时路径中的 entity_id 为固定的 enterprise_0
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/get
func (r *BaikeService) GetBaikeEntity(ctx context.Context, request *GetBaikeEntityReq, options ...MethodOptionFunc) (*GetBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeGetBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#GetBaikeEntity mock enable")
		return r.cli.mock.mockBaikeGetBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "GetBaikeEntity",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/:entity_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeGetBaikeEntity mock BaikeGetBaikeEntity method
func (r *Mock) MockBaikeGetBaikeEntity(f func(ctx context.Context, request *GetBaikeEntityReq, options ...MethodOptionFunc) (*GetBaikeEntityResp, *Response, error)) {
	r.mockBaikeGetBaikeEntity = f
}

// UnMockBaikeGetBaikeEntity un-mock BaikeGetBaikeEntity method
func (r *Mock) UnMockBaikeGetBaikeEntity() {
	r.mockBaikeGetBaikeEntity = nil
}

// GetBaikeEntityReq ...
type GetBaikeEntityReq struct {
	Provider   *string `query:"provider" json:"-"`     // 数据提供者, 示例值："星云", 长度范围：`2` ～ `32` 字符
	OuterID    *string `query:"outer_id" json:"-"`     // 外部唯一 id, 示例值："12345", 长度范围：`1` ～ `64` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	EntityID   string  `path:"entity_id" json:"-"`     // 词条 id, 示例值："enterprise_515879"
}

// getBaikeEntityResp ...
type getBaikeEntityResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetBaikeEntityResp `json:"data,omitempty"`
}

// GetBaikeEntityResp ...
type GetBaikeEntityResp struct {
	Entity *GetBaikeEntityRespEntity `json:"entity,omitempty"` // 实体词
}

// GetBaikeEntityRespEntity ...
type GetBaikeEntityRespEntity struct {
	ID          string                               `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*GetBaikeEntityRespEntityMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*GetBaikeEntityRespEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                               `json:"description,omitempty"`  // 详情信息
	CreateTime  string                               `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                               `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *GetBaikeEntityRespEntityRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                             `json:"categories,omitempty"`   // 词条标签
	Statistics  *GetBaikeEntityRespEntityStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *GetBaikeEntityRespEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// GetBaikeEntityRespEntityMainKey ...
type GetBaikeEntityRespEntityMainKey struct {
	Key           string                                        `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityRespEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityRespEntityMainKeyDisplayStatus ...
type GetBaikeEntityRespEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityRespEntityAliase ...
type GetBaikeEntityRespEntityAliase struct {
	Key           string                                       `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityRespEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityRespEntityAliaseDisplayStatus ...
type GetBaikeEntityRespEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityRespEntityRelatedMeta ...
type GetBaikeEntityRespEntityRelatedMeta struct {
	Users         []*GetBaikeEntityRespEntityRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*GetBaikeEntityRespEntityRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*GetBaikeEntityRespEntityRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*GetBaikeEntityRespEntityRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*GetBaikeEntityRespEntityRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*GetBaikeEntityRespEntityRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// GetBaikeEntityRespEntityRelatedMetaUser ...
type GetBaikeEntityRespEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaChat ...
type GetBaikeEntityRespEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaDoc ...
type GetBaikeEntityRespEntityRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaOncall ...
type GetBaikeEntityRespEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaLink ...
type GetBaikeEntityRespEntityRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaAbbreviation ...
type GetBaikeEntityRespEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// GetBaikeEntityRespEntityStatistics ...
type GetBaikeEntityRespEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// GetBaikeEntityRespEntityOuterInfo ...
type GetBaikeEntityRespEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// HighlightBaikeEntity 用户传入一个句子，返回词条的位置和对应的 Id，通过 Get 接口可以获取词条的详情信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/highlight
func (r *BaikeService) HighlightBaikeEntity(ctx context.Context, request *HighlightBaikeEntityReq, options ...MethodOptionFunc) (*HighlightBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeHighlightBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#HighlightBaikeEntity mock enable")
		return r.cli.mock.mockBaikeHighlightBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "HighlightBaikeEntity",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/highlight",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(highlightBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeHighlightBaikeEntity mock BaikeHighlightBaikeEntity method
func (r *Mock) MockBaikeHighlightBaikeEntity(f func(ctx context.Context, request *HighlightBaikeEntityReq, options ...MethodOptionFunc) (*HighlightBaikeEntityResp, *Response, error)) {
	r.mockBaikeHighlightBaikeEntity = f
}

// UnMockBaikeHighlightBaikeEntity un-mock BaikeHighlightBaikeEntity method
func (r *Mock) UnMockBaikeHighlightBaikeEntity() {
	r.mockBaikeHighlightBaikeEntity = nil
}

// HighlightBaikeEntityReq ...
type HighlightBaikeEntityReq struct {
	Text string `json:"text,omitempty"` // 需要被识别实体词内容的一句话（不要超过1000字）, 示例值："企业百科是飞书提供的一款知识管理工具"
}

// highlightBaikeEntityResp ...
type highlightBaikeEntityResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *HighlightBaikeEntityResp `json:"data,omitempty"`
}

// HighlightBaikeEntityResp ...
type HighlightBaikeEntityResp struct {
	Phrases []*HighlightBaikeEntityRespPhrase `json:"phrases,omitempty"` // 返回识别到的实体词信息
}

// HighlightBaikeEntityRespPhrase ...
type HighlightBaikeEntityRespPhrase struct {
	Name      string                              `json:"name,omitempty"`       // 关键词
	EntityIDs []string                            `json:"entity_ids,omitempty"` // 词条 id 列表
	Span      *HighlightBaikeEntityRespPhraseSpan `json:"span,omitempty"`       // 词条所在位置
}

// HighlightBaikeEntityRespPhraseSpan ...
type HighlightBaikeEntityRespPhraseSpan struct {
	Start int64 `json:"start,omitempty"` // 偏移量开始位置，从 0 开始计数（编码格式采用 utf-8）
	End   int64 `json:"end,omitempty"`   // 偏移量结束位置，从 0 开始计数（编码格式采用 utf-8）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBaikeEntityList 通过分页拉取词条数据，支持租户内的全部词条拉取
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/list
func (r *BaikeService) GetBaikeEntityList(ctx context.Context, request *GetBaikeEntityListReq, options ...MethodOptionFunc) (*GetBaikeEntityListResp, *Response, error) {
	if r.cli.mock.mockBaikeGetBaikeEntityList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#GetBaikeEntityList mock enable")
		return r.cli.mock.mockBaikeGetBaikeEntityList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "GetBaikeEntityList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBaikeEntityListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeGetBaikeEntityList mock BaikeGetBaikeEntityList method
func (r *Mock) MockBaikeGetBaikeEntityList(f func(ctx context.Context, request *GetBaikeEntityListReq, options ...MethodOptionFunc) (*GetBaikeEntityListResp, *Response, error)) {
	r.mockBaikeGetBaikeEntityList = f
}

// UnMockBaikeGetBaikeEntityList un-mock BaikeGetBaikeEntityList method
func (r *Mock) UnMockBaikeGetBaikeEntityList() {
	r.mockBaikeGetBaikeEntityList = nil
}

// GetBaikeEntityListReq ...
type GetBaikeEntityListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：20, 最大值：`100`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c"
	Provider   *string `query:"provider" json:"-"`     // 数据提供方【可用来过滤数据】, 示例值："星云", 长度范围：`2` ～ `32` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getBaikeEntityListResp ...
type getBaikeEntityListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetBaikeEntityListResp `json:"data,omitempty"`
}

// GetBaikeEntityListResp ...
type GetBaikeEntityListResp struct {
	Entities  []*GetBaikeEntityListRespEntitie `json:"entities,omitempty"`   // 词条列表
	PageToken string                           `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetBaikeEntityListRespEntitie ...
type GetBaikeEntityListRespEntitie struct {
	ID          string                                    `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*GetBaikeEntityListRespEntitieMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*GetBaikeEntityListRespEntitieAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                    `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                    `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                    `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *GetBaikeEntityListRespEntitieRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                  `json:"categories,omitempty"`   // 词条标签
	Statistics  *GetBaikeEntityListRespEntitieStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *GetBaikeEntityListRespEntitieOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// GetBaikeEntityListRespEntitieMainKey ...
type GetBaikeEntityListRespEntitieMainKey struct {
	Key           string                                             `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityListRespEntitieMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityListRespEntitieMainKeyDisplayStatus ...
type GetBaikeEntityListRespEntitieMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityListRespEntitieAliase ...
type GetBaikeEntityListRespEntitieAliase struct {
	Key           string                                            `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityListRespEntitieAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityListRespEntitieAliaseDisplayStatus ...
type GetBaikeEntityListRespEntitieAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityListRespEntitieRelatedMeta ...
type GetBaikeEntityListRespEntitieRelatedMeta struct {
	Users         []*GetBaikeEntityListRespEntitieRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*GetBaikeEntityListRespEntitieRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*GetBaikeEntityListRespEntitieRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*GetBaikeEntityListRespEntitieRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*GetBaikeEntityListRespEntitieRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*GetBaikeEntityListRespEntitieRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// GetBaikeEntityListRespEntitieRelatedMetaUser ...
type GetBaikeEntityListRespEntitieRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaChat ...
type GetBaikeEntityListRespEntitieRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaDoc ...
type GetBaikeEntityListRespEntitieRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaOncall ...
type GetBaikeEntityListRespEntitieRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaLink ...
type GetBaikeEntityListRespEntitieRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaAbbreviation ...
type GetBaikeEntityListRespEntitieRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// GetBaikeEntityListRespEntitieStatistics ...
type GetBaikeEntityListRespEntitieStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// GetBaikeEntityListRespEntitieOuterInfo ...
type GetBaikeEntityListRespEntitieOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MatchBaikeEntity 准确匹配词条的关键词、全名、别名属性，并召回对应的 ID
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/match
func (r *BaikeService) MatchBaikeEntity(ctx context.Context, request *MatchBaikeEntityReq, options ...MethodOptionFunc) (*MatchBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeMatchBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#MatchBaikeEntity mock enable")
		return r.cli.mock.mockBaikeMatchBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "MatchBaikeEntity",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/match",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(matchBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeMatchBaikeEntity mock BaikeMatchBaikeEntity method
func (r *Mock) MockBaikeMatchBaikeEntity(f func(ctx context.Context, request *MatchBaikeEntityReq, options ...MethodOptionFunc) (*MatchBaikeEntityResp, *Response, error)) {
	r.mockBaikeMatchBaikeEntity = f
}

// UnMockBaikeMatchBaikeEntity un-mock BaikeMatchBaikeEntity method
func (r *Mock) UnMockBaikeMatchBaikeEntity() {
	r.mockBaikeMatchBaikeEntity = nil
}

// MatchBaikeEntityReq ...
type MatchBaikeEntityReq struct {
	Word string `json:"word,omitempty"` // 词条主关键词、全称、别名全匹配, 示例值："企业百科"
}

// matchBaikeEntityResp ...
type matchBaikeEntityResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *MatchBaikeEntityResp `json:"data,omitempty"`
}

// MatchBaikeEntityResp ...
type MatchBaikeEntityResp struct {
	Results []*MatchBaikeEntityRespResult `json:"results,omitempty"` // 匹配结果
}

// MatchBaikeEntityRespResult ...
type MatchBaikeEntityRespResult struct {
	EntityID string `json:"entity_id,omitempty"` // 词条 id
	Type     int64  `json:"type,omitempty"`      // 匹配中的字段, 可选值有: `0`：主关键词, `1`：全称, `2`：别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchBaikeEntity 传入关键词，进行模糊匹配搜索相应的词条
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/search
func (r *BaikeService) SearchBaikeEntity(ctx context.Context, request *SearchBaikeEntityReq, options ...MethodOptionFunc) (*SearchBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeSearchBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#SearchBaikeEntity mock enable")
		return r.cli.mock.mockBaikeSearchBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "SearchBaikeEntity",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(searchBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeSearchBaikeEntity mock BaikeSearchBaikeEntity method
func (r *Mock) MockBaikeSearchBaikeEntity(f func(ctx context.Context, request *SearchBaikeEntityReq, options ...MethodOptionFunc) (*SearchBaikeEntityResp, *Response, error)) {
	r.mockBaikeSearchBaikeEntity = f
}

// UnMockBaikeSearchBaikeEntity un-mock BaikeSearchBaikeEntity method
func (r *Mock) UnMockBaikeSearchBaikeEntity() {
	r.mockBaikeSearchBaikeEntity = nil
}

// SearchBaikeEntityReq ...
type SearchBaikeEntityReq struct {
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Query      string  `json:"query,omitempty"`        // 搜索关键词, 示例值："百科"
}

// searchBaikeEntityResp ...
type searchBaikeEntityResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *SearchBaikeEntityResp `json:"data,omitempty"`
}

// SearchBaikeEntityResp ...
type SearchBaikeEntityResp struct {
	Entities  []*SearchBaikeEntityRespEntitie `json:"entities,omitempty"`   // 数据数组
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// SearchBaikeEntityRespEntitie ...
type SearchBaikeEntityRespEntitie struct {
	ID          string                                   `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*SearchBaikeEntityRespEntitieMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*SearchBaikeEntityRespEntitieAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                   `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                   `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                   `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *SearchBaikeEntityRespEntitieRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                 `json:"categories,omitempty"`   // 词条标签
	Statistics  *SearchBaikeEntityRespEntitieStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *SearchBaikeEntityRespEntitieOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// SearchBaikeEntityRespEntitieMainKey ...
type SearchBaikeEntityRespEntitieMainKey struct {
	Key           string                                            `json:"key,omitempty"`            // 内容
	DisplayStatus *SearchBaikeEntityRespEntitieMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// SearchBaikeEntityRespEntitieMainKeyDisplayStatus ...
type SearchBaikeEntityRespEntitieMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// SearchBaikeEntityRespEntitieAliase ...
type SearchBaikeEntityRespEntitieAliase struct {
	Key           string                                           `json:"key,omitempty"`            // 内容
	DisplayStatus *SearchBaikeEntityRespEntitieAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// SearchBaikeEntityRespEntitieAliaseDisplayStatus ...
type SearchBaikeEntityRespEntitieAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// SearchBaikeEntityRespEntitieRelatedMeta ...
type SearchBaikeEntityRespEntitieRelatedMeta struct {
	Users         []*SearchBaikeEntityRespEntitieRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*SearchBaikeEntityRespEntitieRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*SearchBaikeEntityRespEntitieRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*SearchBaikeEntityRespEntitieRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*SearchBaikeEntityRespEntitieRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*SearchBaikeEntityRespEntitieRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// SearchBaikeEntityRespEntitieRelatedMetaUser ...
type SearchBaikeEntityRespEntitieRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaChat ...
type SearchBaikeEntityRespEntitieRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaDoc ...
type SearchBaikeEntityRespEntitieRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaOncall ...
type SearchBaikeEntityRespEntitieRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaLink ...
type SearchBaikeEntityRespEntitieRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaAbbreviation ...
type SearchBaikeEntityRespEntitieRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// SearchBaikeEntityRespEntitieStatistics ...
type SearchBaikeEntityRespEntitieStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// SearchBaikeEntityRespEntitieOuterInfo ...
type SearchBaikeEntityRespEntitieOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableAppRole 新增自定义权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/create
func (r *BitableService) CreateBitableAppRole(ctx context.Context, request *CreateBitableAppRoleReq, options ...MethodOptionFunc) (*CreateBitableAppRoleResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableAppRole != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableAppRole mock enable")
		return r.cli.mock.mockBitableCreateBitableAppRole(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableAppRole",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/roles",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableAppRoleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableAppRole mock BitableCreateBitableAppRole method
func (r *Mock) MockBitableCreateBitableAppRole(f func(ctx context.Context, request *CreateBitableAppRoleReq, options ...MethodOptionFunc) (*CreateBitableAppRoleResp, *Response, error)) {
	r.mockBitableCreateBitableAppRole = f
}

// UnMockBitableCreateBitableAppRole un-mock BitableCreateBitableAppRole method
func (r *Mock) UnMockBitableCreateBitableAppRole() {
	r.mockBitableCreateBitableAppRole = nil
}

// CreateBitableAppRoleReq ...
type CreateBitableAppRoleReq struct {
	AppToken   string                              `path:"app_token" json:"-"`    // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	RoleName   string                              `json:"role_name,omitempty"`   // 自定义权限的名字, 示例值："自定义权限1"
	TableRoles []*CreateBitableAppRoleReqTableRole `json:"table_roles,omitempty"` // 数据表权限, 最大长度：`100`
}

// CreateBitableAppRoleReqTableRole ...
type CreateBitableAppRoleReqTableRole struct {
	TableName string                                   `json:"table_name,omitempty"` // 数据表名, 示例值："数据表1"
	TablePerm int64                                    `json:"table_perm,omitempty"` // 数据表权限，`协作者可编辑自己的记录`和`可编辑指定字段`是`可编辑记录`的特殊情况，可通过指定`rec_rule`或`field_perm`参数实现相同的效果, 示例值：0, 可选值有: `0`：无权限, `1`：可阅读, `2`：可编辑记录, `4`：可编辑字段和记录, 默认值: `0`
	RecRule   *CreateBitableAppRoleReqTableRoleRecRule `json:"rec_rule,omitempty"`   // 记录筛选条件，在table_perm为1或2时有意义，用于指定可编辑或可阅读某些记录
	FieldPerm map[string]int64                         `json:"field_perm,omitempty"` // 字段权限，仅在table_perm为2时有意义，设置字段可编辑或可阅读。类型为 map，key 是字段名，value 是字段权限。,**value 枚举值有：**, `1`：可阅读, `2`：可编辑
}

// CreateBitableAppRoleReqTableRoleRecRule ...
type CreateBitableAppRoleReqTableRoleRecRule struct {
	Conditions  []*CreateBitableAppRoleReqTableRoleRecRuleCondition `json:"conditions,omitempty"`  // 记录筛选条件, 最大长度：`100`
	Conjunction *string                                             `json:"conjunction,omitempty"` // 多个筛选条件的关系, 示例值："and", 可选值有: `and`：与, `or`：或, 默认值: `and`
	OtherPerm   *int64                                              `json:"other_perm,omitempty"`  // 其他记录权限，仅在table_perm为2时有意义, 示例值：0, 可选值有: `0`：禁止查看, `1`：仅可阅读, 默认值: `0`
}

// CreateBitableAppRoleReqTableRoleRecRuleCondition ...
type CreateBitableAppRoleReqTableRoleRecRuleCondition struct {
	FieldName string   `json:"field_name,omitempty"` // 字段名，记录筛选条件是`创建人包含访问者本人`时，此参数值为"", 示例值："单选"
	Operator  *string  `json:"operator,omitempty"`   // 运算符, 示例值："is", 可选值有: `is`：等于, `isNot`：不等于, `contains`：包含, `doesNotContain`：不包含, `isEmpty`：为空, `isNotEmpty`：不为空, 默认值: `is`
	Value     []string `json:"value,omitempty"`      // 单选或多选字段的选项id, 示例值：["optbdVHf4q", "optrpd3eIJ"]
}

// createBitableAppRoleResp ...
type createBitableAppRoleResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableAppRoleResp `json:"data,omitempty"`
}

// CreateBitableAppRoleResp ...
type CreateBitableAppRoleResp struct {
	Role *CreateBitableAppRoleRespRole `json:"role,omitempty"` // 自定义权限
}

// CreateBitableAppRoleRespRole ...
type CreateBitableAppRoleRespRole struct {
	RoleName   string                                   `json:"role_name,omitempty"`   // 自定义权限的名字
	RoleID     string                                   `json:"role_id,omitempty"`     // 自定义权限的id
	TableRoles []*CreateBitableAppRoleRespRoleTableRole `json:"table_roles,omitempty"` // 数据表权限
}

// CreateBitableAppRoleRespRoleTableRole ...
type CreateBitableAppRoleRespRoleTableRole struct {
	TableName string                                        `json:"table_name,omitempty"` // 数据表名
	TablePerm int64                                         `json:"table_perm,omitempty"` // 数据表权限，`协作者可编辑自己的记录`和`可编辑指定字段`是`可编辑记录`的特殊情况，可通过指定`rec_rule`或`field_perm`参数实现相同的效果, 可选值有: `0`：无权限, `1`：可阅读, `2`：可编辑记录, `4`：可编辑字段和记录
	RecRule   *CreateBitableAppRoleRespRoleTableRoleRecRule `json:"rec_rule,omitempty"`   // 记录筛选条件，在table_perm为1或2时有意义，用于指定可编辑或可阅读某些记录
	FieldPerm map[string]int64                              `json:"field_perm,omitempty"` // 字段权限，仅在table_perm为2时有意义，设置字段可编辑或可阅读。类型为 map，key 是字段名，value 是字段权限。,**value 枚举值有：**, `1`：可阅读, `2`：可编辑
}

// CreateBitableAppRoleRespRoleTableRoleRecRule ...
type CreateBitableAppRoleRespRoleTableRoleRecRule struct {
	Conditions  []*CreateBitableAppRoleRespRoleTableRoleRecRuleCondition `json:"conditions,omitempty"`  // 记录筛选条件
	Conjunction string                                                   `json:"conjunction,omitempty"` // 多个筛选条件的关系, 可选值有: `and`：与, `or`：或
	OtherPerm   int64                                                    `json:"other_perm,omitempty"`  // 其他记录权限，仅在table_perm为2时有意义, 可选值有: `0`：禁止查看, `1`：仅可阅读
}

// CreateBitableAppRoleRespRoleTableRoleRecRuleCondition ...
type CreateBitableAppRoleRespRoleTableRoleRecRuleCondition struct {
	FieldName string   `json:"field_name,omitempty"` // 字段名，记录筛选条件是`创建人包含访问者本人`时，此参数值为""
	Operator  string   `json:"operator,omitempty"`   // 运算符, 可选值有: `is`：等于, `isNot`：不等于, `contains`：包含, `doesNotContain`：不包含, `isEmpty`：为空, `isNotEmpty`：不为空
	Value     []string `json:"value,omitempty"`      // 单选或多选字段的选项id
	FieldType int64    `json:"field_type,omitempty"` // 字段类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteBitableAppRole 删除自定义权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/delete
func (r *BitableService) DeleteBitableAppRole(ctx context.Context, request *DeleteBitableAppRoleReq, options ...MethodOptionFunc) (*DeleteBitableAppRoleResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteBitableAppRole != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#DeleteBitableAppRole mock enable")
		return r.cli.mock.mockBitableDeleteBitableAppRole(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "DeleteBitableAppRole",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/roles/:role_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteBitableAppRoleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableDeleteBitableAppRole mock BitableDeleteBitableAppRole method
func (r *Mock) MockBitableDeleteBitableAppRole(f func(ctx context.Context, request *DeleteBitableAppRoleReq, options ...MethodOptionFunc) (*DeleteBitableAppRoleResp, *Response, error)) {
	r.mockBitableDeleteBitableAppRole = f
}

// UnMockBitableDeleteBitableAppRole un-mock BitableDeleteBitableAppRole method
func (r *Mock) UnMockBitableDeleteBitableAppRole() {
	r.mockBitableDeleteBitableAppRole = nil
}

// DeleteBitableAppRoleReq ...
type DeleteBitableAppRoleReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	RoleID   string `path:"role_id" json:"-"`   // 自定义权限的id, 示例值："roljRpwIUt"
}

// deleteBitableAppRoleResp ...
type deleteBitableAppRoleResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *DeleteBitableAppRoleResp `json:"data,omitempty"`
}

// DeleteBitableAppRoleResp ...
type DeleteBitableAppRoleResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableAppRoleList 列出自定义权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/list
func (r *BitableService) GetBitableAppRoleList(ctx context.Context, request *GetBitableAppRoleListReq, options ...MethodOptionFunc) (*GetBitableAppRoleListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableAppRoleList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableAppRoleList mock enable")
		return r.cli.mock.mockBitableGetBitableAppRoleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableAppRoleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/roles",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableAppRoleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableAppRoleList mock BitableGetBitableAppRoleList method
func (r *Mock) MockBitableGetBitableAppRoleList(f func(ctx context.Context, request *GetBitableAppRoleListReq, options ...MethodOptionFunc) (*GetBitableAppRoleListResp, *Response, error)) {
	r.mockBitableGetBitableAppRoleList = f
}

// UnMockBitableGetBitableAppRoleList un-mock BitableGetBitableAppRoleList method
func (r *Mock) UnMockBitableGetBitableAppRoleList() {
	r.mockBitableGetBitableAppRoleList = nil
}

// GetBitableAppRoleListReq ...
type GetBitableAppRoleListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`30`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："roljRpwIUt"
	AppToken  string  `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
}

// getBitableAppRoleListResp ...
type getBitableAppRoleListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableAppRoleListResp `json:"data,omitempty"`
}

// GetBitableAppRoleListResp ...
type GetBitableAppRoleListResp struct {
	Items     []*GetBitableAppRoleListRespItem `json:"items,omitempty"`      // 自定义权限列表
	PageToken string                           `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                             `json:"has_more,omitempty"`   // 是否还有更多项
	Total     int64                            `json:"total,omitempty"`      // 总数
}

// GetBitableAppRoleListRespItem ...
type GetBitableAppRoleListRespItem struct {
	RoleName   string                                    `json:"role_name,omitempty"`   // 自定义权限的名字
	RoleID     string                                    `json:"role_id,omitempty"`     // 自定义权限的id
	TableRoles []*GetBitableAppRoleListRespItemTableRole `json:"table_roles,omitempty"` // 数据表权限
}

// GetBitableAppRoleListRespItemTableRole ...
type GetBitableAppRoleListRespItemTableRole struct {
	TableName string                                         `json:"table_name,omitempty"` // 数据表名
	TablePerm int64                                          `json:"table_perm,omitempty"` // 数据表权限，`协作者可编辑自己的记录`和`可编辑指定字段`是`可编辑记录`的特殊情况，可通过指定`rec_rule`或`field_perm`参数实现相同的效果, 可选值有: `0`：无权限, `1`：可阅读, `2`：可编辑记录, `4`：可编辑字段和记录
	RecRule   *GetBitableAppRoleListRespItemTableRoleRecRule `json:"rec_rule,omitempty"`   // 记录筛选条件，在table_perm为1或2时有意义，用于指定可编辑或可阅读某些记录
	FieldPerm map[string]int64                               `json:"field_perm,omitempty"` // 字段权限，仅在table_perm为2时有意义，设置字段可编辑或可阅读。类型为 map，key 是字段名，value 是字段权限。,**value 枚举值有：**, `1`：可阅读, `2`：可编辑
}

// GetBitableAppRoleListRespItemTableRoleRecRule ...
type GetBitableAppRoleListRespItemTableRoleRecRule struct {
	Conditions  []*GetBitableAppRoleListRespItemTableRoleRecRuleCondition `json:"conditions,omitempty"`  // 记录筛选条件
	Conjunction string                                                    `json:"conjunction,omitempty"` // 多个筛选条件的关系, 可选值有: `and`：与, `or`：或
	OtherPerm   int64                                                     `json:"other_perm,omitempty"`  // 其他记录权限，仅在table_perm为2时有意义, 可选值有: `0`：禁止查看, `1`：仅可阅读
}

// GetBitableAppRoleListRespItemTableRoleRecRuleCondition ...
type GetBitableAppRoleListRespItemTableRoleRecRuleCondition struct {
	FieldName string   `json:"field_name,omitempty"` // 字段名，记录筛选条件是`创建人包含访问者本人`时，此参数值为""
	Operator  string   `json:"operator,omitempty"`   // 运算符, 可选值有: `is`：等于, `isNot`：不等于, `contains`：包含, `doesNotContain`：不包含, `isEmpty`：为空, `isNotEmpty`：不为空
	Value     []string `json:"value,omitempty"`      // 单选或多选字段的选项id
	FieldType int64    `json:"field_type,omitempty"` // 字段类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableAppRoleMember 新增自定义权限的协作者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/create
func (r *BitableService) CreateBitableAppRoleMember(ctx context.Context, request *CreateBitableAppRoleMemberReq, options ...MethodOptionFunc) (*CreateBitableAppRoleMemberResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableAppRoleMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableAppRoleMember mock enable")
		return r.cli.mock.mockBitableCreateBitableAppRoleMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableAppRoleMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableAppRoleMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableAppRoleMember mock BitableCreateBitableAppRoleMember method
func (r *Mock) MockBitableCreateBitableAppRoleMember(f func(ctx context.Context, request *CreateBitableAppRoleMemberReq, options ...MethodOptionFunc) (*CreateBitableAppRoleMemberResp, *Response, error)) {
	r.mockBitableCreateBitableAppRoleMember = f
}

// UnMockBitableCreateBitableAppRoleMember un-mock BitableCreateBitableAppRoleMember method
func (r *Mock) UnMockBitableCreateBitableAppRoleMember() {
	r.mockBitableCreateBitableAppRoleMember = nil
}

// CreateBitableAppRoleMemberReq ...
type CreateBitableAppRoleMemberReq struct {
	MemberIDType *IDType `query:"member_id_type" json:"-"` // 协作者id类型，与请求体中的member_id要对应, 示例值："open_id", 可选值有: `open_id`：以open_id来识别协作者, `union_id`：以union_id来识别协作者, `user_id`：以user_id来识别协作者, `chat_id`：以chat_id来识别协作者, `department_id`：以department_id来识别协作者, `open_department_id`：以open_department_id来识别协作者, 默认值: `open_id`
	AppToken     string  `path:"app_token" json:"-"`       // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	RoleID       string  `path:"role_id" json:"-"`         // 自定义权限的id, 示例值："roljRpwIUt"
	MemberID     string  `json:"member_id,omitempty"`      // 协作者id, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// createBitableAppRoleMemberResp ...
type createBitableAppRoleMemberResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableAppRoleMemberResp `json:"data,omitempty"`
}

// CreateBitableAppRoleMemberResp ...
type CreateBitableAppRoleMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteBitableAppRoleMember 删除自定义权限的协作者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/delete
func (r *BitableService) DeleteBitableAppRoleMember(ctx context.Context, request *DeleteBitableAppRoleMemberReq, options ...MethodOptionFunc) (*DeleteBitableAppRoleMemberResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteBitableAppRoleMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#DeleteBitableAppRoleMember mock enable")
		return r.cli.mock.mockBitableDeleteBitableAppRoleMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "DeleteBitableAppRoleMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteBitableAppRoleMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableDeleteBitableAppRoleMember mock BitableDeleteBitableAppRoleMember method
func (r *Mock) MockBitableDeleteBitableAppRoleMember(f func(ctx context.Context, request *DeleteBitableAppRoleMemberReq, options ...MethodOptionFunc) (*DeleteBitableAppRoleMemberResp, *Response, error)) {
	r.mockBitableDeleteBitableAppRoleMember = f
}

// UnMockBitableDeleteBitableAppRoleMember un-mock BitableDeleteBitableAppRoleMember method
func (r *Mock) UnMockBitableDeleteBitableAppRoleMember() {
	r.mockBitableDeleteBitableAppRoleMember = nil
}

// DeleteBitableAppRoleMemberReq ...
type DeleteBitableAppRoleMemberReq struct {
	MemberIDType *IDType `query:"member_id_type" json:"-"` // 协作者id类型，与请求体中的member_id要对应, 示例值："open_id", 可选值有: `open_id`：以open_id来识别协作者, `union_id`：以union_id来识别协作者, `user_id`：以user_id来识别协作者, `chat_id`：以chat_id来识别协作者, `department_id`：以department_id来识别协作者, `open_department_id`：以open_department_id来识别协作者, 默认值: `open_id`
	AppToken     string  `path:"app_token" json:"-"`       // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	RoleID       string  `path:"role_id" json:"-"`         // 自定义权限的id, 示例值："roljRpwIUt"
	MemberID     string  `path:"member_id" json:"-"`       // 协作者id, 示例值："ou_7dab8a3d3cdcc9da365777c7ad53uew2"
}

// deleteBitableAppRoleMemberResp ...
type deleteBitableAppRoleMemberResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteBitableAppRoleMemberResp `json:"data,omitempty"`
}

// DeleteBitableAppRoleMemberResp ...
type DeleteBitableAppRoleMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableAppRoleMemberList 列出自定义权限的协作者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role-member/list
func (r *BitableService) GetBitableAppRoleMemberList(ctx context.Context, request *GetBitableAppRoleMemberListReq, options ...MethodOptionFunc) (*GetBitableAppRoleMemberListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableAppRoleMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableAppRoleMemberList mock enable")
		return r.cli.mock.mockBitableGetBitableAppRoleMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableAppRoleMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/roles/:role_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableAppRoleMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableAppRoleMemberList mock BitableGetBitableAppRoleMemberList method
func (r *Mock) MockBitableGetBitableAppRoleMemberList(f func(ctx context.Context, request *GetBitableAppRoleMemberListReq, options ...MethodOptionFunc) (*GetBitableAppRoleMemberListResp, *Response, error)) {
	r.mockBitableGetBitableAppRoleMemberList = f
}

// UnMockBitableGetBitableAppRoleMemberList un-mock BitableGetBitableAppRoleMemberList method
func (r *Mock) UnMockBitableGetBitableAppRoleMemberList() {
	r.mockBitableGetBitableAppRoleMemberList = nil
}

// GetBitableAppRoleMemberListReq ...
type GetBitableAppRoleMemberListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：100, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxxxx"
	AppToken  string  `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	RoleID    string  `path:"role_id" json:"-"`     // 自定义权限的id, 示例值："roljRpwIUt"
}

// getBitableAppRoleMemberListResp ...
type getBitableAppRoleMemberListResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableAppRoleMemberListResp `json:"data,omitempty"`
}

// GetBitableAppRoleMemberListResp ...
type GetBitableAppRoleMemberListResp struct {
	Items     []*GetBitableAppRoleMemberListRespItem `json:"items,omitempty"`      // 协作者列表
	HasMore   bool                                   `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                 `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Total     int64                                  `json:"total,omitempty"`      // 总数
}

// GetBitableAppRoleMemberListRespItem ...
type GetBitableAppRoleMemberListRespItem struct {
	OpenID           string `json:"open_id,omitempty"`            // 用户的 open_id
	UnionID          string `json:"union_id,omitempty"`           // 用户的 union_id
	UserID           string `json:"user_id,omitempty"`            // 用户的 user_id
	ChatID           string `json:"chat_id,omitempty"`            // 群聊的 chat_id
	DepartmentID     string `json:"department_id,omitempty"`      // 部门的 department_id
	OpenDepartmentID string `json:"open_department_id,omitempty"` // 部门的 open_department_id
	MemberName       string `json:"member_name,omitempty"`        // 协作者名字
	MemberEnName     string `json:"member_en_name,omitempty"`     // 协作者英文名
	MemberType       string `json:"member_type,omitempty"`        // 协作者类型, 可选值有: `user`：用户, `chat`：群组, `department`：部门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateBitableAppRole 更新自定义权限
//
// 更新自定义权限是全量更新，会完全覆盖旧的自定义权限设置
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-role/update
func (r *BitableService) UpdateBitableAppRole(ctx context.Context, request *UpdateBitableAppRoleReq, options ...MethodOptionFunc) (*UpdateBitableAppRoleResp, *Response, error) {
	if r.cli.mock.mockBitableUpdateBitableAppRole != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#UpdateBitableAppRole mock enable")
		return r.cli.mock.mockBitableUpdateBitableAppRole(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "UpdateBitableAppRole",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/roles/:role_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateBitableAppRoleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableUpdateBitableAppRole mock BitableUpdateBitableAppRole method
func (r *Mock) MockBitableUpdateBitableAppRole(f func(ctx context.Context, request *UpdateBitableAppRoleReq, options ...MethodOptionFunc) (*UpdateBitableAppRoleResp, *Response, error)) {
	r.mockBitableUpdateBitableAppRole = f
}

// UnMockBitableUpdateBitableAppRole un-mock BitableUpdateBitableAppRole method
func (r *Mock) UnMockBitableUpdateBitableAppRole() {
	r.mockBitableUpdateBitableAppRole = nil
}

// UpdateBitableAppRoleReq ...
type UpdateBitableAppRoleReq struct {
	AppToken   string                              `path:"app_token" json:"-"`    // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	RoleID     string                              `path:"role_id" json:"-"`      // 自定义权限的id, 示例值："roljRpwIUt"
	RoleName   string                              `json:"role_name,omitempty"`   // 自定义权限的名字, 示例值："自定义权限1"
	TableRoles []*UpdateBitableAppRoleReqTableRole `json:"table_roles,omitempty"` // 数据表权限, 最大长度：`100`
}

// UpdateBitableAppRoleReqTableRole ...
type UpdateBitableAppRoleReqTableRole struct {
	TableName string                                   `json:"table_name,omitempty"` // 数据表名, 示例值："数据表1"
	TablePerm int64                                    `json:"table_perm,omitempty"` // 数据表权限，`协作者可编辑自己的记录`和`可编辑指定字段`是`可编辑记录`的特殊情况，可通过指定`rec_rule`或`field_perm`参数实现相同的效果, 示例值：0, 可选值有: `0`：无权限, `1`：可阅读, `2`：可编辑记录, `4`：可编辑字段和记录, 默认值: `0`
	RecRule   *UpdateBitableAppRoleReqTableRoleRecRule `json:"rec_rule,omitempty"`   // 记录筛选条件，在table_perm为1或2时有意义，用于指定可编辑或可阅读某些记录
	FieldPerm map[string]int64                         `json:"field_perm,omitempty"` // 字段权限，仅在table_perm为2时有意义，设置字段可编辑或可阅读。类型为 map，key 是字段名，value 是字段权限。,**value 枚举值有：**, `1`：可阅读, `2`：可编辑
}

// UpdateBitableAppRoleReqTableRoleRecRule ...
type UpdateBitableAppRoleReqTableRoleRecRule struct {
	Conditions  []*UpdateBitableAppRoleReqTableRoleRecRuleCondition `json:"conditions,omitempty"`  // 记录筛选条件, 最大长度：`100`
	Conjunction *string                                             `json:"conjunction,omitempty"` // 多个筛选条件的关系, 示例值："and", 可选值有: `and`：与, `or`：或, 默认值: `and`
	OtherPerm   *int64                                              `json:"other_perm,omitempty"`  // 其他记录权限，仅在table_perm为2时有意义, 示例值：0, 可选值有: `0`：禁止查看, `1`：仅可阅读, 默认值: `0`
}

// UpdateBitableAppRoleReqTableRoleRecRuleCondition ...
type UpdateBitableAppRoleReqTableRoleRecRuleCondition struct {
	FieldName string   `json:"field_name,omitempty"` // 字段名，记录筛选条件是`创建人包含访问者本人`时，此参数值为"", 示例值："单选"
	Operator  *string  `json:"operator,omitempty"`   // 运算符, 示例值："is", 可选值有: `is`：等于, `isNot`：不等于, `contains`：包含, `doesNotContain`：不包含, `isEmpty`：为空, `isNotEmpty`：不为空, 默认值: `is`
	Value     []string `json:"value,omitempty"`      // 单选或多选字段的选项id, 示例值：["optbdVHf4q", "optrpd3eIJ"]
}

// updateBitableAppRoleResp ...
type updateBitableAppRoleResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateBitableAppRoleResp `json:"data,omitempty"`
}

// UpdateBitableAppRoleResp ...
type UpdateBitableAppRoleResp struct {
	Role *UpdateBitableAppRoleRespRole `json:"role,omitempty"` // 自定义权限
}

// UpdateBitableAppRoleRespRole ...
type UpdateBitableAppRoleRespRole struct {
	RoleName   string                                   `json:"role_name,omitempty"`   // 自定义权限的名字
	RoleID     string                                   `json:"role_id,omitempty"`     // 自定义权限的id
	TableRoles []*UpdateBitableAppRoleRespRoleTableRole `json:"table_roles,omitempty"` // 数据表权限
}

// UpdateBitableAppRoleRespRoleTableRole ...
type UpdateBitableAppRoleRespRoleTableRole struct {
	TableName string                                        `json:"table_name,omitempty"` // 数据表名
	TablePerm int64                                         `json:"table_perm,omitempty"` // 数据表权限，`协作者可编辑自己的记录`和`可编辑指定字段`是`可编辑记录`的特殊情况，可通过指定`rec_rule`或`field_perm`参数实现相同的效果, 可选值有: `0`：无权限, `1`：可阅读, `2`：可编辑记录, `4`：可编辑字段和记录
	RecRule   *UpdateBitableAppRoleRespRoleTableRoleRecRule `json:"rec_rule,omitempty"`   // 记录筛选条件，在table_perm为1或2时有意义，用于指定可编辑或可阅读某些记录
	FieldPerm map[string]int64                              `json:"field_perm,omitempty"` // 字段权限，仅在table_perm为2时有意义，设置字段可编辑或可阅读。类型为 map，key 是字段名，value 是字段权限。,**value 枚举值有：**, `1`：可阅读, `2`：可编辑
}

// UpdateBitableAppRoleRespRoleTableRoleRecRule ...
type UpdateBitableAppRoleRespRoleTableRoleRecRule struct {
	Conditions  []*UpdateBitableAppRoleRespRoleTableRoleRecRuleCondition `json:"conditions,omitempty"`  // 记录筛选条件
	Conjunction string                                                   `json:"conjunction,omitempty"` // 多个筛选条件的关系, 可选值有: `and`：与, `or`：或
	OtherPerm   int64                                                    `json:"other_perm,omitempty"`  // 其他记录权限，仅在table_perm为2时有意义, 可选值有: `0`：禁止查看, `1`：仅可阅读
}

// UpdateBitableAppRoleRespRoleTableRoleRecRuleCondition ...
type UpdateBitableAppRoleRespRoleTableRoleRecRuleCondition struct {
	FieldName string   `json:"field_name,omitempty"` // 字段名，记录筛选条件是`创建人包含访问者本人`时，此参数值为""
	Operator  string   `json:"operator,omitempty"`   // 运算符, 可选值有: `is`：等于, `isNot`：不等于, `contains`：包含, `doesNotContain`：不包含, `isEmpty`：为空, `isNotEmpty`：不为空
	Value     []string `json:"value,omitempty"`      // 单选或多选字段的选项id
	FieldType int64    `json:"field_type,omitempty"` // 字段类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableField 该接口用于在数据表中新增一个字段
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/create
func (r *BitableService) CreateBitableField(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableField mock enable")
		return r.cli.mock.mockBitableCreateBitableField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableField",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableField mock BitableCreateBitableField method
func (r *Mock) MockBitableCreateBitableField(f func(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error)) {
	r.mockBitableCreateBitableField = f
}

// UnMockBitableCreateBitableField un-mock BitableCreateBitableField method
func (r *Mock) UnMockBitableCreateBitableField() {
	r.mockBitableCreateBitableField = nil
}

// CreateBitableFieldReq ...
type CreateBitableFieldReq struct {
	AppToken  string                         `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID   string                         `path:"table_id" json:"-"`    // table id, 示例值："tblsRc9GRRXKqhvW"
	FieldName string                         `json:"field_name,omitempty"` // 多维表格字段名, 示例值："多行文本"
	Type      int64                          `json:"type,omitempty"`       // 多维表格字段类型, 示例值：1, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *CreateBitableFieldReqProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// CreateBitableFieldReqProperty ...
type CreateBitableFieldReqProperty struct {
	Options       []*CreateBitableFieldReqPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     *string                                `json:"formatter,omitempty"`       // 数字、公式字段的显示格式, 示例值："0"
	DateFormatter *string                                `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式, 示例值："日期格式"
	AutoFill      *bool                                  `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间, 示例值：false
	Multiple      *bool                                  `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录, 示例值：false
	TableID       *string                                `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id, 示例值："tblsRc9GRRXKqhvW"
	TableName     *string                                `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字, 示例值：""table2""
	BackFieldName *string                                `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字, 示例值：""table1-双向关联""
}

// CreateBitableFieldReqPropertyOption ...
type CreateBitableFieldReqPropertyOption struct {
	Name  *string `json:"name,omitempty"`  // 选项名, 示例值："红色"
	ID    *string `json:"id,omitempty"`    // 选项id, 示例值："optKl35lnG"
	Color *int64  `json:"color,omitempty"` // 选项颜色, 示例值：0, 取值范围：`0` ～ `54`
}

// createBitableFieldResp ...
type createBitableFieldResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableFieldResp `json:"data,omitempty"`
}

// CreateBitableFieldResp ...
type CreateBitableFieldResp struct {
	Field *CreateBitableFieldRespField `json:"field,omitempty"` // 字段
}

// CreateBitableFieldRespField ...
type CreateBitableFieldRespField struct {
	FieldID   string                               `json:"field_id,omitempty"`   // 多维表格字段 id
	FieldName string                               `json:"field_name,omitempty"` // 多维表格字段名
	Type      int64                                `json:"type,omitempty"`       // 多维表格字段类型, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *CreateBitableFieldRespFieldProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// CreateBitableFieldRespFieldProperty ...
type CreateBitableFieldRespFieldProperty struct {
	Options       []*CreateBitableFieldRespFieldPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     string                                       `json:"formatter,omitempty"`       // 数字、公式字段的显示格式
	DateFormatter string                                       `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式
	AutoFill      bool                                         `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间
	Multiple      bool                                         `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
	TableID       string                                       `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id
	TableName     string                                       `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字
	BackFieldName string                                       `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字
}

// CreateBitableFieldRespFieldPropertyOption ...
type CreateBitableFieldRespFieldPropertyOption struct {
	Name  string `json:"name,omitempty"`  // 选项名
	ID    string `json:"id,omitempty"`    // 选项id
	Color int64  `json:"color,omitempty"` // 选项颜色
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteBitableField 该接口用于在数据表中删除一个字段
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/delete
func (r *BitableService) DeleteBitableField(ctx context.Context, request *DeleteBitableFieldReq, options ...MethodOptionFunc) (*DeleteBitableFieldResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteBitableField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#DeleteBitableField mock enable")
		return r.cli.mock.mockBitableDeleteBitableField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "DeleteBitableField",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteBitableFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableDeleteBitableField mock BitableDeleteBitableField method
func (r *Mock) MockBitableDeleteBitableField(f func(ctx context.Context, request *DeleteBitableFieldReq, options ...MethodOptionFunc) (*DeleteBitableFieldResp, *Response, error)) {
	r.mockBitableDeleteBitableField = f
}

// UnMockBitableDeleteBitableField un-mock BitableDeleteBitableField method
func (r *Mock) UnMockBitableDeleteBitableField() {
	r.mockBitableDeleteBitableField = nil
}

// DeleteBitableFieldReq ...
type DeleteBitableFieldReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string `path:"table_id" json:"-"`  // table id, 示例值："tblsRc9GRRXKqhvW"
	FieldID  string `path:"field_id" json:"-"`  // field id, 示例值："fldPTb0U2y"
}

// deleteBitableFieldResp ...
type deleteBitableFieldResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteBitableFieldResp `json:"data,omitempty"`
}

// DeleteBitableFieldResp ...
type DeleteBitableFieldResp struct {
	FieldID string `json:"field_id,omitempty"` // field id
	Deleted bool   `json:"deleted,omitempty"`  // 删除标记
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableFieldList 根据 app_token 和 table_id，获取数据表的所有字段
//
// 该接口支持调用频率上限为 20 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/list
func (r *BitableService) GetBitableFieldList(ctx context.Context, request *GetBitableFieldListReq, options ...MethodOptionFunc) (*GetBitableFieldListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableFieldList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableFieldList mock enable")
		return r.cli.mock.mockBitableGetBitableFieldList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableFieldList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableFieldListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableFieldList mock BitableGetBitableFieldList method
func (r *Mock) MockBitableGetBitableFieldList(f func(ctx context.Context, request *GetBitableFieldListReq, options ...MethodOptionFunc) (*GetBitableFieldListResp, *Response, error)) {
	r.mockBitableGetBitableFieldList = f
}

// UnMockBitableGetBitableFieldList un-mock BitableGetBitableFieldList method
func (r *Mock) UnMockBitableGetBitableFieldList() {
	r.mockBitableGetBitableFieldList = nil
}

// GetBitableFieldListReq ...
type GetBitableFieldListReq struct {
	ViewID    *string `query:"view_id" json:"-"`    // 视图 ID, 示例值："vewOVMEXPF"
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："fldwJ4YrtB"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	AppToken  string  `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID   string  `path:"table_id" json:"-"`    // table id, 示例值："tblsRc9GRRXKqhvW"
}

// getBitableFieldListResp ...
type getBitableFieldListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableFieldListResp `json:"data,omitempty"`
}

// GetBitableFieldListResp ...
type GetBitableFieldListResp struct {
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Total     int64                          `json:"total,omitempty"`      // 总数
	Items     []*GetBitableFieldListRespItem `json:"items,omitempty"`      // 字段信息
}

// GetBitableFieldListRespItem ...
type GetBitableFieldListRespItem struct {
	FieldID   string                               `json:"field_id,omitempty"`   // 多维表格字段 id
	FieldName string                               `json:"field_name,omitempty"` // 多维表格字段名
	Type      int64                                `json:"type,omitempty"`       // 多维表格字段类型, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *GetBitableFieldListRespItemProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// GetBitableFieldListRespItemProperty ...
type GetBitableFieldListRespItemProperty struct {
	Options       []*GetBitableFieldListRespItemPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     string                                       `json:"formatter,omitempty"`       // 数字、公式字段的显示格式
	DateFormatter string                                       `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式
	AutoFill      bool                                         `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间
	Multiple      bool                                         `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
	TableID       string                                       `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id
	TableName     string                                       `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字
	BackFieldName string                                       `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字
}

// GetBitableFieldListRespItemPropertyOption ...
type GetBitableFieldListRespItemPropertyOption struct {
	Name  string `json:"name,omitempty"`  // 选项名
	ID    string `json:"id,omitempty"`    // 选项id
	Color int64  `json:"color,omitempty"` // 选项颜色
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateBitableField 该接口用于在数据表中更新一个字段
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/update
func (r *BitableService) UpdateBitableField(ctx context.Context, request *UpdateBitableFieldReq, options ...MethodOptionFunc) (*UpdateBitableFieldResp, *Response, error) {
	if r.cli.mock.mockBitableUpdateBitableField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#UpdateBitableField mock enable")
		return r.cli.mock.mockBitableUpdateBitableField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "UpdateBitableField",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields/:field_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateBitableFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableUpdateBitableField mock BitableUpdateBitableField method
func (r *Mock) MockBitableUpdateBitableField(f func(ctx context.Context, request *UpdateBitableFieldReq, options ...MethodOptionFunc) (*UpdateBitableFieldResp, *Response, error)) {
	r.mockBitableUpdateBitableField = f
}

// UnMockBitableUpdateBitableField un-mock BitableUpdateBitableField method
func (r *Mock) UnMockBitableUpdateBitableField() {
	r.mockBitableUpdateBitableField = nil
}

// UpdateBitableFieldReq ...
type UpdateBitableFieldReq struct {
	AppToken  string                         `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID   string                         `path:"table_id" json:"-"`    // table id, 示例值："tblsRc9GRRXKqhvW"
	FieldID   string                         `path:"field_id" json:"-"`    // field id, 示例值："fldPTb0U2y"
	FieldName string                         `json:"field_name,omitempty"` // 多维表格字段名, 示例值："多行文本"
	Type      int64                          `json:"type,omitempty"`       // 多维表格字段类型, 示例值：1, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *UpdateBitableFieldReqProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// UpdateBitableFieldReqProperty ...
type UpdateBitableFieldReqProperty struct {
	Options       []*UpdateBitableFieldReqPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     *string                                `json:"formatter,omitempty"`       // 数字、公式字段的显示格式, 示例值："0"
	DateFormatter *string                                `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式, 示例值："日期格式"
	AutoFill      *bool                                  `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间, 示例值：false
	Multiple      *bool                                  `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录, 示例值：false
	TableID       *string                                `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id, 示例值："tblsRc9GRRXKqhvW"
	TableName     *string                                `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字, 示例值：""table2""
	BackFieldName *string                                `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字, 示例值：""table1-双向关联""
}

// UpdateBitableFieldReqPropertyOption ...
type UpdateBitableFieldReqPropertyOption struct {
	Name  *string `json:"name,omitempty"`  // 选项名, 示例值："红色"
	ID    *string `json:"id,omitempty"`    // 选项id, 示例值："optKl35lnG"
	Color *int64  `json:"color,omitempty"` // 选项颜色, 示例值：0, 取值范围：`0` ～ `54`
}

// updateBitableFieldResp ...
type updateBitableFieldResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateBitableFieldResp `json:"data,omitempty"`
}

// UpdateBitableFieldResp ...
type UpdateBitableFieldResp struct {
	Field *UpdateBitableFieldRespField `json:"field,omitempty"` // 字段
}

// UpdateBitableFieldRespField ...
type UpdateBitableFieldRespField struct {
	FieldID   string                               `json:"field_id,omitempty"`   // 多维表格字段 id
	FieldName string                               `json:"field_name,omitempty"` // 多维表格字段名
	Type      int64                                `json:"type,omitempty"`       // 多维表格字段类型, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *UpdateBitableFieldRespFieldProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// UpdateBitableFieldRespFieldProperty ...
type UpdateBitableFieldRespFieldProperty struct {
	Options       []*UpdateBitableFieldRespFieldPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     string                                       `json:"formatter,omitempty"`       // 数字、公式字段的显示格式
	DateFormatter string                                       `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式
	AutoFill      bool                                         `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间
	Multiple      bool                                         `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
	TableID       string                                       `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id
	TableName     string                                       `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字
	BackFieldName string                                       `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字
}

// UpdateBitableFieldRespFieldPropertyOption ...
type UpdateBitableFieldRespFieldPropertyOption struct {
	Name  string `json:"name,omitempty"`  // 选项名
	ID    string `json:"id,omitempty"`    // 选项id
	Color int64  `json:"color,omitempty"` // 选项颜色
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableMeta 通过 app_token 获取多维表格元数据
//
// 该接口支持调用频率上限为 20 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/get
func (r *BitableService) GetBitableMeta(ctx context.Context, request *GetBitableMetaReq, options ...MethodOptionFunc) (*GetBitableMetaResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableMeta mock enable")
		return r.cli.mock.mockBitableGetBitableMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableMeta mock BitableGetBitableMeta method
func (r *Mock) MockBitableGetBitableMeta(f func(ctx context.Context, request *GetBitableMetaReq, options ...MethodOptionFunc) (*GetBitableMetaResp, *Response, error)) {
	r.mockBitableGetBitableMeta = f
}

// UnMockBitableGetBitableMeta un-mock BitableGetBitableMeta method
func (r *Mock) UnMockBitableGetBitableMeta() {
	r.mockBitableGetBitableMeta = nil
}

// GetBitableMetaReq ...
type GetBitableMetaReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
}

// getBitableMetaResp ...
type getBitableMetaResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableMetaResp `json:"data,omitempty"`
}

// GetBitableMetaResp ...
type GetBitableMetaResp struct {
	App *GetBitableMetaRespApp `json:"app,omitempty"` // 多维表格元数据
}

// GetBitableMetaRespApp ...
type GetBitableMetaRespApp struct {
	AppToken string `json:"app_token,omitempty"` // 多维表格的 app_token
	Name     string `json:"name,omitempty"`      // 多维表格的名字
	Revision int64  `json:"revision,omitempty"`  // 多维表格的版本号（对 app 进行修改时更新，如新增、删除数据表，修改数据表名）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateBitableMeta 通过 app_token 更新多维表格元数据
//
// - 飞书文档、飞书表格、知识库中的多维表格不支持开启高级权限
// - 此接口非原子操作，先修改多维表格名字，后开关高级权限。可能存在部分成功的情况
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/update
func (r *BitableService) UpdateBitableMeta(ctx context.Context, request *UpdateBitableMetaReq, options ...MethodOptionFunc) (*UpdateBitableMetaResp, *Response, error) {
	if r.cli.mock.mockBitableUpdateBitableMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#UpdateBitableMeta mock enable")
		return r.cli.mock.mockBitableUpdateBitableMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "UpdateBitableMeta",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateBitableMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableUpdateBitableMeta mock BitableUpdateBitableMeta method
func (r *Mock) MockBitableUpdateBitableMeta(f func(ctx context.Context, request *UpdateBitableMetaReq, options ...MethodOptionFunc) (*UpdateBitableMetaResp, *Response, error)) {
	r.mockBitableUpdateBitableMeta = f
}

// UnMockBitableUpdateBitableMeta un-mock BitableUpdateBitableMeta method
func (r *Mock) UnMockBitableUpdateBitableMeta() {
	r.mockBitableUpdateBitableMeta = nil
}

// UpdateBitableMetaReq ...
type UpdateBitableMetaReq struct {
	AppToken   string  `path:"app_token" json:"-"`    // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	Name       *string `json:"name,omitempty"`        // 新的多维表格名字, 示例值："新的多维表格名字"
	IsAdvanced *bool   `json:"is_advanced,omitempty"` // 多维表格是否开启高级权限, 示例值：false
}

// updateBitableMetaResp ...
type updateBitableMetaResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateBitableMetaResp `json:"data,omitempty"`
}

// UpdateBitableMetaResp ...
type UpdateBitableMetaResp struct {
	App *UpdateBitableMetaRespApp `json:"app,omitempty"` // 多维表格元数据
}

// UpdateBitableMetaRespApp ...
type UpdateBitableMetaRespApp struct {
	AppToken   string `json:"app_token,omitempty"`   // 多维表格的 app_token
	Name       string `json:"name,omitempty"`        // 多维表格的名字
	IsAdvanced bool   `json:"is_advanced,omitempty"` // 多维表格是否已开启高级权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchCreateBitableRecord 该接口用于在数据表中新增多条记录
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_create
func (r *BitableService) BatchCreateBitableRecord(ctx context.Context, request *BatchCreateBitableRecordReq, options ...MethodOptionFunc) (*BatchCreateBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableBatchCreateBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#BatchCreateBitableRecord mock enable")
		return r.cli.mock.mockBitableBatchCreateBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "BatchCreateBitableRecord",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchCreateBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableBatchCreateBitableRecord mock BitableBatchCreateBitableRecord method
func (r *Mock) MockBitableBatchCreateBitableRecord(f func(ctx context.Context, request *BatchCreateBitableRecordReq, options ...MethodOptionFunc) (*BatchCreateBitableRecordResp, *Response, error)) {
	r.mockBitableBatchCreateBitableRecord = f
}

// UnMockBitableBatchCreateBitableRecord un-mock BitableBatchCreateBitableRecord method
func (r *Mock) UnMockBitableBatchCreateBitableRecord() {
	r.mockBitableBatchCreateBitableRecord = nil
}

// BatchCreateBitableRecordReq ...
type BatchCreateBitableRecordReq struct {
	UserIDType *IDType                              `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppToken   string                               `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID    string                               `path:"table_id" json:"-"`      // table id, 示例值："tblsRc9GRRXKqhvW"
	Records    []*BatchCreateBitableRecordReqRecord `json:"records,omitempty"`      // 记录
}

// BatchCreateBitableRecordReqRecord ...
type BatchCreateBitableRecordReqRecord struct {
	Fields map[string]interface{} `json:"fields,omitempty"` // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// batchCreateBitableRecordResp ...
type batchCreateBitableRecordResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateBitableRecordResp `json:"data,omitempty"`
}

// BatchCreateBitableRecordResp ...
type BatchCreateBitableRecordResp struct {
	Records []*BatchCreateBitableRecordRespRecord `json:"records,omitempty"` // 记录
}

// BatchCreateBitableRecordRespRecord ...
type BatchCreateBitableRecordRespRecord struct {
	RecordID string                 `json:"record_id,omitempty"` // 记录 id
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchDeleteBitableRecord 该接口用于删除数据表中现有的多条记录
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_delete
func (r *BitableService) BatchDeleteBitableRecord(ctx context.Context, request *BatchDeleteBitableRecordReq, options ...MethodOptionFunc) (*BatchDeleteBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableBatchDeleteBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#BatchDeleteBitableRecord mock enable")
		return r.cli.mock.mockBitableBatchDeleteBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "BatchDeleteBitableRecord",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchDeleteBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableBatchDeleteBitableRecord mock BitableBatchDeleteBitableRecord method
func (r *Mock) MockBitableBatchDeleteBitableRecord(f func(ctx context.Context, request *BatchDeleteBitableRecordReq, options ...MethodOptionFunc) (*BatchDeleteBitableRecordResp, *Response, error)) {
	r.mockBitableBatchDeleteBitableRecord = f
}

// UnMockBitableBatchDeleteBitableRecord un-mock BitableBatchDeleteBitableRecord method
func (r *Mock) UnMockBitableBatchDeleteBitableRecord() {
	r.mockBitableBatchDeleteBitableRecord = nil
}

// BatchDeleteBitableRecordReq ...
type BatchDeleteBitableRecordReq struct {
	AppToken string   `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string   `path:"table_id" json:"-"`  // table id, 示例值："tblsRc9GRRXKqhvW"
	Records  []string `json:"records,omitempty"`  // 删除的多条记录id列表, 示例值：[,    "recIcJBbvC",,    "recvmiCORa",]
}

// batchDeleteBitableRecordResp ...
type batchDeleteBitableRecordResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *BatchDeleteBitableRecordResp `json:"data,omitempty"`
}

// BatchDeleteBitableRecordResp ...
type BatchDeleteBitableRecordResp struct {
	Records []*BatchDeleteBitableRecordRespRecord `json:"records,omitempty"` // 记录
}

// BatchDeleteBitableRecordRespRecord ...
type BatchDeleteBitableRecordRespRecord struct {
	Deleted  bool   `json:"deleted,omitempty"`   // 是否成功删除
	RecordID string `json:"record_id,omitempty"` // 删除的记录 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchUpdateBitableRecord 该接口用于更新数据表中的多条记录
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_update
func (r *BitableService) BatchUpdateBitableRecord(ctx context.Context, request *BatchUpdateBitableRecordReq, options ...MethodOptionFunc) (*BatchUpdateBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableBatchUpdateBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#BatchUpdateBitableRecord mock enable")
		return r.cli.mock.mockBitableBatchUpdateBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "BatchUpdateBitableRecord",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchUpdateBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableBatchUpdateBitableRecord mock BitableBatchUpdateBitableRecord method
func (r *Mock) MockBitableBatchUpdateBitableRecord(f func(ctx context.Context, request *BatchUpdateBitableRecordReq, options ...MethodOptionFunc) (*BatchUpdateBitableRecordResp, *Response, error)) {
	r.mockBitableBatchUpdateBitableRecord = f
}

// UnMockBitableBatchUpdateBitableRecord un-mock BitableBatchUpdateBitableRecord method
func (r *Mock) UnMockBitableBatchUpdateBitableRecord() {
	r.mockBitableBatchUpdateBitableRecord = nil
}

// BatchUpdateBitableRecordReq ...
type BatchUpdateBitableRecordReq struct {
	UserIDType *IDType                              `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	AppToken   string                               `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID    string                               `path:"table_id" json:"-"`      // table id, 示例值："tblsRc9GRRXKqhvW"
	Records    []*BatchUpdateBitableRecordReqRecord `json:"records,omitempty"`      // 记录
}

// BatchUpdateBitableRecordReqRecord ...
type BatchUpdateBitableRecordReqRecord struct {
	RecordID *string                `json:"record_id,omitempty"` // 记录 id, 示例值："recqwIwhc6"
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// batchUpdateBitableRecordResp ...
type batchUpdateBitableRecordResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *BatchUpdateBitableRecordResp `json:"data,omitempty"`
}

// BatchUpdateBitableRecordResp ...
type BatchUpdateBitableRecordResp struct {
	Records []*BatchUpdateBitableRecordRespRecord `json:"records,omitempty"` // 记录
}

// BatchUpdateBitableRecordRespRecord ...
type BatchUpdateBitableRecordRespRecord struct {
	RecordID string                 `json:"record_id,omitempty"` // 记录 id
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableRecord 该接口用于在数据表中新增一条记录
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/create
func (r *BitableService) CreateBitableRecord(ctx context.Context, request *CreateBitableRecordReq, options ...MethodOptionFunc) (*CreateBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableRecord mock enable")
		return r.cli.mock.mockBitableCreateBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableRecord",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableRecord mock BitableCreateBitableRecord method
func (r *Mock) MockBitableCreateBitableRecord(f func(ctx context.Context, request *CreateBitableRecordReq, options ...MethodOptionFunc) (*CreateBitableRecordResp, *Response, error)) {
	r.mockBitableCreateBitableRecord = f
}

// UnMockBitableCreateBitableRecord un-mock BitableCreateBitableRecord method
func (r *Mock) UnMockBitableCreateBitableRecord() {
	r.mockBitableCreateBitableRecord = nil
}

// CreateBitableRecordReq ...
type CreateBitableRecordReq struct {
	UserIDType *IDType                `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppToken   string                 `path:"app_token" json:"-"`     // bitable app token, 示例值："bascng7vrxcxpig7geggXiCtadY"
	TableID    string                 `path:"table_id" json:"-"`      // table id, 示例值："tblUa9vcYjWQYJCj"
	Fields     map[string]interface{} `json:"fields,omitempty"`       // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// createBitableRecordResp ...
type createBitableRecordResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableRecordResp `json:"data,omitempty"`
}

// CreateBitableRecordResp ...
type CreateBitableRecordResp struct {
	Record *CreateBitableRecordRespRecord `json:"record,omitempty"` // 记录
}

// CreateBitableRecordRespRecord ...
type CreateBitableRecordRespRecord struct {
	RecordID string                 `json:"record_id,omitempty"` // 记录 id
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteBitableRecord 该接口用于删除数据表中的一条记录
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/delete
func (r *BitableService) DeleteBitableRecord(ctx context.Context, request *DeleteBitableRecordReq, options ...MethodOptionFunc) (*DeleteBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#DeleteBitableRecord mock enable")
		return r.cli.mock.mockBitableDeleteBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "DeleteBitableRecord",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableDeleteBitableRecord mock BitableDeleteBitableRecord method
func (r *Mock) MockBitableDeleteBitableRecord(f func(ctx context.Context, request *DeleteBitableRecordReq, options ...MethodOptionFunc) (*DeleteBitableRecordResp, *Response, error)) {
	r.mockBitableDeleteBitableRecord = f
}

// UnMockBitableDeleteBitableRecord un-mock BitableDeleteBitableRecord method
func (r *Mock) UnMockBitableDeleteBitableRecord() {
	r.mockBitableDeleteBitableRecord = nil
}

// DeleteBitableRecordReq ...
type DeleteBitableRecordReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string `path:"table_id" json:"-"`  // table id, 示例值："tblsRc9GRRXKqhvW"
	RecordID string `path:"record_id" json:"-"` // 单条记录的Id, 示例值："recpCsf4ME"
}

// deleteBitableRecordResp ...
type deleteBitableRecordResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *DeleteBitableRecordResp `json:"data,omitempty"`
}

// DeleteBitableRecordResp ...
type DeleteBitableRecordResp struct {
	Deleted  bool   `json:"deleted,omitempty"`   // 是否成功删除
	RecordID string `json:"record_id,omitempty"` // 删除的记录 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableRecord 该接口用于根据 record_id 的值检索现有记录
//
// 该接口支持调用频率上限为 20 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/get
func (r *BitableService) GetBitableRecord(ctx context.Context, request *GetBitableRecordReq, options ...MethodOptionFunc) (*GetBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableRecord mock enable")
		return r.cli.mock.mockBitableGetBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableRecord",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableRecord mock BitableGetBitableRecord method
func (r *Mock) MockBitableGetBitableRecord(f func(ctx context.Context, request *GetBitableRecordReq, options ...MethodOptionFunc) (*GetBitableRecordResp, *Response, error)) {
	r.mockBitableGetBitableRecord = f
}

// UnMockBitableGetBitableRecord un-mock BitableGetBitableRecord method
func (r *Mock) UnMockBitableGetBitableRecord() {
	r.mockBitableGetBitableRecord = nil
}

// GetBitableRecordReq ...
type GetBitableRecordReq struct {
	TextFieldAsArray  *bool   `query:"text_field_as_array" json:"-"` // 控制多行文本字段数据的返回格式, true 表示以数组形式返回, 示例值：true
	UserIDType        *IDType `query:"user_id_type" json:"-"`        // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DisplayFormulaRef *bool   `query:"display_formula_ref" json:"-"` // 控制公式、查找引用是否显示完整的原样返回结果, 示例值：true
	AutomaticFields   *bool   `query:"automatic_fields" json:"-"`    // 控制是否返回自动计算的字段，例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`，true 表示返回, 示例值：true
	AppToken          string  `path:"app_token" json:"-"`            // bitable app token, 示例值："bascnCMII2ORej2RItqpZZUNMIe"
	TableID           string  `path:"table_id" json:"-"`             // table id, 示例值："tblxI2tWaxP5dG7p"
	RecordID          string  `path:"record_id" json:"-"`            // 单条记录的 id, 示例值："recn0hoyXL"
}

// getBitableRecordResp ...
type getBitableRecordResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableRecordResp `json:"data,omitempty"`
}

// GetBitableRecordResp ...
type GetBitableRecordResp struct {
	Record *GetBitableRecordRespRecord `json:"record,omitempty"` // 记录
}

// GetBitableRecordRespRecord ...
type GetBitableRecordRespRecord struct {
	RecordID         string                                    `json:"record_id,omitempty"`          // 记录 id
	CreatedBy        *GetBitableRecordRespRecordCreatedBy      `json:"created_by,omitempty"`         // 创建人
	CreatedTime      int64                                     `json:"created_time,omitempty"`       // 创建时间
	LastModifiedBy   *GetBitableRecordRespRecordLastModifiedBy `json:"last_modified_by,omitempty"`   // 修改人
	LastModifiedTime int64                                     `json:"last_modified_time,omitempty"` // 最近更新时间
	Fields           map[string]interface{}                    `json:"fields,omitempty"`             // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// GetBitableRecordRespRecordCreatedBy ...
type GetBitableRecordRespRecordCreatedBy struct {
	ID     string `json:"id,omitempty"`      // 人员Id
	Name   string `json:"name,omitempty"`    // 中文姓名
	EnName string `json:"en_name,omitempty"` // 英文姓名
	Email  string `json:"email,omitempty"`   // 邮箱
}

// GetBitableRecordRespRecordLastModifiedBy ...
type GetBitableRecordRespRecordLastModifiedBy struct {
	ID     string `json:"id,omitempty"`      // 人员Id
	Name   string `json:"name,omitempty"`    // 中文姓名
	EnName string `json:"en_name,omitempty"` // 英文姓名
	Email  string `json:"email,omitempty"`   // 邮箱
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableRecordList 该接口用于列出数据表中的现有记录，单次最多列出 100 行记录，支持分页获取。
//
// 该接口支持调用频率上限为 1000 次/分钟
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list
func (r *BitableService) GetBitableRecordList(ctx context.Context, request *GetBitableRecordListReq, options ...MethodOptionFunc) (*GetBitableRecordListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableRecordList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableRecordList mock enable")
		return r.cli.mock.mockBitableGetBitableRecordList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableRecordList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableRecordListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableRecordList mock BitableGetBitableRecordList method
func (r *Mock) MockBitableGetBitableRecordList(f func(ctx context.Context, request *GetBitableRecordListReq, options ...MethodOptionFunc) (*GetBitableRecordListResp, *Response, error)) {
	r.mockBitableGetBitableRecordList = f
}

// UnMockBitableGetBitableRecordList un-mock BitableGetBitableRecordList method
func (r *Mock) UnMockBitableGetBitableRecordList() {
	r.mockBitableGetBitableRecordList = nil
}

// GetBitableRecordListReq ...
type GetBitableRecordListReq struct {
	ViewID            *string `query:"view_id" json:"-"`             // 视图 id,注意：如 filter 或 sort 有值，view_id 会被忽略。, 示例值："vewqhz51lk"
	Filter            *string `query:"filter" json:"-"`              // 筛选参数,注意：,1.筛选记录的表达式不超过2000个字符。,2.不支持对“人员”以及“关联字段”的属性进行过滤筛选，如人员的 OpenID。,3.仅支持字段在页面展示字符值进行筛选。,详细请参考[记录筛选开发指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/filter), 示例值："示例表达式：,AND(CurrentValue.[身高]>180, CurrentValue.[体重]>150)"
	Sort              *string `query:"sort" json:"-"`                // 排序参数,注意：,1.表达式需要不超过1000字符。,2.不支持对带“公式”和“关联字段”的表的使用。, 示例值："["字段1 DESC","字段2 ASC"],注意：使用引号将字段名称和顺序逆序连接起来。"
	FieldNames        *string `query:"field_names" json:"-"`         // 字段名称, 示例值："["字段1"]"
	TextFieldAsArray  *bool   `query:"text_field_as_array" json:"-"` // 控制多行文本字段数据的返回格式，true 表示以数组形式返回。,注意：,1.多行文本中如果有超链接部分，则会返回链接的 URL。,2.目前可以返回多行文本中 URL 类型为多维表格链接、飞书 doc、飞书 sheet的URL类型以及@人员的数据结构。, 示例值：true
	UserIDType        *IDType `query:"user_id_type" json:"-"`        // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DisplayFormulaRef *bool   `query:"display_formula_ref" json:"-"` // 控制公式、查找引用是否显示完整的原样返回结果, 示例值：true
	AutomaticFields   *bool   `query:"automatic_fields" json:"-"`    // 控制是否返回自动计算的字段，例如 `created_by`/`created_time`/`last_modified_by`/`last_modified_time`，true 表示返回, 示例值：true
	PageToken         *string `query:"page_token" json:"-"`          // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："recn0hoyXL"
	PageSize          *int64  `query:"page_size" json:"-"`           // 分页大小, 示例值：10, 最大值：`100`
	AppToken          string  `path:"app_token" json:"-"`            // bitable app token, 示例值："bascnCMII2ORej2RItqpZZUNMIe"
	TableID           string  `path:"table_id" json:"-"`             // table id, 示例值："tblxI2tWaxP5dG7p"
}

// getBitableRecordListResp ...
type getBitableRecordListResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableRecordListResp `json:"data,omitempty"`
}

// GetBitableRecordListResp ...
type GetBitableRecordListResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Total     int64                           `json:"total,omitempty"`      // 总数
	Items     []*GetBitableRecordListRespItem `json:"items,omitempty"`      // 记录信息
}

// GetBitableRecordListRespItem ...
type GetBitableRecordListRespItem struct {
	RecordID         string                                      `json:"record_id,omitempty"`          // 记录 id
	CreatedBy        *GetBitableRecordListRespItemCreatedBy      `json:"created_by,omitempty"`         // 创建人
	CreatedTime      int64                                       `json:"created_time,omitempty"`       // 创建时间
	LastModifiedBy   *GetBitableRecordListRespItemLastModifiedBy `json:"last_modified_by,omitempty"`   // 修改人
	LastModifiedTime int64                                       `json:"last_modified_time,omitempty"` // 最近更新时间
	Fields           map[string]interface{}                      `json:"fields,omitempty"`             // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// GetBitableRecordListRespItemCreatedBy ...
type GetBitableRecordListRespItemCreatedBy struct {
	ID     string `json:"id,omitempty"`      // 人员Id
	Name   string `json:"name,omitempty"`    // 中文姓名
	EnName string `json:"en_name,omitempty"` // 英文姓名
	Email  string `json:"email,omitempty"`   // 邮箱
}

// GetBitableRecordListRespItemLastModifiedBy ...
type GetBitableRecordListRespItemLastModifiedBy struct {
	ID     string `json:"id,omitempty"`      // 人员Id
	Name   string `json:"name,omitempty"`    // 中文姓名
	EnName string `json:"en_name,omitempty"` // 英文姓名
	Email  string `json:"email,omitempty"`   // 邮箱
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateBitableRecord 该接口用于更新数据表中的一条记录
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/update
func (r *BitableService) UpdateBitableRecord(ctx context.Context, request *UpdateBitableRecordReq, options ...MethodOptionFunc) (*UpdateBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableUpdateBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#UpdateBitableRecord mock enable")
		return r.cli.mock.mockBitableUpdateBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "UpdateBitableRecord",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableUpdateBitableRecord mock BitableUpdateBitableRecord method
func (r *Mock) MockBitableUpdateBitableRecord(f func(ctx context.Context, request *UpdateBitableRecordReq, options ...MethodOptionFunc) (*UpdateBitableRecordResp, *Response, error)) {
	r.mockBitableUpdateBitableRecord = f
}

// UnMockBitableUpdateBitableRecord un-mock BitableUpdateBitableRecord method
func (r *Mock) UnMockBitableUpdateBitableRecord() {
	r.mockBitableUpdateBitableRecord = nil
}

// UpdateBitableRecordReq ...
type UpdateBitableRecordReq struct {
	UserIDType *IDType                `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	AppToken   string                 `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID    string                 `path:"table_id" json:"-"`      // table id, 示例值："tblsRc9GRRXKqhvW"
	RecordID   string                 `path:"record_id" json:"-"`     // 单条记录的 id, 示例值："recqwIwhc6"
	Fields     map[string]interface{} `json:"fields,omitempty"`       // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// updateBitableRecordResp ...
type updateBitableRecordResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateBitableRecordResp `json:"data,omitempty"`
}

// UpdateBitableRecordResp ...
type UpdateBitableRecordResp struct {
	Record *UpdateBitableRecordRespRecord `json:"record,omitempty"` // {,    "fields": {,        "人力评估": 2,,        "任务执行人": [,            {,                "id": "ou_debc524b2d8cb187704df652b43d29de",            },        ],,        "任务描述": "多渠道收集用户反馈",,        "对应 OKR": [,            "recqwIwhc6",,            "recOuEJMvN",        ],,        "截止日期": 1609516800000,,        "是否完成": true,,        "状态": "已结束",,        "相关部门": [,            "销售",,            "客服",        ],    },}
}

// UpdateBitableRecordRespRecord ...
type UpdateBitableRecordRespRecord struct {
	RecordID string                 `json:"record_id,omitempty"` // 记录 id
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段,关于支持新增的字段类型，请参考[接入指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/bitable/notification)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchCreateBitableTable 新增多个数据表
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_create
func (r *BitableService) BatchCreateBitableTable(ctx context.Context, request *BatchCreateBitableTableReq, options ...MethodOptionFunc) (*BatchCreateBitableTableResp, *Response, error) {
	if r.cli.mock.mockBitableBatchCreateBitableTable != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#BatchCreateBitableTable mock enable")
		return r.cli.mock.mockBitableBatchCreateBitableTable(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "BatchCreateBitableTable",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchCreateBitableTableResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableBatchCreateBitableTable mock BitableBatchCreateBitableTable method
func (r *Mock) MockBitableBatchCreateBitableTable(f func(ctx context.Context, request *BatchCreateBitableTableReq, options ...MethodOptionFunc) (*BatchCreateBitableTableResp, *Response, error)) {
	r.mockBitableBatchCreateBitableTable = f
}

// UnMockBitableBatchCreateBitableTable un-mock BitableBatchCreateBitableTable method
func (r *Mock) UnMockBitableBatchCreateBitableTable() {
	r.mockBitableBatchCreateBitableTable = nil
}

// BatchCreateBitableTableReq ...
type BatchCreateBitableTableReq struct {
	UserIDType *IDType                            `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppToken   string                             `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	Tables     []*BatchCreateBitableTableReqTable `json:"tables,omitempty"`       // tables
}

// BatchCreateBitableTableReqTable ...
type BatchCreateBitableTableReqTable struct {
	Name *string `json:"name,omitempty"` // 数据表 名字, 示例值："table1"
}

// batchCreateBitableTableResp ...
type batchCreateBitableTableResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateBitableTableResp `json:"data,omitempty"`
}

// BatchCreateBitableTableResp ...
type BatchCreateBitableTableResp struct {
	TableIDs []string `json:"table_ids,omitempty"` // table ids
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchDeleteBitableTable 删除多个数据表
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_delete
func (r *BitableService) BatchDeleteBitableTable(ctx context.Context, request *BatchDeleteBitableTableReq, options ...MethodOptionFunc) (*BatchDeleteBitableTableResp, *Response, error) {
	if r.cli.mock.mockBitableBatchDeleteBitableTable != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#BatchDeleteBitableTable mock enable")
		return r.cli.mock.mockBitableBatchDeleteBitableTable(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "BatchDeleteBitableTable",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/batch_delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchDeleteBitableTableResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableBatchDeleteBitableTable mock BitableBatchDeleteBitableTable method
func (r *Mock) MockBitableBatchDeleteBitableTable(f func(ctx context.Context, request *BatchDeleteBitableTableReq, options ...MethodOptionFunc) (*BatchDeleteBitableTableResp, *Response, error)) {
	r.mockBitableBatchDeleteBitableTable = f
}

// UnMockBitableBatchDeleteBitableTable un-mock BitableBatchDeleteBitableTable method
func (r *Mock) UnMockBitableBatchDeleteBitableTable() {
	r.mockBitableBatchDeleteBitableTable = nil
}

// BatchDeleteBitableTableReq ...
type BatchDeleteBitableTableReq struct {
	AppToken string   `path:"app_token" json:"-"`  // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableIDs []string `json:"table_ids,omitempty"` // 删除的多条tableid列表, 示例值：["tblsRc9GRRXKqhvW"]
}

// batchDeleteBitableTableResp ...
type batchDeleteBitableTableResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *BatchDeleteBitableTableResp `json:"data,omitempty"`
}

// BatchDeleteBitableTableResp ...
type BatchDeleteBitableTableResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableTable 新增一个数据表
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/create
func (r *BitableService) CreateBitableTable(ctx context.Context, request *CreateBitableTableReq, options ...MethodOptionFunc) (*CreateBitableTableResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableTable != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableTable mock enable")
		return r.cli.mock.mockBitableCreateBitableTable(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableTable",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableTableResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableTable mock BitableCreateBitableTable method
func (r *Mock) MockBitableCreateBitableTable(f func(ctx context.Context, request *CreateBitableTableReq, options ...MethodOptionFunc) (*CreateBitableTableResp, *Response, error)) {
	r.mockBitableCreateBitableTable = f
}

// UnMockBitableCreateBitableTable un-mock BitableCreateBitableTable method
func (r *Mock) UnMockBitableCreateBitableTable() {
	r.mockBitableCreateBitableTable = nil
}

// CreateBitableTableReq ...
type CreateBitableTableReq struct {
	UserIDType *IDType                     `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppToken   string                      `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	Table      *CreateBitableTableReqTable `json:"table,omitempty"`        // 数据表
}

// CreateBitableTableReqTable ...
type CreateBitableTableReqTable struct {
	Name *string `json:"name,omitempty"` // 数据表 名字, 示例值："table1"
}

// createBitableTableResp ...
type createBitableTableResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableTableResp `json:"data,omitempty"`
}

// CreateBitableTableResp ...
type CreateBitableTableResp struct {
	TableID string `json:"table_id,omitempty"` // table id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteBitableTable 删除一个数据表
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/delete
func (r *BitableService) DeleteBitableTable(ctx context.Context, request *DeleteBitableTableReq, options ...MethodOptionFunc) (*DeleteBitableTableResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteBitableTable != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#DeleteBitableTable mock enable")
		return r.cli.mock.mockBitableDeleteBitableTable(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "DeleteBitableTable",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteBitableTableResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableDeleteBitableTable mock BitableDeleteBitableTable method
func (r *Mock) MockBitableDeleteBitableTable(f func(ctx context.Context, request *DeleteBitableTableReq, options ...MethodOptionFunc) (*DeleteBitableTableResp, *Response, error)) {
	r.mockBitableDeleteBitableTable = f
}

// UnMockBitableDeleteBitableTable un-mock BitableDeleteBitableTable method
func (r *Mock) UnMockBitableDeleteBitableTable() {
	r.mockBitableDeleteBitableTable = nil
}

// DeleteBitableTableReq ...
type DeleteBitableTableReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string `path:"table_id" json:"-"`  // table id, 示例值："tblsRc9GRRXKqhvW"
}

// deleteBitableTableResp ...
type deleteBitableTableResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteBitableTableResp `json:"data,omitempty"`
}

// DeleteBitableTableResp ...
type DeleteBitableTableResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableTableList 根据  app_token，获取多维表格下的所有数据表
//
// 该接口支持调用频率上限为 20 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/list
func (r *BitableService) GetBitableTableList(ctx context.Context, request *GetBitableTableListReq, options ...MethodOptionFunc) (*GetBitableTableListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableTableList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableTableList mock enable")
		return r.cli.mock.mockBitableGetBitableTableList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableTableList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableTableListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableTableList mock BitableGetBitableTableList method
func (r *Mock) MockBitableGetBitableTableList(f func(ctx context.Context, request *GetBitableTableListReq, options ...MethodOptionFunc) (*GetBitableTableListResp, *Response, error)) {
	r.mockBitableGetBitableTableList = f
}

// UnMockBitableGetBitableTableList un-mock BitableGetBitableTableList method
func (r *Mock) UnMockBitableGetBitableTableList() {
	r.mockBitableGetBitableTableList = nil
}

// GetBitableTableListReq ...
type GetBitableTableListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："tblsRc9GRRXKqhvW"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	AppToken  string  `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
}

// getBitableTableListResp ...
type getBitableTableListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableTableListResp `json:"data,omitempty"`
}

// GetBitableTableListResp ...
type GetBitableTableListResp struct {
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Total     int64                          `json:"total,omitempty"`      // 总数
	Items     []*GetBitableTableListRespItem `json:"items,omitempty"`      // 数据表信息
}

// GetBitableTableListRespItem ...
type GetBitableTableListRespItem struct {
	TableID  string `json:"table_id,omitempty"` // 数据表 id
	Revision int64  `json:"revision,omitempty"` // 数据表的版本号
	Name     string `json:"name,omitempty"`     // 数据表名字
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableView 在数据表中新增一个视图
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/create
func (r *BitableService) CreateBitableView(ctx context.Context, request *CreateBitableViewReq, options ...MethodOptionFunc) (*CreateBitableViewResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableView mock enable")
		return r.cli.mock.mockBitableCreateBitableView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableView",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableView mock BitableCreateBitableView method
func (r *Mock) MockBitableCreateBitableView(f func(ctx context.Context, request *CreateBitableViewReq, options ...MethodOptionFunc) (*CreateBitableViewResp, *Response, error)) {
	r.mockBitableCreateBitableView = f
}

// UnMockBitableCreateBitableView un-mock BitableCreateBitableView method
func (r *Mock) UnMockBitableCreateBitableView() {
	r.mockBitableCreateBitableView = nil
}

// CreateBitableViewReq ...
type CreateBitableViewReq struct {
	AppToken string  `path:"app_token" json:"-"`  // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string  `path:"table_id" json:"-"`   // table id, 示例值："tblsRc9GRRXKqhvW"
	ViewName string  `json:"view_name,omitempty"` // 视图名字, 示例值："表格视图1"
	ViewType *string `json:"view_type,omitempty"` // 视图类型, 示例值："grid", 可选值有: `grid`：表格视图, `kanban`：看板视图, `gallery`：画册视图, `gantt`：甘特视图
}

// createBitableViewResp ...
type createBitableViewResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableViewResp `json:"data,omitempty"`
}

// CreateBitableViewResp ...
type CreateBitableViewResp struct {
	View *CreateBitableViewRespView `json:"view,omitempty"` // 视图
}

// CreateBitableViewRespView ...
type CreateBitableViewRespView struct {
	ViewID   string `json:"view_id,omitempty"`   // 视图Id
	ViewName string `json:"view_name,omitempty"` // 视图名字
	ViewType string `json:"view_type,omitempty"` // 视图类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteBitableView 删除数据表中的视图
//
// 该接口支持调用频率上限为 10 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/delete
func (r *BitableService) DeleteBitableView(ctx context.Context, request *DeleteBitableViewReq, options ...MethodOptionFunc) (*DeleteBitableViewResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteBitableView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#DeleteBitableView mock enable")
		return r.cli.mock.mockBitableDeleteBitableView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "DeleteBitableView",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views/:view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteBitableViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableDeleteBitableView mock BitableDeleteBitableView method
func (r *Mock) MockBitableDeleteBitableView(f func(ctx context.Context, request *DeleteBitableViewReq, options ...MethodOptionFunc) (*DeleteBitableViewResp, *Response, error)) {
	r.mockBitableDeleteBitableView = f
}

// UnMockBitableDeleteBitableView un-mock BitableDeleteBitableView method
func (r *Mock) UnMockBitableDeleteBitableView() {
	r.mockBitableDeleteBitableView = nil
}

// DeleteBitableViewReq ...
type DeleteBitableViewReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string `path:"table_id" json:"-"`  // table id, 示例值："tblsRc9GRRXKqhvW"
	ViewID   string `path:"view_id" json:"-"`   // 视图Id, 示例值："vewTpR1urY"
}

// deleteBitableViewResp ...
type deleteBitableViewResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteBitableViewResp `json:"data,omitempty"`
}

// DeleteBitableViewResp ...
type DeleteBitableViewResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBitableViewList 根据 app_token 和 table_id，获取数据表的所有视图
//
// 该接口支持调用频率上限为 20 QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-view/list
func (r *BitableService) GetBitableViewList(ctx context.Context, request *GetBitableViewListReq, options ...MethodOptionFunc) (*GetBitableViewListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableViewList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableViewList mock enable")
		return r.cli.mock.mockBitableGetBitableViewList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableViewList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/views",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableViewListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableGetBitableViewList mock BitableGetBitableViewList method
func (r *Mock) MockBitableGetBitableViewList(f func(ctx context.Context, request *GetBitableViewListReq, options ...MethodOptionFunc) (*GetBitableViewListResp, *Response, error)) {
	r.mockBitableGetBitableViewList = f
}

// UnMockBitableGetBitableViewList un-mock BitableGetBitableViewList method
func (r *Mock) UnMockBitableGetBitableViewList() {
	r.mockBitableGetBitableViewList = nil
}

// GetBitableViewListReq ...
type GetBitableViewListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："vewTpR1urY"
	AppToken  string  `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID   string  `path:"table_id" json:"-"`    // table id, 示例值："tblsRc9GRRXKqhvW"
}

// getBitableViewListResp ...
type getBitableViewListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableViewListResp `json:"data,omitempty"`
}

// GetBitableViewListResp ...
type GetBitableViewListResp struct {
	Items     []*GetBitableViewListRespItem `json:"items,omitempty"`      // 视图信息
	PageToken string                        `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
	Total     int64                         `json:"total,omitempty"`      // 总数
}

// GetBitableViewListRespItem ...
type GetBitableViewListRespItem struct {
	ViewID   string `json:"view_id,omitempty"`   // 视图Id
	ViewName string `json:"view_name,omitempty"` // 视图名字
	ViewType string `json:"view_type,omitempty"` // 视图类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddBotToChat
//
// 为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create)
// 拉机器人进群<br>
// **权限说明** ：需要启用机器人能力；机器人的owner需要已经在群里
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDO04iN4QjL2gDN
//
// Deprecated
func (r *BotService) AddBotToChat(ctx context.Context, request *AddBotToChatReq, options ...MethodOptionFunc) (*AddBotToChatResp, *Response, error) {
	if r.cli.mock.mockBotAddBotToChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bot#AddBotToChat mock enable")
		return r.cli.mock.mockBotAddBotToChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bot",
		API:                   "AddBotToChat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bot/v4/add",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(addBotToChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBotAddBotToChat mock BotAddBotToChat method
func (r *Mock) MockBotAddBotToChat(f func(ctx context.Context, request *AddBotToChatReq, options ...MethodOptionFunc) (*AddBotToChatResp, *Response, error)) {
	r.mockBotAddBotToChat = f
}

// UnMockBotAddBotToChat un-mock BotAddBotToChat method
func (r *Mock) UnMockBotAddBotToChat() {
	r.mockBotAddBotToChat = nil
}

// AddBotToChatReq ...
type AddBotToChatReq struct {
	ChatID string `json:"chat_id,omitempty"` // 群的id
}

// addBotToChatResp ...
type addBotToChatResp struct {
	Code int64             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 返回码描述
	Data *AddBotToChatResp `json:"data,omitempty"`
}

// AddBotToChatResp ...
type AddBotToChatResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBotInfo 获取机器人的基本信息。
//
// 需要启用机器人能力（前往[开发者后台](https://open.feishu.cn/app) - 选择你要获取信息的应用 - 导航栏点击应用功能 - 机器人，开启机器人能力并发布后即可。）
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAjMxEjLwITMx4CMyETM
func (r *BotService) GetBotInfo(ctx context.Context, request *GetBotInfoReq, options ...MethodOptionFunc) (*GetBotInfoResp, *Response, error) {
	if r.cli.mock.mockBotGetBotInfo != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bot#GetBotInfo mock enable")
		return r.cli.mock.mockBotGetBotInfo(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bot",
		API:                   "GetBotInfo",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/bot/v3/info",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getBotInfoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBotGetBotInfo mock BotGetBotInfo method
func (r *Mock) MockBotGetBotInfo(f func(ctx context.Context, request *GetBotInfoReq, options ...MethodOptionFunc) (*GetBotInfoResp, *Response, error)) {
	r.mockBotGetBotInfo = f
}

// UnMockBotGetBotInfo un-mock BotGetBotInfo method
func (r *Mock) UnMockBotGetBotInfo() {
	r.mockBotGetBotInfo = nil
}

// GetBotInfoReq ...
type GetBotInfoReq struct {
}

// getBotInfoResp ...
type getBotInfoResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *GetBotInfoResp `json:"bot,omitempty"`  // 机器人信息
}

// GetBotInfoResp ...
type GetBotInfoResp struct {
	ActivateStatus int64    `json:"activate_status,omitempty"` // app 当前状态。,0: 初始化，租户待安装,1: 租户停用,2: 租户启用,3: 安装后待启用,4: 升级待启用,5: license过期停用,6: Lark套餐到期或降级停用
	AppName        string   `json:"app_name,omitempty"`        // app 名称
	AvatarURL      string   `json:"avatar_url,omitempty"`      // app 图像地址
	IpWhiteList    []string `json:"ip_white_list,omitempty"`   // app 的 IP 白名单地址
	OpenID         string   `json:"open_id,omitempty"`         // 机器人的open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateCalendarACL
//
// 该接口用于以当前身份（应用 / 用户）给日历添加访问控制权限，即日历成员。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/create
func (r *CalendarService) CreateCalendarACL(ctx context.Context, request *CreateCalendarACLReq, options ...MethodOptionFunc) (*CreateCalendarACLResp, *Response, error) {
	if r.cli.mock.mockCalendarCreateCalendarACL != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#CreateCalendarACL mock enable")
		return r.cli.mock.mockCalendarCreateCalendarACL(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "CreateCalendarACL",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/acls",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createCalendarACLResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarCreateCalendarACL mock CalendarCreateCalendarACL method
func (r *Mock) MockCalendarCreateCalendarACL(f func(ctx context.Context, request *CreateCalendarACLReq, options ...MethodOptionFunc) (*CreateCalendarACLResp, *Response, error)) {
	r.mockCalendarCreateCalendarACL = f
}

// UnMockCalendarCreateCalendarACL un-mock CalendarCreateCalendarACL method
func (r *Mock) UnMockCalendarCreateCalendarACL() {
	r.mockCalendarCreateCalendarACL = nil
}

// CreateCalendarACLReq ...
type CreateCalendarACLReq struct {
	UserIDType *IDType                    `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	CalendarID string                     `path:"calendar_id" json:"-"`   // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	Role       CalendarRole               `json:"role,omitempty"`         // 对日历的访问权限, 示例值："writer", 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
	Scope      *CreateCalendarACLReqScope `json:"scope,omitempty"`        // 权限范围
}

// CreateCalendarACLReqScope ...
type CreateCalendarACLReqScope struct {
	Type   string  `json:"type,omitempty"`    // 权限类型，当type为User时，值为open_id/user_id/union_id, 示例值："user", 可选值有: `user`：用户
	UserID *string `json:"user_id,omitempty"` // 用户ID，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_xxxxxx"
}

// createCalendarACLResp ...
type createCalendarACLResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateCalendarACLResp `json:"data,omitempty"`
}

// CreateCalendarACLResp ...
type CreateCalendarACLResp struct {
	ACLID string                      `json:"acl_id,omitempty"` // acl资源ID。参见[ACL ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/introduction)
	Role  CalendarRole                `json:"role,omitempty"`   // 对日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
	Scope *CreateCalendarACLRespScope `json:"scope,omitempty"`  // 权限范围
}

// CreateCalendarACLRespScope ...
type CreateCalendarACLRespScope struct {
	Type   string `json:"type,omitempty"`    // 权限类型，当type为User时，值为open_id/user_id/union_id, 可选值有: `user`：用户
	UserID string `json:"user_id,omitempty"` // 用户ID，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteCalendarACL
//
// 该接口用于以当前身份（应用 / 用户）删除日历的控制权限，即日历成员。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/delete
func (r *CalendarService) DeleteCalendarACL(ctx context.Context, request *DeleteCalendarACLReq, options ...MethodOptionFunc) (*DeleteCalendarACLResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarACL != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendarACL mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarACL(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "DeleteCalendarACL",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/acls/:acl_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteCalendarACLResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendarACL mock CalendarDeleteCalendarACL method
func (r *Mock) MockCalendarDeleteCalendarACL(f func(ctx context.Context, request *DeleteCalendarACLReq, options ...MethodOptionFunc) (*DeleteCalendarACLResp, *Response, error)) {
	r.mockCalendarDeleteCalendarACL = f
}

// UnMockCalendarDeleteCalendarACL un-mock CalendarDeleteCalendarACL method
func (r *Mock) UnMockCalendarDeleteCalendarACL() {
	r.mockCalendarDeleteCalendarACL = nil
}

// DeleteCalendarACLReq ...
type DeleteCalendarACLReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	ACLID      string `path:"acl_id" json:"-"`      // acl资源ID。参见[ACL ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/introduction), 示例值："user_xxxxxx"
}

// deleteCalendarACLResp ...
type deleteCalendarACLResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarACLResp `json:"data,omitempty"`
}

// DeleteCalendarACLResp ...
type DeleteCalendarACLResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarACLList
//
// 该接口用于以当前身份（应用 / 用户）获取日历的控制权限列表。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份需要有日历的 owner 权限，并且日历的类型只能为 primary 或 shared。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/list
func (r *CalendarService) GetCalendarACLList(ctx context.Context, request *GetCalendarACLListReq, options ...MethodOptionFunc) (*GetCalendarACLListResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarACLList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarACLList mock enable")
		return r.cli.mock.mockCalendarGetCalendarACLList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendarACLList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/acls",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getCalendarACLListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarACLList mock CalendarGetCalendarACLList method
func (r *Mock) MockCalendarGetCalendarACLList(f func(ctx context.Context, request *GetCalendarACLListReq, options ...MethodOptionFunc) (*GetCalendarACLListResp, *Response, error)) {
	r.mockCalendarGetCalendarACLList = f
}

// UnMockCalendarGetCalendarACLList un-mock CalendarGetCalendarACLList method
func (r *Mock) UnMockCalendarGetCalendarACLList() {
	r.mockCalendarGetCalendarACLList = nil
}

// GetCalendarACLListReq ...
type GetCalendarACLListReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10，小于10取10, 最大值：`50`
	CalendarID string  `path:"calendar_id" json:"-"`   // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// getCalendarACLListResp ...
type getCalendarACLListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarACLListResp `json:"data,omitempty"`
}

// GetCalendarACLListResp ...
type GetCalendarACLListResp struct {
	Acls      []*GetCalendarACLListRespACL `json:"acls,omitempty"`       // 入参日历对应的acl列表
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetCalendarACLListRespACL ...
type GetCalendarACLListRespACL struct {
	ACLID string                          `json:"acl_id,omitempty"` // acl资源ID。参见[ACL ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/introduction)
	Role  CalendarRole                    `json:"role,omitempty"`   // 对日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
	Scope *GetCalendarACLListRespACLScope `json:"scope,omitempty"`  // 权限范围
}

// GetCalendarACLListRespACLScope ...
type GetCalendarACLListRespACLScope struct {
	Type   string `json:"type,omitempty"`    // 权限类型，当type为User时，值为open_id/user_id/union_id, 可选值有: `user`：用户
	UserID string `json:"user_id,omitempty"` // 用户ID，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeCalendarACL 该接口用于以用户身份订阅指定日历下的日历成员变更事件。
//
// 用户必须对日历有访问权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-acl/subscription
func (r *CalendarService) SubscribeCalendarACL(ctx context.Context, request *SubscribeCalendarACLReq, options ...MethodOptionFunc) (*SubscribeCalendarACLResp, *Response, error) {
	if r.cli.mock.mockCalendarSubscribeCalendarACL != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#SubscribeCalendarACL mock enable")
		return r.cli.mock.mockCalendarSubscribeCalendarACL(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "SubscribeCalendarACL",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/acls/subscription",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(subscribeCalendarACLResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarSubscribeCalendarACL mock CalendarSubscribeCalendarACL method
func (r *Mock) MockCalendarSubscribeCalendarACL(f func(ctx context.Context, request *SubscribeCalendarACLReq, options ...MethodOptionFunc) (*SubscribeCalendarACLResp, *Response, error)) {
	r.mockCalendarSubscribeCalendarACL = f
}

// UnMockCalendarSubscribeCalendarACL un-mock CalendarSubscribeCalendarACL method
func (r *Mock) UnMockCalendarSubscribeCalendarACL() {
	r.mockCalendarSubscribeCalendarACL = nil
}

// SubscribeCalendarACLReq ...
type SubscribeCalendarACLReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// subscribeCalendarACLResp ...
type subscribeCalendarACLResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeCalendarACLResp `json:"data,omitempty"`
}

// SubscribeCalendarACLResp ...
type SubscribeCalendarACLResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateCalendar
//
// 该接口用于为当前身份（应用 / 用户）创建一个共享日历。
// 身份由 Header Authorization 的 Token 类型决定。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/create
func (r *CalendarService) CreateCalendar(ctx context.Context, request *CreateCalendarReq, options ...MethodOptionFunc) (*CreateCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarCreateCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#CreateCalendar mock enable")
		return r.cli.mock.mockCalendarCreateCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "CreateCalendar",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarCreateCalendar mock CalendarCreateCalendar method
func (r *Mock) MockCalendarCreateCalendar(f func(ctx context.Context, request *CreateCalendarReq, options ...MethodOptionFunc) (*CreateCalendarResp, *Response, error)) {
	r.mockCalendarCreateCalendar = f
}

// UnMockCalendarCreateCalendar un-mock CalendarCreateCalendar method
func (r *Mock) UnMockCalendarCreateCalendar() {
	r.mockCalendarCreateCalendar = nil
}

// CreateCalendarReq ...
type CreateCalendarReq struct {
	Summary      *string             `json:"summary,omitempty"`       // 日历标题, 示例值："测试日历", 最大长度：`255` 字符
	Description  *string             `json:"description,omitempty"`   // 日历描述, 示例值："使用开放接口创建日历", 最大长度：`255` 字符
	Permissions  *CalendarPermission `json:"permissions,omitempty"`   // 日历公开范围, 示例值："private", 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        *int64              `json:"color,omitempty"`         // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效, 示例值：-1
	SummaryAlias *string             `json:"summary_alias,omitempty"` // 日历备注名，修改或添加后仅对当前身份生效, 示例值："日历备注名", 最大长度：`255` 字符
}

// createCalendarResp ...
type createCalendarResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *CreateCalendarResp `json:"data,omitempty"`
}

// CreateCalendarResp ...
type CreateCalendarResp struct {
	Calendar *CreateCalendarRespCalendar `json:"calendar,omitempty"` // 新创建的日历实体
}

// CreateCalendarRespCalendar ...
type CreateCalendarRespCalendar struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary      string             `json:"summary,omitempty"`        // 日历标题
	Description  string             `json:"description,omitempty"`    // 日历描述
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: `unknown`：未知类型, `primary`：用户或应用的主日历, `shared`：由用户或应用创建的共享日历, `google`：用户绑定的谷歌日历, `resource`：会议室日历, `exchange`：用户绑定的Exchange日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名，修改或添加后仅对当前身份生效
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份，日历是否已经被标记为删除
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据；三方日历及日程只支持读，不支持写入
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteCalendar
//
// 该接口用于以当前身份（应用 / 用户）删除一个共享日历。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份必须对日历具有 owner 权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/delete
func (r *CalendarService) DeleteCalendar(ctx context.Context, request *DeleteCalendarReq, options ...MethodOptionFunc) (*DeleteCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendar mock enable")
		return r.cli.mock.mockCalendarDeleteCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "DeleteCalendar",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendar mock CalendarDeleteCalendar method
func (r *Mock) MockCalendarDeleteCalendar(f func(ctx context.Context, request *DeleteCalendarReq, options ...MethodOptionFunc) (*DeleteCalendarResp, *Response, error)) {
	r.mockCalendarDeleteCalendar = f
}

// UnMockCalendarDeleteCalendar un-mock CalendarDeleteCalendar method
func (r *Mock) UnMockCalendarDeleteCalendar() {
	r.mockCalendarDeleteCalendar = nil
}

// DeleteCalendarReq ...
type DeleteCalendarReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// deleteCalendarResp ...
type deleteCalendarResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarResp `json:"data,omitempty"`
}

// DeleteCalendarResp ...
type DeleteCalendarResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarEventAttendeeChatMemberList 获取日程的群参与人的群成员列表。
//
// - 当前身份必须有权限查看日程的参与人列表。
// - 当前身份必须在群聊中，或有权限查看群成员列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list
func (r *CalendarService) GetCalendarEventAttendeeChatMemberList(ctx context.Context, request *GetCalendarEventAttendeeChatMemberListReq, options ...MethodOptionFunc) (*GetCalendarEventAttendeeChatMemberListResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarEventAttendeeChatMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarEventAttendeeChatMemberList mock enable")
		return r.cli.mock.mockCalendarGetCalendarEventAttendeeChatMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendarEventAttendeeChatMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/:attendee_id/chat_members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getCalendarEventAttendeeChatMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarEventAttendeeChatMemberList mock CalendarGetCalendarEventAttendeeChatMemberList method
func (r *Mock) MockCalendarGetCalendarEventAttendeeChatMemberList(f func(ctx context.Context, request *GetCalendarEventAttendeeChatMemberListReq, options ...MethodOptionFunc) (*GetCalendarEventAttendeeChatMemberListResp, *Response, error)) {
	r.mockCalendarGetCalendarEventAttendeeChatMemberList = f
}

// UnMockCalendarGetCalendarEventAttendeeChatMemberList un-mock CalendarGetCalendarEventAttendeeChatMemberList method
func (r *Mock) UnMockCalendarGetCalendarEventAttendeeChatMemberList() {
	r.mockCalendarGetCalendarEventAttendeeChatMemberList = nil
}

// GetCalendarEventAttendeeChatMemberListReq ...
type GetCalendarEventAttendeeChatMemberListReq struct {
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："23jhysaxxxxsysy"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	CalendarID string  `path:"calendar_id" json:"-"`   // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	EventID    string  `path:"event_id" json:"-"`      // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction), 示例值："xxxxxxxxx_0"
	AttendeeID string  `path:"attendee_id" json:"-"`   // 群参与人 ID。参见[参与人ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/introduction#4998889c), 示例值："chat_xxxxxx"
}

// getCalendarEventAttendeeChatMemberListResp ...
type getCalendarEventAttendeeChatMemberListResp struct {
	Code int64                                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                      `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarEventAttendeeChatMemberListResp `json:"data,omitempty"`
}

// GetCalendarEventAttendeeChatMemberListResp ...
type GetCalendarEventAttendeeChatMemberListResp struct {
	Items     []*GetCalendarEventAttendeeChatMemberListRespItem `json:"items,omitempty"`      // 群中的群成员，当type为chat时有效；群成员不支持编辑
	HasMore   bool                                              `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                            `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetCalendarEventAttendeeChatMemberListRespItem ...
type GetCalendarEventAttendeeChatMemberListRespItem struct {
	RsvpStatus  string `json:"rsvp_status,omitempty"`  // 参与人RSVP状态, 可选值有: `needs_action`：参与人尚未回复状态，或表示会议室预约中, `accept`：参与人回复接受，或表示会议室预约成功, `tentative`：参与人回复待定, `decline`：参与人回复拒绝，或表示会议室预约失败, `removed`：参与人或会议室已经从日程中被移除
	IsOptional  bool   `json:"is_optional,omitempty"`  // 参与人是否为「可选参加」
	DisplayName string `json:"display_name,omitempty"` // 参与人名称
	OpenID      string `json:"open_id,omitempty"`      // 参与人open_id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_xxxxxxxx"
	IsOrganizer bool   `json:"is_organizer,omitempty"` // 参与人是否为日程组织者
	IsExternal  bool   `json:"is_external,omitempty"`  // 参与人是否为外部参与人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateCalendarEventAttendee 批量给日程添加参与人。
//
// - 当前身份需要有日历的 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。
// - 当前身份需要是日程的组织者，或日程设置了「参与人可邀请其它参与人」权限。
// - 新添加的日程参与人必须与日程组织者在同一个企业内。
// - 使用该接口添加会议室后，会议室会进入异步的预约流程，请求结束不代表会议室预约成功，需后续再查询预约状态。
// - 每个日程最多只能有 3000 名参与人。
// - 开启管理员能力后预约会议室可不受会议室预约范围的限制（当前不支持用管理员身份给其他人的日程预约会议室）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/create
func (r *CalendarService) CreateCalendarEventAttendee(ctx context.Context, request *CreateCalendarEventAttendeeReq, options ...MethodOptionFunc) (*CreateCalendarEventAttendeeResp, *Response, error) {
	if r.cli.mock.mockCalendarCreateCalendarEventAttendee != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#CreateCalendarEventAttendee mock enable")
		return r.cli.mock.mockCalendarCreateCalendarEventAttendee(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "CreateCalendarEventAttendee",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createCalendarEventAttendeeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarCreateCalendarEventAttendee mock CalendarCreateCalendarEventAttendee method
func (r *Mock) MockCalendarCreateCalendarEventAttendee(f func(ctx context.Context, request *CreateCalendarEventAttendeeReq, options ...MethodOptionFunc) (*CreateCalendarEventAttendeeResp, *Response, error)) {
	r.mockCalendarCreateCalendarEventAttendee = f
}

// UnMockCalendarCreateCalendarEventAttendee un-mock CalendarCreateCalendarEventAttendee method
func (r *Mock) UnMockCalendarCreateCalendarEventAttendee() {
	r.mockCalendarCreateCalendarEventAttendee = nil
}

// CreateCalendarEventAttendeeReq ...
type CreateCalendarEventAttendeeReq struct {
	UserIDType             *IDType                                   `query:"user_id_type" json:"-"`              // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	CalendarID             string                                    `path:"calendar_id" json:"-"`                // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	EventID                string                                    `path:"event_id" json:"-"`                   // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction), 示例值："xxxxxxxxx_0"
	Attendees              []*CreateCalendarEventAttendeeReqAttendee `json:"attendees,omitempty"`                 // 新增参与人列表；<br>, 单次请求会议室的数量限制为100。
	NeedNotification       *bool                                     `json:"need_notification,omitempty"`         // 是否给参与人发送bot通知 默认为true, 示例值：false
	InstanceStartTimeAdmin *string                                   `json:"instance_start_time_admin,omitempty"` // 使用管理员身份访问时要修改的实例(仅用于重复日程修改其中的一个实例，非重复日程无需填此字段), 示例值："1647320400"
	IsEnableAdmin          *bool                                     `json:"is_enable_admin,omitempty"`           // 是否启用管理员身份(需先在管理后台设置某人为会议室管理员), 示例值：false
}

// CreateCalendarEventAttendeeReqAttendee ...
type CreateCalendarEventAttendeeReqAttendee struct {
	Type                  *CalendarEventAttendeeType                                     `json:"type,omitempty"`                   // 参与人类型, 示例值："user", 可选值有: `user`：用户, `chat`：群组, `resource`：会议室, `third_party`：邮箱
	IsOptional            *bool                                                          `json:"is_optional,omitempty"`            // 参与人是否为「可选参加」，无法编辑群参与人的此字段, 示例值：true, 默认值: `false`
	UserID                *string                                                        `json:"user_id,omitempty"`                // 参与人的用户id，依赖于user_id_type返回对应的取值，当is_external为true时，此字段只会返回open_id或者union_id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_xxxxxxxx"
	ChatID                *string                                                        `json:"chat_id,omitempty"`                // chat类型参与人的群组chat_id，参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_xxxxxxxxx"
	RoomID                *string                                                        `json:"room_id,omitempty"`                // resource类型参与人的会议室room_id, 示例值："omm_xxxxxxxx"
	ThirdPartyEmail       *string                                                        `json:"third_party_email,omitempty"`      // third_party类型参与人的邮箱, 示例值："wangwu@email.com"
	OperateID             *string                                                        `json:"operate_id,omitempty"`             // 如果日程是使用应用身份创建的，在添加会议室的时候，用来指定会议室的联系人，在会议室视图展示。参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_xxxxxxxx"
	ResourceCustomization []*CreateCalendarEventAttendeeReqAttendeeResourceCustomization `json:"resource_customization,omitempty"` // 会议室的个性化配置
}

// CreateCalendarEventAttendeeReqAttendeeResourceCustomization ...
type CreateCalendarEventAttendeeReqAttendeeResourceCustomization struct {
	IndexKey     string                                                               `json:"index_key,omitempty"`     // 每个配置的唯一ID, 示例值："16281481596100"
	InputContent *string                                                              `json:"input_content,omitempty"` // 当type类型为填空时，该参数需要填入, 示例值："xxx"
	Options      []*CreateCalendarEventAttendeeReqAttendeeResourceCustomizationOption `json:"options,omitempty"`       // 每个配置的选项
}

// CreateCalendarEventAttendeeReqAttendeeResourceCustomizationOption ...
type CreateCalendarEventAttendeeReqAttendeeResourceCustomizationOption struct {
	OptionKey     *string `json:"option_key,omitempty"`     // 每个选项的唯一ID, 示例值："16281481596185"
	OthersContent *string `json:"others_content,omitempty"` // 当type类型为其它选项时，该参数需要填入, 示例值："xxx"
}

// createCalendarEventAttendeeResp ...
type createCalendarEventAttendeeResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateCalendarEventAttendeeResp `json:"data,omitempty"`
}

// CreateCalendarEventAttendeeResp ...
type CreateCalendarEventAttendeeResp struct {
	Attendees []*CreateCalendarEventAttendeeRespAttendee `json:"attendees,omitempty"` // 新增参与人后的日程所有参与人列表
}

// CreateCalendarEventAttendeeRespAttendee ...
type CreateCalendarEventAttendeeRespAttendee struct {
	Type                  CalendarEventAttendeeType                                       `json:"type,omitempty"`                   // 参与人类型, 可选值有: `user`：用户, `chat`：群组, `resource`：会议室, `third_party`：邮箱
	AttendeeID            string                                                          `json:"attendee_id,omitempty"`            // 参与人ID。参见[参与人ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/introduction#4998889c)
	RsvpStatus            string                                                          `json:"rsvp_status,omitempty"`            // 参与人RSVP状态, 可选值有: `needs_action`：参与人尚未回复状态，或表示会议室预约中, `accept`：参与人回复接受，或表示会议室预约成功, `tentative`：参与人回复待定, `decline`：参与人回复拒绝，或表示会议室预约失败, `removed`：参与人或会议室已经从日程中被移除
	IsOptional            bool                                                            `json:"is_optional,omitempty"`            // 参与人是否为「可选参加」，无法编辑群参与人的此字段
	IsOrganizer           bool                                                            `json:"is_organizer,omitempty"`           // 参与人是否为日程组织者
	IsExternal            bool                                                            `json:"is_external,omitempty"`            // 参与人是否为外部参与人；外部参与人不支持编辑
	DisplayName           string                                                          `json:"display_name,omitempty"`           // 参与人名称
	ChatMembers           []*CreateCalendarEventAttendeeRespAttendeeChatMember            `json:"chat_members,omitempty"`           // 群中的群成员，当type为Chat时有效；群成员不支持编辑
	UserID                string                                                          `json:"user_id,omitempty"`                // 参与人的用户id，依赖于user_id_type返回对应的取值，当is_external为true时，此字段只会返回open_id或者union_id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	ChatID                string                                                          `json:"chat_id,omitempty"`                // chat类型参与人的群组chat_id，参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	RoomID                string                                                          `json:"room_id,omitempty"`                // resource类型参与人的会议室room_id
	ThirdPartyEmail       string                                                          `json:"third_party_email,omitempty"`      // third_party类型参与人的邮箱
	OperateID             string                                                          `json:"operate_id,omitempty"`             // 如果日程是使用应用身份创建的，在添加会议室的时候，用来指定会议室的联系人，在会议室视图展示。参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	ResourceCustomization []*CreateCalendarEventAttendeeRespAttendeeResourceCustomization `json:"resource_customization,omitempty"` // 会议室的个性化配置
}

// CreateCalendarEventAttendeeRespAttendeeChatMember ...
type CreateCalendarEventAttendeeRespAttendeeChatMember struct {
	RsvpStatus  string `json:"rsvp_status,omitempty"`  // 参与人RSVP状态, 可选值有: `needs_action`：参与人尚未回复状态，或表示会议室预约中, `accept`：参与人回复接受，或表示会议室预约成功, `tentative`：参与人回复待定, `decline`：参与人回复拒绝，或表示会议室预约失败, `removed`：参与人或会议室已经从日程中被移除
	IsOptional  bool   `json:"is_optional,omitempty"`  // 参与人是否为「可选参加」
	DisplayName string `json:"display_name,omitempty"` // 参与人名称
	IsOrganizer bool   `json:"is_organizer,omitempty"` // 参与人是否为日程组织者
	IsExternal  bool   `json:"is_external,omitempty"`  // 参与人是否为外部参与人
}

// CreateCalendarEventAttendeeRespAttendeeResourceCustomization ...
type CreateCalendarEventAttendeeRespAttendeeResourceCustomization struct {
	IndexKey     string                                                                `json:"index_key,omitempty"`     // 每个配置的唯一ID
	InputContent string                                                                `json:"input_content,omitempty"` // 当type类型为填空时，该参数需要填入
	Options      []*CreateCalendarEventAttendeeRespAttendeeResourceCustomizationOption `json:"options,omitempty"`       // 每个配置的选项
}

// CreateCalendarEventAttendeeRespAttendeeResourceCustomizationOption ...
type CreateCalendarEventAttendeeRespAttendeeResourceCustomizationOption struct {
	OptionKey     string `json:"option_key,omitempty"`     // 每个选项的唯一ID
	OthersContent string `json:"others_content,omitempty"` // 当type类型为其它选项时，该参数需要填入
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteCalendarEventAttendee 批量删除日程的参与人。
//
// - 当前身份需要有日历的 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。
// - 当前身份需要是日程的组织者。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/batch_delete
func (r *CalendarService) DeleteCalendarEventAttendee(ctx context.Context, request *DeleteCalendarEventAttendeeReq, options ...MethodOptionFunc) (*DeleteCalendarEventAttendeeResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarEventAttendee != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendarEventAttendee mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarEventAttendee(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "DeleteCalendarEventAttendee",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees/batch_delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteCalendarEventAttendeeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendarEventAttendee mock CalendarDeleteCalendarEventAttendee method
func (r *Mock) MockCalendarDeleteCalendarEventAttendee(f func(ctx context.Context, request *DeleteCalendarEventAttendeeReq, options ...MethodOptionFunc) (*DeleteCalendarEventAttendeeResp, *Response, error)) {
	r.mockCalendarDeleteCalendarEventAttendee = f
}

// UnMockCalendarDeleteCalendarEventAttendee un-mock CalendarDeleteCalendarEventAttendee method
func (r *Mock) UnMockCalendarDeleteCalendarEventAttendee() {
	r.mockCalendarDeleteCalendarEventAttendee = nil
}

// DeleteCalendarEventAttendeeReq ...
type DeleteCalendarEventAttendeeReq struct {
	CalendarID             string   `path:"calendar_id" json:"-"`                // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	EventID                string   `path:"event_id" json:"-"`                   // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction), 示例值："xxxxxxxxx_0"
	AttendeeIDs            []string `json:"attendee_ids,omitempty"`              // 要移除的参与人 ID 列表。参见[参与人ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/introduction#4998889c), 示例值：["user_xxxxx", "chat_xxxxx", "resource_xxxxx", "third_party_xxxxx"]
	NeedNotification       *bool    `json:"need_notification,omitempty"`         // 删除日程参与人时是否要给参与人发送bot通知，默认为true, 示例值：false
	InstanceStartTimeAdmin *string  `json:"instance_start_time_admin,omitempty"` // 使用管理员身份访问时要修改的实例, 示例值："1647320400"
	IsEnableAdmin          *bool    `json:"is_enable_admin,omitempty"`           // 是否启用管理员身份(需先在管理后台设置某人为会议室管理员), 示例值：false
}

// deleteCalendarEventAttendeeResp ...
type deleteCalendarEventAttendeeResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarEventAttendeeResp `json:"data,omitempty"`
}

// DeleteCalendarEventAttendeeResp ...
type DeleteCalendarEventAttendeeResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarEventAttendeeList 获取日程的参与人列表，若参与者列表中有群组，请使用 [获取参与人群成员列表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee-chat_member/list) 。
//
// - 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
// - 当前身份必须有权限查看日程的参与人列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/list
func (r *CalendarService) GetCalendarEventAttendeeList(ctx context.Context, request *GetCalendarEventAttendeeListReq, options ...MethodOptionFunc) (*GetCalendarEventAttendeeListResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarEventAttendeeList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarEventAttendeeList mock enable")
		return r.cli.mock.mockCalendarGetCalendarEventAttendeeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendarEventAttendeeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id/attendees",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getCalendarEventAttendeeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarEventAttendeeList mock CalendarGetCalendarEventAttendeeList method
func (r *Mock) MockCalendarGetCalendarEventAttendeeList(f func(ctx context.Context, request *GetCalendarEventAttendeeListReq, options ...MethodOptionFunc) (*GetCalendarEventAttendeeListResp, *Response, error)) {
	r.mockCalendarGetCalendarEventAttendeeList = f
}

// UnMockCalendarGetCalendarEventAttendeeList un-mock CalendarGetCalendarEventAttendeeList method
func (r *Mock) UnMockCalendarGetCalendarEventAttendeeList() {
	r.mockCalendarGetCalendarEventAttendeeList = nil
}

// GetCalendarEventAttendeeListReq ...
type GetCalendarEventAttendeeListReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："780TRhwXXXXX"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
	CalendarID string  `path:"calendar_id" json:"-"`   // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	EventID    string  `path:"event_id" json:"-"`      // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction), 示例值："xxxxxxxxx_0"
}

// getCalendarEventAttendeeListResp ...
type getCalendarEventAttendeeListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarEventAttendeeListResp `json:"data,omitempty"`
}

// GetCalendarEventAttendeeListResp ...
type GetCalendarEventAttendeeListResp struct {
	Items     []*GetCalendarEventAttendeeListRespItem `json:"items,omitempty"`      // 日程的参与者列表
	HasMore   bool                                    `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                  `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetCalendarEventAttendeeListRespItem ...
type GetCalendarEventAttendeeListRespItem struct {
	Type                  CalendarEventAttendeeType                                    `json:"type,omitempty"`                   // 参与人类型, 可选值有: `user`：用户, `chat`：群组, `resource`：会议室, `third_party`：邮箱
	AttendeeID            string                                                       `json:"attendee_id,omitempty"`            // 参与人ID。参见[参与人ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event-attendee/introduction#4998889c)
	RsvpStatus            string                                                       `json:"rsvp_status,omitempty"`            // 参与人RSVP状态, 可选值有: `needs_action`：参与人尚未回复状态，或表示会议室预约中, `accept`：参与人回复接受，或表示会议室预约成功, `tentative`：参与人回复待定, `decline`：参与人回复拒绝，或表示会议室预约失败, `removed`：参与人或会议室已经从日程中被移除
	IsOptional            bool                                                         `json:"is_optional,omitempty"`            // 参与人是否为「可选参加」，无法编辑群参与人的此字段
	IsOrganizer           bool                                                         `json:"is_organizer,omitempty"`           // 参与人是否为日程组织者
	IsExternal            bool                                                         `json:"is_external,omitempty"`            // 参与人是否为外部参与人；外部参与人不支持编辑
	DisplayName           string                                                       `json:"display_name,omitempty"`           // 参与人名称
	ChatMembers           []*GetCalendarEventAttendeeListRespItemChatMember            `json:"chat_members,omitempty"`           // 群中的群成员，当type为Chat时有效；群成员不支持编辑
	UserID                string                                                       `json:"user_id,omitempty"`                // 参与人的用户id，依赖于user_id_type返回对应的取值，当is_external为true时，此字段只会返回open_id或者union_id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	ChatID                string                                                       `json:"chat_id,omitempty"`                // chat类型参与人的群组chat_id，参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	RoomID                string                                                       `json:"room_id,omitempty"`                // resource类型参与人的会议室room_id
	ThirdPartyEmail       string                                                       `json:"third_party_email,omitempty"`      // third_party类型参与人的邮箱
	OperateID             string                                                       `json:"operate_id,omitempty"`             // 如果日程是使用应用身份创建的，在添加会议室的时候，用来指定会议室的联系人，在会议室视图展示。参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	ResourceCustomization []*GetCalendarEventAttendeeListRespItemResourceCustomization `json:"resource_customization,omitempty"` // 会议室的个性化配置
}

// GetCalendarEventAttendeeListRespItemChatMember ...
type GetCalendarEventAttendeeListRespItemChatMember struct {
	RsvpStatus  string `json:"rsvp_status,omitempty"`  // 参与人RSVP状态, 可选值有: `needs_action`：参与人尚未回复状态，或表示会议室预约中, `accept`：参与人回复接受，或表示会议室预约成功, `tentative`：参与人回复待定, `decline`：参与人回复拒绝，或表示会议室预约失败, `removed`：参与人或会议室已经从日程中被移除
	IsOptional  bool   `json:"is_optional,omitempty"`  // 参与人是否为「可选参加」
	DisplayName string `json:"display_name,omitempty"` // 参与人名称
	IsOrganizer bool   `json:"is_organizer,omitempty"` // 参与人是否为日程组织者
	IsExternal  bool   `json:"is_external,omitempty"`  // 参与人是否为外部参与人
}

// GetCalendarEventAttendeeListRespItemResourceCustomization ...
type GetCalendarEventAttendeeListRespItemResourceCustomization struct {
	IndexKey     string                                                             `json:"index_key,omitempty"`     // 每个配置的唯一ID
	InputContent string                                                             `json:"input_content,omitempty"` // 当type类型为填空时，该参数需要填入
	Options      []*GetCalendarEventAttendeeListRespItemResourceCustomizationOption `json:"options,omitempty"`       // 每个配置的选项
}

// GetCalendarEventAttendeeListRespItemResourceCustomizationOption ...
type GetCalendarEventAttendeeListRespItemResourceCustomizationOption struct {
	OptionKey     string `json:"option_key,omitempty"`     // 每个选项的唯一ID
	OthersContent string `json:"others_content,omitempty"` // 当type类型为其它选项时，该参数需要填入
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateCalendarEvent
//
// 该接口用于以当前身份（应用 / 用户）在日历上创建一个日程。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/create
func (r *CalendarService) CreateCalendarEvent(ctx context.Context, request *CreateCalendarEventReq, options ...MethodOptionFunc) (*CreateCalendarEventResp, *Response, error) {
	if r.cli.mock.mockCalendarCreateCalendarEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#CreateCalendarEvent mock enable")
		return r.cli.mock.mockCalendarCreateCalendarEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "CreateCalendarEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createCalendarEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarCreateCalendarEvent mock CalendarCreateCalendarEvent method
func (r *Mock) MockCalendarCreateCalendarEvent(f func(ctx context.Context, request *CreateCalendarEventReq, options ...MethodOptionFunc) (*CreateCalendarEventResp, *Response, error)) {
	r.mockCalendarCreateCalendarEvent = f
}

// UnMockCalendarCreateCalendarEvent un-mock CalendarCreateCalendarEvent method
func (r *Mock) UnMockCalendarCreateCalendarEvent() {
	r.mockCalendarCreateCalendarEvent = nil
}

// CreateCalendarEventReq ...
type CreateCalendarEventReq struct {
	CalendarID       string                            `path:"calendar_id" json:"-"`        // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	Summary          *string                           `json:"summary,omitempty"`           // 日程标题, 示例值："日程标题", 最大长度：`1000` 字符
	Description      *string                           `json:"description,omitempty"`       // 日程描述；目前不支持编辑富文本描述，如果日程描述通过客户端编辑过，更新描述会导致富文本格式丢失, 示例值："日程描述", 最大长度：`40960` 字符
	NeedNotification *bool                             `json:"need_notification,omitempty"` // 更新日程是否给日程参与人发送bot通知，默认为true, 示例值：false
	StartTime        *CreateCalendarEventReqStartTime  `json:"start_time,omitempty"`        // 日程开始时间
	EndTime          *CreateCalendarEventReqEndTime    `json:"end_time,omitempty"`          // 日程结束时间
	Vchat            *CreateCalendarEventReqVchat      `json:"vchat,omitempty"`             // 视频会议信息。
	Visibility       *string                           `json:"visibility,omitempty"`        // 日程公开范围，新建日程默认为Default；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 示例值："default", 可选值有: `default`：默认权限，跟随日历权限，默认仅向他人显示是否“忙碌”, `public`：公开，显示日程详情, `private`：私密，仅自己可见详情
	AttendeeAbility  *string                           `json:"attendee_ability,omitempty"`  // 参与人权限, 示例值："can_see_others", 可选值有: `none`：无法编辑日程、无法邀请其它参与人、无法查看参与人列表, `can_see_others`：无法编辑日程、无法邀请其它参与人、可以查看参与人列表, `can_invite_others`：无法编辑日程、可以邀请其它参与人、可以查看参与人列表, `can_modify_event`：可以编辑日程、可以邀请其它参与人、可以查看参与人列表
	FreeBusyStatus   *string                           `json:"free_busy_status,omitempty"`  // 日程占用的忙闲状态，新建日程默认为Busy；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 示例值："busy", 可选值有: `busy`：忙碌, `free`：空闲
	Location         *CreateCalendarEventReqLocation   `json:"location,omitempty"`          // 日程地点
	Color            *int64                            `json:"color,omitempty"`             // 日程颜色，颜色RGB值的int32表示。仅对当前身份生效；客户端展示时会映射到色板上最接近的一种颜色；值为0或-1时默认跟随日历颜色。, 示例值：-1
	Reminders        []*CreateCalendarEventReqReminder `json:"reminders,omitempty"`         // 日程提醒列表
	Recurrence       *string                           `json:"recurrence,omitempty"`        // 重复日程的重复性规则；参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)；, 不支持COUNT和UNTIL同时出现；, 预定会议室重复日程长度不得超过两年。, 示例值："FREQ=DAILY;INTERVAL=1", 最大长度：`2000` 字符
	Schemas          []*CreateCalendarEventReqSchema   `json:"schemas,omitempty"`           // 日程自定义信息；控制日程详情页的ui展示。
}

// CreateCalendarEventReqStartTime ...
type CreateCalendarEventReqStartTime struct {
	Date      *string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定, 示例值："2018-09-01"
	Timestamp *string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区), 示例值："1602504000"
	Timezone  *string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai, 示例值："Asia/Shanghai"
}

// CreateCalendarEventReqEndTime ...
type CreateCalendarEventReqEndTime struct {
	Date      *string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定, 示例值："2018-09-01"
	Timestamp *string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区), 示例值："1602504000"
	Timezone  *string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai, 示例值："Asia/Shanghai"
}

// CreateCalendarEventReqVchat ...
type CreateCalendarEventReqVchat struct {
	VCType      *string `json:"vc_type,omitempty"`     // 视频会议类型, 示例值："third_party", 可选值有: `vc`：飞书视频会议，取该类型时，其他字段无效。, `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。, `no_meeting`：无视频会议，取该类型时，其他字段无效。, `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。, `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    *string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。, 示例值："vc", 可选值有: `vc`：飞书视频会议icon, `live`：直播视频会议icon, `default`：默认icon
	Description *string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案, 示例值："发起视频会议", 长度范围：`0` ～ `500` 字符
	MeetingURL  *string `json:"meeting_url,omitempty"` // 视频会议URL, 示例值："https://example.com", 长度范围：`1` ～ `2000` 字符
}

// CreateCalendarEventReqLocation ...
type CreateCalendarEventReqLocation struct {
	Name      *string  `json:"name,omitempty"`      // 地点名称, 示例值："地点名称", 长度范围：`1` ～ `512` 字符
	Address   *string  `json:"address,omitempty"`   // 地点地址, 示例值："地点地址", 长度范围：`1` ～ `255` 字符
	Latitude  *float64 `json:"latitude,omitempty"`  // 地点坐标纬度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准, 示例值：1.100000023841858
	Longitude *float64 `json:"longitude,omitempty"` // 地点坐标经度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准, 示例值：2.200000047683716
}

// CreateCalendarEventReqReminder ...
type CreateCalendarEventReqReminder struct {
	Minutes *int64 `json:"minutes,omitempty"` // 日程提醒时间的偏移量，正数时表示在日程开始前X分钟提醒，负数时表示在日程开始后X分钟提醒,新建或更新日程时传入该字段，仅对当前身份生效, 示例值：5, 取值范围：`-20160` ～ `20160`
}

// CreateCalendarEventReqSchema ...
type CreateCalendarEventReqSchema struct {
	UiName   *string `json:"ui_name,omitempty"`   // UI名称。取值范围如下： , ForwardIcon: 日程转发按钮 , MeetingChatIcon: 会议群聊按钮 , MeetingMinutesIcon: 会议纪要按钮 , MeetingVideo: 视频会议区域 , RSVP: 接受/拒绝/待定区域 , Attendee: 参与者区域 , OrganizerOrCreator: 组织者/创建者区域, 示例值："ForwardIcon"
	UiStatus *string `json:"ui_status,omitempty"` // UI项自定义状态。**目前只支持hide**, 示例值："hide", 可选值有: `hide`：隐藏显示, `readonly`：只读, `editable`：可编辑, `unknown`：未知UI项自定义状态，仅用于读取时兼容
	AppLink  *string `json:"app_link,omitempty"`  // 按钮点击后跳转的链接; **该字段暂不支持传入。**, 示例值："https://applink.feishu.cn/client/calendar/event/detail?calendarId=xxxxxx&key=xxxxxx&originalTime=xxxxxx&startTime=xxxxxx", 最大长度：`2000` 字符
}

// createCalendarEventResp ...
type createCalendarEventResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *CreateCalendarEventResp `json:"data,omitempty"`
}

// CreateCalendarEventResp ...
type CreateCalendarEventResp struct {
	Event *CreateCalendarEventRespEvent `json:"event,omitempty"` // 新创建的日程实体
}

// CreateCalendarEventRespEvent ...
type CreateCalendarEventRespEvent struct {
	EventID             string                                  `json:"event_id,omitempty"`              // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction)
	OrganizerCalendarID string                                  `json:"organizer_calendar_id,omitempty"` // 日程组织者日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary             string                                  `json:"summary,omitempty"`               // 日程标题
	Description         string                                  `json:"description,omitempty"`           // 日程描述；目前不支持编辑富文本描述，如果日程描述通过客户端编辑过，更新描述会导致富文本格式丢失
	NeedNotification    bool                                    `json:"need_notification,omitempty"`     // 更新日程是否给日程参与人发送bot通知，默认为true
	StartTime           *CreateCalendarEventRespEventStartTime  `json:"start_time,omitempty"`            // 日程开始时间
	EndTime             *CreateCalendarEventRespEventEndTime    `json:"end_time,omitempty"`              // 日程结束时间
	Vchat               *CreateCalendarEventRespEventVchat      `json:"vchat,omitempty"`                 // 视频会议信息。
	Visibility          string                                  `json:"visibility,omitempty"`            // 日程公开范围，新建日程默认为Default；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `default`：默认权限，跟随日历权限，默认仅向他人显示是否“忙碌”, `public`：公开，显示日程详情, `private`：私密，仅自己可见详情
	AttendeeAbility     string                                  `json:"attendee_ability,omitempty"`      // 参与人权限, 可选值有: `none`：无法编辑日程、无法邀请其它参与人、无法查看参与人列表, `can_see_others`：无法编辑日程、无法邀请其它参与人、可以查看参与人列表, `can_invite_others`：无法编辑日程、可以邀请其它参与人、可以查看参与人列表, `can_modify_event`：可以编辑日程、可以邀请其它参与人、可以查看参与人列表
	FreeBusyStatus      string                                  `json:"free_busy_status,omitempty"`      // 日程占用的忙闲状态，新建日程默认为Busy；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `busy`：忙碌, `free`：空闲
	Location            *CreateCalendarEventRespEventLocation   `json:"location,omitempty"`              // 日程地点
	Color               int64                                   `json:"color,omitempty"`                 // 日程颜色，颜色RGB值的int32表示。仅对当前身份生效；客户端展示时会映射到色板上最接近的一种颜色；值为0或-1时默认跟随日历颜色。
	Reminders           []*CreateCalendarEventRespEventReminder `json:"reminders,omitempty"`             // 日程提醒列表
	Recurrence          string                                  `json:"recurrence,omitempty"`            // 重复日程的重复性规则；参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)；, 不支持COUNT和UNTIL同时出现；, 预定会议室重复日程长度不得超过两年。
	Status              string                                  `json:"status,omitempty"`                // 日程状态, 可选值有: `tentative`：未回应, `confirmed`：已确认, `cancelled`：日程已取消
	IsException         bool                                    `json:"is_exception,omitempty"`          // 日程是否是一个重复日程的例外日程
	RecurringEventID    string                                  `json:"recurring_event_id,omitempty"`    // 例外日程的原重复日程的event_id
	Schemas             []*CreateCalendarEventRespEventSchema   `json:"schemas,omitempty"`               // 日程自定义信息；控制日程详情页的ui展示。
}

// CreateCalendarEventRespEventStartTime ...
type CreateCalendarEventRespEventStartTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// CreateCalendarEventRespEventEndTime ...
type CreateCalendarEventRespEventEndTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// CreateCalendarEventRespEventVchat ...
type CreateCalendarEventRespEventVchat struct {
	VCType      string `json:"vc_type,omitempty"`     // 视频会议类型, 可选值有: `vc`：飞书视频会议，取该类型时，其他字段无效。, `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。, `no_meeting`：无视频会议，取该类型时，其他字段无效。, `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。, `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。, 可选值有: `vc`：飞书视频会议icon, `live`：直播视频会议icon, `default`：默认icon
	Description string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案
	MeetingURL  string `json:"meeting_url,omitempty"` // 视频会议URL
}

// CreateCalendarEventRespEventLocation ...
type CreateCalendarEventRespEventLocation struct {
	Name      string  `json:"name,omitempty"`      // 地点名称
	Address   string  `json:"address,omitempty"`   // 地点地址
	Latitude  float64 `json:"latitude,omitempty"`  // 地点坐标纬度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
	Longitude float64 `json:"longitude,omitempty"` // 地点坐标经度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
}

// CreateCalendarEventRespEventReminder ...
type CreateCalendarEventRespEventReminder struct {
	Minutes int64 `json:"minutes,omitempty"` // 日程提醒时间的偏移量，正数时表示在日程开始前X分钟提醒，负数时表示在日程开始后X分钟提醒,新建或更新日程时传入该字段，仅对当前身份生效
}

// CreateCalendarEventRespEventSchema ...
type CreateCalendarEventRespEventSchema struct {
	UiName   string `json:"ui_name,omitempty"`   // UI名称。取值范围如下： , ForwardIcon: 日程转发按钮 , MeetingChatIcon: 会议群聊按钮 , MeetingMinutesIcon: 会议纪要按钮 , MeetingVideo: 视频会议区域 , RSVP: 接受/拒绝/待定区域 , Attendee: 参与者区域 , OrganizerOrCreator: 组织者/创建者区域
	UiStatus string `json:"ui_status,omitempty"` // UI项自定义状态。**目前只支持hide**, 可选值有: `hide`：隐藏显示, `readonly`：只读, `editable`：可编辑, `unknown`：未知UI项自定义状态，仅用于读取时兼容
	AppLink  string `json:"app_link,omitempty"`  // 按钮点击后跳转的链接; **该字段暂不支持传入。**
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteCalendarEvent
//
// 该接口用于以当前身份（应用 / 用户）删除日历上的一个日程。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。
// 当前身份必须是日程的组织者。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/delete
func (r *CalendarService) DeleteCalendarEvent(ctx context.Context, request *DeleteCalendarEventReq, options ...MethodOptionFunc) (*DeleteCalendarEventResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendarEvent mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "DeleteCalendarEvent",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteCalendarEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendarEvent mock CalendarDeleteCalendarEvent method
func (r *Mock) MockCalendarDeleteCalendarEvent(f func(ctx context.Context, request *DeleteCalendarEventReq, options ...MethodOptionFunc) (*DeleteCalendarEventResp, *Response, error)) {
	r.mockCalendarDeleteCalendarEvent = f
}

// UnMockCalendarDeleteCalendarEvent un-mock CalendarDeleteCalendarEvent method
func (r *Mock) UnMockCalendarDeleteCalendarEvent() {
	r.mockCalendarDeleteCalendarEvent = nil
}

// DeleteCalendarEventReq ...
type DeleteCalendarEventReq struct {
	NeedNotification *bool  `query:"need_notification" json:"-"` // 删除日程是否给日程参与人发送bot通知，默认为true, 示例值：false, 可选值有: `true`：true, `false`：false
	CalendarID       string `path:"calendar_id" json:"-"`        // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	EventID          string `path:"event_id" json:"-"`           // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction), 示例值："xxxxxxxxx_0"
}

// deleteCalendarEventResp ...
type deleteCalendarEventResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarEventResp `json:"data,omitempty"`
}

// DeleteCalendarEventResp ...
type DeleteCalendarEventResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarEvent 该接口用于以当前身份（应用 / 用户）获取日历上的一个日程。
//
// - 当前身份必须对日历有reader、writer或owner权限才会返回日程详细信息（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
// - [例外日程](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction#71c5ec78)可通过event_id的非0时间戳后缀，来获取修改的重复性日程的哪一天日程的时间信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/get
func (r *CalendarService) GetCalendarEvent(ctx context.Context, request *GetCalendarEventReq, options ...MethodOptionFunc) (*GetCalendarEventResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarEvent mock enable")
		return r.cli.mock.mockCalendarGetCalendarEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendarEvent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getCalendarEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarEvent mock CalendarGetCalendarEvent method
func (r *Mock) MockCalendarGetCalendarEvent(f func(ctx context.Context, request *GetCalendarEventReq, options ...MethodOptionFunc) (*GetCalendarEventResp, *Response, error)) {
	r.mockCalendarGetCalendarEvent = f
}

// UnMockCalendarGetCalendarEvent un-mock CalendarGetCalendarEvent method
func (r *Mock) UnMockCalendarGetCalendarEvent() {
	r.mockCalendarGetCalendarEvent = nil
}

// GetCalendarEventReq ...
type GetCalendarEventReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	EventID    string `path:"event_id" json:"-"`    // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction), 示例值："xxxxxxxxx_0"
}

// getCalendarEventResp ...
type getCalendarEventResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarEventResp `json:"data,omitempty"`
}

// GetCalendarEventResp ...
type GetCalendarEventResp struct {
	Event *GetCalendarEventRespEvent `json:"event,omitempty"` // 日程实体
}

// GetCalendarEventRespEvent ...
type GetCalendarEventRespEvent struct {
	EventID             string                               `json:"event_id,omitempty"`              // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction)
	OrganizerCalendarID string                               `json:"organizer_calendar_id,omitempty"` // 日程组织者日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary             string                               `json:"summary,omitempty"`               // 日程标题
	Description         string                               `json:"description,omitempty"`           // 日程描述；目前不支持编辑富文本描述，如果日程描述通过客户端编辑过，更新描述会导致富文本格式丢失
	StartTime           *GetCalendarEventRespEventStartTime  `json:"start_time,omitempty"`            // 日程开始时间
	EndTime             *GetCalendarEventRespEventEndTime    `json:"end_time,omitempty"`              // 日程结束时间
	Vchat               *GetCalendarEventRespEventVchat      `json:"vchat,omitempty"`                 // 视频会议信息。
	Visibility          string                               `json:"visibility,omitempty"`            // 日程公开范围，新建日程默认为Default；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `default`：默认权限，跟随日历权限，默认仅向他人显示是否“忙碌”, `public`：公开，显示日程详情, `private`：私密，仅自己可见详情
	AttendeeAbility     string                               `json:"attendee_ability,omitempty"`      // 参与人权限, 可选值有: `none`：无法编辑日程、无法邀请其它参与人、无法查看参与人列表, `can_see_others`：无法编辑日程、无法邀请其它参与人、可以查看参与人列表, `can_invite_others`：无法编辑日程、可以邀请其它参与人、可以查看参与人列表, `can_modify_event`：可以编辑日程、可以邀请其它参与人、可以查看参与人列表
	FreeBusyStatus      string                               `json:"free_busy_status,omitempty"`      // 日程占用的忙闲状态，新建日程默认为Busy；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `busy`：忙碌, `free`：空闲
	Location            *GetCalendarEventRespEventLocation   `json:"location,omitempty"`              // 日程地点
	Color               int64                                `json:"color,omitempty"`                 // 日程颜色，颜色RGB值的int32表示。仅对当前身份生效；客户端展示时会映射到色板上最接近的一种颜色；值为0或-1时默认跟随日历颜色。
	Reminders           []*GetCalendarEventRespEventReminder `json:"reminders,omitempty"`             // 日程提醒列表
	Recurrence          string                               `json:"recurrence,omitempty"`            // 重复日程的重复性规则；参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)；, 不支持COUNT和UNTIL同时出现；, 预定会议室重复日程长度不得超过两年。
	Status              string                               `json:"status,omitempty"`                // 日程状态, 可选值有: `tentative`：未回应, `confirmed`：已确认, `cancelled`：日程已取消
	IsException         bool                                 `json:"is_exception,omitempty"`          // 日程是否是一个重复日程的例外日程
	RecurringEventID    string                               `json:"recurring_event_id,omitempty"`    // 例外日程的原重复日程的event_id
	Schemas             []*GetCalendarEventRespEventSchema   `json:"schemas,omitempty"`               // 日程自定义信息；控制日程详情页的ui展示。
}

// GetCalendarEventRespEventStartTime ...
type GetCalendarEventRespEventStartTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// GetCalendarEventRespEventEndTime ...
type GetCalendarEventRespEventEndTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// GetCalendarEventRespEventVchat ...
type GetCalendarEventRespEventVchat struct {
	VCType      string `json:"vc_type,omitempty"`     // 视频会议类型, 可选值有: `vc`：飞书视频会议，取该类型时，其他字段无效。, `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。, `no_meeting`：无视频会议，取该类型时，其他字段无效。, `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。, `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。, 可选值有: `vc`：飞书视频会议icon, `live`：直播视频会议icon, `default`：默认icon
	Description string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案
	MeetingURL  string `json:"meeting_url,omitempty"` // 视频会议URL
}

// GetCalendarEventRespEventLocation ...
type GetCalendarEventRespEventLocation struct {
	Name      string  `json:"name,omitempty"`      // 地点名称
	Address   string  `json:"address,omitempty"`   // 地点地址
	Latitude  float64 `json:"latitude,omitempty"`  // 地点坐标纬度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
	Longitude float64 `json:"longitude,omitempty"` // 地点坐标经度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
}

// GetCalendarEventRespEventReminder ...
type GetCalendarEventRespEventReminder struct {
	Minutes int64 `json:"minutes,omitempty"` // 日程提醒时间的偏移量，正数时表示在日程开始前X分钟提醒，负数时表示在日程开始后X分钟提醒,新建或更新日程时传入该字段，仅对当前身份生效
}

// GetCalendarEventRespEventSchema ...
type GetCalendarEventRespEventSchema struct {
	UiName   string `json:"ui_name,omitempty"`   // UI名称。取值范围如下： , ForwardIcon: 日程转发按钮 , MeetingChatIcon: 会议群聊按钮 , MeetingMinutesIcon: 会议纪要按钮 , MeetingVideo: 视频会议区域 , RSVP: 接受/拒绝/待定区域 , Attendee: 参与者区域 , OrganizerOrCreator: 组织者/创建者区域
	UiStatus string `json:"ui_status,omitempty"` // UI项自定义状态。**目前只支持hide**, 可选值有: `hide`：隐藏显示, `readonly`：只读, `editable`：可编辑, `unknown`：未知UI项自定义状态，仅用于读取时兼容
	AppLink  string `json:"app_link,omitempty"`  // 按钮点击后跳转的链接; **该字段暂不支持传入。**
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarEventList 该接口用于以当前身份（应用 / 用户）获取日历下的日程列表。
//
// - 当前身份必须对日历有reader、writer或owner权限才会返回日程详细信息（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
// - 仅支持primary、shared和resource类型的日历获取日程列表。
// - 调用时首先使用 page_token 分页拉取存量数据，之后使用 sync_token 增量同步变更数据。
// - 为了确保调用方日程同步数据的一致性，在使用sync_token时，不能同时使用start_time和end_time，否则可能造成日程数据缺失。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/list
func (r *CalendarService) GetCalendarEventList(ctx context.Context, request *GetCalendarEventListReq, options ...MethodOptionFunc) (*GetCalendarEventListResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarEventList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarEventList mock enable")
		return r.cli.mock.mockCalendarGetCalendarEventList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendarEventList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getCalendarEventListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarEventList mock CalendarGetCalendarEventList method
func (r *Mock) MockCalendarGetCalendarEventList(f func(ctx context.Context, request *GetCalendarEventListReq, options ...MethodOptionFunc) (*GetCalendarEventListResp, *Response, error)) {
	r.mockCalendarGetCalendarEventList = f
}

// UnMockCalendarGetCalendarEventList un-mock CalendarGetCalendarEventList method
func (r *Mock) UnMockCalendarGetCalendarEventList() {
	r.mockCalendarGetCalendarEventList = nil
}

// GetCalendarEventListReq ...
type GetCalendarEventListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`   // 一次请求要求返回最大数量，默认500，取值范围为[50, 1000], 示例值：50, 默认值: `500`, 取值范围：`50` ～ `1000`
	AnchorTime *string `query:"anchor_time" json:"-"` // 拉取anchor_time之后的日程，为timestamp, 示例值："1609430400"
	PageToken  *string `query:"page_token" json:"-"`  // 上次请求Response返回的分页标记，首次请求时为空, 示例值："ListCalendarsPageToken_1632452910_1632539310"
	SyncToken  *string `query:"sync_token" json:"-"`  // 上次请求Response返回的增量同步标记，分页请求未结束时为空, 示例值："ListCalendarsSyncToken_1632452910"
	StartTime  *string `query:"start_time" json:"-"`  // 日程开始Unix时间戳，单位为秒, 示例值："1631777271"
	EndTime    *string `query:"end_time" json:"-"`    // 日程结束Unix时间戳，单位为秒, 示例值："1631777271"
	CalendarID string  `path:"calendar_id" json:"-"`  // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// getCalendarEventListResp ...
type getCalendarEventListResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarEventListResp `json:"data,omitempty"`
}

// GetCalendarEventListResp ...
type GetCalendarEventListResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否有下一页数据
	PageToken string                          `json:"page_token,omitempty"` // 下次请求需要带上的分页标记，90 天有效期
	SyncToken string                          `json:"sync_token,omitempty"` // 下次请求需要带上的增量同步标记，90 天有效期
	Items     []*GetCalendarEventListRespItem `json:"items,omitempty"`      // 日程列表
}

// GetCalendarEventListRespItem ...
type GetCalendarEventListRespItem struct {
	EventID             string                                  `json:"event_id,omitempty"`              // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction)
	OrganizerCalendarID string                                  `json:"organizer_calendar_id,omitempty"` // 日程组织者日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary             string                                  `json:"summary,omitempty"`               // 日程标题
	Description         string                                  `json:"description,omitempty"`           // 日程描述；目前不支持编辑富文本描述，如果日程描述通过客户端编辑过，更新描述会导致富文本格式丢失
	StartTime           *GetCalendarEventListRespItemStartTime  `json:"start_time,omitempty"`            // 日程开始时间
	EndTime             *GetCalendarEventListRespItemEndTime    `json:"end_time,omitempty"`              // 日程结束时间
	Vchat               *GetCalendarEventListRespItemVchat      `json:"vchat,omitempty"`                 // 视频会议信息。
	Visibility          string                                  `json:"visibility,omitempty"`            // 日程公开范围，新建日程默认为Default；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `default`：默认权限，跟随日历权限，默认仅向他人显示是否“忙碌”, `public`：公开，显示日程详情, `private`：私密，仅自己可见详情
	AttendeeAbility     string                                  `json:"attendee_ability,omitempty"`      // 参与人权限, 可选值有: `none`：无法编辑日程、无法邀请其它参与人、无法查看参与人列表, `can_see_others`：无法编辑日程、无法邀请其它参与人、可以查看参与人列表, `can_invite_others`：无法编辑日程、可以邀请其它参与人、可以查看参与人列表, `can_modify_event`：可以编辑日程、可以邀请其它参与人、可以查看参与人列表
	FreeBusyStatus      string                                  `json:"free_busy_status,omitempty"`      // 日程占用的忙闲状态，新建日程默认为Busy；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `busy`：忙碌, `free`：空闲
	Location            *GetCalendarEventListRespItemLocation   `json:"location,omitempty"`              // 日程地点
	Color               int64                                   `json:"color,omitempty"`                 // 日程颜色，颜色RGB值的int32表示。仅对当前身份生效；客户端展示时会映射到色板上最接近的一种颜色；值为0或-1时默认跟随日历颜色。
	Reminders           []*GetCalendarEventListRespItemReminder `json:"reminders,omitempty"`             // 日程提醒列表
	Recurrence          string                                  `json:"recurrence,omitempty"`            // 重复日程的重复性规则；参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)；, 不支持COUNT和UNTIL同时出现；, 预定会议室重复日程长度不得超过两年。
	Status              string                                  `json:"status,omitempty"`                // 日程状态, 可选值有: `tentative`：未回应, `confirmed`：已确认, `cancelled`：日程已取消
	IsException         bool                                    `json:"is_exception,omitempty"`          // 日程是否是一个重复日程的例外日程
	RecurringEventID    string                                  `json:"recurring_event_id,omitempty"`    // 例外日程的原重复日程的event_id
	Schemas             []*GetCalendarEventListRespItemSchema   `json:"schemas,omitempty"`               // 日程自定义信息；控制日程详情页的ui展示。
}

// GetCalendarEventListRespItemStartTime ...
type GetCalendarEventListRespItemStartTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// GetCalendarEventListRespItemEndTime ...
type GetCalendarEventListRespItemEndTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// GetCalendarEventListRespItemVchat ...
type GetCalendarEventListRespItemVchat struct {
	VCType      string `json:"vc_type,omitempty"`     // 视频会议类型, 可选值有: `vc`：飞书视频会议，取该类型时，其他字段无效。, `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。, `no_meeting`：无视频会议，取该类型时，其他字段无效。, `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。, `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。, 可选值有: `vc`：飞书视频会议icon, `live`：直播视频会议icon, `default`：默认icon
	Description string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案
	MeetingURL  string `json:"meeting_url,omitempty"` // 视频会议URL
}

// GetCalendarEventListRespItemLocation ...
type GetCalendarEventListRespItemLocation struct {
	Name      string  `json:"name,omitempty"`      // 地点名称
	Address   string  `json:"address,omitempty"`   // 地点地址
	Latitude  float64 `json:"latitude,omitempty"`  // 地点坐标纬度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
	Longitude float64 `json:"longitude,omitempty"` // 地点坐标经度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
}

// GetCalendarEventListRespItemReminder ...
type GetCalendarEventListRespItemReminder struct {
	Minutes int64 `json:"minutes,omitempty"` // 日程提醒时间的偏移量，正数时表示在日程开始前X分钟提醒，负数时表示在日程开始后X分钟提醒,新建或更新日程时传入该字段，仅对当前身份生效
}

// GetCalendarEventListRespItemSchema ...
type GetCalendarEventListRespItemSchema struct {
	UiName   string `json:"ui_name,omitempty"`   // UI名称。取值范围如下： , ForwardIcon: 日程转发按钮 , MeetingChatIcon: 会议群聊按钮 , MeetingMinutesIcon: 会议纪要按钮 , MeetingVideo: 视频会议区域 , RSVP: 接受/拒绝/待定区域 , Attendee: 参与者区域 , OrganizerOrCreator: 组织者/创建者区域
	UiStatus string `json:"ui_status,omitempty"` // UI项自定义状态。**目前只支持hide**, 可选值有: `hide`：隐藏显示, `readonly`：只读, `editable`：可编辑, `unknown`：未知UI项自定义状态，仅用于读取时兼容
	AppLink  string `json:"app_link,omitempty"`  // 按钮点击后跳转的链接; **该字段暂不支持传入。**
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateCalendarEvent
//
// 该接口用于以当前身份（应用 / 用户）更新日历上的一个日程。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份必须对日历有 writer 或 owner 权限，并且日历的类型只能为 primary 或 shared。
// 当前身份为日程组织者时，可修改所有可编辑字段。
// 当前身份为日程参与者时，仅可编辑部分字段。（如：visibility, free_busy_status, color, reminders）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/patch
func (r *CalendarService) UpdateCalendarEvent(ctx context.Context, request *UpdateCalendarEventReq, options ...MethodOptionFunc) (*UpdateCalendarEventResp, *Response, error) {
	if r.cli.mock.mockCalendarUpdateCalendarEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#UpdateCalendarEvent mock enable")
		return r.cli.mock.mockCalendarUpdateCalendarEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "UpdateCalendarEvent",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/:event_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateCalendarEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarUpdateCalendarEvent mock CalendarUpdateCalendarEvent method
func (r *Mock) MockCalendarUpdateCalendarEvent(f func(ctx context.Context, request *UpdateCalendarEventReq, options ...MethodOptionFunc) (*UpdateCalendarEventResp, *Response, error)) {
	r.mockCalendarUpdateCalendarEvent = f
}

// UnMockCalendarUpdateCalendarEvent un-mock CalendarUpdateCalendarEvent method
func (r *Mock) UnMockCalendarUpdateCalendarEvent() {
	r.mockCalendarUpdateCalendarEvent = nil
}

// UpdateCalendarEventReq ...
type UpdateCalendarEventReq struct {
	CalendarID       string                            `path:"calendar_id" json:"-"`        // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	EventID          string                            `path:"event_id" json:"-"`           // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction), 示例值："00592a0e-7edf-4678-bc9d-1b77383ef08e_0"
	Summary          *string                           `json:"summary,omitempty"`           // 日程标题, 示例值："日程标题", 最大长度：`1000` 字符
	Description      *string                           `json:"description,omitempty"`       // 日程描述；目前不支持编辑富文本描述，如果日程描述通过客户端编辑过，更新描述会导致富文本格式丢失, 示例值："日程描述", 最大长度：`40960` 字符
	NeedNotification *bool                             `json:"need_notification,omitempty"` // 更新日程是否给日程参与人发送bot通知，默认为true, 示例值：false
	StartTime        *UpdateCalendarEventReqStartTime  `json:"start_time,omitempty"`        // 日程开始时间
	EndTime          *UpdateCalendarEventReqEndTime    `json:"end_time,omitempty"`          // 日程结束时间
	Vchat            *UpdateCalendarEventReqVchat      `json:"vchat,omitempty"`             // 视频会议信息。
	Visibility       *string                           `json:"visibility,omitempty"`        // 日程公开范围，新建日程默认为Default；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 示例值："default", 可选值有: `default`：默认权限，跟随日历权限，默认仅向他人显示是否“忙碌”, `public`：公开，显示日程详情, `private`：私密，仅自己可见详情
	AttendeeAbility  *string                           `json:"attendee_ability,omitempty"`  // 参与人权限, 示例值："can_see_others", 可选值有: `none`：无法编辑日程、无法邀请其它参与人、无法查看参与人列表, `can_see_others`：无法编辑日程、无法邀请其它参与人、可以查看参与人列表, `can_invite_others`：无法编辑日程、可以邀请其它参与人、可以查看参与人列表, `can_modify_event`：可以编辑日程、可以邀请其它参与人、可以查看参与人列表
	FreeBusyStatus   *string                           `json:"free_busy_status,omitempty"`  // 日程占用的忙闲状态，新建日程默认为Busy；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 示例值："busy", 可选值有: `busy`：忙碌, `free`：空闲
	Location         *UpdateCalendarEventReqLocation   `json:"location,omitempty"`          // 日程地点
	Color            *int64                            `json:"color,omitempty"`             // 日程颜色，颜色RGB值的int32表示。仅对当前身份生效；客户端展示时会映射到色板上最接近的一种颜色；值为0或-1时默认跟随日历颜色。, 示例值：-1
	Reminders        []*UpdateCalendarEventReqReminder `json:"reminders,omitempty"`         // 日程提醒列表
	Recurrence       *string                           `json:"recurrence,omitempty"`        // 重复日程的重复性规则；参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)；, 不支持COUNT和UNTIL同时出现；, 预定会议室重复日程长度不得超过两年。, 示例值："FREQ=DAILY;INTERVAL=1", 最大长度：`2000` 字符
	Schemas          []*UpdateCalendarEventReqSchema   `json:"schemas,omitempty"`           // 日程自定义信息；控制日程详情页的ui展示。
}

// UpdateCalendarEventReqStartTime ...
type UpdateCalendarEventReqStartTime struct {
	Date      *string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定, 示例值："2018-09-01"
	Timestamp *string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区), 示例值："1602504000"
	Timezone  *string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai, 示例值："Asia/Shanghai"
}

// UpdateCalendarEventReqEndTime ...
type UpdateCalendarEventReqEndTime struct {
	Date      *string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定, 示例值："2018-09-01"
	Timestamp *string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区), 示例值："1602504000"
	Timezone  *string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai, 示例值："Asia/Shanghai"
}

// UpdateCalendarEventReqVchat ...
type UpdateCalendarEventReqVchat struct {
	VCType      *string `json:"vc_type,omitempty"`     // 视频会议类型, 示例值："third_party", 可选值有: `vc`：飞书视频会议，取该类型时，其他字段无效。, `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。, `no_meeting`：无视频会议，取该类型时，其他字段无效。, `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。, `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    *string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。, 示例值："vc", 可选值有: `vc`：飞书视频会议icon, `live`：直播视频会议icon, `default`：默认icon
	Description *string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案, 示例值："发起视频会议", 长度范围：`0` ～ `500` 字符
	MeetingURL  *string `json:"meeting_url,omitempty"` // 视频会议URL, 示例值："https://example.com", 长度范围：`1` ～ `2000` 字符
}

// UpdateCalendarEventReqLocation ...
type UpdateCalendarEventReqLocation struct {
	Name      *string  `json:"name,omitempty"`      // 地点名称, 示例值："地点名称", 长度范围：`1` ～ `512` 字符
	Address   *string  `json:"address,omitempty"`   // 地点地址, 示例值："地点地址", 长度范围：`1` ～ `255` 字符
	Latitude  *float64 `json:"latitude,omitempty"`  // 地点坐标纬度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准, 示例值：1.100000023841858
	Longitude *float64 `json:"longitude,omitempty"` // 地点坐标经度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准, 示例值：2.200000047683716
}

// UpdateCalendarEventReqReminder ...
type UpdateCalendarEventReqReminder struct {
	Minutes *int64 `json:"minutes,omitempty"` // 日程提醒时间的偏移量，正数时表示在日程开始前X分钟提醒，负数时表示在日程开始后X分钟提醒,新建或更新日程时传入该字段，仅对当前身份生效, 示例值：5, 取值范围：`-20160` ～ `20160`
}

// UpdateCalendarEventReqSchema ...
type UpdateCalendarEventReqSchema struct {
	UiName   *string `json:"ui_name,omitempty"`   // UI名称。取值范围如下： , ForwardIcon: 日程转发按钮 , MeetingChatIcon: 会议群聊按钮 , MeetingMinutesIcon: 会议纪要按钮 , MeetingVideo: 视频会议区域 , RSVP: 接受/拒绝/待定区域 , Attendee: 参与者区域 , OrganizerOrCreator: 组织者/创建者区域, 示例值："ForwardIcon"
	UiStatus *string `json:"ui_status,omitempty"` // UI项自定义状态。**目前只支持hide**, 示例值："hide", 可选值有: `hide`：隐藏显示, `readonly`：只读, `editable`：可编辑, `unknown`：未知UI项自定义状态，仅用于读取时兼容
	AppLink  *string `json:"app_link,omitempty"`  // 按钮点击后跳转的链接; **该字段暂不支持传入。**, 示例值："https://applink.feishu.cn/client/calendar/event/detail?calendarId=xxxxxx&key=xxxxxx&originalTime=xxxxxx&startTime=xxxxxx", 最大长度：`2000` 字符
}

// updateCalendarEventResp ...
type updateCalendarEventResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateCalendarEventResp `json:"data,omitempty"`
}

// UpdateCalendarEventResp ...
type UpdateCalendarEventResp struct {
	Event *UpdateCalendarEventRespEvent `json:"event,omitempty"` // 更新后的日程实体
}

// UpdateCalendarEventRespEvent ...
type UpdateCalendarEventRespEvent struct {
	EventID             string                                  `json:"event_id,omitempty"`              // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction)
	OrganizerCalendarID string                                  `json:"organizer_calendar_id,omitempty"` // 日程组织者日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary             string                                  `json:"summary,omitempty"`               // 日程标题
	Description         string                                  `json:"description,omitempty"`           // 日程描述；目前不支持编辑富文本描述，如果日程描述通过客户端编辑过，更新描述会导致富文本格式丢失
	NeedNotification    bool                                    `json:"need_notification,omitempty"`     // 更新日程是否给日程参与人发送bot通知，默认为true
	StartTime           *UpdateCalendarEventRespEventStartTime  `json:"start_time,omitempty"`            // 日程开始时间
	EndTime             *UpdateCalendarEventRespEventEndTime    `json:"end_time,omitempty"`              // 日程结束时间
	Vchat               *UpdateCalendarEventRespEventVchat      `json:"vchat,omitempty"`                 // 视频会议信息。
	Visibility          string                                  `json:"visibility,omitempty"`            // 日程公开范围，新建日程默认为Default；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `default`：默认权限，跟随日历权限，默认仅向他人显示是否“忙碌”, `public`：公开，显示日程详情, `private`：私密，仅自己可见详情
	AttendeeAbility     string                                  `json:"attendee_ability,omitempty"`      // 参与人权限, 可选值有: `none`：无法编辑日程、无法邀请其它参与人、无法查看参与人列表, `can_see_others`：无法编辑日程、无法邀请其它参与人、可以查看参与人列表, `can_invite_others`：无法编辑日程、可以邀请其它参与人、可以查看参与人列表, `can_modify_event`：可以编辑日程、可以邀请其它参与人、可以查看参与人列表
	FreeBusyStatus      string                                  `json:"free_busy_status,omitempty"`      // 日程占用的忙闲状态，新建日程默认为Busy；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `busy`：忙碌, `free`：空闲
	Location            *UpdateCalendarEventRespEventLocation   `json:"location,omitempty"`              // 日程地点
	Color               int64                                   `json:"color,omitempty"`                 // 日程颜色，颜色RGB值的int32表示。仅对当前身份生效；客户端展示时会映射到色板上最接近的一种颜色；值为0或-1时默认跟随日历颜色。
	Reminders           []*UpdateCalendarEventRespEventReminder `json:"reminders,omitempty"`             // 日程提醒列表
	Recurrence          string                                  `json:"recurrence,omitempty"`            // 重复日程的重复性规则；参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)；, 不支持COUNT和UNTIL同时出现；, 预定会议室重复日程长度不得超过两年。
	Status              string                                  `json:"status,omitempty"`                // 日程状态, 可选值有: `tentative`：未回应, `confirmed`：已确认, `cancelled`：日程已取消
	IsException         bool                                    `json:"is_exception,omitempty"`          // 日程是否是一个重复日程的例外日程
	RecurringEventID    string                                  `json:"recurring_event_id,omitempty"`    // 例外日程的原重复日程的event_id
	Schemas             []*UpdateCalendarEventRespEventSchema   `json:"schemas,omitempty"`               // 日程自定义信息；控制日程详情页的ui展示。
}

// UpdateCalendarEventRespEventStartTime ...
type UpdateCalendarEventRespEventStartTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// UpdateCalendarEventRespEventEndTime ...
type UpdateCalendarEventRespEventEndTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// UpdateCalendarEventRespEventVchat ...
type UpdateCalendarEventRespEventVchat struct {
	VCType      string `json:"vc_type,omitempty"`     // 视频会议类型, 可选值有: `vc`：飞书视频会议，取该类型时，其他字段无效。, `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。, `no_meeting`：无视频会议，取该类型时，其他字段无效。, `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。, `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。, 可选值有: `vc`：飞书视频会议icon, `live`：直播视频会议icon, `default`：默认icon
	Description string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案
	MeetingURL  string `json:"meeting_url,omitempty"` // 视频会议URL
}

// UpdateCalendarEventRespEventLocation ...
type UpdateCalendarEventRespEventLocation struct {
	Name      string  `json:"name,omitempty"`      // 地点名称
	Address   string  `json:"address,omitempty"`   // 地点地址
	Latitude  float64 `json:"latitude,omitempty"`  // 地点坐标纬度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
	Longitude float64 `json:"longitude,omitempty"` // 地点坐标经度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
}

// UpdateCalendarEventRespEventReminder ...
type UpdateCalendarEventRespEventReminder struct {
	Minutes int64 `json:"minutes,omitempty"` // 日程提醒时间的偏移量，正数时表示在日程开始前X分钟提醒，负数时表示在日程开始后X分钟提醒,新建或更新日程时传入该字段，仅对当前身份生效
}

// UpdateCalendarEventRespEventSchema ...
type UpdateCalendarEventRespEventSchema struct {
	UiName   string `json:"ui_name,omitempty"`   // UI名称。取值范围如下： , ForwardIcon: 日程转发按钮 , MeetingChatIcon: 会议群聊按钮 , MeetingMinutesIcon: 会议纪要按钮 , MeetingVideo: 视频会议区域 , RSVP: 接受/拒绝/待定区域 , Attendee: 参与者区域 , OrganizerOrCreator: 组织者/创建者区域
	UiStatus string `json:"ui_status,omitempty"` // UI项自定义状态。**目前只支持hide**, 可选值有: `hide`：隐藏显示, `readonly`：只读, `editable`：可编辑, `unknown`：未知UI项自定义状态，仅用于读取时兼容
	AppLink  string `json:"app_link,omitempty"`  // 按钮点击后跳转的链接; **该字段暂不支持传入。**
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchCalendarEvent
//
// 该接口用于以用户身份搜索某日历下的相关日程。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/search
func (r *CalendarService) SearchCalendarEvent(ctx context.Context, request *SearchCalendarEventReq, options ...MethodOptionFunc) (*SearchCalendarEventResp, *Response, error) {
	if r.cli.mock.mockCalendarSearchCalendarEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#SearchCalendarEvent mock enable")
		return r.cli.mock.mockCalendarSearchCalendarEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "SearchCalendarEvent",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/search",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchCalendarEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarSearchCalendarEvent mock CalendarSearchCalendarEvent method
func (r *Mock) MockCalendarSearchCalendarEvent(f func(ctx context.Context, request *SearchCalendarEventReq, options ...MethodOptionFunc) (*SearchCalendarEventResp, *Response, error)) {
	r.mockCalendarSearchCalendarEvent = f
}

// UnMockCalendarSearchCalendarEvent un-mock CalendarSearchCalendarEvent method
func (r *Mock) UnMockCalendarSearchCalendarEvent() {
	r.mockCalendarSearchCalendarEvent = nil
}

// SearchCalendarEventReq ...
type SearchCalendarEventReq struct {
	UserIDType *IDType                       `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken  *string                       `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxxxx"
	PageSize   *int64                        `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
	CalendarID string                        `path:"calendar_id" json:"-"`   // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	Query      string                        `json:"query,omitempty"`        // 搜索关键字, 示例值："query words", 长度范围：`0` ～ `200` 字符
	Filter     *SearchCalendarEventReqFilter `json:"filter,omitempty"`       // 搜索过滤器
}

// SearchCalendarEventReqFilter ...
type SearchCalendarEventReqFilter struct {
	StartTime *SearchCalendarEventReqFilterStartTime `json:"start_time,omitempty"` // 搜索过滤项，日程搜索区间的开始时间，被搜索日程的事件必须与搜索区间有交集
	EndTime   *SearchCalendarEventReqFilterEndTime   `json:"end_time,omitempty"`   // 搜索过滤项，日程搜索区间的结束时间，被搜索日程的事件必须与搜索区间有交集
	UserIDs   []string                               `json:"user_ids,omitempty"`   // 搜索过滤项，参与人的用户ID列表，被搜索日程中必须包含至少一个其中的参与人。参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值：xxxxx
	RoomIDs   []string                               `json:"room_ids,omitempty"`   // 搜索过滤项，会议室ID列表，被搜索日程中必须包含至少一个其中的会议室, 示例值：xxxxx
	ChatIDs   []string                               `json:"chat_ids,omitempty"`   // 搜索过滤项，群ID列表，被搜索日程的参与人中必须包含至少一个其中的群。参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值：xxxxx
}

// SearchCalendarEventReqFilterStartTime ...
type SearchCalendarEventReqFilterStartTime struct {
	Date      *string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定, 示例值："2018-09-01"
	Timestamp *string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区), 示例值："1602504000"
	Timezone  *string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai, 示例值："Asia/Shanghai"
}

// SearchCalendarEventReqFilterEndTime ...
type SearchCalendarEventReqFilterEndTime struct {
	Date      *string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定, 示例值："2018-09-01"
	Timestamp *string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区), 示例值："1602504000"
	Timezone  *string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai, 示例值："Asia/Shanghai"
}

// searchCalendarEventResp ...
type searchCalendarEventResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *SearchCalendarEventResp `json:"data,omitempty"`
}

// SearchCalendarEventResp ...
type SearchCalendarEventResp struct {
	Items     []*SearchCalendarEventRespItem `json:"items,omitempty"`      // 搜索命中的日程列表
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// SearchCalendarEventRespItem ...
type SearchCalendarEventRespItem struct {
	EventID             string                                 `json:"event_id,omitempty"`              // 日程ID。参见[日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/introduction)
	OrganizerCalendarID string                                 `json:"organizer_calendar_id,omitempty"` // 日程组织者日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary             string                                 `json:"summary,omitempty"`               // 日程标题
	Description         string                                 `json:"description,omitempty"`           // 日程描述；目前不支持编辑富文本描述，如果日程描述通过客户端编辑过，更新描述会导致富文本格式丢失
	NeedNotification    bool                                   `json:"need_notification,omitempty"`     // 更新日程是否给日程参与人发送bot通知，默认为true
	StartTime           *SearchCalendarEventRespItemStartTime  `json:"start_time,omitempty"`            // 日程开始时间
	EndTime             *SearchCalendarEventRespItemEndTime    `json:"end_time,omitempty"`              // 日程结束时间
	Vchat               *SearchCalendarEventRespItemVchat      `json:"vchat,omitempty"`                 // 视频会议信息。
	Visibility          string                                 `json:"visibility,omitempty"`            // 日程公开范围，新建日程默认为Default；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `default`：默认权限，跟随日历权限，默认仅向他人显示是否“忙碌”, `public`：公开，显示日程详情, `private`：私密，仅自己可见详情
	AttendeeAbility     string                                 `json:"attendee_ability,omitempty"`      // 参与人权限, 可选值有: `none`：无法编辑日程、无法邀请其它参与人、无法查看参与人列表, `can_see_others`：无法编辑日程、无法邀请其它参与人、可以查看参与人列表, `can_invite_others`：无法编辑日程、可以邀请其它参与人、可以查看参与人列表, `can_modify_event`：可以编辑日程、可以邀请其它参与人、可以查看参与人列表
	FreeBusyStatus      string                                 `json:"free_busy_status,omitempty"`      // 日程占用的忙闲状态，新建日程默认为Busy；仅新建日程时对所有参与人生效，之后修改该属性仅对当前身份生效, 可选值有: `busy`：忙碌, `free`：空闲
	Location            *SearchCalendarEventRespItemLocation   `json:"location,omitempty"`              // 日程地点
	Color               int64                                  `json:"color,omitempty"`                 // 日程颜色，颜色RGB值的int32表示。仅对当前身份生效；客户端展示时会映射到色板上最接近的一种颜色；值为0或-1时默认跟随日历颜色。
	Reminders           []*SearchCalendarEventRespItemReminder `json:"reminders,omitempty"`             // 日程提醒列表
	Recurrence          string                                 `json:"recurrence,omitempty"`            // 重复日程的重复性规则；参考[rfc5545](https://datatracker.ietf.org/doc/html/rfc5545#section-3.3.10)；, 不支持COUNT和UNTIL同时出现；, 预定会议室重复日程长度不得超过两年。
	Status              string                                 `json:"status,omitempty"`                // 日程状态, 可选值有: `tentative`：未回应, `confirmed`：已确认, `cancelled`：日程已取消
	IsException         bool                                   `json:"is_exception,omitempty"`          // 日程是否是一个重复日程的例外日程
	RecurringEventID    string                                 `json:"recurring_event_id,omitempty"`    // 例外日程的原重复日程的event_id
	Schemas             []*SearchCalendarEventRespItemSchema   `json:"schemas,omitempty"`               // 日程自定义信息；控制日程详情页的ui展示。
}

// SearchCalendarEventRespItemStartTime ...
type SearchCalendarEventRespItemStartTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// SearchCalendarEventRespItemEndTime ...
type SearchCalendarEventRespItemEndTime struct {
	Date      string `json:"date,omitempty"`      // 仅全天日程使用该字段，如2018-09-01。需满足 RFC3339 格式。不能与 timestamp 同时指定
	Timestamp string `json:"timestamp,omitempty"` // 秒级时间戳，如1602504000(表示2020/10/12 20:0:00 +8时区)
	Timezone  string `json:"timezone,omitempty"`  // 时区名称，使用IANA Time Zone Database标准，如Asia/Shanghai；全天日程时区固定为UTC，非全天日程时区默认为Asia/Shanghai
}

// SearchCalendarEventRespItemVchat ...
type SearchCalendarEventRespItemVchat struct {
	VCType      string `json:"vc_type,omitempty"`     // 视频会议类型, 可选值有: `vc`：飞书视频会议，取该类型时，其他字段无效。, `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。, `no_meeting`：无视频会议，取该类型时，其他字段无效。, `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。, `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。, 可选值有: `vc`：飞书视频会议icon, `live`：直播视频会议icon, `default`：默认icon
	Description string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案
	MeetingURL  string `json:"meeting_url,omitempty"` // 视频会议URL
}

// SearchCalendarEventRespItemLocation ...
type SearchCalendarEventRespItemLocation struct {
	Name      string  `json:"name,omitempty"`      // 地点名称
	Address   string  `json:"address,omitempty"`   // 地点地址
	Latitude  float64 `json:"latitude,omitempty"`  // 地点坐标纬度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
	Longitude float64 `json:"longitude,omitempty"` // 地点坐标经度信息，对于国内的地点，采用GCJ-02标准，海外地点采用WGS84标准
}

// SearchCalendarEventRespItemReminder ...
type SearchCalendarEventRespItemReminder struct {
	Minutes int64 `json:"minutes,omitempty"` // 日程提醒时间的偏移量，正数时表示在日程开始前X分钟提醒，负数时表示在日程开始后X分钟提醒,新建或更新日程时传入该字段，仅对当前身份生效
}

// SearchCalendarEventRespItemSchema ...
type SearchCalendarEventRespItemSchema struct {
	UiName   string `json:"ui_name,omitempty"`   // UI名称。取值范围如下： , ForwardIcon: 日程转发按钮 , MeetingChatIcon: 会议群聊按钮 , MeetingMinutesIcon: 会议纪要按钮 , MeetingVideo: 视频会议区域 , RSVP: 接受/拒绝/待定区域 , Attendee: 参与者区域 , OrganizerOrCreator: 组织者/创建者区域
	UiStatus string `json:"ui_status,omitempty"` // UI项自定义状态。**目前只支持hide**, 可选值有: `hide`：隐藏显示, `readonly`：只读, `editable`：可编辑, `unknown`：未知UI项自定义状态，仅用于读取时兼容
	AppLink  string `json:"app_link,omitempty"`  // 按钮点击后跳转的链接; **该字段暂不支持传入。**
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeCalendarEvent 该接口用于以用户身份订阅指定日历下的日程变更事件。
//
// 当前身份必须对日历有reader、writer或owner权限（调用[获取日历](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get)接口，role字段可查看权限）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar-event/subscription
func (r *CalendarService) SubscribeCalendarEvent(ctx context.Context, request *SubscribeCalendarEventReq, options ...MethodOptionFunc) (*SubscribeCalendarEventResp, *Response, error) {
	if r.cli.mock.mockCalendarSubscribeCalendarEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#SubscribeCalendarEvent mock enable")
		return r.cli.mock.mockCalendarSubscribeCalendarEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "SubscribeCalendarEvent",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/events/subscription",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(subscribeCalendarEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarSubscribeCalendarEvent mock CalendarSubscribeCalendarEvent method
func (r *Mock) MockCalendarSubscribeCalendarEvent(f func(ctx context.Context, request *SubscribeCalendarEventReq, options ...MethodOptionFunc) (*SubscribeCalendarEventResp, *Response, error)) {
	r.mockCalendarSubscribeCalendarEvent = f
}

// UnMockCalendarSubscribeCalendarEvent un-mock CalendarSubscribeCalendarEvent method
func (r *Mock) UnMockCalendarSubscribeCalendarEvent() {
	r.mockCalendarSubscribeCalendarEvent = nil
}

// SubscribeCalendarEventReq ...
type SubscribeCalendarEventReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// subscribeCalendarEventResp ...
type subscribeCalendarEventResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeCalendarEventResp `json:"data,omitempty"`
}

// SubscribeCalendarEventResp ...
type SubscribeCalendarEventResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarFreeBusyList 查询用户主日历或会议室的忙闲信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/freebusy/list
func (r *CalendarService) GetCalendarFreeBusyList(ctx context.Context, request *GetCalendarFreeBusyListReq, options ...MethodOptionFunc) (*GetCalendarFreeBusyListResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarFreeBusyList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarFreeBusyList mock enable")
		return r.cli.mock.mockCalendarGetCalendarFreeBusyList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendarFreeBusyList",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/freebusy/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getCalendarFreeBusyListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarFreeBusyList mock CalendarGetCalendarFreeBusyList method
func (r *Mock) MockCalendarGetCalendarFreeBusyList(f func(ctx context.Context, request *GetCalendarFreeBusyListReq, options ...MethodOptionFunc) (*GetCalendarFreeBusyListResp, *Response, error)) {
	r.mockCalendarGetCalendarFreeBusyList = f
}

// UnMockCalendarGetCalendarFreeBusyList un-mock CalendarGetCalendarFreeBusyList method
func (r *Mock) UnMockCalendarGetCalendarFreeBusyList() {
	r.mockCalendarGetCalendarFreeBusyList = nil
}

// GetCalendarFreeBusyListReq ...
type GetCalendarFreeBusyListReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TimeMin    string  `json:"time_min,omitempty"`     // 查询时段开始时间，需要url编码, 示例值："2020-10-28T12:00:00+08:00"
	TimeMax    string  `json:"time_max,omitempty"`     // 查询时段结束时间，需要url编码, 示例值："2020-12-28T12:00:00+08:00"
	UserID     *string `json:"user_id,omitempty"`      // 用户user_id，输入时与 room_id 二选一。参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_xxxxxxxxxx"
	RoomID     *string `json:"room_id,omitempty"`      // 会议室room_id，输入时与 user_id 二选一, 示例值："omm_xxxxxxxxxx"
}

// getCalendarFreeBusyListResp ...
type getCalendarFreeBusyListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarFreeBusyListResp `json:"data,omitempty"`
}

// GetCalendarFreeBusyListResp ...
type GetCalendarFreeBusyListResp struct {
	FreebusyList []*GetCalendarFreeBusyListRespFreebusy `json:"freebusy_list,omitempty"` // 日历上请求时间区间内的忙碌时间段信息。
}

// GetCalendarFreeBusyListRespFreebusy ...
type GetCalendarFreeBusyListRespFreebusy struct {
	StartTime string `json:"start_time,omitempty"` // 忙闲信息开始时间，RFC3339 date_time 格式
	EndTime   string `json:"end_time,omitempty"`   // 忙闲信息结束时间，RFC3339 date_time 格式
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendar
//
// 该接口用于以当前身份（应用 / 用户）根据日历 ID 获取日历信息。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份必须对日历有访问权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/get
func (r *CalendarService) GetCalendar(ctx context.Context, request *GetCalendarReq, options ...MethodOptionFunc) (*GetCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendar mock enable")
		return r.cli.mock.mockCalendarGetCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendar",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendar mock CalendarGetCalendar method
func (r *Mock) MockCalendarGetCalendar(f func(ctx context.Context, request *GetCalendarReq, options ...MethodOptionFunc) (*GetCalendarResp, *Response, error)) {
	r.mockCalendarGetCalendar = f
}

// UnMockCalendarGetCalendar un-mock CalendarGetCalendar method
func (r *Mock) UnMockCalendarGetCalendar() {
	r.mockCalendarGetCalendar = nil
}

// GetCalendarReq ...
type GetCalendarReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// getCalendarResp ...
type getCalendarResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarResp `json:"data,omitempty"`
}

// GetCalendarResp ...
type GetCalendarResp struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary      string             `json:"summary,omitempty"`        // 日历标题
	Description  string             `json:"description,omitempty"`    // 日历描述
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: `unknown`：未知类型, `primary`：用户或应用的主日历, `shared`：由用户或应用创建的共享日历, `google`：用户绑定的谷歌日历, `resource`：会议室日历, `exchange`：用户绑定的Exchange日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名，修改或添加后仅对当前身份生效
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份，日历是否已经被标记为删除
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据；三方日历及日程只支持读，不支持写入
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarList
//
// 该接口用于分页获得当前身份（应用 / 用户）的日历列表。
// 身份由 Header Authorization 的 Token 类型决定。
// 调用时首先使用 page_token 分页拉取存量数据，之后使用 sync_token 增量同步变更数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/list
func (r *CalendarService) GetCalendarList(ctx context.Context, request *GetCalendarListReq, options ...MethodOptionFunc) (*GetCalendarListResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarList mock enable")
		return r.cli.mock.mockCalendarGetCalendarList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetCalendarList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getCalendarListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarList mock CalendarGetCalendarList method
func (r *Mock) MockCalendarGetCalendarList(f func(ctx context.Context, request *GetCalendarListReq, options ...MethodOptionFunc) (*GetCalendarListResp, *Response, error)) {
	r.mockCalendarGetCalendarList = f
}

// UnMockCalendarGetCalendarList un-mock CalendarGetCalendarList method
func (r *Mock) UnMockCalendarGetCalendarList() {
	r.mockCalendarGetCalendarList = nil
}

// GetCalendarListReq ...
type GetCalendarListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 一次请求要求返回最大数量，默认500，取值范围为[50. 1000], 示例值：50, 默认值: `500`, 取值范围：`50` ～ `1000`
	PageToken *string `query:"page_token" json:"-"` // 上次请求Response返回的分页标记，首次请求时为空, 示例值："ListCalendarsPageToken_xxx"
	SyncToken *string `query:"sync_token" json:"-"` // 上次请求Response返回的增量同步标记，分页请求未结束时为空, 示例值："ListCalendarsSyncToken_xxx"
}

// getCalendarListResp ...
type getCalendarListResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarListResp `json:"data,omitempty"`
}

// GetCalendarListResp ...
type GetCalendarListResp struct {
	HasMore      bool                           `json:"has_more,omitempty"`      // 是否还有更多数据
	PageToken    string                         `json:"page_token,omitempty"`    // 下次请求需要带上的分页标记，90 天有效期
	SyncToken    string                         `json:"sync_token,omitempty"`    // 下次请求需要带上的增量同步标记，90 天有效期
	CalendarList []*GetCalendarListRespCalendar `json:"calendar_list,omitempty"` // 分页加载的日历数据列表
}

// GetCalendarListRespCalendar ...
type GetCalendarListRespCalendar struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary      string             `json:"summary,omitempty"`        // 日历标题
	Description  string             `json:"description,omitempty"`    // 日历描述
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: `unknown`：未知类型, `primary`：用户或应用的主日历, `shared`：由用户或应用创建的共享日历, `google`：用户绑定的谷歌日历, `resource`：会议室日历, `exchange`：用户绑定的Exchange日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名，修改或添加后仅对当前身份生效
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份，日历是否已经被标记为删除
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据；三方日历及日程只支持读，不支持写入
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateCalendar
//
// 该接口用于以当前身份（应用 / 用户）修改日历信息。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份对日历有 owner 权限时，可修改全局字段：summary, description, permission。
// 当前身份对日历不具有 owner 权限时，仅可修改对自己生效的字段：color, summary_alias。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/patch
func (r *CalendarService) UpdateCalendar(ctx context.Context, request *UpdateCalendarReq, options ...MethodOptionFunc) (*UpdateCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarUpdateCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#UpdateCalendar mock enable")
		return r.cli.mock.mockCalendarUpdateCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "UpdateCalendar",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarUpdateCalendar mock CalendarUpdateCalendar method
func (r *Mock) MockCalendarUpdateCalendar(f func(ctx context.Context, request *UpdateCalendarReq, options ...MethodOptionFunc) (*UpdateCalendarResp, *Response, error)) {
	r.mockCalendarUpdateCalendar = f
}

// UnMockCalendarUpdateCalendar un-mock CalendarUpdateCalendar method
func (r *Mock) UnMockCalendarUpdateCalendar() {
	r.mockCalendarUpdateCalendar = nil
}

// UpdateCalendarReq ...
type UpdateCalendarReq struct {
	CalendarID   string              `path:"calendar_id" json:"-"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
	Summary      *string             `json:"summary,omitempty"`       // 日历标题, 示例值："测试日历", 长度范围：`1` ～ `255` 字符
	Description  *string             `json:"description,omitempty"`   // 日历描述, 示例值："使用开放接口创建日历", 最大长度：`255` 字符
	Permissions  *CalendarPermission `json:"permissions,omitempty"`   // 日历公开范围, 示例值："private", 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        *int64              `json:"color,omitempty"`         // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效, 示例值：-1
	SummaryAlias *string             `json:"summary_alias,omitempty"` // 日历备注名，修改或添加后仅对当前身份生效, 示例值："日历备注名", 最大长度：`255` 字符
}

// updateCalendarResp ...
type updateCalendarResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateCalendarResp `json:"data,omitempty"`
}

// UpdateCalendarResp ...
type UpdateCalendarResp struct {
	Calendar *UpdateCalendarRespCalendar `json:"calendar,omitempty"` // 更新后的日历实体
}

// UpdateCalendarRespCalendar ...
type UpdateCalendarRespCalendar struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary      string             `json:"summary,omitempty"`        // 日历标题
	Description  string             `json:"description,omitempty"`    // 日历描述
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: `unknown`：未知类型, `primary`：用户或应用的主日历, `shared`：由用户或应用创建的共享日历, `google`：用户绑定的谷歌日历, `resource`：会议室日历, `exchange`：用户绑定的Exchange日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名，修改或添加后仅对当前身份生效
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份，日历是否已经被标记为删除
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据；三方日历及日程只支持读，不支持写入
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPrimaryCalendar 获取当前身份的主日历信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/primary
func (r *CalendarService) GetPrimaryCalendar(ctx context.Context, request *GetPrimaryCalendarReq, options ...MethodOptionFunc) (*GetPrimaryCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarGetPrimaryCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetPrimaryCalendar mock enable")
		return r.cli.mock.mockCalendarGetPrimaryCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "GetPrimaryCalendar",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/primary",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getPrimaryCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetPrimaryCalendar mock CalendarGetPrimaryCalendar method
func (r *Mock) MockCalendarGetPrimaryCalendar(f func(ctx context.Context, request *GetPrimaryCalendarReq, options ...MethodOptionFunc) (*GetPrimaryCalendarResp, *Response, error)) {
	r.mockCalendarGetPrimaryCalendar = f
}

// UnMockCalendarGetPrimaryCalendar un-mock CalendarGetPrimaryCalendar method
func (r *Mock) UnMockCalendarGetPrimaryCalendar() {
	r.mockCalendarGetPrimaryCalendar = nil
}

// GetPrimaryCalendarReq ...
type GetPrimaryCalendarReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getPrimaryCalendarResp ...
type getPrimaryCalendarResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetPrimaryCalendarResp `json:"data,omitempty"`
}

// GetPrimaryCalendarResp ...
type GetPrimaryCalendarResp struct {
	Calendars []*GetPrimaryCalendarRespCalendar `json:"calendars,omitempty"` // 主日历列表
}

// GetPrimaryCalendarRespCalendar ...
type GetPrimaryCalendarRespCalendar struct {
	Calendar *GetPrimaryCalendarRespCalendarCalendar `json:"calendar,omitempty"` // 日历实体信息
	UserID   string                                  `json:"user_id,omitempty"`  // 日历的创建者user ID，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
}

// GetPrimaryCalendarRespCalendarCalendar ...
type GetPrimaryCalendarRespCalendarCalendar struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary      string             `json:"summary,omitempty"`        // 日历标题
	Description  string             `json:"description,omitempty"`    // 日历描述
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: `unknown`：未知类型, `primary`：用户或应用的主日历, `shared`：由用户或应用创建的共享日历, `google`：用户绑定的谷歌日历, `resource`：会议室日历, `exchange`：用户绑定的Exchange日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名，修改或添加后仅对当前身份生效
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份，日历是否已经被标记为删除
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据；三方日历及日程只支持读，不支持写入
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchCalendar 该接口用于通过关键字查询公共日历或用户主日历。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/search
func (r *CalendarService) SearchCalendar(ctx context.Context, request *SearchCalendarReq, options ...MethodOptionFunc) (*SearchCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarSearchCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#SearchCalendar mock enable")
		return r.cli.mock.mockCalendarSearchCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "SearchCalendar",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarSearchCalendar mock CalendarSearchCalendar method
func (r *Mock) MockCalendarSearchCalendar(f func(ctx context.Context, request *SearchCalendarReq, options ...MethodOptionFunc) (*SearchCalendarResp, *Response, error)) {
	r.mockCalendarSearchCalendar = f
}

// UnMockCalendarSearchCalendar un-mock CalendarSearchCalendar method
func (r *Mock) UnMockCalendarSearchCalendar() {
	r.mockCalendarSearchCalendar = nil
}

// SearchCalendarReq ...
type SearchCalendarReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："10"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
	Query     string  `json:"query,omitempty"`      // 搜索关键字, 示例值："query words", 长度范围：`1` ～ `200` 字符
}

// searchCalendarResp ...
type searchCalendarResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *SearchCalendarResp `json:"data,omitempty"`
}

// SearchCalendarResp ...
type SearchCalendarResp struct {
	Items     []*SearchCalendarRespItem `json:"items,omitempty"`      // 搜索命中的日历列表
	PageToken string                    `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// SearchCalendarRespItem ...
type SearchCalendarRespItem struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary      string             `json:"summary,omitempty"`        // 日历标题
	Description  string             `json:"description,omitempty"`    // 日历描述
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: `unknown`：未知类型, `primary`：用户或应用的主日历, `shared`：由用户或应用创建的共享日历, `google`：用户绑定的谷歌日历, `resource`：会议室日历, `exchange`：用户绑定的Exchange日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名，修改或添加后仅对当前身份生效
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份，日历是否已经被标记为删除
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据；三方日历及日程只支持读，不支持写入
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeCalendar
//
// 该接口用于以当前身份（应用 / 用户）订阅某个日历。
// 身份由 Header Authorization 的 Token 类型决定。
// - 仅可订阅类型为 primary 或 shared 的公开日历。
// - 可订阅日历数量上限为1000。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/subscribe
func (r *CalendarService) SubscribeCalendar(ctx context.Context, request *SubscribeCalendarReq, options ...MethodOptionFunc) (*SubscribeCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarSubscribeCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#SubscribeCalendar mock enable")
		return r.cli.mock.mockCalendarSubscribeCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "SubscribeCalendar",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/subscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(subscribeCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarSubscribeCalendar mock CalendarSubscribeCalendar method
func (r *Mock) MockCalendarSubscribeCalendar(f func(ctx context.Context, request *SubscribeCalendarReq, options ...MethodOptionFunc) (*SubscribeCalendarResp, *Response, error)) {
	r.mockCalendarSubscribeCalendar = f
}

// UnMockCalendarSubscribeCalendar un-mock CalendarSubscribeCalendar method
func (r *Mock) UnMockCalendarSubscribeCalendar() {
	r.mockCalendarSubscribeCalendar = nil
}

// SubscribeCalendarReq ...
type SubscribeCalendarReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// subscribeCalendarResp ...
type subscribeCalendarResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeCalendarResp `json:"data,omitempty"`
}

// SubscribeCalendarResp ...
type SubscribeCalendarResp struct {
	Calendar *SubscribeCalendarRespCalendar `json:"calendar,omitempty"` // 订阅的日历实体
}

// SubscribeCalendarRespCalendar ...
type SubscribeCalendarRespCalendar struct {
	CalendarID   string             `json:"calendar_id,omitempty"`    // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction)
	Summary      string             `json:"summary,omitempty"`        // 日历标题
	Description  string             `json:"description,omitempty"`    // 日历描述
	Permissions  CalendarPermission `json:"permissions,omitempty"`    // 日历公开范围, 可选值有: `private`：私密, `show_only_free_busy`：仅展示忙闲信息, `public`：他人可查看日程详情
	Color        int64              `json:"color,omitempty"`          // 日历颜色，颜色RGB值的int32表示。客户端展示时会映射到色板上最接近的一种颜色。仅对当前身份生效
	Type         CalendarType       `json:"type,omitempty"`           // 日历类型, 可选值有: `unknown`：未知类型, `primary`：用户或应用的主日历, `shared`：由用户或应用创建的共享日历, `google`：用户绑定的谷歌日历, `resource`：会议室日历, `exchange`：用户绑定的Exchange日历
	SummaryAlias string             `json:"summary_alias,omitempty"`  // 日历备注名，修改或添加后仅对当前身份生效
	IsDeleted    bool               `json:"is_deleted,omitempty"`     // 对于当前身份，日历是否已经被标记为删除
	IsThirdParty bool               `json:"is_third_party,omitempty"` // 当前日历是否是第三方数据；三方日历及日程只支持读，不支持写入
	Role         CalendarRole       `json:"role,omitempty"`           // 当前身份对于该日历的访问权限, 可选值有: `unknown`：未知权限, `free_busy_reader`：游客，只能看到忙碌/空闲信息, `reader`：订阅者，查看所有日程详情, `writer`：编辑者，创建及修改日程, `owner`：管理员，管理日历及共享设置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeCalendarChangeEvent 该接口用于以用户身份订阅当前身份下日历列表中的所有日历变更。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/subscription
func (r *CalendarService) SubscribeCalendarChangeEvent(ctx context.Context, request *SubscribeCalendarChangeEventReq, options ...MethodOptionFunc) (*SubscribeCalendarChangeEventResp, *Response, error) {
	if r.cli.mock.mockCalendarSubscribeCalendarChangeEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#SubscribeCalendarChangeEvent mock enable")
		return r.cli.mock.mockCalendarSubscribeCalendarChangeEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "SubscribeCalendarChangeEvent",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/subscription",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(subscribeCalendarChangeEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarSubscribeCalendarChangeEvent mock CalendarSubscribeCalendarChangeEvent method
func (r *Mock) MockCalendarSubscribeCalendarChangeEvent(f func(ctx context.Context, request *SubscribeCalendarChangeEventReq, options ...MethodOptionFunc) (*SubscribeCalendarChangeEventResp, *Response, error)) {
	r.mockCalendarSubscribeCalendarChangeEvent = f
}

// UnMockCalendarSubscribeCalendarChangeEvent un-mock CalendarSubscribeCalendarChangeEvent method
func (r *Mock) UnMockCalendarSubscribeCalendarChangeEvent() {
	r.mockCalendarSubscribeCalendarChangeEvent = nil
}

// SubscribeCalendarChangeEventReq ...
type SubscribeCalendarChangeEventReq struct {
}

// subscribeCalendarChangeEventResp ...
type subscribeCalendarChangeEventResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeCalendarChangeEventResp `json:"data,omitempty"`
}

// SubscribeCalendarChangeEventResp ...
type SubscribeCalendarChangeEventResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateCalendarTimeoffEvent 为指定用户创建一个请假日程，可以是一个普通请假日程，也可以是一个全天日程。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/create
func (r *CalendarService) CreateCalendarTimeoffEvent(ctx context.Context, request *CreateCalendarTimeoffEventReq, options ...MethodOptionFunc) (*CreateCalendarTimeoffEventResp, *Response, error) {
	if r.cli.mock.mockCalendarCreateCalendarTimeoffEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#CreateCalendarTimeoffEvent mock enable")
		return r.cli.mock.mockCalendarCreateCalendarTimeoffEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "CreateCalendarTimeoffEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/timeoff_events",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createCalendarTimeoffEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarCreateCalendarTimeoffEvent mock CalendarCreateCalendarTimeoffEvent method
func (r *Mock) MockCalendarCreateCalendarTimeoffEvent(f func(ctx context.Context, request *CreateCalendarTimeoffEventReq, options ...MethodOptionFunc) (*CreateCalendarTimeoffEventResp, *Response, error)) {
	r.mockCalendarCreateCalendarTimeoffEvent = f
}

// UnMockCalendarCreateCalendarTimeoffEvent un-mock CalendarCreateCalendarTimeoffEvent method
func (r *Mock) UnMockCalendarCreateCalendarTimeoffEvent() {
	r.mockCalendarCreateCalendarTimeoffEvent = nil
}

// CreateCalendarTimeoffEventReq ...
type CreateCalendarTimeoffEventReq struct {
	UserIDType  *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID      string  `json:"user_id,omitempty"`      // 用户id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_XXXXXXXXXX"
	Timezone    string  `json:"timezone,omitempty"`     // 时区, 示例值："Asia/Shanghai"
	StartTime   string  `json:"start_time,omitempty"`   // 休假开始时间: 有时间戳(1609430400)和日期(2021-01-01)两种格式，其它格式无效；,时间戳格式是按小时休假日程，日期格式是全天休假日程；,start_time与end_time格式需保持一致，否则无效。, 示例值："2021-01-01"
	EndTime     string  `json:"end_time,omitempty"`     // 休假结束时间：,有时间戳(1609430400)和日期(2021-01-01)两种格式，其它格式无效；,时间戳格式是按小时休假日程，日期格式是全天休假日程；,start_time与end_time格式需保持一致，否则无效。, 示例值："2021-01-01"
	Title       *string `json:"title,omitempty"`        // 自定义请假日程标题，没有设置则为默认日程标题, 示例值："请假中(全天) / 1-Day Time Off"
	Description *string `json:"description,omitempty"`  // 自定义请假日程描述，没有设置则为默认日程描述, 示例值："若删除此日程，飞书中相应的“请假”标签将自动消失，而请假系统中的休假申请不会被撤销。"
}

// createCalendarTimeoffEventResp ...
type createCalendarTimeoffEventResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateCalendarTimeoffEventResp `json:"data,omitempty"`
}

// CreateCalendarTimeoffEventResp ...
type CreateCalendarTimeoffEventResp struct {
	TimeoffEventID string `json:"timeoff_event_id,omitempty"` // 请假日程ID。参见[请假日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/introduction#b6611a02)
	UserID         string `json:"user_id,omitempty"`          // 用户id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Timezone       string `json:"timezone,omitempty"`         // 时区
	StartTime      string `json:"start_time,omitempty"`       // 休假开始时间: 有时间戳(1609430400)和日期(2021-01-01)两种格式，其它格式无效；,时间戳格式是按小时休假日程，日期格式是全天休假日程；,start_time与end_time格式需保持一致，否则无效。
	EndTime        string `json:"end_time,omitempty"`         // 休假结束时间：,有时间戳(1609430400)和日期(2021-01-01)两种格式，其它格式无效；,时间戳格式是按小时休假日程，日期格式是全天休假日程；,start_time与end_time格式需保持一致，否则无效。
	Title          string `json:"title,omitempty"`            // 自定义请假日程标题，没有设置则为默认日程标题
	Description    string `json:"description,omitempty"`      // 自定义请假日程描述，没有设置则为默认日程描述
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteCalendarTimeoffEvent 删除一个指定的请假日程，请假日程删除，用户个人签名页的请假信息也会消失。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/delete
func (r *CalendarService) DeleteCalendarTimeoffEvent(ctx context.Context, request *DeleteCalendarTimeoffEventReq, options ...MethodOptionFunc) (*DeleteCalendarTimeoffEventResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarTimeoffEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendarTimeoffEvent mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarTimeoffEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "DeleteCalendarTimeoffEvent",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/timeoff_events/:timeoff_event_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteCalendarTimeoffEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendarTimeoffEvent mock CalendarDeleteCalendarTimeoffEvent method
func (r *Mock) MockCalendarDeleteCalendarTimeoffEvent(f func(ctx context.Context, request *DeleteCalendarTimeoffEventReq, options ...MethodOptionFunc) (*DeleteCalendarTimeoffEventResp, *Response, error)) {
	r.mockCalendarDeleteCalendarTimeoffEvent = f
}

// UnMockCalendarDeleteCalendarTimeoffEvent un-mock CalendarDeleteCalendarTimeoffEvent method
func (r *Mock) UnMockCalendarDeleteCalendarTimeoffEvent() {
	r.mockCalendarDeleteCalendarTimeoffEvent = nil
}

// DeleteCalendarTimeoffEventReq ...
type DeleteCalendarTimeoffEventReq struct {
	TimeoffEventID string `path:"timeoff_event_id" json:"-"` // 休假申请的唯一标识id。参见[请假日程ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/introduction#b6611a02), 示例值："timeoff:XXXXXX-XXXX-0917-1623-aa493d591a39"
}

// deleteCalendarTimeoffEventResp ...
type deleteCalendarTimeoffEventResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarTimeoffEventResp `json:"data,omitempty"`
}

// DeleteCalendarTimeoffEventResp ...
type DeleteCalendarTimeoffEventResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnsubscribeCalendar
//
// 该接口用于以当前身份（应用 / 用户）取消对某日历的订阅状态。
// 身份由 Header Authorization 的 Token 类型决定。
// 仅可操作已经被当前身份订阅的日历。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/unsubscribe
func (r *CalendarService) UnsubscribeCalendar(ctx context.Context, request *UnsubscribeCalendarReq, options ...MethodOptionFunc) (*UnsubscribeCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarUnsubscribeCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#UnsubscribeCalendar mock enable")
		return r.cli.mock.mockCalendarUnsubscribeCalendar(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Calendar",
		API:                   "UnsubscribeCalendar",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/calendar/v4/calendars/:calendar_id/unsubscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(unsubscribeCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarUnsubscribeCalendar mock CalendarUnsubscribeCalendar method
func (r *Mock) MockCalendarUnsubscribeCalendar(f func(ctx context.Context, request *UnsubscribeCalendarReq, options ...MethodOptionFunc) (*UnsubscribeCalendarResp, *Response, error)) {
	r.mockCalendarUnsubscribeCalendar = f
}

// UnMockCalendarUnsubscribeCalendar un-mock CalendarUnsubscribeCalendar method
func (r *Mock) UnMockCalendarUnsubscribeCalendar() {
	r.mockCalendarUnsubscribeCalendar = nil
}

// UnsubscribeCalendarReq ...
type UnsubscribeCalendarReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID。参见[日历ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/introduction), 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

// unsubscribeCalendarResp ...
type unsubscribeCalendarResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UnsubscribeCalendarResp `json:"data,omitempty"`
}

// UnsubscribeCalendarResp ...
type UnsubscribeCalendarResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateCalendarExchangeBinding 本接口将Exchange账户绑定到飞书账户，进而支持Exchange日历的导入
//
// 操作用户需要是企业超级管理员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/create
func (r *CalendarService) CreateCalendarExchangeBinding(ctx context.Context, request *CreateCalendarExchangeBindingReq, options ...MethodOptionFunc) (*CreateCalendarExchangeBindingResp, *Response, error) {
	if r.cli.mock.mockCalendarCreateCalendarExchangeBinding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#CreateCalendarExchangeBinding mock enable")
		return r.cli.mock.mockCalendarCreateCalendarExchangeBinding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "CreateCalendarExchangeBinding",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/exchange_bindings",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(createCalendarExchangeBindingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarCreateCalendarExchangeBinding mock CalendarCreateCalendarExchangeBinding method
func (r *Mock) MockCalendarCreateCalendarExchangeBinding(f func(ctx context.Context, request *CreateCalendarExchangeBindingReq, options ...MethodOptionFunc) (*CreateCalendarExchangeBindingResp, *Response, error)) {
	r.mockCalendarCreateCalendarExchangeBinding = f
}

// UnMockCalendarCreateCalendarExchangeBinding un-mock CalendarCreateCalendarExchangeBinding method
func (r *Mock) UnMockCalendarCreateCalendarExchangeBinding() {
	r.mockCalendarCreateCalendarExchangeBinding = nil
}

// CreateCalendarExchangeBindingReq ...
type CreateCalendarExchangeBindingReq struct {
	UserIDType      *IDType `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AdminAccount    *string `json:"admin_account,omitempty"`    // admin账户, 示例值："email_admin_example@outlook.com", 长度范围：`1` ～ `500` 字符
	ExchangeAccount *string `json:"exchange_account,omitempty"` // 用户绑定的exchange账户, 示例值："email_account_example@outlook.com", 长度范围：`1` ～ `500` 字符
	UserID          *string `json:"user_id,omitempty"`          // exchange账户绑定user唯一标识id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_xxxxxxxxxxxxxxxxxx"
}

// createCalendarExchangeBindingResp ...
type createCalendarExchangeBindingResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *CreateCalendarExchangeBindingResp `json:"data,omitempty"`
}

// CreateCalendarExchangeBindingResp ...
type CreateCalendarExchangeBindingResp struct {
	AdminAccount      string `json:"admin_account,omitempty"`       // admin账户, 字段权限要求: 获取用户邮箱信息
	ExchangeAccount   string `json:"exchange_account,omitempty"`    // 用户绑定的exchange账户, 字段权限要求: 获取用户邮箱信息
	UserID            string `json:"user_id,omitempty"`             // exchange账户绑定user唯一标识id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Status            string `json:"status,omitempty"`              // exchange账户同步状态, 可选值有: `doing`：日历正在同步, `cal_done`：日历同步完成, `timespan_done`：近期时间段同步完成, `done`：日程同步完成, `err`：同步错误
	ExchangeBindingID string `json:"exchange_binding_id,omitempty"` // exchange绑定唯一标识id。参见[exchange绑定ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/introduction#12533d5e)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteCalendarExchangeBinding 本接口解除Exchange账户和飞书账户的绑定关系，Exchange账户解除绑定后才能绑定其他飞书账户
//
// 操作用户需要是企业超级管理员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/delete
func (r *CalendarService) DeleteCalendarExchangeBinding(ctx context.Context, request *DeleteCalendarExchangeBindingReq, options ...MethodOptionFunc) (*DeleteCalendarExchangeBindingResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarExchangeBinding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendarExchangeBinding mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarExchangeBinding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "DeleteCalendarExchangeBinding",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deleteCalendarExchangeBindingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarDeleteCalendarExchangeBinding mock CalendarDeleteCalendarExchangeBinding method
func (r *Mock) MockCalendarDeleteCalendarExchangeBinding(f func(ctx context.Context, request *DeleteCalendarExchangeBindingReq, options ...MethodOptionFunc) (*DeleteCalendarExchangeBindingResp, *Response, error)) {
	r.mockCalendarDeleteCalendarExchangeBinding = f
}

// UnMockCalendarDeleteCalendarExchangeBinding un-mock CalendarDeleteCalendarExchangeBinding method
func (r *Mock) UnMockCalendarDeleteCalendarExchangeBinding() {
	r.mockCalendarDeleteCalendarExchangeBinding = nil
}

// DeleteCalendarExchangeBindingReq ...
type DeleteCalendarExchangeBindingReq struct {
	ExchangeBindingID string `path:"exchange_binding_id" json:"-"` // exchange绑定唯一标识id。参见[exchange绑定ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/introduction#12533d5e), 示例值："ZW1haWxfYWRtaW5fZXhhbXBsZUBvdXRsb29rLmNvbSBlbWFpbF9hY2NvdW50X2V4YW1wbGVAb3V0bG9vay5jb20="
}

// deleteCalendarExchangeBindingResp ...
type deleteCalendarExchangeBindingResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarExchangeBindingResp `json:"data,omitempty"`
}

// DeleteCalendarExchangeBindingResp ...
type DeleteCalendarExchangeBindingResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetCalendarExchangeBinding 本接口获取Exchange账户的绑定状态，包括exchange日历是否同步完成。
//
// 操作用户需要是企业超级管理员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/get
func (r *CalendarService) GetCalendarExchangeBinding(ctx context.Context, request *GetCalendarExchangeBindingReq, options ...MethodOptionFunc) (*GetCalendarExchangeBindingResp, *Response, error) {
	if r.cli.mock.mockCalendarGetCalendarExchangeBinding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GetCalendarExchangeBinding mock enable")
		return r.cli.mock.mockCalendarGetCalendarExchangeBinding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "GetCalendarExchangeBinding",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/exchange_bindings/:exchange_binding_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getCalendarExchangeBindingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGetCalendarExchangeBinding mock CalendarGetCalendarExchangeBinding method
func (r *Mock) MockCalendarGetCalendarExchangeBinding(f func(ctx context.Context, request *GetCalendarExchangeBindingReq, options ...MethodOptionFunc) (*GetCalendarExchangeBindingResp, *Response, error)) {
	r.mockCalendarGetCalendarExchangeBinding = f
}

// UnMockCalendarGetCalendarExchangeBinding un-mock CalendarGetCalendarExchangeBinding method
func (r *Mock) UnMockCalendarGetCalendarExchangeBinding() {
	r.mockCalendarGetCalendarExchangeBinding = nil
}

// GetCalendarExchangeBindingReq ...
type GetCalendarExchangeBindingReq struct {
	UserIDType        *IDType `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ExchangeBindingID string  `path:"exchange_binding_id" json:"-"` // exchange绑定唯一标识id。参见[exchange绑定ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/introduction#12533d5e), 示例值："ZW1haWxfYWRtaW5fZXhhbXBsZUBvdXRsb29rLmNvbSBlbWFpbF9hY2NvdW50X2V4YW1wbGVAb3V0bG9vay5jb20="
}

// getCalendarExchangeBindingResp ...
type getCalendarExchangeBindingResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetCalendarExchangeBindingResp `json:"data,omitempty"`
}

// GetCalendarExchangeBindingResp ...
type GetCalendarExchangeBindingResp struct {
	AdminAccount      string `json:"admin_account,omitempty"`       // admin账户, 字段权限要求: 获取用户邮箱信息
	ExchangeAccount   string `json:"exchange_account,omitempty"`    // 用户绑定的exchange账户, 字段权限要求: 获取用户邮箱信息
	UserID            string `json:"user_id,omitempty"`             // exchange账户绑定user唯一标识id，参见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Status            string `json:"status,omitempty"`              // exchange账户同步状态, 可选值有: `doing`：日历正在同步, `cal_done`：日历同步完成, `timespan_done`：近期时间段同步完成, `done`：日程同步完成, `err`：同步错误
	ExchangeBindingID string `json:"exchange_binding_id,omitempty"` // exchange绑定唯一标识id。参见[exchange绑定ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/exchange_binding/introduction#12533d5e)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GenerateCaldavConf 用于为当前用户生成一个CalDAV账号密码，用于将飞书日历信息同步到本地设备日历。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/setting/generate_caldav_conf
func (r *CalendarService) GenerateCaldavConf(ctx context.Context, request *GenerateCaldavConfReq, options ...MethodOptionFunc) (*GenerateCaldavConfResp, *Response, error) {
	if r.cli.mock.mockCalendarGenerateCaldavConf != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#GenerateCaldavConf mock enable")
		return r.cli.mock.mockCalendarGenerateCaldavConf(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Calendar",
		API:                 "GenerateCaldavConf",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/calendar/v4/settings/generate_caldav_conf",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(generateCaldavConfResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockCalendarGenerateCaldavConf mock CalendarGenerateCaldavConf method
func (r *Mock) MockCalendarGenerateCaldavConf(f func(ctx context.Context, request *GenerateCaldavConfReq, options ...MethodOptionFunc) (*GenerateCaldavConfResp, *Response, error)) {
	r.mockCalendarGenerateCaldavConf = f
}

// UnMockCalendarGenerateCaldavConf un-mock CalendarGenerateCaldavConf method
func (r *Mock) UnMockCalendarGenerateCaldavConf() {
	r.mockCalendarGenerateCaldavConf = nil
}

// GenerateCaldavConfReq ...
type GenerateCaldavConfReq struct {
	DeviceName *string `json:"device_name,omitempty"` // 需要同步日历的设备名，在日历中展示用来管理密码, 示例值："iPhone", 最大长度：`100` 字符
}

// generateCaldavConfResp ...
type generateCaldavConfResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GenerateCaldavConfResp `json:"data,omitempty"`
}

// GenerateCaldavConfResp ...
type GenerateCaldavConfResp struct {
	Password      string `json:"password,omitempty"`       // caldav密码
	UserName      string `json:"user_name,omitempty"`      // caldav用户名
	ServerAddress string `json:"server_address,omitempty"` // 服务器地址
	DeviceName    string `json:"device_name,omitempty"`    // 设备名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatAnnouncement 获取会话中的群公告信息，公告信息格式与[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/get
func (r *ChatService) GetChatAnnouncement(ctx context.Context, request *GetChatAnnouncementReq, options ...MethodOptionFunc) (*GetChatAnnouncementResp, *Response, error) {
	if r.cli.mock.mockChatGetChatAnnouncement != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatAnnouncement mock enable")
		return r.cli.mock.mockChatGetChatAnnouncement(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatAnnouncement",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/announcement",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatAnnouncementResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatAnnouncement mock ChatGetChatAnnouncement method
func (r *Mock) MockChatGetChatAnnouncement(f func(ctx context.Context, request *GetChatAnnouncementReq, options ...MethodOptionFunc) (*GetChatAnnouncementResp, *Response, error)) {
	r.mockChatGetChatAnnouncement = f
}

// UnMockChatGetChatAnnouncement un-mock ChatGetChatAnnouncement method
func (r *Mock) UnMockChatGetChatAnnouncement() {
	r.mockChatGetChatAnnouncement = nil
}

// GetChatAnnouncementReq ...
type GetChatAnnouncementReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	ChatID     string  `path:"chat_id" json:"-"`       // 待获取公告的群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_5ad11d72b830411d72b836c20"
}

// getChatAnnouncementResp ...
type getChatAnnouncementResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetChatAnnouncementResp `json:"data,omitempty"`
}

// GetChatAnnouncementResp ...
type GetChatAnnouncementResp struct {
	Content        string `json:"content,omitempty"`          // 云文档序列化信息
	Revision       string `json:"revision,omitempty"`         // 文档当前版本号 纯数字
	CreateTime     string `json:"create_time,omitempty"`      // 文档生成的时间戳（秒）
	UpdateTime     string `json:"update_time,omitempty"`      // 文档更新的时间戳（秒）
	OwnerIDType    IDType `json:"owner_id_type,omitempty"`    // 文档所有者的 ID 类型, 如果所有者是用户，则与查询参数中的user_id_type 相同；取值为`open_id` `user_id` `union_id` 其中之一，不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 如果所有者是机器人，为机器人应用的 `app_id`，详情参见  [获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g), 可选值有: `user_id`：以 user_id 来识别用户, `union_id`：以 union_id 来识别用户, `open_id`：以 open_id 来识别用户, `app_id`：以 app_id 来识别机器人应用
	OwnerID        string `json:"owner_id,omitempty"`         // 文档所有者 ID，ID 值与owner_id_type 中的ID类型对应
	ModifierIDType IDType `json:"modifier_id_type,omitempty"` // 文档最新修改者 id 类型, - 如果修改者是用户，则与查询参数中的user_id_type 相同；取值为`open_id` `user_id` `union_id` 其中之一，不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 如果修改者是机器人，为机器人应用的 `app_id`，详情参见  [获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g), 可选值有: `user_id`：以 user_id 来识别用户, `union_id`：以 union_id 来识别用户, `open_id`：以 open_id 来识别用户, `app_id`：以 app_id 来识别应用
	ModifierID     string `json:"modifier_id,omitempty"`      // 文档最新修改者 ID，ID 值与modifier_id_type 中的ID类型对应
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateChatAnnouncement 更新会话中的群公告信息，更新公告信息的格式和更新[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 若群开启了 [仅群主和群管理员可编辑群信息] 配置，群主/群管理员 或 创建群组且具备 [更新应用所创建群的群信息] 权限的机器人，可更新群公告
// - 若群未开启 [仅群主和群管理员可编辑群信息] 配置，所有成员可以更新群公告
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/patch
func (r *ChatService) UpdateChatAnnouncement(ctx context.Context, request *UpdateChatAnnouncementReq, options ...MethodOptionFunc) (*UpdateChatAnnouncementResp, *Response, error) {
	if r.cli.mock.mockChatUpdateChatAnnouncement != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#UpdateChatAnnouncement mock enable")
		return r.cli.mock.mockChatUpdateChatAnnouncement(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "UpdateChatAnnouncement",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/announcement",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateChatAnnouncementResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatUpdateChatAnnouncement mock ChatUpdateChatAnnouncement method
func (r *Mock) MockChatUpdateChatAnnouncement(f func(ctx context.Context, request *UpdateChatAnnouncementReq, options ...MethodOptionFunc) (*UpdateChatAnnouncementResp, *Response, error)) {
	r.mockChatUpdateChatAnnouncement = f
}

// UnMockChatUpdateChatAnnouncement un-mock ChatUpdateChatAnnouncement method
func (r *Mock) UnMockChatUpdateChatAnnouncement() {
	r.mockChatUpdateChatAnnouncement = nil
}

// UpdateChatAnnouncementReq ...
type UpdateChatAnnouncementReq struct {
	ChatID   string   `path:"chat_id" json:"-"`   // 待修改公告的群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_5ad11d72b830411d72b836c20"
	Revision string   `json:"revision,omitempty"` // 文档当前版本号 int64 类型，get 接口会返回, 示例值："12"
	Requests []string `json:"requests,omitempty"` // 修改文档请求的序列化字段,更新公告信息的格式和更新[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同, 示例值：xxx
}

// updateChatAnnouncementResp ...
type updateChatAnnouncementResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateChatAnnouncementResp `json:"data,omitempty"`
}

// UpdateChatAnnouncementResp ...
type UpdateChatAnnouncementResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateChat 创建群并设置群头像、群名、群描述等。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 本接口只支持创建群，如果需要拉用户或者机器人入群参考 [将用户或机器人拉入群聊](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create)接口
// - 每次请求，最多拉 50 个用户或者 5 个机器人，并且群组最多容纳 15 个机器人
// - 拉机器人入群请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create
func (r *ChatService) CreateChat(ctx context.Context, request *CreateChatReq, options ...MethodOptionFunc) (*CreateChatResp, *Response, error) {
	if r.cli.mock.mockChatCreateChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#CreateChat mock enable")
		return r.cli.mock.mockChatCreateChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "CreateChat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatCreateChat mock ChatCreateChat method
func (r *Mock) MockChatCreateChat(f func(ctx context.Context, request *CreateChatReq, options ...MethodOptionFunc) (*CreateChatResp, *Response, error)) {
	r.mockChatCreateChat = f
}

// UnMockChatCreateChat un-mock ChatCreateChat method
func (r *Mock) UnMockChatCreateChat() {
	r.mockChatCreateChat = nil
}

// CreateChatReq ...
type CreateChatReq struct {
	UserIDType             *IDType             `query:"user_id_type" json:"-"`             // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	SetBotManager          *bool               `query:"set_bot_manager" json:"-"`          // 如果选择了设置群主为指定用户，可以选择是否同时设置创建此群的机器人为管理员，此标志位用于标记是否设置创建群的机器人为管理员, 示例值：false
	Avatar                 *string             `json:"avatar,omitempty"`                   // 群头像对应的 Image Key，可通过[上传图片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)获取（注意：上传图片的 [image_type] 需要指定为 [avatar]）, 示例值："default-avatar_44ae0ca3-e140-494b-956f-78091e348435"
	Name                   *string             `json:"name,omitempty"`                     // 群名称, 示例值："测试群名称"
	Description            *string             `json:"description,omitempty"`              // 群描述, 示例值："测试群描述"
	I18nNames              *I18nNames          `json:"i18n_names,omitempty"`               // 群国际化名称
	OwnerID                *string             `json:"owner_id,omitempty"`                 // 创建群时指定的群主，不填时指定建群的机器人为群主。,群主 ID，ID值与查询参数中的 user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："4d7a3c6g"
	UserIDList             []string            `json:"user_id_list,omitempty"`             // 创建群时邀请的群成员，id 类型为 user_id_type, 示例值：["4d7a3c6g"], 最大长度：`50`
	BotIDList              []string            `json:"bot_id_list,omitempty"`              // 创建群时邀请的群机器人, 示例值：["cli_a10fbf7e94b8d01d"], 最大长度：`5`
	ChatMode               *ChatMode           `json:"chat_mode,omitempty"`                // 群模式, 可选值有: `group`：群组, 示例值："group"
	ChatType               *ChatType           `json:"chat_type,omitempty"`                // 群类型, 可选值有: `private`：私有群, `public`：公开群, 示例值："private"
	External               *bool               `json:"external,omitempty"`                 // 是否是外部群, 示例值：false
	JoinMessageVisibility  *MessageVisibility  `json:"join_message_visibility,omitempty"`  // 入群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见, 示例值："all_members"
	LeaveMessageVisibility *MessageVisibility  `json:"leave_message_visibility,omitempty"` // 退群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见, 示例值："all_members"
	MembershipApproval     *MembershipApproval `json:"membership_approval,omitempty"`      // 加群审批, 可选值有: `no_approval_required`：无需审批, `approval_required`：需要审批, 示例值："no_approval_required"
}

// createChatResp ...
type createChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *CreateChatResp `json:"data,omitempty"`
}

// CreateChatResp ...
type CreateChatResp struct {
	ChatID                 string               `json:"chat_id,omitempty"`                  // 群 ID，详情参见：[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar                 string               `json:"avatar,omitempty"`                   // 群头像 URL
	Name                   string               `json:"name,omitempty"`                     // 群名称
	Description            string               `json:"description,omitempty"`              // 群描述
	I18nNames              *I18nNames           `json:"i18n_names,omitempty"`               // 群国际化名称
	OwnerID                string               `json:"owner_id,omitempty"`                 // 群主 ID，ID值与查询参数中的 user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),当群主是机器人时，该字段不返回
	OwnerIDType            IDType               `json:"owner_id_type,omitempty"`            // 群主 ID 对应的ID类型，与查询参数中的 user_id_type 相同。取值为：`open_id`、`user_id`、`union_id`其中之一。,当群主是机器人时，该字段不返回
	AddMemberPermission    AddMemberPermission  `json:"add_member_permission,omitempty"`    // 拉 用户或机器人 入群权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员
	ShareCardPermission    ShareCardPermission  `json:"share_card_permission,omitempty"`    // 群分享权限, 可选值有: `allowed`：允许, `not_allowed`：不允许
	AtAllPermission        AtAllPermission      `json:"at_all_permission,omitempty"`        // at 所有人权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员
	EditPermission         EditPermission       `json:"edit_permission,omitempty"`          // 群编辑权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员
	ChatMode               ChatMode             `json:"chat_mode,omitempty"`                // 群模式, 可选值有: `group`：群组
	ChatType               ChatType             `json:"chat_type,omitempty"`                // 群类型, 可选值有: `private`：私有群, `public`：公开群
	ChatTag                string               `json:"chat_tag,omitempty"`                 // 群标签，如有多个，则按照下列顺序返回第一个, 可选值有: `inner`：内部群, `tenant`：公司群, `department`：部门群, `edu`：教育群, `meeting`：会议群, `customer_service`：客服群
	External               bool                 `json:"external,omitempty"`                 // 是否是外部群
	TenantKey              string               `json:"tenant_key,omitempty"`               // 租户在飞书上的唯一标识，用来换取对应的tenant_access_token，也可以用作租户在应用里面的唯一标识
	JoinMessageVisibility  MessageVisibility    `json:"join_message_visibility,omitempty"`  // 入群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见
	LeaveMessageVisibility MessageVisibility    `json:"leave_message_visibility,omitempty"` // 出群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见
	MembershipApproval     MembershipApproval   `json:"membership_approval,omitempty"`      // 加群审批, 可选值有: `no_approval_required`：无需审批, `approval_required`：需要审批
	ModerationPermission   ModerationPermission `json:"moderation_permission,omitempty"`    // 发言权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员, `moderator_list`：指定群成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteChat 解散群组
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 如果使用tenant_access_token，需要机器人是群的创建者且具备[更新应用所创建群的群信息]权限才可解散群
// - 如果使用user_access_token，需要对应的用户是群主才可解散群
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/delete
func (r *ChatService) DeleteChat(ctx context.Context, request *DeleteChatReq, options ...MethodOptionFunc) (*DeleteChatResp, *Response, error) {
	if r.cli.mock.mockChatDeleteChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#DeleteChat mock enable")
		return r.cli.mock.mockChatDeleteChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "DeleteChat",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatDeleteChat mock ChatDeleteChat method
func (r *Mock) MockChatDeleteChat(f func(ctx context.Context, request *DeleteChatReq, options ...MethodOptionFunc) (*DeleteChatResp, *Response, error)) {
	r.mockChatDeleteChat = f
}

// UnMockChatDeleteChat un-mock ChatDeleteChat method
func (r *Mock) UnMockChatDeleteChat() {
	r.mockChatDeleteChat = nil
}

// DeleteChatReq ...
type DeleteChatReq struct {
	ChatID string `path:"chat_id" json:"-"` // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// deleteChatResp ...
type deleteChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteChatResp `json:"data,omitempty"`
}

// DeleteChatResp ...
type DeleteChatResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChat 获取群名称、群描述、群头像、群主 ID 等群基本信息。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 机器人或授权用户必须在群里（否则只会返回群名称、群头像等基本信息）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get
func (r *ChatService) GetChat(ctx context.Context, request *GetChatReq, options ...MethodOptionFunc) (*GetChatResp, *Response, error) {
	if r.cli.mock.mockChatGetChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChat mock enable")
		return r.cli.mock.mockChatGetChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChat mock ChatGetChat method
func (r *Mock) MockChatGetChat(f func(ctx context.Context, request *GetChatReq, options ...MethodOptionFunc) (*GetChatResp, *Response, error)) {
	r.mockChatGetChat = f
}

// UnMockChatGetChat un-mock ChatGetChat method
func (r *Mock) UnMockChatGetChat() {
	r.mockChatGetChat = nil
}

// GetChatReq ...
type GetChatReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ChatID     string  `path:"chat_id" json:"-"`       // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// getChatResp ...
type getChatResp struct {
	Code int64        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string       `json:"msg,omitempty"`  // 错误描述
	Data *GetChatResp `json:"data,omitempty"`
}

// GetChatResp ...
type GetChatResp struct {
	Avatar                 string               `json:"avatar,omitempty"`                   // 群头像 URL
	Name                   string               `json:"name,omitempty"`                     // 群名称
	Description            string               `json:"description,omitempty"`              // 群描述
	I18nNames              *I18nNames           `json:"i18n_names,omitempty"`               // 群国际化名称
	AddMemberPermission    AddMemberPermission  `json:"add_member_permission,omitempty"`    // 群成员添加权限(all_members/only_owner)
	ShareCardPermission    ShareCardPermission  `json:"share_card_permission,omitempty"`    // 群分享权限(allowed/not_allowed)
	AtAllPermission        AtAllPermission      `json:"at_all_permission,omitempty"`        // at 所有人权限(all_members/only_owner)
	EditPermission         EditPermission       `json:"edit_permission,omitempty"`          // 群编辑权限(all_members/only_owner)
	OwnerIDType            IDType               `json:"owner_id_type,omitempty"`            // 群主 ID 的类型(open_id/user_id/union_id)，群主是机器人时，不返回该字段。
	OwnerID                string               `json:"owner_id,omitempty"`                 // 群主 ID，群主是机器人时，不返回该字段。
	ChatMode               ChatMode             `json:"chat_mode,omitempty"`                // 群模式(group/topic/p2p)
	ChatType               ChatType             `json:"chat_type,omitempty"`                // 群类型(private/public)
	ChatTag                string               `json:"chat_tag,omitempty"`                 // 优先级最高的一个群tag(inner/tenant/department/edu/meeting/customer_service)
	JoinMessageVisibility  MessageVisibility    `json:"join_message_visibility,omitempty"`  // 入群消息可见性(only_owner/all_members/not_anyone)
	LeaveMessageVisibility MessageVisibility    `json:"leave_message_visibility,omitempty"` // 出群消息可见性(only_owner/all_members/not_anyone)
	MembershipApproval     MembershipApproval   `json:"membership_approval,omitempty"`      // 加群审批(no_approval_required/approval_required)
	ModerationPermission   ModerationPermission `json:"moderation_permission,omitempty"`    // 发言权限(all_members/only_owner/moderator_list)
	External               bool                 `json:"external,omitempty"`                 // 是否是外部群
	TenantKey              string               `json:"tenant_key,omitempty"`               // tenant key
	UserCount              string               `json:"user_count,omitempty"`               // 群成员人数
	BotCount               string               `json:"bot_count,omitempty"`                // 群机器人数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatListOfSelf 获取用户或者机器人所在群列表。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 查询参数  **user_id_type** 用于控制响应体中 owner_id 的类型，如果是获取机器人所在群列表该值可以不填
// - 请注意区分本接口和[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)的请求 URL
// - 获取的群列表不包含p2p单聊群
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list
func (r *ChatService) GetChatListOfSelf(ctx context.Context, request *GetChatListOfSelfReq, options ...MethodOptionFunc) (*GetChatListOfSelfResp, *Response, error) {
	if r.cli.mock.mockChatGetChatListOfSelf != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatListOfSelf mock enable")
		return r.cli.mock.mockChatGetChatListOfSelf(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatListOfSelf",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatListOfSelfResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatListOfSelf mock ChatGetChatListOfSelf method
func (r *Mock) MockChatGetChatListOfSelf(f func(ctx context.Context, request *GetChatListOfSelfReq, options ...MethodOptionFunc) (*GetChatListOfSelfResp, *Response, error)) {
	r.mockChatGetChatListOfSelf = f
}

// UnMockChatGetChatListOfSelf un-mock ChatGetChatListOfSelf method
func (r *Mock) UnMockChatGetChatListOfSelf() {
	r.mockChatGetChatListOfSelf = nil
}

// GetChatListOfSelfReq ...
type GetChatListOfSelfReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
}

// getChatListOfSelfResp ...
type getChatListOfSelfResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetChatListOfSelfResp `json:"data,omitempty"`
}

// GetChatListOfSelfResp ...
type GetChatListOfSelfResp struct {
	Items     []*GetChatListOfSelfRespItem `json:"items,omitempty"`      // chat 列表
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetChatListOfSelfRespItem ...
type GetChatListOfSelfRespItem struct {
	ChatID      string `json:"chat_id,omitempty"`       // 群组 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar      string `json:"avatar,omitempty"`        // 群头像 URL
	Name        string `json:"name,omitempty"`          // 群名称
	Description string `json:"description,omitempty"`   // 群描述
	OwnerID     string `json:"owner_id,omitempty"`      // 群主 ID
	OwnerIDType IDType `json:"owner_id_type,omitempty"` // 群主 ID 类型
	External    bool   `json:"external,omitempty"`      // 是否是外部群
	TenantKey   string `json:"tenant_key,omitempty"`    // tenant key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatOld
//
// 为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)
// 获取群名称、群主 ID、成员列表 ID 等群基本信息。
// - 需要启用机器人能力；机器人必须在群里
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTO5QjLzkTO04yM5kDN
//
// Deprecated
func (r *ChatService) GetChatOld(ctx context.Context, request *GetChatOldReq, options ...MethodOptionFunc) (*GetChatOldResp, *Response, error) {
	if r.cli.mock.mockChatGetChatOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatOld mock enable")
		return r.cli.mock.mockChatGetChatOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/chat/v4/info",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getChatOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatOld mock ChatGetChatOld method
func (r *Mock) MockChatGetChatOld(f func(ctx context.Context, request *GetChatOldReq, options ...MethodOptionFunc) (*GetChatOldResp, *Response, error)) {
	r.mockChatGetChatOld = f
}

// UnMockChatGetChatOld un-mock ChatGetChatOld method
func (r *Mock) UnMockChatGetChatOld() {
	r.mockChatGetChatOld = nil
}

// GetChatOldReq ...
type GetChatOldReq struct {
	ChatID string `query:"chat_id" json:"-"` // 群 ID
}

// getChatOldResp ...
type getChatOldResp struct {
	Code int64           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 返回码描述
	Data *GetChatOldResp `json:"data,omitempty"` // -
}

// GetChatOldResp ...
type GetChatOldResp struct {
	Avatar                   string                  `json:"avatar,omitempty"`                      // 群头像
	Description              string                  `json:"description,omitempty"`                 // 群描述
	I18nNames                map[string]string       `json:"i18n_names,omitempty"`                  // 群国际化名称（设置了国际化名称才会有这个字段）
	ChatID                   string                  `json:"chat_id,omitempty"`                     // 群 ID
	Members                  []*GetChatOldRespMember `json:"members,omitempty"`                     // 成员列表
	Name                     string                  `json:"name,omitempty"`                        // 群名称，类型为group时有效
	Type                     string                  `json:"type,omitempty"`                        // 群类型，group表示群聊，p2p表示单聊
	OwnerUserID              string                  `json:"owner_user_id,omitempty"`               // 群主的 user_id（机器人是群主的时候没有这个字段）
	OwnerOpenID              string                  `json:"owner_open_id,omitempty"`               // 群主的 open_id （机器人是群主的时候没有这个字段）
	OnlyOwnerEdit            bool                    `json:"only_owner_edit,omitempty"`             // 是否仅群主可编辑群信息，群信息包括头像、名称、描述、公告
	OnlyOwnerAdd             bool                    `json:"only_owner_add,omitempty"`              // 是否仅群主可以添加人
	ShareAllowed             bool                    `json:"share_allowed,omitempty"`               // 是否允许分享群
	AddMemberVerify          bool                    `json:"add_member_verify,omitempty"`           // 是否开启入群验证
	OnlyOwnerAtAll           bool                    `json:"only_owner_at_all,omitempty"`           // 是否仅群主@all
	SendMessagePermission    string                  `json:"send_message_permission,omitempty"`     // 允许谁发送消息<br>all: 所有人<br>  owner： 仅群主<br>selected_member: 指定成员
	JoinMessageVisibility    MessageVisibility       `json:"join_message_visibility,omitempty"`     // 成员入群通知<br>all：所有人 <br>owner：仅群主 <br>not_anyone：不通知任何人"
	LeaveMessageVisibility   MessageVisibility       `json:"leave_message_visibility,omitempty"`    // 成员退群通知<br>all：所有人 <br>owner：仅群主 <br>not_anyone：不通知任何人
	GroupEmailEnabled        bool                    `json:"group_email_enabled,omitempty"`         // 是否开启群邮件
	SendGroupEmailPermission string                  `json:"send_group_email_permission,omitempty"` // 发送群邮件的权限<br>owner：仅群主  <br>group_member：群组内成员<br>tenant_member：团队成员 <br>all：所有人
}

// GetChatOldRespMember ...
type GetChatOldRespMember struct {
	OpenID string `json:"open_id,omitempty"` // 某成员的open_id
	UserID string `json:"user_id,omitempty"` // 某成员的user_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// JoinChat 用户或机器人主动加入群聊。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 目前仅支持加入公开群
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/me_join
func (r *ChatService) JoinChat(ctx context.Context, request *JoinChatReq, options ...MethodOptionFunc) (*JoinChatResp, *Response, error) {
	if r.cli.mock.mockChatJoinChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#JoinChat mock enable")
		return r.cli.mock.mockChatJoinChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "JoinChat",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members/me_join",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(joinChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatJoinChat mock ChatJoinChat method
func (r *Mock) MockChatJoinChat(f func(ctx context.Context, request *JoinChatReq, options ...MethodOptionFunc) (*JoinChatResp, *Response, error)) {
	r.mockChatJoinChat = f
}

// UnMockChatJoinChat un-mock ChatJoinChat method
func (r *Mock) UnMockChatJoinChat() {
	r.mockChatJoinChat = nil
}

// JoinChatReq ...
type JoinChatReq struct {
	ChatID string `path:"chat_id" json:"-"` // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// joinChatResp ...
type joinChatResp struct {
	Code int64         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string        `json:"msg,omitempty"`  // 错误描述
	Data *JoinChatResp `json:"data,omitempty"`
}

// JoinChatResp ...
type JoinChatResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateChatManager 将用户或机器人指定为群管理员。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 仅有群主可以指定群管理员
// - 对于普通群，最多指定 10 个管理员
// - 对于超大群，最多指定 20 个管理员
// - 每次请求最多指定 50 个用户或者 5 个机器人
// - 指定机器人类型的管理员请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/add_managers
func (r *ChatService) CreateChatManager(ctx context.Context, request *CreateChatManagerReq, options ...MethodOptionFunc) (*CreateChatManagerResp, *Response, error) {
	if r.cli.mock.mockChatCreateChatManager != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#CreateChatManager mock enable")
		return r.cli.mock.mockChatCreateChatManager(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "CreateChatManager",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/managers/add_managers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createChatManagerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatCreateChatManager mock ChatCreateChatManager method
func (r *Mock) MockChatCreateChatManager(f func(ctx context.Context, request *CreateChatManagerReq, options ...MethodOptionFunc) (*CreateChatManagerResp, *Response, error)) {
	r.mockChatCreateChatManager = f
}

// UnMockChatCreateChatManager un-mock ChatCreateChatManager method
func (r *Mock) UnMockChatCreateChatManager() {
	r.mockChatCreateChatManager = nil
}

// CreateChatManagerReq ...
type CreateChatManagerReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员，需要有获取用户 UserID 的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), `union_id`：以 union_id 来识别成员([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), `open_id`：以 open_id 来识别成员([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), `app_id`：以 app_id 来识别成员([获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g))
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	ManagerIDs   []string `json:"manager_ids,omitempty"`    // 要增加的 manager_id, 示例值：["ou_9204a37300b3700d61effaa439f34295"], 最大长度：`50`
}

// createChatManagerResp ...
type createChatManagerResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateChatManagerResp `json:"data,omitempty"`
}

// CreateChatManagerResp ...
type CreateChatManagerResp struct {
	ChatManagers    []string `json:"chat_managers,omitempty"`     // 群目前用户类型的管理员 id
	ChatBotManagers []string `json:"chat_bot_managers,omitempty"` // 群目前机器人类型的管理员 id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteChatManager 删除指定的群管理员（用户或机器人）
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 仅有群主可以删除群管理员
// - 每次请求最多指定 50 个用户或者 5 个机器人
// - 删除机器人类型的管理员请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/delete_managers
func (r *ChatService) DeleteChatManager(ctx context.Context, request *DeleteChatManagerReq, options ...MethodOptionFunc) (*DeleteChatManagerResp, *Response, error) {
	if r.cli.mock.mockChatDeleteChatManager != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#DeleteChatManager mock enable")
		return r.cli.mock.mockChatDeleteChatManager(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "DeleteChatManager",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/managers/delete_managers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteChatManagerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatDeleteChatManager mock ChatDeleteChatManager method
func (r *Mock) MockChatDeleteChatManager(f func(ctx context.Context, request *DeleteChatManagerReq, options ...MethodOptionFunc) (*DeleteChatManagerResp, *Response, error)) {
	r.mockChatDeleteChatManager = f
}

// UnMockChatDeleteChatManager un-mock ChatDeleteChatManager method
func (r *Mock) UnMockChatDeleteChatManager() {
	r.mockChatDeleteChatManager = nil
}

// DeleteChatManagerReq ...
type DeleteChatManagerReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员，需要有获取用户 UserID 的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), `union_id`：以 union_id 来识别成员([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), `open_id`：以 open_id 来识别成员([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), `app_id`：以 app_id 来识别成员([获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g))
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	ManagerIDs   []string `json:"manager_ids,omitempty"`    // 要删除的 manager_id, 示例值：["ou_9204a37300b3700d61effaa439f34295"], 最大长度：`50`
}

// deleteChatManagerResp ...
type deleteChatManagerResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteChatManagerResp `json:"data,omitempty"`
}

// DeleteChatManagerResp ...
type DeleteChatManagerResp struct {
	ChatManagers    []string `json:"chat_managers,omitempty"`     // 群目前用户类型的管理员 id
	ChatBotManagers []string `json:"chat_bot_managers,omitempty"` // 群目前机器人类型的管理员 id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddChatMember 将用户或机器人拉入群聊。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 如需拉用户进群，需要机器人对用户有可见性
// - 在开启 [仅群主和群管理员可添加群成员] 的设置时，仅有群主/管理员 或 创建群组且具备 [更新应用所创建群的群信息] 权限的机器人，可以拉用户或者机器人进群
// - 在未开启 [仅群主和群管理员可添加群成员] 的设置时，所有群成员都可以拉用户或机器人进群
// - 每次请求，最多拉50个用户或者5个机器人，并且群组最多容纳15个机器人
// - 拉机器人入群请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create
func (r *ChatService) AddChatMember(ctx context.Context, request *AddChatMemberReq, options ...MethodOptionFunc) (*AddChatMemberResp, *Response, error) {
	if r.cli.mock.mockChatAddChatMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#AddChatMember mock enable")
		return r.cli.mock.mockChatAddChatMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "AddChatMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(addChatMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatAddChatMember mock ChatAddChatMember method
func (r *Mock) MockChatAddChatMember(f func(ctx context.Context, request *AddChatMemberReq, options ...MethodOptionFunc) (*AddChatMemberResp, *Response, error)) {
	r.mockChatAddChatMember = f
}

// UnMockChatAddChatMember un-mock ChatAddChatMember method
func (r *Mock) UnMockChatAddChatMember() {
	r.mockChatAddChatMember = nil
}

// AddChatMemberReq ...
type AddChatMemberReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 进群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员，需要有获取用户UserID的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), `union_id`：以 union_id 来识别成员([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), `open_id`：以 open_id 来识别成员([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), `app_id`：以 app_id 来识别成员([获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g))
	SucceedType  *int64   `query:"succeed_type" json:"-"`   // 出现不可用ID后的处理方式 0/1/2, 示例值：0, 可选值有: `0`：兼容之前的策略，不存在/不可见的 ID 会拉群失败，并返回错误响应。存在已离职 ID 时，会将其他可用 ID 拉入群聊，返回拉群成功的响应。, `1`：将参数中可用的 ID 全部拉入群聊，返回拉群成功的响应，并展示剩余不可用的 ID 及原因。, `2`：参数中只要存在任一不可用的 ID ，就会拉群失败，返回错误响应，并展示出不可用的 ID。
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	IDList       []string `json:"id_list,omitempty"`        // 成员列表, 示例值：["ou_9204a37300b3700d61effaa439f34295"]
}

// addChatMemberResp ...
type addChatMemberResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *AddChatMemberResp `json:"data,omitempty"`
}

// AddChatMemberResp ...
type AddChatMemberResp struct {
	InvalidIDList    []string `json:"invalid_id_list,omitempty"`     // 无效成员列表
	NotExistedIDList []string `json:"not_existed_id_list,omitempty"` // ID不存在的成员列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteChatMember 将用户或机器人移出群聊。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 用户或机器人在任何条件下均可移除自己出群（即主动退群）
// - 仅有群主/管理员 或 创建群组并且具备 [更新应用所创建群的群信息] 权限的机器人，可以移除其他用户或者机器人
// - 每次请求，最多移除50个用户或者5个机器人
// - 移除机器人请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/delete
func (r *ChatService) DeleteChatMember(ctx context.Context, request *DeleteChatMemberReq, options ...MethodOptionFunc) (*DeleteChatMemberResp, *Response, error) {
	if r.cli.mock.mockChatDeleteChatMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#DeleteChatMember mock enable")
		return r.cli.mock.mockChatDeleteChatMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "DeleteChatMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteChatMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatDeleteChatMember mock ChatDeleteChatMember method
func (r *Mock) MockChatDeleteChatMember(f func(ctx context.Context, request *DeleteChatMemberReq, options ...MethodOptionFunc) (*DeleteChatMemberResp, *Response, error)) {
	r.mockChatDeleteChatMember = f
}

// UnMockChatDeleteChatMember un-mock ChatDeleteChatMember method
func (r *Mock) UnMockChatDeleteChatMember() {
	r.mockChatDeleteChatMember = nil
}

// DeleteChatMemberReq ...
type DeleteChatMemberReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 出群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员, `union_id`：以 union_id 来识别成员, `open_id`：以 open_id 来识别成员, `app_id`：以 app_id 来识别成员
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	IDList       []string `json:"id_list,omitempty"`        // 成员列表, 示例值：["ou_9204a37300b3700d61effaa439f34295"]
}

// deleteChatMemberResp ...
type deleteChatMemberResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *DeleteChatMemberResp `json:"data,omitempty"`
}

// DeleteChatMemberResp ...
type DeleteChatMemberResp struct {
	InvalidIDList []string `json:"invalid_id_list,omitempty"` // 无效成员列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatMemberList 如果用户在群中，则返回该群的成员列表。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 该接口不会返回群内的机器人成员
// - 由于返回的群成员列表会过滤掉机器人成员，因此返回的群成员个数可能会小于指定的page_size
// - 如果有同一时间加入群的群成员，会一次性返回，这会导致返回的群成员个数可能会大于指定的page_size
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/get
func (r *ChatService) GetChatMemberList(ctx context.Context, request *GetChatMemberListReq, options ...MethodOptionFunc) (*GetChatMemberListResp, *Response, error) {
	if r.cli.mock.mockChatGetChatMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatMemberList mock enable")
		return r.cli.mock.mockChatGetChatMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatMemberList mock ChatGetChatMemberList method
func (r *Mock) MockChatGetChatMemberList(f func(ctx context.Context, request *GetChatMemberListReq, options ...MethodOptionFunc) (*GetChatMemberListResp, *Response, error)) {
	r.mockChatGetChatMemberList = f
}

// UnMockChatGetChatMemberList un-mock ChatGetChatMemberList method
func (r *Mock) UnMockChatGetChatMemberList() {
	r.mockChatGetChatMemberList = nil
}

// GetChatMemberListReq ...
type GetChatMemberListReq struct {
	MemberIDType *IDType `query:"member_id_type" json:"-"` // 群成员 用户 ID 类型，详情参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员, `union_id`：以 union_id 来识别成员, `open_id`：以 open_id 来识别成员, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken    *string `query:"page_token" json:"-"`     // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize     *int64  `query:"page_size" json:"-"`      // 分页大小, 示例值：10, 最大值：`100`
	ChatID       string  `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// getChatMemberListResp ...
type getChatMemberListResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetChatMemberListResp `json:"data,omitempty"`
}

// GetChatMemberListResp ...
type GetChatMemberListResp struct {
	Items       []*GetChatMemberListRespItem `json:"items,omitempty"`        // 成员列表
	PageToken   string                       `json:"page_token,omitempty"`   // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore     bool                         `json:"has_more,omitempty"`     // 是否还有更多项
	MemberTotal int64                        `json:"member_total,omitempty"` // 成员总数
}

// GetChatMemberListRespItem ...
type GetChatMemberListRespItem struct {
	MemberIDType IDType `json:"member_id_type,omitempty"` // 成员的用户 ID 类型，与查询参数中的 member_id_type 相同。取值为：`open_id`、`user_id`、`union_id`其中之一。
	MemberID     string `json:"member_id,omitempty"`      // 成员的用户ID，ID值与查询参数中的 member_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name         string `json:"name,omitempty"`           // 名字
	TenantKey    string `json:"tenant_key,omitempty"`     // tenant key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// IsInChat 根据使用的access_token判断对应的用户或者机器人是否在群里。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/is_in_chat
func (r *ChatService) IsInChat(ctx context.Context, request *IsInChatReq, options ...MethodOptionFunc) (*IsInChatResp, *Response, error) {
	if r.cli.mock.mockChatIsInChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#IsInChat mock enable")
		return r.cli.mock.mockChatIsInChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "IsInChat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members/is_in_chat",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(isInChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatIsInChat mock ChatIsInChat method
func (r *Mock) MockChatIsInChat(f func(ctx context.Context, request *IsInChatReq, options ...MethodOptionFunc) (*IsInChatResp, *Response, error)) {
	r.mockChatIsInChat = f
}

// UnMockChatIsInChat un-mock ChatIsInChat method
func (r *Mock) UnMockChatIsInChat() {
	r.mockChatIsInChat = nil
}

// IsInChatReq ...
type IsInChatReq struct {
	ChatID string `path:"chat_id" json:"-"` // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// isInChatResp ...
type isInChatResp struct {
	Code int64         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string        `json:"msg,omitempty"`  // 错误描述
	Data *IsInChatResp `json:"data,omitempty"`
}

// IsInChatResp ...
type IsInChatResp struct {
	IsInChat bool `json:"is_in_chat,omitempty"` // 用户或者机器人是否在群中
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatModeration 获取群发言模式、可发言用户名单等
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uQjL04CN/uYTMuYTMuYTM)
// - 机器人 或 授权用户 必须在群里
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/get
func (r *ChatService) GetChatModeration(ctx context.Context, request *GetChatModerationReq, options ...MethodOptionFunc) (*GetChatModerationResp, *Response, error) {
	if r.cli.mock.mockChatGetChatModeration != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatModeration mock enable")
		return r.cli.mock.mockChatGetChatModeration(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatModeration",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/moderation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatModerationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatModeration mock ChatGetChatModeration method
func (r *Mock) MockChatGetChatModeration(f func(ctx context.Context, request *GetChatModerationReq, options ...MethodOptionFunc) (*GetChatModerationResp, *Response, error)) {
	r.mockChatGetChatModeration = f
}

// UnMockChatGetChatModeration un-mock ChatGetChatModeration method
func (r *Mock) UnMockChatGetChatModeration() {
	r.mockChatGetChatModeration = nil
}

// GetChatModerationReq ...
type GetChatModerationReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`，字段权限要求: 获取用户 user ID
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值: "dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 10, 最大值：`100`
	ChatID     string  `path:"chat_id" json:"-"`       // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值: "oc_a0553eda9014c201e6969b478895c230"
}

// getChatModerationResp ...
type getChatModerationResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetChatModerationResp `json:"data,omitempty"`
}

// GetChatModerationResp ...
type GetChatModerationResp struct {
	ModerationSetting string                       `json:"moderation_setting,omitempty"` // 群发言模式（all_members/only_owner/moderator_list，其中 moderator_list 表示部分用户可发言的模式）
	PageToken         string                       `json:"page_token,omitempty"`         // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore           bool                         `json:"has_more,omitempty"`           // 是否还有更多项
	Items             []*GetChatModerationRespItem `json:"items,omitempty"`              // 可发言用户列表
}

// GetChatModerationRespItem ...
type GetChatModerationRespItem struct {
	UserIDType IDType `json:"user_id_type,omitempty"` // 可发言用户 ID 类型
	UserID     string `json:"user_id,omitempty"`      // 可发言用户 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateChatModeration 更新群组的发言权限设置，可设置为全员可发言、仅管理员可发言  或 指定用户可发言。
//
// 注意事项：
// - 需要开启[机器人能力](https://open.feishu.cn/document/uQjL04CN/uYTMuYTMuYTM)
// - 若以用户授权调用接口，**当授权用户是群主**时，可更新群发言权限
// - 若以租户授权调用接口(即以机器人身份调用接口)，当**机器人是群主** 或者 **机器人是创建群组、具备[更新应用所创建群的群信息]权限且仍在群内**时，可更新群发言权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/update
func (r *ChatService) UpdateChatModeration(ctx context.Context, request *UpdateChatModerationReq, options ...MethodOptionFunc) (*UpdateChatModerationResp, *Response, error) {
	if r.cli.mock.mockChatUpdateChatModeration != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#UpdateChatModeration mock enable")
		return r.cli.mock.mockChatUpdateChatModeration(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "UpdateChatModeration",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/moderation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateChatModerationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatUpdateChatModeration mock ChatUpdateChatModeration method
func (r *Mock) MockChatUpdateChatModeration(f func(ctx context.Context, request *UpdateChatModerationReq, options ...MethodOptionFunc) (*UpdateChatModerationResp, *Response, error)) {
	r.mockChatUpdateChatModeration = f
}

// UnMockChatUpdateChatModeration un-mock ChatUpdateChatModeration method
func (r *Mock) UnMockChatUpdateChatModeration() {
	r.mockChatUpdateChatModeration = nil
}

// UpdateChatModerationReq ...
type UpdateChatModerationReq struct {
	UserIDType           *IDType  `query:"user_id_type" json:"-"`           // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`，字段权限要求: 获取用户 user ID
	ChatID               string   `path:"chat_id" json:"-"`                 // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值: "oc_a0553eda9014c201e6969b478895c230"
	ModerationSetting    *string  `json:"moderation_setting,omitempty"`     // 群发言模式（all_members/only_owner/moderator_list，其中 moderator_list 表示部分用户可发言的模式）, 示例值: "moderator_list"
	ModeratorAddedList   []string `json:"moderator_added_list,omitempty"`   // 选择部分用户可发言模式时，添加的可发言用户列表（自动过滤不在群内的用户）
	ModeratorRemovedList []string `json:"moderator_removed_list,omitempty"` // 选择部分用户可发言模式时，移除的可发言用户列表（自动过滤不在群内的用户）
}

// updateChatModerationResp ...
type updateChatModerationResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateChatModerationResp `json:"data,omitempty"`
}

// UpdateChatModerationResp ...
type UpdateChatModerationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchChat 搜索对用户或机器人可见的群列表，包括：用户或机器人所在的群、对用户或机器人公开的群。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search
func (r *ChatService) SearchChat(ctx context.Context, request *SearchChatReq, options ...MethodOptionFunc) (*SearchChatResp, *Response, error) {
	if r.cli.mock.mockChatSearchChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#SearchChat mock enable")
		return r.cli.mock.mockChatSearchChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "SearchChat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(searchChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatSearchChat mock ChatSearchChat method
func (r *Mock) MockChatSearchChat(f func(ctx context.Context, request *SearchChatReq, options ...MethodOptionFunc) (*SearchChatResp, *Response, error)) {
	r.mockChatSearchChat = f
}

// UnMockChatSearchChat un-mock ChatSearchChat method
func (r *Mock) UnMockChatSearchChat() {
	r.mockChatSearchChat = nil
}

// SearchChatReq ...
type SearchChatReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Query      *string `query:"query" json:"-"`        // 关键词。注意：如果query为空值将返回空的结果, 示例值："abc"
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
}

// searchChatResp ...
type searchChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *SearchChatResp `json:"data,omitempty"`
}

// SearchChatResp ...
type SearchChatResp struct {
	Items     []*SearchChatRespItem `json:"items,omitempty"`      // chat 列表
	PageToken string                `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                  `json:"has_more,omitempty"`   // 是否还有更多项
}

// SearchChatRespItem ...
type SearchChatRespItem struct {
	ChatID      string `json:"chat_id,omitempty"`       // 群组 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar      string `json:"avatar,omitempty"`        // 群头像 URL
	Name        string `json:"name,omitempty"`          // 群名称
	Description string `json:"description,omitempty"`   // 群描述
	OwnerID     string `json:"owner_id,omitempty"`      // 群主 ID
	OwnerIDType IDType `json:"owner_id_type,omitempty"` // 群主 ID 类型
	External    bool   `json:"external,omitempty"`      // 是否是外部群
	TenantKey   string `json:"tenant_key,omitempty"`    // tenant key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteChatTopNotice 撤销会话中的置顶
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/delete_top_notice
func (r *ChatService) DeleteChatTopNotice(ctx context.Context, request *DeleteChatTopNoticeReq, options ...MethodOptionFunc) (*DeleteChatTopNoticeResp, *Response, error) {
	if r.cli.mock.mockChatDeleteChatTopNotice != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#DeleteChatTopNotice mock enable")
		return r.cli.mock.mockChatDeleteChatTopNotice(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "DeleteChatTopNotice",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/top_notice/delete_top_notice",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteChatTopNoticeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatDeleteChatTopNotice mock ChatDeleteChatTopNotice method
func (r *Mock) MockChatDeleteChatTopNotice(f func(ctx context.Context, request *DeleteChatTopNoticeReq, options ...MethodOptionFunc) (*DeleteChatTopNoticeResp, *Response, error)) {
	r.mockChatDeleteChatTopNotice = f
}

// UnMockChatDeleteChatTopNotice un-mock ChatDeleteChatTopNotice method
func (r *Mock) UnMockChatDeleteChatTopNotice() {
	r.mockChatDeleteChatTopNotice = nil
}

// DeleteChatTopNoticeReq ...
type DeleteChatTopNoticeReq struct {
	ChatID string `path:"chat_id" json:"-"` // 待撤销置顶的群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_5ad11d72b830411d72b836c20"
}

// deleteChatTopNoticeResp ...
type deleteChatTopNoticeResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *DeleteChatTopNoticeResp `json:"data,omitempty"`
}

// DeleteChatTopNoticeResp ...
type DeleteChatTopNoticeResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateChatTopNotice 更新会话中的群置顶信息，可以将群中的某一条消息，或者群公告置顶显示。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-top_notice/put_top_notice
func (r *ChatService) UpdateChatTopNotice(ctx context.Context, request *UpdateChatTopNoticeReq, options ...MethodOptionFunc) (*UpdateChatTopNoticeResp, *Response, error) {
	if r.cli.mock.mockChatUpdateChatTopNotice != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#UpdateChatTopNotice mock enable")
		return r.cli.mock.mockChatUpdateChatTopNotice(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "UpdateChatTopNotice",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/top_notice/put_top_notice",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateChatTopNoticeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatUpdateChatTopNotice mock ChatUpdateChatTopNotice method
func (r *Mock) MockChatUpdateChatTopNotice(f func(ctx context.Context, request *UpdateChatTopNoticeReq, options ...MethodOptionFunc) (*UpdateChatTopNoticeResp, *Response, error)) {
	r.mockChatUpdateChatTopNotice = f
}

// UnMockChatUpdateChatTopNotice un-mock ChatUpdateChatTopNotice method
func (r *Mock) UnMockChatUpdateChatTopNotice() {
	r.mockChatUpdateChatTopNotice = nil
}

// UpdateChatTopNoticeReq ...
type UpdateChatTopNoticeReq struct {
	ChatID        string                                 `path:"chat_id" json:"-"`          // 待修改置顶的群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_5ad11d72b830411d72b836c20"
	ChatTopNotice []*UpdateChatTopNoticeReqChatTopNotice `json:"chat_top_notice,omitempty"` // 要进行发布的群置顶
}

// UpdateChatTopNoticeReqChatTopNotice ...
type UpdateChatTopNoticeReqChatTopNotice struct {
	ActionType *string `json:"action_type,omitempty"` // 置顶的类型, 示例值："1", 可选值有: `1`：消息类型, `2`：群公告类型
	MessageID  *string `json:"message_id,omitempty"`  // 消息id, 示例值："om_dc13264520392913993dd051dba21dcf"
}

// updateChatTopNoticeResp ...
type updateChatTopNoticeResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateChatTopNoticeResp `json:"data,omitempty"`
}

// UpdateChatTopNoticeResp ...
type UpdateChatTopNoticeResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateChat 更新群头像、群名称、群描述、群配置、转让群主等。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 若群未开启 [仅群主和群管理员可编辑群信息] 配置：
// - 群主/群管理员 或 创建群组且具备[更新应用所创建群的群信息]权限的机器人，可更新所有信息
// - 不满足上述条件的群成员或机器人，仅可更新群头像、群名称、群描述、群国际化名称信息
// - 若群开启了[仅群主和群管理员可编辑群信息]配置：
// - 群主/群管理员 或 创建群组且具备[更新应用所创建群的群信息]权限的机器人，可更新所有信息
// - 不满足上述条件的群成员或者机器人，任何群信息都不能修改
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/update
func (r *ChatService) UpdateChat(ctx context.Context, request *UpdateChatReq, options ...MethodOptionFunc) (*UpdateChatResp, *Response, error) {
	if r.cli.mock.mockChatUpdateChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#UpdateChat mock enable")
		return r.cli.mock.mockChatUpdateChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "UpdateChat",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatUpdateChat mock ChatUpdateChat method
func (r *Mock) MockChatUpdateChat(f func(ctx context.Context, request *UpdateChatReq, options ...MethodOptionFunc) (*UpdateChatResp, *Response, error)) {
	r.mockChatUpdateChat = f
}

// UnMockChatUpdateChat un-mock ChatUpdateChat method
func (r *Mock) UnMockChatUpdateChat() {
	r.mockChatUpdateChat = nil
}

// UpdateChatReq ...
type UpdateChatReq struct {
	UserIDType             *IDType              `query:"user_id_type" json:"-"`             // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ChatID                 string               `path:"chat_id" json:"-"`                   // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	Avatar                 *string              `json:"avatar,omitempty"`                   // 群头像对应的 Image Key，可通过[上传图片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)获取（注意：上传图片的 [image_type] 需要指定为 [avatar]）, 示例值："default-avatar_44ae0ca3-e140-494b-956f-78091e348435"
	Name                   *string              `json:"name,omitempty"`                     // 群名称, 示例值："群聊"
	Description            *string              `json:"description,omitempty"`              // 群描述, 示例值："测试群描述"
	I18nNames              *I18nNames           `json:"i18n_names,omitempty"`               // 群国际化名称
	AddMemberPermission    *AddMemberPermission `json:"add_member_permission,omitempty"`    // 加 user/bot 入群权限(all_members/only_owner), 示例值："all_members"
	ShareCardPermission    *ShareCardPermission `json:"share_card_permission,omitempty"`    // 群分享权限(allowed/not_allowed), 示例值："allowed"
	AtAllPermission        *AtAllPermission     `json:"at_all_permission,omitempty"`        // at 所有人权限(all_members/only_owner), 示例值："all_members"
	EditPermission         *EditPermission      `json:"edit_permission,omitempty"`          // 群编辑权限(all_members/only_owner), 示例值："all_members"
	OwnerID                *string              `json:"owner_id,omitempty"`                 // 新群主 ID, 示例值："4d7a3c6g"
	JoinMessageVisibility  *MessageVisibility   `json:"join_message_visibility,omitempty"`  // 入群消息可见性(only_owner/all_members/not_anyone), 示例值："only_owner"
	LeaveMessageVisibility *MessageVisibility   `json:"leave_message_visibility,omitempty"` // 出群消息可见性(only_owner/all_members/not_anyone), 示例值："only_owner"
	MembershipApproval     *MembershipApproval  `json:"membership_approval,omitempty"`      // 加群审批(no_approval_required/approval_required), 示例值："no_approval_required"
}

// updateChatResp ...
type updateChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateChatResp `json:"data,omitempty"`
}

// UpdateChatResp ...
type UpdateChatResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactCustomAttrList 获取企业自定义的用户字段配置信息
//
// 调用该接口前，需要先确认[企业管理员](https://www.feishu.cn/hc/zh-CN/articles/360049067822)在[企业管理后台 - 组织架构 - 成员字段管理](http://www.feishu.cn/admin/contacts/employee-field-new/custom) 自定义字段管理栏开启了“允许开放平台API调用“。
// ![通讯录.gif](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/544738c94f13ef0b9ebaff53a5133cc7_E9EGMkXyzX.gif)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/list
func (r *ContactService) GetContactCustomAttrList(ctx context.Context, request *GetContactCustomAttrListReq, options ...MethodOptionFunc) (*GetContactCustomAttrListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactCustomAttrList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactCustomAttrList mock enable")
		return r.cli.mock.mockContactGetContactCustomAttrList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactCustomAttrList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/custom_attrs",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactCustomAttrListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactCustomAttrList mock ContactGetContactCustomAttrList method
func (r *Mock) MockContactGetContactCustomAttrList(f func(ctx context.Context, request *GetContactCustomAttrListReq, options ...MethodOptionFunc) (*GetContactCustomAttrListResp, *Response, error)) {
	r.mockContactGetContactCustomAttrList = f
}

// UnMockContactGetContactCustomAttrList un-mock ContactGetContactCustomAttrList method
func (r *Mock) UnMockContactGetContactCustomAttrList() {
	r.mockContactGetContactCustomAttrList = nil
}

// GetContactCustomAttrListReq ...
type GetContactCustomAttrListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RYU5lvOM4s6zgbeeNNaWd%2BVKwAsoreeRWk0J2noGvJy"
}

// getContactCustomAttrListResp ...
type getContactCustomAttrListResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetContactCustomAttrListResp `json:"data,omitempty"`
}

// GetContactCustomAttrListResp ...
type GetContactCustomAttrListResp struct {
	Items     []*GetContactCustomAttrListRespItem `json:"items,omitempty"`      // 自定义字段定义
	PageToken string                              `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                                `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetContactCustomAttrListRespItem ...
type GetContactCustomAttrListRespItem struct {
	ID       string                                      `json:"id,omitempty"`        // 自定义字段id
	Type     string                                      `json:"type,omitempty"`      // 自定义字段类型，可选值有:, `TEXT`：纯文本，用于纯文本描述人员，如备注, `HREF`：静态 URL，用于人员 Profile 跳转链接, `ENUMERATION`：枚举，用于结构化描述人员，如民族, `GENERIC_USER`：用户，用于描述人和人关系，如 HRBP, `PICTURE_ENUM`：枚举图片，以结构化的图片描述人员，如在人员 Profile 展示荣誉徽章
	Options  *GetContactCustomAttrListRespItemOptions    `json:"options,omitempty"`   // 选项定义，当type为`ENUMERATION`或者`PICTURE_ENUM`时此项有值，列举所有可选项
	I18nName []*GetContactCustomAttrListRespItemI18nName `json:"i18n_name,omitempty"` // 自定义字段的字段名称
}

// GetContactCustomAttrListRespItemOptions ...
type GetContactCustomAttrListRespItemOptions struct {
	DefaultOptionID string                                           `json:"default_option_id,omitempty"` // 默认选项id
	OptionType      string                                           `json:"option_type,omitempty"`       // 选项类型, 可选值有: `TEXT`：文本选项, `PICTURE`：图片选项
	Options         []*GetContactCustomAttrListRespItemOptionsOption `json:"options,omitempty"`           // 选项列表
}

// GetContactCustomAttrListRespItemOptionsOption ...
type GetContactCustomAttrListRespItemOptionsOption struct {
	ID    string `json:"id,omitempty"`    // 枚举类型选项id
	Value string `json:"value,omitempty"` // 枚举选项值，当option_type为`TEXT`为文本值，当option_type为`PICTURE`时为图片链接
	Name  string `json:"name,omitempty"`  // 名称，仅option_type为PICTURE时有效
}

// GetContactCustomAttrListRespItemI18nName ...
type GetContactCustomAttrListRespItemI18nName struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDepartment 该接口用于向通讯录中创建部门。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 只可在应用的通讯录权限范围内的部门下创建部门。若需要在根部门下创建子部门，则应用通讯录权限范围需要设置为“全部成员”。应用商店应用无权限调用此接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create
func (r *ContactService) CreateDepartment(ctx context.Context, request *CreateDepartmentReq, options ...MethodOptionFunc) (*CreateDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactCreateDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateDepartment mock enable")
		return r.cli.mock.mockContactCreateDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateDepartment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateDepartment mock ContactCreateDepartment method
func (r *Mock) MockContactCreateDepartment(f func(ctx context.Context, request *CreateDepartmentReq, options ...MethodOptionFunc) (*CreateDepartmentResp, *Response, error)) {
	r.mockContactCreateDepartment = f
}

// UnMockContactCreateDepartment un-mock ContactCreateDepartment method
func (r *Mock) UnMockContactCreateDepartment() {
	r.mockContactCreateDepartment = nil
}

// CreateDepartmentReq ...
type CreateDepartmentReq struct {
	UserIDType         *IDType                      `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	DepartmentIDType   *DepartmentIDType            `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	ClientToken        *string                      `query:"client_token" json:"-"`         // 根据client_token是否一致来判断是否为同一请求, 示例值："473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E"
	Name               string                       `json:"name,omitempty"`                 // 部门名称, 示例值："DemoName", 最小长度：`1` 字符
	I18nName           *CreateDepartmentReqI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称
	ParentDepartmentID string                       `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”, 示例值："D067"
	DepartmentID       *string                      `json:"department_id,omitempty"`        // 本部门的自定义部门ID, 示例值："D096", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
	LeaderUserID       *string                      `json:"leader_user_id,omitempty"`       // 部门主管用户ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Order              *string                      `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序, 示例值："100"
	UnitIDs            []string                     `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个, 示例值：custom_unit_id
	CreateGroupChat    *bool                        `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建, 示例值：false
}

// CreateDepartmentReqI18nName ...
type CreateDepartmentReqI18nName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 部门的中文名, 示例值："Demo名称"
	JaJp *string `json:"ja_jp,omitempty"` // 部门的日文名, 示例值："デモ名"
	EnUs *string `json:"en_us,omitempty"` // 部门的英文名, 示例值："Demo Name"
}

// createDepartmentResp ...
type createDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *CreateDepartmentResp `json:"data,omitempty"`
}

// CreateDepartmentResp ...
type CreateDepartmentResp struct {
	Department *CreateDepartmentRespDepartment `json:"department,omitempty"` // 部门信息
}

// CreateDepartmentRespDepartment ...
type CreateDepartmentRespDepartment struct {
	Name               string                                  `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	I18nName           *CreateDepartmentRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	ParentDepartmentID string                                  `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	DepartmentID       string                                  `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	OpenDepartmentID   string                                  `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                  `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	ChatID             string                                  `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	Order              string                                  `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	UnitIDs            []string                                `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	MemberCount        int64                                   `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	Status             *CreateDepartmentRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
}

// CreateDepartmentRespDepartmentI18nName ...
type CreateDepartmentRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// CreateDepartmentRespDepartmentStatus ...
type CreateDepartmentRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDepartment 该接口用于向通讯录中删除部门。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 应用需要同时拥有待删除部门及其父部门的通讯录授权。应用商店应用无权限调用该接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/delete
func (r *ContactService) DeleteDepartment(ctx context.Context, request *DeleteDepartmentReq, options ...MethodOptionFunc) (*DeleteDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactDeleteDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteDepartment mock enable")
		return r.cli.mock.mockContactDeleteDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteDepartment",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteDepartment mock ContactDeleteDepartment method
func (r *Mock) MockContactDeleteDepartment(f func(ctx context.Context, request *DeleteDepartmentReq, options ...MethodOptionFunc) (*DeleteDepartmentResp, *Response, error)) {
	r.mockContactDeleteDepartment = f
}

// UnMockContactDeleteDepartment un-mock ContactDeleteDepartment method
func (r *Mock) UnMockContactDeleteDepartment() {
	r.mockContactDeleteDepartment = nil
}

// DeleteDepartmentReq ...
type DeleteDepartmentReq struct {
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     string            `path:"department_id" json:"-"`       // 部门ID，需要与查询参数中传入的department_id_type类型保持一致。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
}

// deleteDepartmentResp ...
type deleteDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDepartmentResp `json:"data,omitempty"`
}

// DeleteDepartmentResp ...
type DeleteDepartmentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDepartment 该接口用于向通讯录获取单个部门信息。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 使用tenant_access_token时，应用需要拥有待查询部门的通讯录授权。如果需要获取根部门信息，则需要拥有全员权限。
// 使用user_access_token时，用户需要有待查询部门的可见性，如果需要获取根部门信息，则要求员工可见所有人。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/get
func (r *ContactService) GetDepartment(ctx context.Context, request *GetDepartmentReq, options ...MethodOptionFunc) (*GetDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactGetDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetDepartment mock enable")
		return r.cli.mock.mockContactGetDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetDepartment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetDepartment mock ContactGetDepartment method
func (r *Mock) MockContactGetDepartment(f func(ctx context.Context, request *GetDepartmentReq, options ...MethodOptionFunc) (*GetDepartmentResp, *Response, error)) {
	r.mockContactGetDepartment = f
}

// UnMockContactGetDepartment un-mock ContactGetDepartment method
func (r *Mock) UnMockContactGetDepartment() {
	r.mockContactGetDepartment = nil
}

// GetDepartmentReq ...
type GetDepartmentReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     string            `path:"department_id" json:"-"`       // 需要获取的部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
}

// getDepartmentResp ...
type getDepartmentResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *GetDepartmentResp `json:"data,omitempty"`
}

// GetDepartmentResp ...
type GetDepartmentResp struct {
	Department *GetDepartmentRespDepartment `json:"department,omitempty"` // 部门信息
}

// GetDepartmentRespDepartment ...
type GetDepartmentRespDepartment struct {
	Name               string                               `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	I18nName           *GetDepartmentRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	ParentDepartmentID string                               `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	DepartmentID       string                               `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	OpenDepartmentID   string                               `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                               `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	ChatID             string                               `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	Order              string                               `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	UnitIDs            []string                             `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	MemberCount        int64                                `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	Status             *GetDepartmentRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
}

// GetDepartmentRespDepartmentI18nName ...
type GetDepartmentRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetDepartmentRespDepartmentStatus ...
type GetDepartmentRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDepartmentList 通过部门ID获取部门的子部门列表。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 部门ID 必填，根部门的部门ID 为0
// - 使用 user_access_token 时，返回该用户组织架构可见性范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内的所有可见部门。当进行递归查询时，只筛查最多1000个部门的可见性。
// - 使用
// tenant_access_token 则基于应用的通讯录权限范围进行权限校验与过滤。
// 如果部门ID为0，会检验应用是否有全员通讯录权限，如果是非0 部门ID，则会校验应用是否有该部门的通讯录权限。无部门权限返回无部门通讯录权限错误码，有权限则返回部门下子部门列表（根据fetch_child决定是否递归）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children
func (r *ContactService) GetDepartmentList(ctx context.Context, request *GetDepartmentListReq, options ...MethodOptionFunc) (*GetDepartmentListResp, *Response, error) {
	if r.cli.mock.mockContactGetDepartmentList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetDepartmentList mock enable")
		return r.cli.mock.mockContactGetDepartmentList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetDepartmentList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id/children",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDepartmentListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetDepartmentList mock ContactGetDepartmentList method
func (r *Mock) MockContactGetDepartmentList(f func(ctx context.Context, request *GetDepartmentListReq, options ...MethodOptionFunc) (*GetDepartmentListResp, *Response, error)) {
	r.mockContactGetDepartmentList = f
}

// UnMockContactGetDepartmentList un-mock ContactGetDepartmentList method
func (r *Mock) UnMockContactGetDepartmentList() {
	r.mockContactGetDepartmentList = nil
}

// GetDepartmentListReq ...
type GetDepartmentListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	FetchChild       *bool             `query:"fetch_child" json:"-"`        // 是否递归获取子部门, 示例值：false
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ+G8JG6tK7+ZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	DepartmentID     string            `path:"department_id" json:"-"`       // 部门ID，根部门的部门ID 为0, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
}

// getDepartmentListResp ...
type getDepartmentListResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetDepartmentListResp `json:"data,omitempty"`
}

// GetDepartmentListResp ...
type GetDepartmentListResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetDepartmentListRespItem `json:"items,omitempty"`      // 部门列表
}

// GetDepartmentListRespItem ...
type GetDepartmentListRespItem struct {
	Name               string                             `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	I18nName           *GetDepartmentListRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	ParentDepartmentID string                             `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	DepartmentID       string                             `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	OpenDepartmentID   string                             `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                             `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	ChatID             string                             `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	Order              string                             `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	UnitIDs            []string                           `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	MemberCount        int64                              `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	Status             *GetDepartmentListRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	CreateGroupChat    bool                               `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建
}

// GetDepartmentListRespItemI18nName ...
type GetDepartmentListRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetDepartmentListRespItemStatus ...
type GetDepartmentListRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDepartmentListOld 该接口用于获取当前部门子部门列表。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// - 使用 user_access_token 时，返回该用户组织架构可见性范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内的所有可见部门。当进行递归查询时，只筛查最多1000个部门的可见性。
// - 使用
// tenant_access_token 则基于应用的通讯录权限范围进行权限校验与过滤。由于
// parent_department_id 是非必填参数，填与不填存在<b>两种数据权限校验与返回</b>情况：
// <br> <br>1、请求设置了
// parent_department_id 为A（根部门0），会检验A是否在通讯录权限内，若在( parent_department_id=0 时会校验是否为全员权限），则返回部门下子部门列表（根据fetch_child决定是否递归），否则返回无部门通讯录权限错误码。
// <br> <br>2、请求未带
// parent_department_id 参数，如通讯录范围为全员权限，只返回根部门ID(部门ID为0)，否则返回根据通讯录范围配置的部门ID及子部门(根据
// fetch_child 决定是否递归)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/list
//
// Deprecated
func (r *ContactService) GetDepartmentListOld(ctx context.Context, request *GetDepartmentListOldReq, options ...MethodOptionFunc) (*GetDepartmentListOldResp, *Response, error) {
	if r.cli.mock.mockContactGetDepartmentListOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetDepartmentListOld mock enable")
		return r.cli.mock.mockContactGetDepartmentListOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetDepartmentListOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDepartmentListOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetDepartmentListOld mock ContactGetDepartmentListOld method
func (r *Mock) MockContactGetDepartmentListOld(f func(ctx context.Context, request *GetDepartmentListOldReq, options ...MethodOptionFunc) (*GetDepartmentListOldResp, *Response, error)) {
	r.mockContactGetDepartmentListOld = f
}

// UnMockContactGetDepartmentListOld un-mock ContactGetDepartmentListOld method
func (r *Mock) UnMockContactGetDepartmentListOld() {
	r.mockContactGetDepartmentListOld = nil
}

// GetDepartmentListOldReq ...
type GetDepartmentListOldReq struct {
	UserIDType         *IDType           `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	ParentDepartmentID *string           `query:"parent_department_id" json:"-"` // 父部门的ID，填上获取部门下所有子部门，此处填写的 ID 必须是 department_id_type 指定的 ID。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	FetchChild         *bool             `query:"fetch_child" json:"-"`          // 是否递归获取子部门, 示例值：是否递归获取子部门，默认值：false
	PageToken          *string           `query:"page_token" json:"-"`           // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ%2BG8JG6tK7%2BZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	PageSize           *int64            `query:"page_size" json:"-"`            // 分页大小, 示例值：10, 最大值：`50`
}

// getDepartmentListOldResp ...
type getDepartmentListOldResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetDepartmentListOldResp `json:"data,omitempty"`
}

// GetDepartmentListOldResp ...
type GetDepartmentListOldResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetDepartmentListOldRespItem `json:"items,omitempty"`
}

// GetDepartmentListOldRespItem ...
type GetDepartmentListOldRespItem struct {
	Name               string                                `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *GetDepartmentListOldRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                                `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                                `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                                `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                                `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                                `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                              `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                 `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *GetDepartmentListOldRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// GetDepartmentListOldRespItemI18nName ...
type GetDepartmentListOldRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetDepartmentListOldRespItemStatus ...
type GetDepartmentListOldRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetParentDepartment 该接口用来递归获取部门父部门的信息，并按照由子到父的顺序返回有权限的父部门信息列表。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 使用tenant_access_token时,该接口只返回可见性范围内的父部门信息
// 例如：A >>B>>C>>D四级部门，通讯录权限只到B，那么查询D部门的parent，会返回B和C两级部门。
// 使用user_access_token时,该接口只返回对于用户可见的父部门信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent
func (r *ContactService) GetParentDepartment(ctx context.Context, request *GetParentDepartmentReq, options ...MethodOptionFunc) (*GetParentDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactGetParentDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetParentDepartment mock enable")
		return r.cli.mock.mockContactGetParentDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetParentDepartment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/parent",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getParentDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetParentDepartment mock ContactGetParentDepartment method
func (r *Mock) MockContactGetParentDepartment(f func(ctx context.Context, request *GetParentDepartmentReq, options ...MethodOptionFunc) (*GetParentDepartmentResp, *Response, error)) {
	r.mockContactGetParentDepartment = f
}

// UnMockContactGetParentDepartment un-mock ContactGetParentDepartment method
func (r *Mock) UnMockContactGetParentDepartment() {
	r.mockContactGetParentDepartment = nil
}

// GetParentDepartmentReq ...
type GetParentDepartmentReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	DepartmentID     string            `query:"department_id" json:"-"`      // 部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ%2BG8JG6tK7%2BZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
}

// getParentDepartmentResp ...
type getParentDepartmentResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetParentDepartmentResp `json:"data,omitempty"`
}

// GetParentDepartmentResp ...
type GetParentDepartmentResp struct {
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetParentDepartmentRespItem `json:"items,omitempty"`
}

// GetParentDepartmentRespItem ...
type GetParentDepartmentRespItem struct {
	Name               string                               `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *GetParentDepartmentRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                               `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                               `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                               `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                               `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                               `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                               `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                             `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *GetParentDepartmentRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// GetParentDepartmentRespItemI18nName ...
type GetParentDepartmentRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetParentDepartmentRespItemStatus ...
type GetParentDepartmentRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchDepartment 搜索部门，用户通过关键词查询可见的部门数据，部门可见性需要管理员在后台配置。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 部门存在，但用户搜索不到并不一定是搜索有问题，可能是管理员在后台配置了权限控制，导致用户无法搜索到该部门
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search
func (r *ContactService) SearchDepartment(ctx context.Context, request *SearchDepartmentReq, options ...MethodOptionFunc) (*SearchDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactSearchDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#SearchDepartment mock enable")
		return r.cli.mock.mockContactSearchDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Contact",
		API:                 "SearchDepartment",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/contact/v3/departments/search",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactSearchDepartment mock ContactSearchDepartment method
func (r *Mock) MockContactSearchDepartment(f func(ctx context.Context, request *SearchDepartmentReq, options ...MethodOptionFunc) (*SearchDepartmentResp, *Response, error)) {
	r.mockContactSearchDepartment = f
}

// UnMockContactSearchDepartment un-mock ContactSearchDepartment method
func (r *Mock) UnMockContactSearchDepartment() {
	r.mockContactSearchDepartment = nil
}

// SearchDepartmentReq ...
type SearchDepartmentReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义 department_id 来标识部门, `open_department_id`：以 open_department_id 来标识部门
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ+G8JG6tK7+ZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
	Query            string            `json:"query,omitempty"`              // 搜索关键词，匹配字段为部门名称（不支持匹配部门国际化名称）, 示例值："DemoName"
}

// searchDepartmentResp ...
type searchDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *SearchDepartmentResp `json:"data,omitempty"`
}

// SearchDepartmentResp ...
type SearchDepartmentResp struct {
	Items     []*SearchDepartmentRespItem `json:"items,omitempty"`
	PageToken string                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否还有更多项
}

// SearchDepartmentRespItem ...
type SearchDepartmentRespItem struct {
	Name               string                            `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	I18nName           *SearchDepartmentRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	ParentDepartmentID string                            `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	DepartmentID       string                            `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	OpenDepartmentID   string                            `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                            `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	ChatID             string                            `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	Order              string                            `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	UnitIDs            []string                          `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	MemberCount        int64                             `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	Status             *SearchDepartmentRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	CreateGroupChat    bool                              `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建
}

// SearchDepartmentRespItemI18nName ...
type SearchDepartmentRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// SearchDepartmentRespItemStatus ...
type SearchDepartmentRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnbindDepartmentChat 通过该接口将部门群转为普通群。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/unbind_department_chat
func (r *ContactService) UnbindDepartmentChat(ctx context.Context, request *UnbindDepartmentChatReq, options ...MethodOptionFunc) (*UnbindDepartmentChatResp, *Response, error) {
	if r.cli.mock.mockContactUnbindDepartmentChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UnbindDepartmentChat mock enable")
		return r.cli.mock.mockContactUnbindDepartmentChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UnbindDepartmentChat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/unbind_department_chat",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(unbindDepartmentChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUnbindDepartmentChat mock ContactUnbindDepartmentChat method
func (r *Mock) MockContactUnbindDepartmentChat(f func(ctx context.Context, request *UnbindDepartmentChatReq, options ...MethodOptionFunc) (*UnbindDepartmentChatResp, *Response, error)) {
	r.mockContactUnbindDepartmentChat = f
}

// UnMockContactUnbindDepartmentChat un-mock ContactUnbindDepartmentChat method
func (r *Mock) UnMockContactUnbindDepartmentChat() {
	r.mockContactUnbindDepartmentChat = nil
}

// UnbindDepartmentChatReq ...
type UnbindDepartmentChatReq struct {
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型，默认为"open_department_id", 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	DepartmentID     string            `json:"department_id,omitempty"`      // 部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
}

// unbindDepartmentChatResp ...
type unbindDepartmentChatResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UnbindDepartmentChatResp `json:"data,omitempty"`
}

// UnbindDepartmentChatResp ...
type UnbindDepartmentChatResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDepartment 该接口用于更新当前部门所有信息。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// - 调用该接口需要具有该部门以及更新操作涉及的部门的通讯录权限。应用商店应用无权限调用此接口。
// - 没有填写的字段会被置为空值（order字段除外）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/update
func (r *ContactService) UpdateDepartment(ctx context.Context, request *UpdateDepartmentReq, options ...MethodOptionFunc) (*UpdateDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactUpdateDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateDepartment mock enable")
		return r.cli.mock.mockContactUpdateDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateDepartment",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateDepartment mock ContactUpdateDepartment method
func (r *Mock) MockContactUpdateDepartment(f func(ctx context.Context, request *UpdateDepartmentReq, options ...MethodOptionFunc) (*UpdateDepartmentResp, *Response, error)) {
	r.mockContactUpdateDepartment = f
}

// UnMockContactUpdateDepartment un-mock ContactUpdateDepartment method
func (r *Mock) UnMockContactUpdateDepartment() {
	r.mockContactUpdateDepartment = nil
}

// UpdateDepartmentReq ...
type UpdateDepartmentReq struct {
	UserIDType         *IDType                      `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType            `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID       string                       `path:"department_id" json:"-"`         // 部门ID，需要与查询参数中传入的department_id_type类型保持一致。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
	Name               string                       `json:"name,omitempty"`                 // 部门名称, 示例值："DemoName", 最小长度：`1` 字符
	I18nName           *UpdateDepartmentReqI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称
	ParentDepartmentID string                       `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”, 示例值："D067"
	LeaderUserID       *string                      `json:"leader_user_id,omitempty"`       // 部门主管用户ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Order              *string                      `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序, 示例值："100"
	UnitIDs            []string                     `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个, 示例值：custom_unit_id
	CreateGroupChat    *bool                        `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建, 示例值：false
}

// UpdateDepartmentReqI18nName ...
type UpdateDepartmentReqI18nName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 部门的中文名, 示例值："Demo名称"
	JaJp *string `json:"ja_jp,omitempty"` // 部门的日文名, 示例值："デモ名"
	EnUs *string `json:"en_us,omitempty"` // 部门的英文名, 示例值："Demo Name"
}

// updateDepartmentResp ...
type updateDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDepartmentResp `json:"data,omitempty"`
}

// UpdateDepartmentResp ...
type UpdateDepartmentResp struct {
	Department *UpdateDepartmentRespDepartment `json:"department,omitempty"` // 部门信息
}

// UpdateDepartmentRespDepartment ...
type UpdateDepartmentRespDepartment struct {
	Name               string                                  `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *UpdateDepartmentRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                                  `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                                  `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                                  `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                  `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                                  `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                                  `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                                `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                   `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *UpdateDepartmentRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// UpdateDepartmentRespDepartmentI18nName ...
type UpdateDepartmentRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// UpdateDepartmentRespDepartmentStatus ...
type UpdateDepartmentRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDepartmentPatch 该接口用于更新通讯录中部门的信息中的任一个字段。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 调用该接口需要具有该部门以及更新操作涉及的部门的通讯录权限。应用商店应用无权限调用此接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/patch
func (r *ContactService) UpdateDepartmentPatch(ctx context.Context, request *UpdateDepartmentPatchReq, options ...MethodOptionFunc) (*UpdateDepartmentPatchResp, *Response, error) {
	if r.cli.mock.mockContactUpdateDepartmentPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateDepartmentPatch mock enable")
		return r.cli.mock.mockContactUpdateDepartmentPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateDepartmentPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateDepartmentPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateDepartmentPatch mock ContactUpdateDepartmentPatch method
func (r *Mock) MockContactUpdateDepartmentPatch(f func(ctx context.Context, request *UpdateDepartmentPatchReq, options ...MethodOptionFunc) (*UpdateDepartmentPatchResp, *Response, error)) {
	r.mockContactUpdateDepartmentPatch = f
}

// UnMockContactUpdateDepartmentPatch un-mock ContactUpdateDepartmentPatch method
func (r *Mock) UnMockContactUpdateDepartmentPatch() {
	r.mockContactUpdateDepartmentPatch = nil
}

// UpdateDepartmentPatchReq ...
type UpdateDepartmentPatchReq struct {
	UserIDType         *IDType                           `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType                 `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID       string                            `path:"department_id" json:"-"`         // 部门ID，需要与查询参数中传入的department_id_type类型保持一致。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
	Name               *string                           `json:"name,omitempty"`                 // 部门名称, 示例值："DemoName", 最小长度：`1` 字符
	I18nName           *UpdateDepartmentPatchReqI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称
	ParentDepartmentID *string                           `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”, 示例值："D067"
	LeaderUserID       *string                           `json:"leader_user_id,omitempty"`       // 部门主管用户ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Order              *string                           `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序, 示例值："100"
	UnitIDs            []string                          `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个, 示例值：custom_unit_id
	CreateGroupChat    *bool                             `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建, 示例值：false
}

// UpdateDepartmentPatchReqI18nName ...
type UpdateDepartmentPatchReqI18nName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 部门的中文名, 示例值："Demo名称"
	JaJp *string `json:"ja_jp,omitempty"` // 部门的日文名, 示例值："デモ名"
	EnUs *string `json:"en_us,omitempty"` // 部门的英文名, 示例值："Demo Name"
}

// updateDepartmentPatchResp ...
type updateDepartmentPatchResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDepartmentPatchResp `json:"data,omitempty"`
}

// UpdateDepartmentPatchResp ...
type UpdateDepartmentPatchResp struct {
	Department *UpdateDepartmentPatchRespDepartment `json:"department,omitempty"` // 部门信息
}

// UpdateDepartmentPatchRespDepartment ...
type UpdateDepartmentPatchRespDepartment struct {
	Name               string                                       `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *UpdateDepartmentPatchRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                                       `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                                       `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                                       `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                       `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                                       `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                                       `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                                     `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                        `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *UpdateDepartmentPatchRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// UpdateDepartmentPatchRespDepartmentI18nName ...
type UpdateDepartmentPatchRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// UpdateDepartmentPatchRespDepartmentStatus ...
type UpdateDepartmentPatchRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateEmployeeTypeEnum 新增自定义人员类型
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/create
func (r *ContactService) CreateEmployeeTypeEnum(ctx context.Context, request *CreateEmployeeTypeEnumReq, options ...MethodOptionFunc) (*CreateEmployeeTypeEnumResp, *Response, error) {
	if r.cli.mock.mockContactCreateEmployeeTypeEnum != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateEmployeeTypeEnum mock enable")
		return r.cli.mock.mockContactCreateEmployeeTypeEnum(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateEmployeeTypeEnum",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createEmployeeTypeEnumResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateEmployeeTypeEnum mock ContactCreateEmployeeTypeEnum method
func (r *Mock) MockContactCreateEmployeeTypeEnum(f func(ctx context.Context, request *CreateEmployeeTypeEnumReq, options ...MethodOptionFunc) (*CreateEmployeeTypeEnumResp, *Response, error)) {
	r.mockContactCreateEmployeeTypeEnum = f
}

// UnMockContactCreateEmployeeTypeEnum un-mock ContactCreateEmployeeTypeEnum method
func (r *Mock) UnMockContactCreateEmployeeTypeEnum() {
	r.mockContactCreateEmployeeTypeEnum = nil
}

// CreateEmployeeTypeEnumReq ...
type CreateEmployeeTypeEnumReq struct {
	Content     string                                  `json:"content,omitempty"`      // 枚举内容, 示例值："专家", 长度范围：`1` ～ `100` 字符
	EnumType    int64                                   `json:"enum_type,omitempty"`    // 类型, 示例值：2, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                   `json:"enum_status,omitempty"`  // 使用状态, 示例值：1, 可选值有: `1`：激活, `2`：未激活
	I18nContent []*CreateEmployeeTypeEnumReqI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// CreateEmployeeTypeEnumReqI18nContent ...
type CreateEmployeeTypeEnumReqI18nContent struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值："zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值："专家"
}

// createEmployeeTypeEnumResp ...
type createEmployeeTypeEnumResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateEmployeeTypeEnumResp `json:"data,omitempty"`
}

// CreateEmployeeTypeEnumResp ...
type CreateEmployeeTypeEnumResp struct {
	EmployeeTypeEnum *CreateEmployeeTypeEnumRespEmployeeTypeEnum `json:"employee_type_enum,omitempty"` // 新建的人员类型信息
}

// CreateEmployeeTypeEnumRespEmployeeTypeEnum ...
type CreateEmployeeTypeEnumRespEmployeeTypeEnum struct {
	EnumID      string                                                   `json:"enum_id,omitempty"`      // 枚举值id
	EnumValue   string                                                   `json:"enum_value,omitempty"`   // 枚举的编号值，创建新的人员类型后，系统生成对应编号。对应[创建用户接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create)中用户信息的employee_type字段值
	Content     string                                                   `json:"content,omitempty"`      // 枚举内容
	EnumType    int64                                                    `json:"enum_type,omitempty"`    // 类型, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                                    `json:"enum_status,omitempty"`  // 使用状态, 可选值有: `1`：激活, `2`：未激活
	I18nContent []*CreateEmployeeTypeEnumRespEmployeeTypeEnumI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// CreateEmployeeTypeEnumRespEmployeeTypeEnumI18nContent ...
type CreateEmployeeTypeEnumRespEmployeeTypeEnumI18nContent struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteEmployeeTypeEnum 删除自定义人员类型
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/delete
func (r *ContactService) DeleteEmployeeTypeEnum(ctx context.Context, request *DeleteEmployeeTypeEnumReq, options ...MethodOptionFunc) (*DeleteEmployeeTypeEnumResp, *Response, error) {
	if r.cli.mock.mockContactDeleteEmployeeTypeEnum != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteEmployeeTypeEnum mock enable")
		return r.cli.mock.mockContactDeleteEmployeeTypeEnum(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteEmployeeTypeEnum",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums/:enum_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteEmployeeTypeEnumResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteEmployeeTypeEnum mock ContactDeleteEmployeeTypeEnum method
func (r *Mock) MockContactDeleteEmployeeTypeEnum(f func(ctx context.Context, request *DeleteEmployeeTypeEnumReq, options ...MethodOptionFunc) (*DeleteEmployeeTypeEnumResp, *Response, error)) {
	r.mockContactDeleteEmployeeTypeEnum = f
}

// UnMockContactDeleteEmployeeTypeEnum un-mock ContactDeleteEmployeeTypeEnum method
func (r *Mock) UnMockContactDeleteEmployeeTypeEnum() {
	r.mockContactDeleteEmployeeTypeEnum = nil
}

// DeleteEmployeeTypeEnumReq ...
type DeleteEmployeeTypeEnumReq struct {
	EnumID string `path:"enum_id" json:"-"` // 枚举值id, 示例值："exGeIjow7zIqWMy+ONkFxA=="
}

// deleteEmployeeTypeEnumResp ...
type deleteEmployeeTypeEnumResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteEmployeeTypeEnumResp `json:"data,omitempty"`
}

// DeleteEmployeeTypeEnumResp ...
type DeleteEmployeeTypeEnumResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetEmployeeTypeEnumList 该接口用于获取员工的人员类型
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list
func (r *ContactService) GetEmployeeTypeEnumList(ctx context.Context, request *GetEmployeeTypeEnumListReq, options ...MethodOptionFunc) (*GetEmployeeTypeEnumListResp, *Response, error) {
	if r.cli.mock.mockContactGetEmployeeTypeEnumList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetEmployeeTypeEnumList mock enable")
		return r.cli.mock.mockContactGetEmployeeTypeEnumList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetEmployeeTypeEnumList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getEmployeeTypeEnumListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetEmployeeTypeEnumList mock ContactGetEmployeeTypeEnumList method
func (r *Mock) MockContactGetEmployeeTypeEnumList(f func(ctx context.Context, request *GetEmployeeTypeEnumListReq, options ...MethodOptionFunc) (*GetEmployeeTypeEnumListResp, *Response, error)) {
	r.mockContactGetEmployeeTypeEnumList = f
}

// UnMockContactGetEmployeeTypeEnumList un-mock ContactGetEmployeeTypeEnumList method
func (r *Mock) UnMockContactGetEmployeeTypeEnumList() {
	r.mockContactGetEmployeeTypeEnumList = nil
}

// GetEmployeeTypeEnumListReq ...
type GetEmployeeTypeEnumListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："3"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
}

// getEmployeeTypeEnumListResp ...
type getEmployeeTypeEnumListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetEmployeeTypeEnumListResp `json:"data,omitempty"`
}

// GetEmployeeTypeEnumListResp ...
type GetEmployeeTypeEnumListResp struct {
	Items     []*GetEmployeeTypeEnumListRespItem `json:"items,omitempty"`      // 枚举数据
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetEmployeeTypeEnumListRespItem ...
type GetEmployeeTypeEnumListRespItem struct {
	EnumID      string                                        `json:"enum_id,omitempty"`      // 枚举值id
	EnumValue   string                                        `json:"enum_value,omitempty"`   // 枚举的编号值，创建新的人员类型后，系统生成对应编号。对应[创建用户接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create)中用户信息的employee_type字段值
	Content     string                                        `json:"content,omitempty"`      // 枚举内容
	EnumType    int64                                         `json:"enum_type,omitempty"`    // 类型, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                         `json:"enum_status,omitempty"`  // 使用状态, 可选值有: `1`：激活, `2`：未激活
	I18nContent []*GetEmployeeTypeEnumListRespItemI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// GetEmployeeTypeEnumListRespItemI18nContent ...
type GetEmployeeTypeEnumListRespItemI18nContent struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateEmployeeTypeEnumPatch 更新自定义人员类型
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/update
func (r *ContactService) UpdateEmployeeTypeEnumPatch(ctx context.Context, request *UpdateEmployeeTypeEnumPatchReq, options ...MethodOptionFunc) (*UpdateEmployeeTypeEnumPatchResp, *Response, error) {
	if r.cli.mock.mockContactUpdateEmployeeTypeEnumPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateEmployeeTypeEnumPatch mock enable")
		return r.cli.mock.mockContactUpdateEmployeeTypeEnumPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateEmployeeTypeEnumPatch",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums/:enum_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateEmployeeTypeEnumPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateEmployeeTypeEnumPatch mock ContactUpdateEmployeeTypeEnumPatch method
func (r *Mock) MockContactUpdateEmployeeTypeEnumPatch(f func(ctx context.Context, request *UpdateEmployeeTypeEnumPatchReq, options ...MethodOptionFunc) (*UpdateEmployeeTypeEnumPatchResp, *Response, error)) {
	r.mockContactUpdateEmployeeTypeEnumPatch = f
}

// UnMockContactUpdateEmployeeTypeEnumPatch un-mock ContactUpdateEmployeeTypeEnumPatch method
func (r *Mock) UnMockContactUpdateEmployeeTypeEnumPatch() {
	r.mockContactUpdateEmployeeTypeEnumPatch = nil
}

// UpdateEmployeeTypeEnumPatchReq ...
type UpdateEmployeeTypeEnumPatchReq struct {
	EnumID      string                                       `path:"enum_id" json:"-"`       // 枚举值id, 示例值："exGeIjow7zIqWMy+ONkFxA=="
	Content     string                                       `json:"content,omitempty"`      // 枚举内容, 示例值："专家", 长度范围：`1` ～ `100` 字符
	EnumType    int64                                        `json:"enum_type,omitempty"`    // 类型, 示例值：2, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                        `json:"enum_status,omitempty"`  // 使用状态, 示例值：1, 可选值有: `1`：激活, `2`：未激活
	I18nContent []*UpdateEmployeeTypeEnumPatchReqI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// UpdateEmployeeTypeEnumPatchReqI18nContent ...
type UpdateEmployeeTypeEnumPatchReqI18nContent struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值："zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值："专家"
}

// updateEmployeeTypeEnumPatchResp ...
type updateEmployeeTypeEnumPatchResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateEmployeeTypeEnumPatchResp `json:"data,omitempty"`
}

// UpdateEmployeeTypeEnumPatchResp ...
type UpdateEmployeeTypeEnumPatchResp struct {
	EmployeeTypeEnum *UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnum `json:"employee_type_enum,omitempty"` // 更新后的人员类型字段
}

// UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnum ...
type UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnum struct {
	EnumID      string                                                        `json:"enum_id,omitempty"`      // 枚举值id
	EnumValue   string                                                        `json:"enum_value,omitempty"`   // 枚举的编号值，创建新的人员类型后，系统生成对应编号。对应[创建用户接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create)中用户信息的employee_type字段值
	Content     string                                                        `json:"content,omitempty"`      // 枚举内容, 长度范围：`1` ～ `100` 字符
	EnumType    int64                                                         `json:"enum_type,omitempty"`    // 类型, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                                         `json:"enum_status,omitempty"`  // 使用状态, 可选值有: `1`：激活, `2`：未激活
	I18nContent []*UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnumI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnumI18nContent ...
type UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnumI18nContent struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteContactGroup 通过该接口可删除企业中的用户组，请注意删除用户组时应用的通讯录权限范围需为“全部员工”，否则会删除失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/delete
func (r *ContactService) DeleteContactGroup(ctx context.Context, request *DeleteContactGroupReq, options ...MethodOptionFunc) (*DeleteContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactDeleteContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteContactGroup mock enable")
		return r.cli.mock.mockContactDeleteContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteContactGroup",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteContactGroup mock ContactDeleteContactGroup method
func (r *Mock) MockContactDeleteContactGroup(f func(ctx context.Context, request *DeleteContactGroupReq, options ...MethodOptionFunc) (*DeleteContactGroupResp, *Response, error)) {
	r.mockContactDeleteContactGroup = f
}

// UnMockContactDeleteContactGroup un-mock ContactDeleteContactGroup method
func (r *Mock) UnMockContactDeleteContactGroup() {
	r.mockContactDeleteContactGroup = nil
}

// DeleteContactGroupReq ...
type DeleteContactGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 需删除的用户组ID, 示例值："g1837191"
}

// deleteContactGroupResp ...
type deleteContactGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteContactGroupResp `json:"data,omitempty"`
}

// DeleteContactGroupResp ...
type DeleteContactGroupResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactGroup 根据用户组 ID 查询某个用户组的基本信息，请确保应用的通讯录权限范围里包括该用户组或者是“全部员工”，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/get
func (r *ContactService) GetContactGroup(ctx context.Context, request *GetContactGroupReq, options ...MethodOptionFunc) (*GetContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactGetContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactGroup mock enable")
		return r.cli.mock.mockContactGetContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactGroup mock ContactGetContactGroup method
func (r *Mock) MockContactGetContactGroup(f func(ctx context.Context, request *GetContactGroupReq, options ...MethodOptionFunc) (*GetContactGroupResp, *Response, error)) {
	r.mockContactGetContactGroup = f
}

// UnMockContactGetContactGroup un-mock ContactGetContactGroup method
func (r *Mock) UnMockContactGetContactGroup() {
	r.mockContactGetContactGroup = nil
}

// GetContactGroupReq ...
type GetContactGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 用户组ID, 示例值："g193821"
}

// getContactGroupResp ...
type getContactGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetContactGroupResp `json:"data,omitempty"`
}

// GetContactGroupResp ...
type GetContactGroupResp struct {
	Group *GetContactGroupRespGroup `json:"group,omitempty"` // 用户组详情
}

// GetContactGroupRespGroup ...
type GetContactGroupRespGroup struct {
	ID                    string `json:"id,omitempty"`                      // 用户组ID
	Name                  string `json:"name,omitempty"`                    // 用户组名字
	Description           string `json:"description,omitempty"`             // 用户组描述
	MemberUserCount       int64  `json:"member_user_count,omitempty"`       // 用户组成员中用户的数量
	MemberDepartmentCount int64  `json:"member_department_count,omitempty"` // 用户组成员中部门的数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateContactGroup 使用该接口创建用户组，请注意创建用户组时应用的通讯录权限范围需为“全部员工”，否则会创建失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/create
func (r *ContactService) CreateContactGroup(ctx context.Context, request *CreateContactGroupReq, options ...MethodOptionFunc) (*CreateContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactCreateContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateContactGroup mock enable")
		return r.cli.mock.mockContactCreateContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateContactGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateContactGroup mock ContactCreateContactGroup method
func (r *Mock) MockContactCreateContactGroup(f func(ctx context.Context, request *CreateContactGroupReq, options ...MethodOptionFunc) (*CreateContactGroupResp, *Response, error)) {
	r.mockContactCreateContactGroup = f
}

// UnMockContactCreateContactGroup un-mock ContactCreateContactGroup method
func (r *Mock) UnMockContactCreateContactGroup() {
	r.mockContactCreateContactGroup = nil
}

// CreateContactGroupReq ...
type CreateContactGroupReq struct {
	GroupID     *string `json:"group_id,omitempty"`    // 自定义用户组ID，可在创建时自定义，不自定义则由系统自动生成，已创建用户组不允许修改 group_id 。,自定义group_id数据校验规则：,最大长度：64 字符,校验规则：数字、大小写字母的组合，不能包含空格, 示例值："g122817"
	Name        string  `json:"name,omitempty"`        // 用户组的名字，企业内唯一，最大长度：100 字符, 示例值："IT 外包组"
	Description *string `json:"description,omitempty"` // 用户组描述, 示例值："IT服务人员的集合"
	Type        *int64  `json:"type,omitempty"`        // 用户组的类型。默认为1表示普通用户组, 示例值：1, 可选值有: `1`：普通用户组, 默认值: `1`
}

// createContactGroupResp ...
type createContactGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateContactGroupResp `json:"data,omitempty"`
}

// CreateContactGroupResp ...
type CreateContactGroupResp struct {
	GroupID string `json:"group_id,omitempty"` // 用户组ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactGroupList 通过该接口可查询企业的用户组列表，如果应用的通讯录权限范围是“全部员工”，则可获取企业全部用户组列表。如果应用的通讯录权限范围不是“全部员工”，则仅可获取通讯录权限范围内的用户组。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist
func (r *ContactService) GetContactGroupList(ctx context.Context, request *GetContactGroupListReq, options ...MethodOptionFunc) (*GetContactGroupListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactGroupList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactGroupList mock enable")
		return r.cli.mock.mockContactGetContactGroupList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactGroupList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/simplelist",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactGroupListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactGroupList mock ContactGetContactGroupList method
func (r *Mock) MockContactGetContactGroupList(f func(ctx context.Context, request *GetContactGroupListReq, options ...MethodOptionFunc) (*GetContactGroupListResp, *Response, error)) {
	r.mockContactGetContactGroupList = f
}

// UnMockContactGetContactGroupList un-mock ContactGetContactGroupList method
func (r *Mock) UnMockContactGetContactGroupList() {
	r.mockContactGetContactGroupList = nil
}

// GetContactGroupListReq ...
type GetContactGroupListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：50, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	Type      *int64  `query:"type" json:"-"`       // 用户组类型, 示例值：1, 可选值有: `1`：普通用户组, 默认值: `1`
}

// getContactGroupListResp ...
type getContactGroupListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetContactGroupListResp `json:"data,omitempty"`
}

// GetContactGroupListResp ...
type GetContactGroupListResp struct {
	Grouplist []*GetContactGroupListRespGroup `json:"grouplist,omitempty"`  // 用户组列表
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetContactGroupListRespGroup ...
type GetContactGroupListRespGroup struct {
	ID                    string `json:"id,omitempty"`                      // 用户组ID
	Name                  string `json:"name,omitempty"`                    // 用户组名字
	Description           string `json:"description,omitempty"`             // 用户组描述
	MemberUserCount       int64  `json:"member_user_count,omitempty"`       // 用户组成员中用户的数量
	MemberDepartmentCount int64  `json:"member_department_count,omitempty"` // 用户组成员中部门的数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddContactGroupMember 向用户组中添加成员(目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员添加到任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员添加到通讯录权限范围的用户组中，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/add
func (r *ContactService) AddContactGroupMember(ctx context.Context, request *AddContactGroupMemberReq, options ...MethodOptionFunc) (*AddContactGroupMemberResp, *Response, error) {
	if r.cli.mock.mockContactAddContactGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#AddContactGroupMember mock enable")
		return r.cli.mock.mockContactAddContactGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "AddContactGroupMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id/member/add",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(addContactGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactAddContactGroupMember mock ContactAddContactGroupMember method
func (r *Mock) MockContactAddContactGroupMember(f func(ctx context.Context, request *AddContactGroupMemberReq, options ...MethodOptionFunc) (*AddContactGroupMemberResp, *Response, error)) {
	r.mockContactAddContactGroupMember = f
}

// UnMockContactAddContactGroupMember un-mock ContactAddContactGroupMember method
func (r *Mock) UnMockContactAddContactGroupMember() {
	r.mockContactAddContactGroupMember = nil
}

// AddContactGroupMemberReq ...
type AddContactGroupMemberReq struct {
	GroupID      string `path:"group_id" json:"-"`        // 用户组ID, 示例值："g281721"
	MemberType   string `json:"member_type,omitempty"`    // 用户组成员的类型，取值为 user, 示例值："user", 可选值有: `user`：user, 默认值: `user`
	MemberIDType IDType `json:"member_id_type,omitempty"` // 当member_type =user时候，member_id_type表示user_id_type，枚举值为open_id, union_id, user_id, 示例值："open_id", 可选值有: `open_id`：member_type =user时候，表示用户的open_id, `union_id`：member_type =user时候，表示用户的union_id, `user_id`：member_type =user时候，表示用户的user_id
	MemberID     string `json:"member_id,omitempty"`      // 添加的成员ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// addContactGroupMemberResp ...
type addContactGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *AddContactGroupMemberResp `json:"data,omitempty"`
}

// AddContactGroupMemberResp ...
type AddContactGroupMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteContactGroupMember 从用户组中移除成员 (目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员移出任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员从通讯录权限范围的用户组中移除, [点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/remove
func (r *ContactService) DeleteContactGroupMember(ctx context.Context, request *DeleteContactGroupMemberReq, options ...MethodOptionFunc) (*DeleteContactGroupMemberResp, *Response, error) {
	if r.cli.mock.mockContactDeleteContactGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteContactGroupMember mock enable")
		return r.cli.mock.mockContactDeleteContactGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteContactGroupMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id/member/remove",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteContactGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteContactGroupMember mock ContactDeleteContactGroupMember method
func (r *Mock) MockContactDeleteContactGroupMember(f func(ctx context.Context, request *DeleteContactGroupMemberReq, options ...MethodOptionFunc) (*DeleteContactGroupMemberResp, *Response, error)) {
	r.mockContactDeleteContactGroupMember = f
}

// UnMockContactDeleteContactGroupMember un-mock ContactDeleteContactGroupMember method
func (r *Mock) UnMockContactDeleteContactGroupMember() {
	r.mockContactDeleteContactGroupMember = nil
}

// DeleteContactGroupMemberReq ...
type DeleteContactGroupMemberReq struct {
	GroupID      string `path:"group_id" json:"-"`        // 用户组ID, 示例值："g198123"
	MemberType   string `json:"member_type,omitempty"`    // 用户组成员的类型，取值为 user, 示例值："user", 可选值有: `user`：user, 默认值: `user`
	MemberID     string `json:"member_id,omitempty"`      // 操作移除的用户组成员ID, 示例值："xj82871k"
	MemberIDType IDType `json:"member_id_type,omitempty"` // 当member_type =user时候，member_id_type表示user_id_type，枚举值为open_id, union_id, user_id, 示例值："open_id", 可选值有: `open_id`：member_type =user时候，表示用户的open_id, `union_id`：member_type =user时候，表示用户的union_id, `user_id`：member_type =user时候，表示用户的user_id, 默认值: `open_id`
}

// deleteContactGroupMemberResp ...
type deleteContactGroupMemberResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *DeleteContactGroupMemberResp `json:"data,omitempty"`
}

// DeleteContactGroupMemberResp ...
type DeleteContactGroupMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactGroupMember 通过该接口可查询某个用户组的成员(目前成员仅支持用户，未来会支持部门)列表，如果应用的通讯录权限范围是“全部员工”，则可查询企业内任何用户组的成员列表。如果应用的通讯录权限范围不是“全部员工”，则仅可查询通讯录权限范围中的用户组的成员列表，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/simplelist
func (r *ContactService) GetContactGroupMember(ctx context.Context, request *GetContactGroupMemberReq, options ...MethodOptionFunc) (*GetContactGroupMemberResp, *Response, error) {
	if r.cli.mock.mockContactGetContactGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactGroupMember mock enable")
		return r.cli.mock.mockContactGetContactGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactGroupMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id/member/simplelist",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactGroupMember mock ContactGetContactGroupMember method
func (r *Mock) MockContactGetContactGroupMember(f func(ctx context.Context, request *GetContactGroupMemberReq, options ...MethodOptionFunc) (*GetContactGroupMemberResp, *Response, error)) {
	r.mockContactGetContactGroupMember = f
}

// UnMockContactGetContactGroupMember un-mock ContactGetContactGroupMember method
func (r *Mock) UnMockContactGetContactGroupMember() {
	r.mockContactGetContactGroupMember = nil
}

// GetContactGroupMemberReq ...
type GetContactGroupMemberReq struct {
	PageSize     *int64  `query:"page_size" json:"-"`      // 分页大小, 示例值：50, 默认值: `50`
	PageToken    *string `query:"page_token" json:"-"`     // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	MemberIDType *IDType `query:"member_id_type" json:"-"` // 欲获取成员ID类型。当member_type =user时候，member_id_type表示user_id_type，枚举值为open_id, union_id, user_id, 示例值："open_id", 可选值有: `open_id`：member_type =user时候，表示用户的open_id, `union_id`：member_type =user时候，表示用户的union_id, `user_id`：member_type =user时候，表示用户的user_id, 默认值: `open_id`
	MemberType   *string `query:"member_type" json:"-"`    // 期待获取的用户组成员的类型，取值为 user, 示例值："user", 可选值有: `user`：user, 默认值: `user`
	GroupID      string  `path:"group_id" json:"-"`        // 用户组ID, 示例值："g128187"
}

// getContactGroupMemberResp ...
type getContactGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetContactGroupMemberResp `json:"data,omitempty"`
}

// GetContactGroupMemberResp ...
type GetContactGroupMemberResp struct {
	Memberlist []*GetContactGroupMemberRespMember `json:"memberlist,omitempty"` // 成员列表
	PageToken  string                             `json:"page_token,omitempty"` // 下次分页获取的page_token
	HasMore    bool                               `json:"has_more,omitempty"`   // 是否还需要分页获取
}

// GetContactGroupMemberRespMember ...
type GetContactGroupMemberRespMember struct {
	MemberID   string `json:"member_id,omitempty"`   // 成员ID
	MemberType string `json:"member_type,omitempty"` // 用户组成员的类型，目前取值为 user。未来将支持department
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateContactGroup 使用该接口更新用户组信息，请注意更新用户组时应用的通讯录权限范围需为“全部员工”，否则会更新失败。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/patch
func (r *ContactService) UpdateContactGroup(ctx context.Context, request *UpdateContactGroupReq, options ...MethodOptionFunc) (*UpdateContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactUpdateContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateContactGroup mock enable")
		return r.cli.mock.mockContactUpdateContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateContactGroup",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateContactGroup mock ContactUpdateContactGroup method
func (r *Mock) MockContactUpdateContactGroup(f func(ctx context.Context, request *UpdateContactGroupReq, options ...MethodOptionFunc) (*UpdateContactGroupResp, *Response, error)) {
	r.mockContactUpdateContactGroup = f
}

// UnMockContactUpdateContactGroup un-mock ContactUpdateContactGroup method
func (r *Mock) UnMockContactUpdateContactGroup() {
	r.mockContactUpdateContactGroup = nil
}

// UpdateContactGroupReq ...
type UpdateContactGroupReq struct {
	GroupID     string  `path:"group_id" json:"-"`     // 用户组ID, 示例值："g187131"
	Name        *string `json:"name,omitempty"`        // 用户组的名字，企业内唯一，最大长度：100 字符, 示例值："外包 IT 用户组"
	Description *string `json:"description,omitempty"` // 用户组描述信息,最大长度：500 字, 示例值："IT 外包用户组，需要进行细粒度权限管控"
}

// updateContactGroupResp ...
type updateContactGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateContactGroupResp `json:"data,omitempty"`
}

// UpdateContactGroupResp ...
type UpdateContactGroupResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactScopeList 该接口用于获取应用被授权可访问的通讯录范围，包括可访问的部门列表、用户列表和用户组列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/scope/list
func (r *ContactService) GetContactScopeList(ctx context.Context, request *GetContactScopeListReq, options ...MethodOptionFunc) (*GetContactScopeListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactScopeList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactScopeList mock enable")
		return r.cli.mock.mockContactGetContactScopeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactScopeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/scopes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactScopeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactScopeList mock ContactGetContactScopeList method
func (r *Mock) MockContactGetContactScopeList(f func(ctx context.Context, request *GetContactScopeListReq, options ...MethodOptionFunc) (*GetContactScopeListResp, *Response, error)) {
	r.mockContactGetContactScopeList = f
}

// UnMockContactGetContactScopeList un-mock ContactGetContactScopeList method
func (r *Mock) UnMockContactGetContactScopeList() {
	r.mockContactGetContactScopeList = nil
}

// GetContactScopeListReq ...
type GetContactScopeListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 返回值的部门ID的类型, 示例值："department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：50, 最大值：`100`
}

// getContactScopeListResp ...
type getContactScopeListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetContactScopeListResp `json:"data,omitempty"`
}

// GetContactScopeListResp ...
type GetContactScopeListResp struct {
	DepartmentIDs []string `json:"department_ids,omitempty"` // 已授权部门列表，授权范围为全员可见时返回的是当前企业的所有一级部门列表
	UserIDs       []string `json:"user_ids,omitempty"`       // 已授权用户列表，应用申请了获取用户user_id 权限时返回；当授权范围为全员可见时返回的是当前企业所有顶级部门用户列表
	GroupIDs      []string `json:"group_ids,omitempty"`      // 已授权的用户组，授权范围为全员可见时返回的是当前企业所有用户组
	HasMore       bool     `json:"has_more,omitempty"`       // 是否还有更多项
	PageToken     string   `json:"page_token,omitempty"`     // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BindContactUnitDepartment 通过该接口建立部门与单位的绑定关系，需更新单位的权限，需对应部门的通讯录权限。由于单位是旗舰版付费功能，企业需开通相关版本，否则会绑定失败
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/bind_department
func (r *ContactService) BindContactUnitDepartment(ctx context.Context, request *BindContactUnitDepartmentReq, options ...MethodOptionFunc) (*BindContactUnitDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactBindContactUnitDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BindContactUnitDepartment mock enable")
		return r.cli.mock.mockContactBindContactUnitDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BindContactUnitDepartment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/bind_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(bindContactUnitDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBindContactUnitDepartment mock ContactBindContactUnitDepartment method
func (r *Mock) MockContactBindContactUnitDepartment(f func(ctx context.Context, request *BindContactUnitDepartmentReq, options ...MethodOptionFunc) (*BindContactUnitDepartmentResp, *Response, error)) {
	r.mockContactBindContactUnitDepartment = f
}

// UnMockContactBindContactUnitDepartment un-mock ContactBindContactUnitDepartment method
func (r *Mock) UnMockContactBindContactUnitDepartment() {
	r.mockContactBindContactUnitDepartment = nil
}

// BindContactUnitDepartmentReq ...
type BindContactUnitDepartmentReq struct {
	UnitID           string            `json:"unit_id,omitempty"`            // 单位ID, 示例值："BU121"
	DepartmentID     string            `json:"department_id,omitempty"`      // 单位关联的部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	DepartmentIDType *DepartmentIDType `json:"department_id_type,omitempty"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
}

// bindContactUnitDepartmentResp ...
type bindContactUnitDepartmentResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *BindContactUnitDepartmentResp `json:"data,omitempty"`
}

// BindContactUnitDepartmentResp ...
type BindContactUnitDepartmentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateContactUnit 使用该接口创建单位，需要有更新单位的权限。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以创建单位。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/create
func (r *ContactService) CreateContactUnit(ctx context.Context, request *CreateContactUnitReq, options ...MethodOptionFunc) (*CreateContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactCreateContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateContactUnit mock enable")
		return r.cli.mock.mockContactCreateContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateContactUnit",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateContactUnit mock ContactCreateContactUnit method
func (r *Mock) MockContactCreateContactUnit(f func(ctx context.Context, request *CreateContactUnitReq, options ...MethodOptionFunc) (*CreateContactUnitResp, *Response, error)) {
	r.mockContactCreateContactUnit = f
}

// UnMockContactCreateContactUnit un-mock ContactCreateContactUnit method
func (r *Mock) UnMockContactCreateContactUnit() {
	r.mockContactCreateContactUnit = nil
}

// CreateContactUnitReq ...
type CreateContactUnitReq struct {
	UnitID   *string `json:"unit_id,omitempty"`   // 单位自定义ID。不带默认自动生成。1-64字节范围大小，需为数字字母, 示例值："BU121"
	Name     string  `json:"name,omitempty"`      // 单位的名字，长度范围为1-100个字, 示例值："消费者事业部"
	UnitType string  `json:"unit_type,omitempty"` // 单位类型，长度范围为1-100个字，创建后不可修改, 示例值："事业部"
}

// createContactUnitResp ...
type createContactUnitResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateContactUnitResp `json:"data,omitempty"`
}

// CreateContactUnitResp ...
type CreateContactUnitResp struct {
	UnitID string `json:"unit_id,omitempty"` // 单位的自定义ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteContactUnit 使用该接口删除单位，需要有更新单位的权限。注意：如果单位的单位类型被其它的业务使用，不允许删除。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/delete
func (r *ContactService) DeleteContactUnit(ctx context.Context, request *DeleteContactUnitReq, options ...MethodOptionFunc) (*DeleteContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactDeleteContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteContactUnit mock enable")
		return r.cli.mock.mockContactDeleteContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteContactUnit",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/:unit_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteContactUnit mock ContactDeleteContactUnit method
func (r *Mock) MockContactDeleteContactUnit(f func(ctx context.Context, request *DeleteContactUnitReq, options ...MethodOptionFunc) (*DeleteContactUnitResp, *Response, error)) {
	r.mockContactDeleteContactUnit = f
}

// UnMockContactDeleteContactUnit un-mock ContactDeleteContactUnit method
func (r *Mock) UnMockContactDeleteContactUnit() {
	r.mockContactDeleteContactUnit = nil
}

// DeleteContactUnitReq ...
type DeleteContactUnitReq struct {
	UnitID string `path:"unit_id" json:"-"` // 单位ID, 示例值："BU121"
}

// deleteContactUnitResp ...
type deleteContactUnitResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteContactUnitResp `json:"data,omitempty"`
}

// DeleteContactUnitResp ...
type DeleteContactUnitResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactUnit 调用该接口获取单位信息，需有获取单位的权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/get
func (r *ContactService) GetContactUnit(ctx context.Context, request *GetContactUnitReq, options ...MethodOptionFunc) (*GetContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactGetContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactUnit mock enable")
		return r.cli.mock.mockContactGetContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactUnit",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/:unit_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactUnit mock ContactGetContactUnit method
func (r *Mock) MockContactGetContactUnit(f func(ctx context.Context, request *GetContactUnitReq, options ...MethodOptionFunc) (*GetContactUnitResp, *Response, error)) {
	r.mockContactGetContactUnit = f
}

// UnMockContactGetContactUnit un-mock ContactGetContactUnit method
func (r *Mock) UnMockContactGetContactUnit() {
	r.mockContactGetContactUnit = nil
}

// GetContactUnitReq ...
type GetContactUnitReq struct {
	UnitID string `path:"unit_id" json:"-"` // 单位ID, 示例值："BU121"
}

// getContactUnitResp ...
type getContactUnitResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetContactUnitResp `json:"data,omitempty"`
}

// GetContactUnitResp ...
type GetContactUnitResp struct {
	Unit *GetContactUnitRespUnit `json:"unit,omitempty"` // 单位信息
}

// GetContactUnitRespUnit ...
type GetContactUnitRespUnit struct {
	UnitID   string `json:"unit_id,omitempty"`   // 单位的自定义ID
	Name     string `json:"name,omitempty"`      // 单位的名字
	UnitType string `json:"unit_type,omitempty"` // 单位的类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactUnitList 通过该接口获取企业的单位列表，需获取单位的权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list
func (r *ContactService) GetContactUnitList(ctx context.Context, request *GetContactUnitListReq, options ...MethodOptionFunc) (*GetContactUnitListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactUnitList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactUnitList mock enable")
		return r.cli.mock.mockContactGetContactUnitList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactUnitList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactUnitListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactUnitList mock ContactGetContactUnitList method
func (r *Mock) MockContactGetContactUnitList(f func(ctx context.Context, request *GetContactUnitListReq, options ...MethodOptionFunc) (*GetContactUnitListResp, *Response, error)) {
	r.mockContactGetContactUnitList = f
}

// UnMockContactGetContactUnitList un-mock ContactGetContactUnitList method
func (r *Mock) UnMockContactGetContactUnitList() {
	r.mockContactGetContactUnitList = nil
}

// GetContactUnitListReq ...
type GetContactUnitListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小，默认50，取值范围 1-100, 示例值：50, 默认值: `50`, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
}

// getContactUnitListResp ...
type getContactUnitListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetContactUnitListResp `json:"data,omitempty"`
}

// GetContactUnitListResp ...
type GetContactUnitListResp struct {
	Unitlist  []*GetContactUnitListRespUnit `json:"unitlist,omitempty"`   // 单位列表
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有分页数据
	PageToken string                        `json:"page_token,omitempty"` // 分页下次调用的page_token值
}

// GetContactUnitListRespUnit ...
type GetContactUnitListRespUnit struct {
	UnitID   string `json:"unit_id,omitempty"`   // 单位的自定义ID
	Name     string `json:"name,omitempty"`      // 单位的名字
	UnitType string `json:"unit_type,omitempty"` // 单位的类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactUnitDepartmentList 通过该接口获取单位绑定的部门列表，需具有获取单位的权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list_department
func (r *ContactService) GetContactUnitDepartmentList(ctx context.Context, request *GetContactUnitDepartmentListReq, options ...MethodOptionFunc) (*GetContactUnitDepartmentListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactUnitDepartmentList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactUnitDepartmentList mock enable")
		return r.cli.mock.mockContactGetContactUnitDepartmentList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactUnitDepartmentList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/list_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactUnitDepartmentListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactUnitDepartmentList mock ContactGetContactUnitDepartmentList method
func (r *Mock) MockContactGetContactUnitDepartmentList(f func(ctx context.Context, request *GetContactUnitDepartmentListReq, options ...MethodOptionFunc) (*GetContactUnitDepartmentListResp, *Response, error)) {
	r.mockContactGetContactUnitDepartmentList = f
}

// UnMockContactGetContactUnitDepartmentList un-mock ContactGetContactUnitDepartmentList method
func (r *Mock) UnMockContactGetContactUnitDepartmentList() {
	r.mockContactGetContactUnitDepartmentList = nil
}

// GetContactUnitDepartmentListReq ...
type GetContactUnitDepartmentListReq struct {
	UnitID           string            `query:"unit_id" json:"-"`            // 单位ID, 示例值："BU121"
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中预获取的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：50, 默认值: `50`, 最大值：`100`
}

// getContactUnitDepartmentListResp ...
type getContactUnitDepartmentListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetContactUnitDepartmentListResp `json:"data,omitempty"`
}

// GetContactUnitDepartmentListResp ...
type GetContactUnitDepartmentListResp struct {
	Departmentlist []*GetContactUnitDepartmentListRespDepartment `json:"departmentlist,omitempty"` // 单位绑定的部门列表
	HasMore        bool                                          `json:"has_more,omitempty"`       // 是否还有分页数据
	PageToken      string                                        `json:"page_token,omitempty"`     // 下次分页请求标记
}

// GetContactUnitDepartmentListRespDepartment ...
type GetContactUnitDepartmentListRespDepartment struct {
	UnitID       string `json:"unit_id,omitempty"`       // 单位ID
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnbindContactUnitDepartment 通过该接口解除部门与单位的绑定关系，需更新单位的权限，需对应部门的通讯录权限。由于单位是旗舰版付费功能，企业需开通相关功能，否则会解绑失败
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/unbind_department
func (r *ContactService) UnbindContactUnitDepartment(ctx context.Context, request *UnbindContactUnitDepartmentReq, options ...MethodOptionFunc) (*UnbindContactUnitDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactUnbindContactUnitDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UnbindContactUnitDepartment mock enable")
		return r.cli.mock.mockContactUnbindContactUnitDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UnbindContactUnitDepartment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/unbind_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(unbindContactUnitDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUnbindContactUnitDepartment mock ContactUnbindContactUnitDepartment method
func (r *Mock) MockContactUnbindContactUnitDepartment(f func(ctx context.Context, request *UnbindContactUnitDepartmentReq, options ...MethodOptionFunc) (*UnbindContactUnitDepartmentResp, *Response, error)) {
	r.mockContactUnbindContactUnitDepartment = f
}

// UnMockContactUnbindContactUnitDepartment un-mock ContactUnbindContactUnitDepartment method
func (r *Mock) UnMockContactUnbindContactUnitDepartment() {
	r.mockContactUnbindContactUnitDepartment = nil
}

// UnbindContactUnitDepartmentReq ...
type UnbindContactUnitDepartmentReq struct {
	UnitID           string            `json:"unit_id,omitempty"`            // 单位ID, 示例值："BU121"
	DepartmentID     string            `json:"department_id,omitempty"`      // 预解除关联的部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	DepartmentIDType *DepartmentIDType `json:"department_id_type,omitempty"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
}

// unbindContactUnitDepartmentResp ...
type unbindContactUnitDepartmentResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UnbindContactUnitDepartmentResp `json:"data,omitempty"`
}

// UnbindContactUnitDepartmentResp ...
type UnbindContactUnitDepartmentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateContactUnit 调用该接口，需要有更新单位的权限。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以修改单位
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/patch
func (r *ContactService) UpdateContactUnit(ctx context.Context, request *UpdateContactUnitReq, options ...MethodOptionFunc) (*UpdateContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactUpdateContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateContactUnit mock enable")
		return r.cli.mock.mockContactUpdateContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateContactUnit",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/:unit_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateContactUnit mock ContactUpdateContactUnit method
func (r *Mock) MockContactUpdateContactUnit(f func(ctx context.Context, request *UpdateContactUnitReq, options ...MethodOptionFunc) (*UpdateContactUnitResp, *Response, error)) {
	r.mockContactUpdateContactUnit = f
}

// UnMockContactUpdateContactUnit un-mock ContactUpdateContactUnit method
func (r *Mock) UnMockContactUpdateContactUnit() {
	r.mockContactUpdateContactUnit = nil
}

// UpdateContactUnitReq ...
type UpdateContactUnitReq struct {
	UnitID string  `path:"unit_id" json:"-"` // 单位ID, 示例值："BU121"
	Name   *string `json:"name,omitempty"`   // 单位的名字, 示例值："消费者事业部"
}

// updateContactUnitResp ...
type updateContactUnitResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateContactUnitResp `json:"data,omitempty"`
}

// UpdateContactUnitResp ...
type UpdateContactUnitResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetUserByID 通过该接口，可使用手机号/邮箱获取用户的 ID 信息，具体获取支持的 ID 类型包括 open_id、user_id、union_id，可通过查询参数指定。
//
// 如果查询的手机号、邮箱不存在，或者无权限查看对应的用户，则返回的open_id为空。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id
func (r *ContactService) BatchGetUserByID(ctx context.Context, request *BatchGetUserByIDReq, options ...MethodOptionFunc) (*BatchGetUserByIDResp, *Response, error) {
	if r.cli.mock.mockContactBatchGetUserByID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BatchGetUserByID mock enable")
		return r.cli.mock.mockContactBatchGetUserByID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BatchGetUserByID",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetUserByIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBatchGetUserByID mock ContactBatchGetUserByID method
func (r *Mock) MockContactBatchGetUserByID(f func(ctx context.Context, request *BatchGetUserByIDReq, options ...MethodOptionFunc) (*BatchGetUserByIDResp, *Response, error)) {
	r.mockContactBatchGetUserByID = f
}

// UnMockContactBatchGetUserByID un-mock ContactBatchGetUserByID method
func (r *Mock) UnMockContactBatchGetUserByID() {
	r.mockContactBatchGetUserByID = nil
}

// BatchGetUserByIDReq ...
type BatchGetUserByIDReq struct {
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Emails     []string `json:"emails,omitempty"`       // 要查询的用户邮箱，最多 50 条。, 示例值：zhangsan@a.com, 最大长度：`50`
	Mobiles    []string `json:"mobiles,omitempty"`      // 要查询的用户手机号，最多 50 条。 非中国大陆地区的手机号需要添加以 “+” 开头的国家 / 地区代码。, 示例值：13812345678, 最大长度：`50`
}

// batchGetUserByIDResp ...
type batchGetUserByIDResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetUserByIDResp `json:"data,omitempty"`
}

// BatchGetUserByIDResp ...
type BatchGetUserByIDResp struct {
	UserList []*BatchGetUserByIDRespUser `json:"user_list,omitempty"` // 手机号或者邮箱对应的用户id信息
}

// BatchGetUserByIDRespUser ...
type BatchGetUserByIDRespUser struct {
	UserID string `json:"user_id,omitempty"` // 用户id，值为user_id_type所指定的类型。如果查询的手机号、邮箱不存在，或者无权限查看对应的用户，则此项为空。
	Mobile string `json:"mobile,omitempty"`  // 手机号，通过手机号查询时返回
	Email  string `json:"email,omitempty"`   // 邮箱，通过邮箱查询时返回
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateUser 使用该接口向通讯录创建一个用户，可以理解为员工入职。创建用户后只返回有数据权限的数据。具体的数据权限的与字段的对应关系请参照[应用权限](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// - 新增用户的所有部门必须都在当前应用的通讯录授权范围内才允许新增用户，如果想要在根部门下新增用户，必须要有全员权限。
// - 应用商店应用无权限调用此接口。
// - 创建用户后，会给用户发送邀请短信/邮件，用户在操作同意后才可访问团队。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create
func (r *ContactService) CreateUser(ctx context.Context, request *CreateUserReq, options ...MethodOptionFunc) (*CreateUserResp, *Response, error) {
	if r.cli.mock.mockContactCreateUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateUser mock enable")
		return r.cli.mock.mockContactCreateUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateUser",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateUser mock ContactCreateUser method
func (r *Mock) MockContactCreateUser(f func(ctx context.Context, request *CreateUserReq, options ...MethodOptionFunc) (*CreateUserResp, *Response, error)) {
	r.mockContactCreateUser = f
}

// UnMockContactCreateUser un-mock ContactCreateUser method
func (r *Mock) UnMockContactCreateUser() {
	r.mockContactCreateUser = nil
}

// CreateUserReq ...
type CreateUserReq struct {
	UserIDType       *IDType                    `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType          `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型。,不同 ID 的说明以及获取方式参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	ClientToken      *string                    `query:"client_token" json:"-"`       // 根据client_token是否一致来判断是否为同一请求, 示例值："xxxx-xxxxx-xxx"
	UserID           *string                    `json:"user_id,omitempty"`            // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："3e3cf96b"
	Name             string                     `json:"name,omitempty"`               // 用户名, 示例值："张三", 最小长度：`1` 字符
	EnName           *string                    `json:"en_name,omitempty"`            // 英文名, 示例值："San Zhang"
	Nickname         *string                    `json:"nickname,omitempty"`           // 别名, 示例值："Alex Zhang"
	Email            *string                    `json:"email,omitempty"`              // 邮箱，注意非 +86 手机号成员必须同时添加邮箱, 示例值："zhangsan@gmail.com"
	Mobile           string                     `json:"mobile,omitempty"`             // 手机号，在本企业内不可重复；未认证企业仅支持添加中国大陆手机号，通过飞书认证的企业允许添加海外手机号，注意国际电话区号前缀中必须包含加号 +, 示例值："中国大陆手机号: 13011111111 或 +8613011111111, 境外手机号:  +41446681800"
	MobileVisible    *bool                      `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码, 示例值：false
	Gender           *int64                     `json:"gender,omitempty"`             // 性别, 示例值：1, 可选值有: `0`：保密, `1`：男, `2`：女
	AvatarKey        *string                    `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key, 示例值："2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
	DepartmentIDs    []string                   `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
	LeaderUserID     *string                    `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	City             *string                    `json:"city,omitempty"`               // 城市, 示例值："杭州"
	Country          *string                    `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description), 示例值："CN"
	WorkStation      *string                    `json:"work_station,omitempty"`       // 工位, 示例值："北楼-H34"
	JoinTime         *int64                     `json:"join_time,omitempty"`          // 入职时间, 示例值：2147483647
	EmployeeNo       *string                    `json:"employee_no,omitempty"`        // 工号, 示例值："1"
	EmployeeType     int64                      `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list), 示例值：1
	Orders           []*CreateUserReqOrder      `json:"orders,omitempty"`             // 用户排序信息
	CustomAttrs      []*CreateUserReqCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。
	EnterpriseEmail  *string                    `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务, 示例值："demo@mail.com"
	JobTitle         *string                    `json:"job_title,omitempty"`          // 职务, 示例值："xxxxx"
	EntEmailPassword *string                    `json:"ent_email_password,omitempty"` // 企业邮箱登录时的密码（已废弃，无需使用）, 示例值："-"
}

// CreateUserReqOrder ...
type CreateUserReqOrder struct {
	DepartmentID    *string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	UserOrder       *int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前, 示例值：100
	DepartmentOrder *int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前, 示例值：100
}

// CreateUserReqCustomAttr ...
type CreateUserReqCustomAttr struct {
	Type  *string                       `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN), 示例值："TEXT"
	ID    *string                       `json:"id,omitempty"`    // 自定义字段ID, 示例值："DemoId"
	Value *CreateUserReqCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// CreateUserReqCustomAttrValue ...
type CreateUserReqCustomAttrValue struct {
	Text        *string                                  `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填, 示例值："DemoText"
	URL         *string                                  `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL, 示例值："http://www.feishu.cn"
	PcURL       *string                                  `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL, 示例值："http://www.feishu.cn"
	OptionID    *string                                  `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值, 示例值："edcvfrtg"
	GenericUser *CreateUserReqCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// CreateUserReqCustomAttrValueGenericUser ...
type CreateUserReqCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："9b2fabg5"
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户, 示例值：1
}

// createUserResp ...
type createUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *CreateUserResp `json:"data,omitempty"`
}

// CreateUserResp ...
type CreateUserResp struct {
	User *CreateUserRespUser `json:"user,omitempty"` // 用户信息
}

// CreateUserRespUser ...
type CreateUserRespUser struct {
	UnionID          string                          `json:"union_id,omitempty"`           // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID           string                          `json:"user_id,omitempty"`            // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID           string                          `json:"open_id,omitempty"`            // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name             string                          `json:"name,omitempty"`               // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName           string                          `json:"en_name,omitempty"`            // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname         string                          `json:"nickname,omitempty"`           // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email            string                          `json:"email,omitempty"`              // 邮箱，注意非 +86 手机号成员必须同时添加邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile           string                          `json:"mobile,omitempty"`             // 手机号，在本企业内不可重复；未认证企业仅支持添加中国大陆手机号，通过飞书认证的企业允许添加海外手机号，注意国际电话区号前缀中必须包含加号 +, 字段权限要求: 获取用户手机号
	MobileVisible    bool                            `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender           int64                           `json:"gender,omitempty"`             // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey        string                          `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar           *CreateUserRespUserAvatar       `json:"avatar,omitempty"`             // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status           *CreateUserRespUserStatus       `json:"status,omitempty"`             // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs    []string                        `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID     string                          `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City             string                          `json:"city,omitempty"`               // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country          string                          `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation      string                          `json:"work_station,omitempty"`       // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime         int64                           `json:"join_time,omitempty"`          // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager  bool                            `json:"is_tenant_manager,omitempty"`  // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo       string                          `json:"employee_no,omitempty"`        // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType     int64                           `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders           []*CreateUserRespUserOrder      `json:"orders,omitempty"`             // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs      []*CreateUserRespUserCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail  string                          `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle         string                          `json:"job_title,omitempty"`          // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen         bool                            `json:"is_frozen,omitempty"`          // 是否暂停用户
	EntEmailPassword string                          `json:"ent_email_password,omitempty"` // 企业邮箱登录时的密码（已废弃，无需使用）
}

// CreateUserRespUserAvatar ...
type CreateUserRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// CreateUserRespUserStatus ...
type CreateUserRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// CreateUserRespUserOrder ...
type CreateUserRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// CreateUserRespUserCustomAttr ...
type CreateUserRespUserCustomAttr struct {
	Type  string                             `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                             `json:"id,omitempty"`    // 自定义字段ID
	Value *CreateUserRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// CreateUserRespUserCustomAttrValue ...
type CreateUserRespUserCustomAttrValue struct {
	Text        string                                        `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                        `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                        `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                        `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                        `json:"option_value,omitempty"` // 选项值
	Name        string                                        `json:"name,omitempty"`         // 名称
	PictureURL  string                                        `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *CreateUserRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// CreateUserRespUserCustomAttrValueGenericUser ...
type CreateUserRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteUser 该接口向通讯录删除一个用户信息，可以理解为员工离职。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 若用户归属部门A、部门B，应用的通讯录权限范围必须包括部门A和部门B才可以删除用户。应用商店应用无权限调用接口。用户可以在删除员工时设置删除员工数据的接收者，如果不设置则由其leader接收，如果该员工没有leader，则会将该员工的数据删除。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/delete
func (r *ContactService) DeleteUser(ctx context.Context, request *DeleteUserReq, options ...MethodOptionFunc) (*DeleteUserResp, *Response, error) {
	if r.cli.mock.mockContactDeleteUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteUser mock enable")
		return r.cli.mock.mockContactDeleteUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteUser",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteUser mock ContactDeleteUser method
func (r *Mock) MockContactDeleteUser(f func(ctx context.Context, request *DeleteUserReq, options ...MethodOptionFunc) (*DeleteUserResp, *Response, error)) {
	r.mockContactDeleteUser = f
}

// UnMockContactDeleteUser un-mock ContactDeleteUser method
func (r *Mock) UnMockContactDeleteUser() {
	r.mockContactDeleteUser = nil
}

// DeleteUserReq ...
type DeleteUserReq struct {
	UserIDType                   *IDType `query:"user_id_type" json:"-"`                     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID                       string  `path:"user_id" json:"-"`                           // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	DepartmentChatAcceptorUserID *string `json:"department_chat_acceptor_user_id,omitempty"` // 部门群接收者。被删除用户为部门群群主时，转让群主给指定接收者，不指定接收者则默认转让给群内第一个入群的人, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	ExternalChatAcceptorUserID   *string `json:"external_chat_acceptor_user_id,omitempty"`   // 外部群接收者。被删除用户为外部群群主时，转让群主给指定接收者，不指定接收者则默认转让给群内与被删除用户在同一组织的第一个入群的人，如果组织内只有该用户在群里，则解散外部群, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	DocsAcceptorUserID           *string `json:"docs_acceptor_user_id,omitempty"`            // 文档接收者。用户被删除时，其拥有的文档转让给接收者，不指定接收者则默认转让给直接领导，如果无直接领导则直接删除文档资源, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	CalendarAcceptorUserID       *string `json:"calendar_acceptor_user_id,omitempty"`        // 日程接收者。用户被删除时，其拥有的日程转让给接收者，不指定接收者则默认转让给直接领导，如果无直接领导则直接删除日程资源, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	ApplicationAcceptorUserID    *string `json:"application_acceptor_user_id,omitempty"`     // 应用接收者。用户被删除时，其创建的应用转让给接收者，不指定接收者则默认转让给直接领导，如果无直接领导则不会转移应用，会造成应用不可用, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	HelpdeskAcceptorUserID       *string `json:"helpdesk_acceptor_user_id,omitempty"`        // 服务台资源接收者, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// deleteUserResp ...
type deleteUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteUserResp `json:"data,omitempty"`
}

// DeleteUserResp ...
type DeleteUserResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUser 该接口用于获取通讯录中单个用户的信息。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get
func (r *ContactService) GetUser(ctx context.Context, request *GetUserReq, options ...MethodOptionFunc) (*GetUserResp, *Response, error) {
	if r.cli.mock.mockContactGetUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetUser mock enable")
		return r.cli.mock.mockContactGetUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetUser",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetUser mock ContactGetUser method
func (r *Mock) MockContactGetUser(f func(ctx context.Context, request *GetUserReq, options ...MethodOptionFunc) (*GetUserResp, *Response, error)) {
	r.mockContactGetUser = f
}

// UnMockContactGetUser un-mock ContactGetUser method
func (r *Mock) UnMockContactGetUser() {
	r.mockContactGetUser = nil
}

// GetUserReq ...
type GetUserReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	UserID           string            `path:"user_id" json:"-"`             // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："7be5fg9a"
}

// getUserResp ...
type getUserResp struct {
	Code int64        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string       `json:"msg,omitempty"`  // 错误描述
	Data *GetUserResp `json:"data,omitempty"`
}

// GetUserResp ...
type GetUserResp struct {
	User *GetUserRespUser `json:"user,omitempty"` // 用户信息
}

// GetUserRespUser ...
type GetUserRespUser struct {
	UnionID         string                       `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                       `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                       `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                       `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName          string                       `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname        string                       `json:"nickname,omitempty"`          // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email           string                       `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                       `json:"mobile,omitempty"`            // 手机号，中国大陆手机可不填区号，境外手机需加国际电话区号前缀。, 字段权限要求: 获取用户手机号
	MobileVisible   bool                         `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                        `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	Avatar          *GetUserRespUserAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status          *GetUserRespUserStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs   []string                     `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID    string                       `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City            string                       `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country         string                       `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation     string                       `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime        int64                        `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager bool                         `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo      string                       `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType    int64                        `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders          []*GetUserRespUserOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs     []*GetUserRespUserCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail string                       `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle        string                       `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
}

// GetUserRespUserAvatar ...
type GetUserRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// GetUserRespUserStatus ...
type GetUserRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// GetUserRespUserOrder ...
type GetUserRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// GetUserRespUserCustomAttr ...
type GetUserRespUserCustomAttr struct {
	Type  string                          `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                          `json:"id,omitempty"`    // 自定义字段ID
	Value *GetUserRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// GetUserRespUserCustomAttrValue ...
type GetUserRespUserCustomAttrValue struct {
	Text        string                                     `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                     `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                     `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionValue string                                     `json:"option_value,omitempty"` // 选项值
	Name        string                                     `json:"name,omitempty"`         // 名称
	PictureURL  string                                     `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *GetUserRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// GetUserRespUserCustomAttrValueGenericUser ...
type GetUserRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetUser
//
// 为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get)
// 该接口用于批量获取用户详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIzNz4iM3MjLyczM
//
// Deprecated
func (r *ContactService) BatchGetUser(ctx context.Context, request *BatchGetUserReq, options ...MethodOptionFunc) (*BatchGetUserResp, *Response, error) {
	if r.cli.mock.mockContactBatchGetUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BatchGetUser mock enable")
		return r.cli.mock.mockContactBatchGetUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BatchGetUser",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v1/user/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBatchGetUser mock ContactBatchGetUser method
func (r *Mock) MockContactBatchGetUser(f func(ctx context.Context, request *BatchGetUserReq, options ...MethodOptionFunc) (*BatchGetUserResp, *Response, error)) {
	r.mockContactBatchGetUser = f
}

// UnMockContactBatchGetUser un-mock ContactBatchGetUser method
func (r *Mock) UnMockContactBatchGetUser() {
	r.mockContactBatchGetUser = nil
}

// BatchGetUserReq ...
type BatchGetUserReq struct {
	EmployeeIDs []string `query:"employee_ids" json:"-"` // 支持通过 open_id 或者 employee_id 查询用户信息，不支持混合两种 ID 进行查询，单次请求支持的最大用户数量为100
	OpenIDs     []string `query:"open_ids" json:"-"`     // 支持通过 open_id 或者 employee_id 查询用户信息，不支持混合两种 ID 进行查询，单次请求支持的最大用户数量为100
}

// batchGetUserResp ...
type batchGetUserResp struct {
	Code int64             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 返回码的描述
	Data *BatchGetUserResp `json:"data,omitempty"` // 返回业务数据
}

// BatchGetUserResp ...
type BatchGetUserResp struct {
	UserInfos []*BatchGetUserRespUserInfo `json:"user_infos,omitempty"` // 用户信息
}

// BatchGetUserRespUserInfo ...
type BatchGetUserRespUserInfo struct {
	Name             string                 `json:"name,omitempty"`               // 用户名
	NamePy           string                 `json:"name_py,omitempty"`            // 用户名拼音
	EnName           string                 `json:"en_name,omitempty"`            // 英文名
	EmployeeID       string                 `json:"employee_id,omitempty"`        // 用户的 employee_id，申请了"获取用户 user_id"权限的应用返回该字段
	EmployeeNo       string                 `json:"employee_no,omitempty"`        // 工号
	OpenID           string                 `json:"open_id,omitempty"`            // 用户的 open_id
	UnionID          string                 `json:"union_id,omitempty"`           // 用户的 union_id
	Status           int64                  `json:"status,omitempty"`             // 用户状态，bit0(最低位): 1冻结，0未冻结；bit1:1离职，0在职；bit2:1未激活，0已激活
	EmployeeType     int64                  `json:"employee_type,omitempty"`      // 员工类型。1:正式员工；2:实习生；3:外包；4:劳务；5:顾问
	Avatar72         string                 `json:"avatar_72,omitempty"`          // 用户头像，72*72px
	Avatar240        string                 `json:"avatar_240,omitempty"`         // 用户头像，240*240px
	Avatar640        string                 `json:"avatar_640,omitempty"`         // 用户头像，640*640px
	AvatarURL        string                 `json:"avatar_url,omitempty"`         // 用户头像，原始大小
	Gender           int64                  `json:"gender,omitempty"`             // 性别，未设置不返回该字段。1:男；2:女
	Email            string                 `json:"email,omitempty"`              // 用户邮箱地址，已申请"获取用户邮箱"权限返回该字段
	Mobile           string                 `json:"mobile,omitempty"`             // 用户手机号，已申请"获取用户手机号"权限的企业自建应用返回该字段
	Description      string                 `json:"description,omitempty"`        // 用户个人签名
	Country          string                 `json:"country,omitempty"`            // 用户所在国家
	City             string                 `json:"city,omitempty"`               // 用户所在城市
	WorkStation      string                 `json:"work_station,omitempty"`       // 工位
	IsTenantManager  bool                   `json:"is_tenant_manager,omitempty"`  // 是否是企业超级管理员
	JoinTime         int64                  `json:"join_time,omitempty"`          // 入职时间，未设置不返回该字段
	UpdateTime       int64                  `json:"update_time,omitempty"`        // 更新时间
	LeaderEmployeeID string                 `json:"leader_employee_id,omitempty"` // 用户直接领导的 employee_id，企业自建应用返回，应用商店应用申请了 employee_id 权限时才返回
	LeaderOpenID     string                 `json:"leader_open_id,omitempty"`     // 用户直接领导的 open_id
	LeaderUnionID    string                 `json:"leader_union_id,omitempty"`    // 用户直接领导的 union_id
	Departments      []string               `json:"departments,omitempty"`        // 用户所在部门自定义 ID列表，用户可能同时存在于多个部门
	OpenDepartments  []string               `json:"open_departments,omitempty"`   // 用户所在部门 openID 列表，用户可能同时存在于多个部门
	CustomAttrs      map[string]interface{} `json:"custom_attrs,omitempty"`       // 用户的自定义属性信息。<br>该字段返回的每一个属性包括自定义属性 ID 和自定义属性值。 <br>企业开放了自定义用户属性且为该用户设置了自定义属性的值，才会返回该字段
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetUserByIDOld
//
// 根据用户邮箱或手机号查询用户 open_id 和 user_id，支持批量查询。<br>
// 调用该接口需要申请 `通过手机号或邮箱获取用户 ID` 权限。<br>只能查询到应用可用性范围内的用户 ID，不在范围内的用户会表现为不存在。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUzMyUjL1MjM14SNzITN
//
// Deprecated
func (r *ContactService) BatchGetUserByIDOld(ctx context.Context, request *BatchGetUserByIDOldReq, options ...MethodOptionFunc) (*BatchGetUserByIDOldResp, *Response, error) {
	if r.cli.mock.mockContactBatchGetUserByIDOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BatchGetUserByIDOld mock enable")
		return r.cli.mock.mockContactBatchGetUserByIDOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BatchGetUserByIDOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/user/v1/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetUserByIDOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBatchGetUserByIDOld mock ContactBatchGetUserByIDOld method
func (r *Mock) MockContactBatchGetUserByIDOld(f func(ctx context.Context, request *BatchGetUserByIDOldReq, options ...MethodOptionFunc) (*BatchGetUserByIDOldResp, *Response, error)) {
	r.mockContactBatchGetUserByIDOld = f
}

// UnMockContactBatchGetUserByIDOld un-mock ContactBatchGetUserByIDOld method
func (r *Mock) UnMockContactBatchGetUserByIDOld() {
	r.mockContactBatchGetUserByIDOld = nil
}

// BatchGetUserByIDOldReq ...
type BatchGetUserByIDOldReq struct {
	Emails  *string `query:"emails" json:"-"`  // 要查询的用户邮箱，最多 50 条，多个邮箱以 & 隔开。
	Mobiles *string `query:"mobiles" json:"-"` // 要查询的用户手机号，最多 50 条，多个手机号以 & 隔开。<br>非中国大陆地区的手机号需要添加以 “+” 开头的国家 / 地区代码，并且需要进行 URL 转义。<br>
}

// batchGetUserByIDOldResp ...
type batchGetUserByIDOldResp struct {
	Code int64                    `json:"code,omitempty"` // 返回码，非 0 表示失败。
	Msg  string                   `json:"msg,omitempty"`  // 对返回码的文本描述。
	Data *BatchGetUserByIDOldResp `json:"data,omitempty"` // -
}

// BatchGetUserByIDOldResp ...
type BatchGetUserByIDOldResp struct {
	EmailUsers      map[string][]*BatchGetUserByIDOldRespEmailUser `json:"email_users,omitempty"`       // 根据邮箱查询到的用户，key 为邮箱，value 为查询到用户的 array。<br>目前同一个邮箱最多只能查询到一个用户。
	EmailsNotExist  []string                                       `json:"emails_not_exist,omitempty"`  // 没有匹配记录的邮箱。
	MobileUsers     map[string][]*BatchGetUserByIDOldRespEmailUser `json:"mobile_users,omitempty"`      // 根据手机号查询到的用户，key 为手机号，value 为查询到用户的 array。<br>目前同一个手机号最多只能查询到一个用户。
	MobilesNotExist []string                                       `json:"mobiles_not_exist,omitempty"` // 没有匹配记录的手机号。
}

// BatchGetUserByIDOldRespEmailUser ...
type BatchGetUserByIDOldRespEmailUser struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id。[open_id描述](https://open.feishu.cn/document/home/user-identity-introduction/open-id)
	UserID string `json:"user_id,omitempty"` // 用户的 user_id。<br>只有已申请 `获取用户UserID` 权限的企业自建应用返回此字段。[user_id描述](https://open.feishu.cn/document/home/user-identity-introduction/user-id)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserList 基于部门ID获取，获取部门直属用户列表。
//
// 部门ID 必填，根部门的部门ID为0
// - 使用 user_access_token 情况下根据个人组织架构的通讯录可见范围进行权限过滤，返回个人组织架构通讯录范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内可见的用户数据。
// - 使用tenant_access_token，会根据应用通讯录的范围进行权限过滤。 如果请求的部门ID为0，则校验应用是否具有全员通讯录权限； 如果是非0的部门ID，则会验证应用是否具有该部门的通讯录权限。 无权限返回无权限错误码，有权限则返回对应部门下的直接用户列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/find_by_department
func (r *ContactService) GetUserList(ctx context.Context, request *GetUserListReq, options ...MethodOptionFunc) (*GetUserListResp, *Response, error) {
	if r.cli.mock.mockContactGetUserList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetUserList mock enable")
		return r.cli.mock.mockContactGetUserList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetUserList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/find_by_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetUserList mock ContactGetUserList method
func (r *Mock) MockContactGetUserList(f func(ctx context.Context, request *GetUserListReq, options ...MethodOptionFunc) (*GetUserListResp, *Response, error)) {
	r.mockContactGetUserList = f
}

// UnMockContactGetUserList un-mock ContactGetUserList method
func (r *Mock) UnMockContactGetUserList() {
	r.mockContactGetUserList = nil
}

// GetUserListReq ...
type GetUserListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     string            `query:"department_id" json:"-"`      // 填写该字段表示获取该部门下用户，必填。根部门的部门ID为0。, 示例值："od-xxxxxxxxxxxxx"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
}

// getUserListResp ...
type getUserListResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetUserListResp `json:"data,omitempty"`
}

// GetUserListResp ...
type GetUserListResp struct {
	HasMore   bool                   `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                 `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetUserListRespItem `json:"items,omitempty"`      // 用户信息列表
}

// GetUserListRespItem ...
type GetUserListRespItem struct {
	UnionID         string                           `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                           `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                           `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                           `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName          string                           `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname        string                           `json:"nickname,omitempty"`          // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email           string                           `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                           `json:"mobile,omitempty"`            // 手机号，中国大陆手机可不填区号，境外手机需加国际电话区号前缀。, 字段权限要求: 获取用户手机号
	MobileVisible   bool                             `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                            `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey       string                           `json:"avatar_key,omitempty"`        // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar          *GetUserListRespItemAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status          *GetUserListRespItemStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs   []string                         `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID    string                           `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City            string                           `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country         string                           `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation     string                           `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime        int64                            `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager bool                             `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo      string                           `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType    int64                            `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders          []*GetUserListRespItemOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs     []*GetUserListRespItemCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail string                           `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle        string                           `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen        bool                             `json:"is_frozen,omitempty"`         // 是否暂停用户
}

// GetUserListRespItemAvatar ...
type GetUserListRespItemAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// GetUserListRespItemStatus ...
type GetUserListRespItemStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// GetUserListRespItemOrder ...
type GetUserListRespItemOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// GetUserListRespItemCustomAttr ...
type GetUserListRespItemCustomAttr struct {
	Type  string                              `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                              `json:"id,omitempty"`    // 自定义字段ID
	Value *GetUserListRespItemCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// GetUserListRespItemCustomAttrValue ...
type GetUserListRespItemCustomAttrValue struct {
	Text        string                                         `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                         `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                         `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                         `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                         `json:"option_value,omitempty"` // 选项值
	Name        string                                         `json:"name,omitempty"`         // 名称
	PictureURL  string                                         `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *GetUserListRespItemCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// GetUserListRespItemCustomAttrValueGenericUser ...
type GetUserListRespItemCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserListOld 基于部门ID获取部门下直属用户列表。
//
// - 使用 user_access_token 情况下根据个人组织架构的通讯录可见范围进行权限过滤，返回个人组织架构通讯录范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内可见的用户数据。
// -  tenant_access_token  基于应用通讯录范围进行权限鉴定。由于 department_id 是非必填参数，填与不填存在<b>两种数据权限校验与返回</b>情况：<br>1、请求设置了 department_id
// （根部门为0），会检验所带部门ID是否具有通讯录权限（如果带上
// department_id=0 会校验是否有全员权限），有则返回部门下直属的成员列表, 否则提示无部门权限的错误码返回。<br>2、请求未带
// department_id 参数，则会返回权限范围内的独立用户（权限范围直接包含了某用户，则该用户视为权限范围内的独立用户）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/list
//
// Deprecated
func (r *ContactService) GetUserListOld(ctx context.Context, request *GetUserListOldReq, options ...MethodOptionFunc) (*GetUserListOldResp, *Response, error) {
	if r.cli.mock.mockContactGetUserListOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetUserListOld mock enable")
		return r.cli.mock.mockContactGetUserListOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetUserListOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserListOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetUserListOld mock ContactGetUserListOld method
func (r *Mock) MockContactGetUserListOld(f func(ctx context.Context, request *GetUserListOldReq, options ...MethodOptionFunc) (*GetUserListOldResp, *Response, error)) {
	r.mockContactGetUserListOld = f
}

// UnMockContactGetUserListOld un-mock ContactGetUserListOld method
func (r *Mock) UnMockContactGetUserListOld() {
	r.mockContactGetUserListOld = nil
}

// GetUserListOldReq ...
type GetUserListOldReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_type", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     *string           `query:"department_id" json:"-"`      // 填写该字段表示获取部门下所有用户，选填。, 示例值："od-xxxxxxxxxxxxx"
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS%2BJKiSIkdexPw="
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`100`
}

// getUserListOldResp ...
type getUserListOldResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetUserListOldResp `json:"data,omitempty"`
}

// GetUserListOldResp ...
type GetUserListOldResp struct {
	HasMore   bool                      `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                    `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetUserListOldRespItem `json:"items,omitempty"`      // -
}

// GetUserListOldRespItem ...
type GetUserListOldRespItem struct {
	UnionID         string                              `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                              `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                              `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                              `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,获取用户基本信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EnName          string                              `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,获取用户基本信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Email           string                              `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                              `json:"mobile,omitempty"`            // 手机号，中国大陆手机可不填区号，境外手机需加国际电话区号前缀。, 字段权限要求: 获取用户手机号
	MobileVisible   bool                                `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                               `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,获取用户性别,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Avatar          *GetUserListOldRespItemAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,获取用户基本信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Status          *GetUserListOldRespItemStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	DepartmentIDs   []string                            `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,获取用户组织架构信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	LeaderUserID    string                              `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,获取用户组织架构信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	City            string                              `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Country         string                              `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	WorkStation     string                              `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	JoinTime        int64                               `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	IsTenantManager bool                                `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EmployeeNo      string                              `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EmployeeType    int64                               `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Orders          []*GetUserListOldRespItemOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,获取用户组织架构信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	CustomAttrs     []*GetUserListOldRespItemCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EnterpriseEmail string                              `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	JobTitle        string                              `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
}

// GetUserListOldRespItemAvatar ...
type GetUserListOldRespItemAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// GetUserListOldRespItemStatus ...
type GetUserListOldRespItemStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
}

// GetUserListOldRespItemOrder ...
type GetUserListOldRespItemOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// GetUserListOldRespItemCustomAttr ...
type GetUserListOldRespItemCustomAttr struct {
	Type  string                                 `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                                 `json:"id,omitempty"`    // 自定义字段ID
	Value *GetUserListOldRespItemCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// GetUserListOldRespItemCustomAttrValue ...
type GetUserListOldRespItemCustomAttrValue struct {
	Text        string                                            `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                            `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                            `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionValue string                                            `json:"option_value,omitempty"` // 选项值
	Name        string                                            `json:"name,omitempty"`         // 名称
	PictureURL  string                                            `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *GetUserListOldRespItemCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// GetUserListOldRespItemCustomAttrValueGenericUser ...
type GetUserListOldRespItemCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchUserOld
//
// 以用户身份搜索其他用户的信息，无法搜索到外部企业或已离职的用户。<br>
// 调用该接口需要申请 `搜索用户` 权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTM4UjLzEDO14yMxgTN
//
// Deprecated
func (r *ContactService) SearchUserOld(ctx context.Context, request *SearchUserOldReq, options ...MethodOptionFunc) (*SearchUserOldResp, *Response, error) {
	if r.cli.mock.mockContactSearchUserOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#SearchUserOld mock enable")
		return r.cli.mock.mockContactSearchUserOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Contact",
		API:                 "SearchUserOld",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/search/v1/user",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchUserOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactSearchUserOld mock ContactSearchUserOld method
func (r *Mock) MockContactSearchUserOld(f func(ctx context.Context, request *SearchUserOldReq, options ...MethodOptionFunc) (*SearchUserOldResp, *Response, error)) {
	r.mockContactSearchUserOld = f
}

// UnMockContactSearchUserOld un-mock ContactSearchUserOld method
func (r *Mock) UnMockContactSearchUserOld() {
	r.mockContactSearchUserOld = nil
}

// SearchUserOldReq ...
type SearchUserOldReq struct {
	Query     string  `query:"query" json:"-"`      // 要执行搜索的字符串，一般为用户名。
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小，最小为 1，最大为 200，默认为 20。
	PageToken *string `query:"page_token" json:"-"` // 分页标识，获取首页不需要填写，获取下一页时传入上一页返回的分页标识值。<br>请注意此字段的值并没有特殊含义，请使用每次请求所返回的标识值。
}

// searchUserOldResp ...
type searchUserOldResp struct {
	Code int64              `json:"code,omitempty"` // 返回码，非 0 表示失败。
	Msg  string             `json:"msg,omitempty"`  // 对返回码的文本描述。
	Data *SearchUserOldResp `json:"data,omitempty"` // -
}

// SearchUserOldResp ...
type SearchUserOldResp struct {
	HasMore   bool                     `json:"has_more,omitempty"`   // 是否还有更多用户，值为 true 表示存在下一页。
	PageToken string                   `json:"page_token,omitempty"` // 分页标识，存在下一页的时候返回。下次请求带上此标识可以获取下一页的用户。
	Users     []*SearchUserOldRespUser `json:"users,omitempty"`      // 搜索到的用户列表。
}

// SearchUserOldRespUser ...
type SearchUserOldRespUser struct {
	Avatar        *SearchUserOldRespUserAvatar `json:"avatar,omitempty"`         // 用户的头像信息。
	DepartmentIDs []string                     `json:"department_ids,omitempty"` // 用户所在的部门 ID。
	Name          string                       `json:"name,omitempty"`           // 用户名。
	OpenID        string                       `json:"open_id,omitempty"`        // 用户的 open_id。
	UserID        string                       `json:"user_id,omitempty"`        // 用户的 user_id，只有已申请 `获取用户UserID` 权限的企业自建应用返回此字段。
}

// SearchUserOldRespUserAvatar ...
type SearchUserOldRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 用户的头像图片 URL，72×72px。
	Avatar240    string `json:"avatar_240,omitempty"`    // 用户的头像图片 URL，240×240px。
	Avatar640    string `json:"avatar_640,omitempty"`    // 用户的头像图片 URL，640×640px。
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 用户的头像图片 URL，原始大小。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateUser 该接口用于更新通讯录中用户的字段。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 应用需要拥有待更新用户的通讯录授权，如果涉及到用户部门变更，还需要同时拥有所有新部门的通讯录授权。应用商店应用无权限调用此接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/update
func (r *ContactService) UpdateUser(ctx context.Context, request *UpdateUserReq, options ...MethodOptionFunc) (*UpdateUserResp, *Response, error) {
	if r.cli.mock.mockContactUpdateUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateUser mock enable")
		return r.cli.mock.mockContactUpdateUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateUser",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateUser mock ContactUpdateUser method
func (r *Mock) MockContactUpdateUser(f func(ctx context.Context, request *UpdateUserReq, options ...MethodOptionFunc) (*UpdateUserResp, *Response, error)) {
	r.mockContactUpdateUser = f
}

// UnMockContactUpdateUser un-mock ContactUpdateUser method
func (r *Mock) UnMockContactUpdateUser() {
	r.mockContactUpdateUser = nil
}

// UpdateUserReq ...
type UpdateUserReq struct {
	UserIDType       *IDType                    `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType          `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	UserID           string                     `path:"user_id" json:"-"`             // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Name             string                     `json:"name,omitempty"`               // 用户名, 示例值："张三", 最小长度：`1` 字符
	EnName           *string                    `json:"en_name,omitempty"`            // 英文名, 示例值："San Zhang"
	Nickname         *string                    `json:"nickname,omitempty"`           // 别名, 示例值："Alex Zhang"
	Email            *string                    `json:"email,omitempty"`              // 邮箱，注意非 +86 手机号成员必须同时添加邮箱, 示例值："zhangsan@gmail.com"
	Mobile           string                     `json:"mobile,omitempty"`             // 手机号，在本企业内不可重复；未认证企业仅支持添加中国大陆手机号，通过飞书认证的企业允许添加海外手机号，注意国际电话区号前缀中必须包含加号 +, 示例值："中国大陆手机号: 13011111111 或 +8613011111111, 境外手机号:  +41446681800"
	MobileVisible    *bool                      `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码, 示例值：false
	Gender           *int64                     `json:"gender,omitempty"`             // 性别, 示例值：1, 可选值有: `0`：保密, `1`：男, `2`：女
	AvatarKey        *string                    `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key, 示例值："2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
	DepartmentIDs    []string                   `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
	LeaderUserID     *string                    `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	City             *string                    `json:"city,omitempty"`               // 城市, 示例值："杭州"
	Country          *string                    `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description), 示例值："CN"
	WorkStation      *string                    `json:"work_station,omitempty"`       // 工位, 示例值："北楼-H34"
	JoinTime         *int64                     `json:"join_time,omitempty"`          // 入职时间, 示例值：2147483647
	EmployeeNo       *string                    `json:"employee_no,omitempty"`        // 工号, 示例值："1"
	EmployeeType     int64                      `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list), 示例值：1
	Orders           []*UpdateUserReqOrder      `json:"orders,omitempty"`             // 用户排序信息
	CustomAttrs      []*UpdateUserReqCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。
	EnterpriseEmail  *string                    `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务, 示例值："demo@mail.com"
	JobTitle         *string                    `json:"job_title,omitempty"`          // 职务, 示例值："xxxxx"
	IsFrozen         *bool                      `json:"is_frozen,omitempty"`          // 是否暂停用户, 示例值：false
	EntEmailPassword *string                    `json:"ent_email_password,omitempty"` // 企业邮箱登录时的密码（已废弃，无需使用）, 示例值："-"
}

// UpdateUserReqOrder ...
type UpdateUserReqOrder struct {
	DepartmentID    *string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	UserOrder       *int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前, 示例值：100
	DepartmentOrder *int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前, 示例值：100
}

// UpdateUserReqCustomAttr ...
type UpdateUserReqCustomAttr struct {
	Type  *string                       `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN), 示例值："TEXT"
	ID    *string                       `json:"id,omitempty"`    // 自定义字段ID, 示例值："DemoId"
	Value *UpdateUserReqCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserReqCustomAttrValue ...
type UpdateUserReqCustomAttrValue struct {
	Text        *string                                  `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填, 示例值："DemoText"
	URL         *string                                  `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL, 示例值："http://www.feishu.cn"
	PcURL       *string                                  `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL, 示例值："http://www.feishu.cn"
	OptionID    *string                                  `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值, 示例值："edcvfrtg"
	GenericUser *UpdateUserReqCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserReqCustomAttrValueGenericUser ...
type UpdateUserReqCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："9b2fabg5"
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户, 示例值：1
}

// updateUserResp ...
type updateUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateUserResp `json:"data,omitempty"`
}

// UpdateUserResp ...
type UpdateUserResp struct {
	User *UpdateUserRespUser `json:"user,omitempty"` // 用户信息
}

// UpdateUserRespUser ...
type UpdateUserRespUser struct {
	UnionID          string                          `json:"union_id,omitempty"`           // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID           string                          `json:"user_id,omitempty"`            // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID           string                          `json:"open_id,omitempty"`            // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name             string                          `json:"name,omitempty"`               // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName           string                          `json:"en_name,omitempty"`            // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname         string                          `json:"nickname,omitempty"`           // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email            string                          `json:"email,omitempty"`              // 邮箱，注意非 +86 手机号成员必须同时添加邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile           string                          `json:"mobile,omitempty"`             // 手机号，在本企业内不可重复；未认证企业仅支持添加中国大陆手机号，通过飞书认证的企业允许添加海外手机号，注意国际电话区号前缀中必须包含加号 +, 字段权限要求: 获取用户手机号
	MobileVisible    bool                            `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender           int64                           `json:"gender,omitempty"`             // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey        string                          `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar           *UpdateUserRespUserAvatar       `json:"avatar,omitempty"`             // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status           *UpdateUserRespUserStatus       `json:"status,omitempty"`             // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs    []string                        `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID     string                          `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City             string                          `json:"city,omitempty"`               // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country          string                          `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation      string                          `json:"work_station,omitempty"`       // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime         int64                           `json:"join_time,omitempty"`          // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager  bool                            `json:"is_tenant_manager,omitempty"`  // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo       string                          `json:"employee_no,omitempty"`        // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType     int64                           `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders           []*UpdateUserRespUserOrder      `json:"orders,omitempty"`             // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs      []*UpdateUserRespUserCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail  string                          `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle         string                          `json:"job_title,omitempty"`          // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen         bool                            `json:"is_frozen,omitempty"`          // 是否暂停用户
	EntEmailPassword string                          `json:"ent_email_password,omitempty"` // 企业邮箱登录时的密码（已废弃，无需使用）
}

// UpdateUserRespUserAvatar ...
type UpdateUserRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// UpdateUserRespUserStatus ...
type UpdateUserRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// UpdateUserRespUserOrder ...
type UpdateUserRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// UpdateUserRespUserCustomAttr ...
type UpdateUserRespUserCustomAttr struct {
	Type  string                             `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                             `json:"id,omitempty"`    // 自定义字段ID
	Value *UpdateUserRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserRespUserCustomAttrValue ...
type UpdateUserRespUserCustomAttrValue struct {
	Text        string                                        `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                        `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                        `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                        `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                        `json:"option_value,omitempty"` // 选项值
	Name        string                                        `json:"name,omitempty"`         // 名称
	PictureURL  string                                        `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *UpdateUserRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserRespUserCustomAttrValueGenericUser ...
type UpdateUserRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateUserPatch 该接口用于更新通讯录中用户的字段，未传递的参数不会更新。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/patch
func (r *ContactService) UpdateUserPatch(ctx context.Context, request *UpdateUserPatchReq, options ...MethodOptionFunc) (*UpdateUserPatchResp, *Response, error) {
	if r.cli.mock.mockContactUpdateUserPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateUserPatch mock enable")
		return r.cli.mock.mockContactUpdateUserPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateUserPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateUserPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateUserPatch mock ContactUpdateUserPatch method
func (r *Mock) MockContactUpdateUserPatch(f func(ctx context.Context, request *UpdateUserPatchReq, options ...MethodOptionFunc) (*UpdateUserPatchResp, *Response, error)) {
	r.mockContactUpdateUserPatch = f
}

// UnMockContactUpdateUserPatch un-mock ContactUpdateUserPatch method
func (r *Mock) UnMockContactUpdateUserPatch() {
	r.mockContactUpdateUserPatch = nil
}

// UpdateUserPatchReq ...
type UpdateUserPatchReq struct {
	UserIDType       *IDType                         `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType               `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	UserID           string                          `path:"user_id" json:"-"`             // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Name             *string                         `json:"name,omitempty"`               // 用户名, 示例值："张三", 最小长度：`1` 字符
	EnName           *string                         `json:"en_name,omitempty"`            // 英文名, 示例值："San Zhang"
	Nickname         *string                         `json:"nickname,omitempty"`           // 别名, 示例值："Alex Zhang"
	Email            *string                         `json:"email,omitempty"`              // 邮箱，注意非 +86 手机号成员必须同时添加邮箱, 示例值："zhangsan@gmail.com"
	Mobile           *string                         `json:"mobile,omitempty"`             // 手机号，在本企业内不可重复；未认证企业仅支持添加中国大陆手机号，通过飞书认证的企业允许添加海外手机号，注意国际电话区号前缀中必须包含加号 +, 示例值："中国大陆手机号: 13011111111 或 +8613011111111, 境外手机号:  +41446681800"
	MobileVisible    *bool                           `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码, 示例值：false
	Gender           *int64                          `json:"gender,omitempty"`             // 性别, 示例值：1, 可选值有: `0`：保密, `1`：男, `2`：女
	AvatarKey        *string                         `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key, 示例值："2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
	DepartmentIDs    []string                        `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
	LeaderUserID     *string                         `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	City             *string                         `json:"city,omitempty"`               // 城市, 示例值："杭州"
	Country          *string                         `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description), 示例值："CN"
	WorkStation      *string                         `json:"work_station,omitempty"`       // 工位, 示例值："北楼-H34"
	JoinTime         *int64                          `json:"join_time,omitempty"`          // 入职时间, 示例值：2147483647
	EmployeeNo       *string                         `json:"employee_no,omitempty"`        // 工号, 示例值："1"
	EmployeeType     *int64                          `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list), 示例值：1
	Orders           []*UpdateUserPatchReqOrder      `json:"orders,omitempty"`             // 用户排序信息
	CustomAttrs      []*UpdateUserPatchReqCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。
	EnterpriseEmail  *string                         `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务, 示例值："demo@mail.com"
	JobTitle         *string                         `json:"job_title,omitempty"`          // 职务, 示例值："xxxxx"
	IsFrozen         *bool                           `json:"is_frozen,omitempty"`          // 是否暂停用户, 示例值：false
	EntEmailPassword *string                         `json:"ent_email_password,omitempty"` // 企业邮箱登录时的密码（已废弃，无需使用）, 示例值："-"
}

// UpdateUserPatchReqOrder ...
type UpdateUserPatchReqOrder struct {
	DepartmentID    *string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	UserOrder       *int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前, 示例值：100
	DepartmentOrder *int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前, 示例值：100
}

// UpdateUserPatchReqCustomAttr ...
type UpdateUserPatchReqCustomAttr struct {
	Type  *string                            `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN), 示例值："TEXT"
	ID    *string                            `json:"id,omitempty"`    // 自定义字段ID, 示例值："DemoId"
	Value *UpdateUserPatchReqCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserPatchReqCustomAttrValue ...
type UpdateUserPatchReqCustomAttrValue struct {
	Text        *string                                       `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填, 示例值："DemoText"
	URL         *string                                       `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL, 示例值："http://www.feishu.cn"
	PcURL       *string                                       `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL, 示例值："http://www.feishu.cn"
	OptionID    *string                                       `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值, 示例值："edcvfrtg"
	GenericUser *UpdateUserPatchReqCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserPatchReqCustomAttrValueGenericUser ...
type UpdateUserPatchReqCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："9b2fabg5"
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户, 示例值：1
}

// updateUserPatchResp ...
type updateUserPatchResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UpdateUserPatchResp `json:"data,omitempty"`
}

// UpdateUserPatchResp ...
type UpdateUserPatchResp struct {
	User *UpdateUserPatchRespUser `json:"user,omitempty"` // 用户信息
}

// UpdateUserPatchRespUser ...
type UpdateUserPatchRespUser struct {
	UnionID          string                               `json:"union_id,omitempty"`           // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID           string                               `json:"user_id,omitempty"`            // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID           string                               `json:"open_id,omitempty"`            // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name             string                               `json:"name,omitempty"`               // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName           string                               `json:"en_name,omitempty"`            // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname         string                               `json:"nickname,omitempty"`           // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email            string                               `json:"email,omitempty"`              // 邮箱，注意非 +86 手机号成员必须同时添加邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile           string                               `json:"mobile,omitempty"`             // 手机号，在本企业内不可重复；未认证企业仅支持添加中国大陆手机号，通过飞书认证的企业允许添加海外手机号，注意国际电话区号前缀中必须包含加号 +, 字段权限要求: 获取用户手机号
	MobileVisible    bool                                 `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender           int64                                `json:"gender,omitempty"`             // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey        string                               `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar           *UpdateUserPatchRespUserAvatar       `json:"avatar,omitempty"`             // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status           *UpdateUserPatchRespUserStatus       `json:"status,omitempty"`             // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs    []string                             `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID     string                               `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City             string                               `json:"city,omitempty"`               // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country          string                               `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation      string                               `json:"work_station,omitempty"`       // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime         int64                                `json:"join_time,omitempty"`          // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager  bool                                 `json:"is_tenant_manager,omitempty"`  // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo       string                               `json:"employee_no,omitempty"`        // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType     int64                                `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders           []*UpdateUserPatchRespUserOrder      `json:"orders,omitempty"`             // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs      []*UpdateUserPatchRespUserCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail  string                               `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle         string                               `json:"job_title,omitempty"`          // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen         bool                                 `json:"is_frozen,omitempty"`          // 是否暂停用户
	EntEmailPassword string                               `json:"ent_email_password,omitempty"` // 企业邮箱登录时的密码（已废弃，无需使用）
}

// UpdateUserPatchRespUserAvatar ...
type UpdateUserPatchRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// UpdateUserPatchRespUserStatus ...
type UpdateUserPatchRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// UpdateUserPatchRespUserOrder ...
type UpdateUserPatchRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// UpdateUserPatchRespUserCustomAttr ...
type UpdateUserPatchRespUserCustomAttr struct {
	Type  string                                  `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                                  `json:"id,omitempty"`    // 自定义字段ID
	Value *UpdateUserPatchRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserPatchRespUserCustomAttrValue ...
type UpdateUserPatchRespUserCustomAttrValue struct {
	Text        string                                             `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                             `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                             `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                             `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                             `json:"option_value,omitempty"` // 选项值
	Name        string                                             `json:"name,omitempty"`         // 名称
	PictureURL  string                                             `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *UpdateUserPatchRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserPatchRespUserCustomAttrValueGenericUser ...
type UpdateUserPatchRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveComment 往云文档添加一条全局评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/create
func (r *DriveService) CreateDriveComment(ctx context.Context, request *CreateDriveCommentReq, options ...MethodOptionFunc) (*CreateDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveComment mock enable")
		return r.cli.mock.mockDriveCreateDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveComment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveComment mock DriveCreateDriveComment method
func (r *Mock) MockDriveCreateDriveComment(f func(ctx context.Context, request *CreateDriveCommentReq, options ...MethodOptionFunc) (*CreateDriveCommentResp, *Response, error)) {
	r.mockDriveCreateDriveComment = f
}

// UnMockDriveCreateDriveComment un-mock DriveCreateDriveComment method
func (r *Mock) UnMockDriveCreateDriveComment() {
	r.mockDriveCreateDriveComment = nil
}

// CreateDriveCommentReq ...
type CreateDriveCommentReq struct {
	FileType     FileType                        `query:"file_type" json:"-"`      // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件, `docx`：新版文档
	UserIDType   *IDType                         `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	FileToken    string                          `path:"file_token" json:"-"`      // 文档token, 示例值："doccnGp4UK1UskrOEJwBXd3****"
	CommentID    *string                         `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）, 示例值："6916106822734578184"
	UserID       *string                         `json:"user_id,omitempty"`        // 用户ID, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab*****"
	CreateTime   *int64                          `json:"create_time,omitempty"`    // 创建时间, 示例值：1610281603
	UpdateTime   *int64                          `json:"update_time,omitempty"`    // 更新时间, 示例值：1610281603
	IsSolved     *bool                           `json:"is_solved,omitempty"`      // 是否已解决, 示例值：false
	SolvedTime   *int64                          `json:"solved_time,omitempty"`    // 解决评论时间, 示例值：1610281603
	SolverUserID *string                         `json:"solver_user_id,omitempty"` // 解决评论者的用户ID, 示例值："null"
	ReplyList    *CreateDriveCommentReqReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// CreateDriveCommentReqReplyList ...
type CreateDriveCommentReqReplyList struct {
	Replies []*CreateDriveCommentReqReplyListReply `json:"replies,omitempty"` // 回复列表
}

// CreateDriveCommentReqReplyListReply ...
type CreateDriveCommentReqReplyListReply struct {
	ReplyID    *string                                     `json:"reply_id,omitempty"`    // 回复ID, 示例值："6916106822734594568"
	UserID     *string                                     `json:"user_id,omitempty"`     // 用户ID, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab2*****"
	CreateTime *int64                                      `json:"create_time,omitempty"` // 创建时间, 示例值：1610281603
	UpdateTime *int64                                      `json:"update_time,omitempty"` // 更新时间, 示例值：1610281603
	Content    *CreateDriveCommentReqReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// CreateDriveCommentReqReplyListReplyContent ...
type CreateDriveCommentReqReplyListReplyContent struct {
	Elements []*CreateDriveCommentReqReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// CreateDriveCommentReqReplyListReplyContentElement ...
type CreateDriveCommentReqReplyListReplyContentElement struct {
	Type     string                                                     `json:"type,omitempty"`      // 回复的内容元素, 示例值："text_run", 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *CreateDriveCommentReqReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *CreateDriveCommentReqReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *CreateDriveCommentReqReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// CreateDriveCommentReqReplyListReplyContentElementTextRun ...
type CreateDriveCommentReqReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本, 示例值："comment text"
}

// CreateDriveCommentReqReplyListReplyContentElementDocsLink ...
type CreateDriveCommentReqReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档, 示例值："https://bytedance.feishu.cn/docs/doccnHh7U87HOFpii5u5G*****"
}

// CreateDriveCommentReqReplyListReplyContentElementPerson ...
type CreateDriveCommentReqReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab*****"
}

// createDriveCommentResp ...
type createDriveCommentResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveCommentResp `json:"data,omitempty"`
}

// CreateDriveCommentResp ...
type CreateDriveCommentResp struct {
	CommentID    string                           `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）
	UserID       string                           `json:"user_id,omitempty"`        // 用户ID
	CreateTime   int64                            `json:"create_time,omitempty"`    // 创建时间
	UpdateTime   int64                            `json:"update_time,omitempty"`    // 更新时间
	IsSolved     bool                             `json:"is_solved,omitempty"`      // 是否已解决
	SolvedTime   int64                            `json:"solved_time,omitempty"`    // 解决评论时间
	SolverUserID string                           `json:"solver_user_id,omitempty"` // 解决评论者的用户ID
	ReplyList    *CreateDriveCommentRespReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// CreateDriveCommentRespReplyList ...
type CreateDriveCommentRespReplyList struct {
	Replies []*CreateDriveCommentRespReplyListReply `json:"replies,omitempty"` // 回复列表
}

// CreateDriveCommentRespReplyListReply ...
type CreateDriveCommentRespReplyListReply struct {
	ReplyID    string                                       `json:"reply_id,omitempty"`    // 回复ID
	UserID     string                                       `json:"user_id,omitempty"`     // 用户ID
	CreateTime int64                                        `json:"create_time,omitempty"` // 创建时间
	UpdateTime int64                                        `json:"update_time,omitempty"` // 更新时间
	Content    *CreateDriveCommentRespReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// CreateDriveCommentRespReplyListReplyContent ...
type CreateDriveCommentRespReplyListReplyContent struct {
	Elements []*CreateDriveCommentRespReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// CreateDriveCommentRespReplyListReplyContentElement ...
type CreateDriveCommentRespReplyListReplyContentElement struct {
	Type     string                                                      `json:"type,omitempty"`      // 回复的内容元素, 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *CreateDriveCommentRespReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *CreateDriveCommentRespReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *CreateDriveCommentRespReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// CreateDriveCommentRespReplyListReplyContentElementTextRun ...
type CreateDriveCommentRespReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本
}

// CreateDriveCommentRespReplyListReplyContentElementDocsLink ...
type CreateDriveCommentRespReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档
}

// CreateDriveCommentRespReplyListReplyContentElementPerson ...
type CreateDriveCommentRespReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveComment 删除云文档中的某条回复。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/delete
func (r *DriveService) DeleteDriveComment(ctx context.Context, request *DeleteDriveCommentReq, options ...MethodOptionFunc) (*DeleteDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveComment mock enable")
		return r.cli.mock.mockDriveDeleteDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveComment",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveComment mock DriveDeleteDriveComment method
func (r *Mock) MockDriveDeleteDriveComment(f func(ctx context.Context, request *DeleteDriveCommentReq, options ...MethodOptionFunc) (*DeleteDriveCommentResp, *Response, error)) {
	r.mockDriveDeleteDriveComment = f
}

// UnMockDriveDeleteDriveComment un-mock DriveDeleteDriveComment method
func (r *Mock) UnMockDriveDeleteDriveComment() {
	r.mockDriveDeleteDriveComment = nil
}

// DeleteDriveCommentReq ...
type DeleteDriveCommentReq struct {
	FileType  FileType `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件, `docx`：新版文档
	FileToken string   `path:"file_token" json:"-"` // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID string   `path:"comment_id" json:"-"` // 评论ID, 示例值："6916106822734578184"
	ReplyID   string   `path:"reply_id" json:"-"`   // 回复ID, 示例值："6916106822734594568"
}

// deleteDriveCommentResp ...
type deleteDriveCommentResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDriveCommentResp `json:"data,omitempty"`
}

// DeleteDriveCommentResp ...
type DeleteDriveCommentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveComment 获取云文档中的某条评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/get
func (r *DriveService) GetDriveComment(ctx context.Context, request *GetDriveCommentReq, options ...MethodOptionFunc) (*GetDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveComment mock enable")
		return r.cli.mock.mockDriveGetDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveComment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveComment mock DriveGetDriveComment method
func (r *Mock) MockDriveGetDriveComment(f func(ctx context.Context, request *GetDriveCommentReq, options ...MethodOptionFunc) (*GetDriveCommentResp, *Response, error)) {
	r.mockDriveGetDriveComment = f
}

// UnMockDriveGetDriveComment un-mock DriveGetDriveComment method
func (r *Mock) UnMockDriveGetDriveComment() {
	r.mockDriveGetDriveComment = nil
}

// GetDriveCommentReq ...
type GetDriveCommentReq struct {
	FileType   FileType `query:"file_type" json:"-"`    // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件, `docx`：新版文档
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	FileToken  string   `path:"file_token" json:"-"`    // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID  string   `path:"comment_id" json:"-"`    // 评论ID, 示例值："6916106822734578184"
}

// getDriveCommentResp ...
type getDriveCommentResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveCommentResp `json:"data,omitempty"`
}

// GetDriveCommentResp ...
type GetDriveCommentResp struct {
	CommentID    string                        `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）
	UserID       string                        `json:"user_id,omitempty"`        // 用户ID
	CreateTime   int64                         `json:"create_time,omitempty"`    // 创建时间
	UpdateTime   int64                         `json:"update_time,omitempty"`    // 更新时间
	IsSolved     bool                          `json:"is_solved,omitempty"`      // 是否已解决
	SolvedTime   int64                         `json:"solved_time,omitempty"`    // 解决评论时间
	SolverUserID string                        `json:"solver_user_id,omitempty"` // 解决评论者的用户ID
	ReplyList    *GetDriveCommentRespReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// GetDriveCommentRespReplyList ...
type GetDriveCommentRespReplyList struct {
	Replies []*GetDriveCommentRespReplyListReply `json:"replies,omitempty"` // 回复列表
}

// GetDriveCommentRespReplyListReply ...
type GetDriveCommentRespReplyListReply struct {
	ReplyID    string                                    `json:"reply_id,omitempty"`    // 回复ID
	UserID     string                                    `json:"user_id,omitempty"`     // 用户ID
	CreateTime int64                                     `json:"create_time,omitempty"` // 创建时间
	UpdateTime int64                                     `json:"update_time,omitempty"` // 更新时间
	Content    *GetDriveCommentRespReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// GetDriveCommentRespReplyListReplyContent ...
type GetDriveCommentRespReplyListReplyContent struct {
	Elements []*GetDriveCommentRespReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// GetDriveCommentRespReplyListReplyContentElement ...
type GetDriveCommentRespReplyListReplyContentElement struct {
	Type     string                                                   `json:"type,omitempty"`      // 回复的内容元素, 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *GetDriveCommentRespReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *GetDriveCommentRespReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *GetDriveCommentRespReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// GetDriveCommentRespReplyListReplyContentElementTextRun ...
type GetDriveCommentRespReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本
}

// GetDriveCommentRespReplyListReplyContentElementDocsLink ...
type GetDriveCommentRespReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档
}

// GetDriveCommentRespReplyListReplyContentElementPerson ...
type GetDriveCommentRespReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveCommentList 通过分页方式获取云文档中的全文评论列表。
//
// 注意：该接口仅可获取在线文档的全文评论，不支持获取局部评论或者在线表格中的评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/list
func (r *DriveService) GetDriveCommentList(ctx context.Context, request *GetDriveCommentListReq, options ...MethodOptionFunc) (*GetDriveCommentListResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveCommentList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveCommentList mock enable")
		return r.cli.mock.mockDriveGetDriveCommentList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveCommentList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveCommentListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveCommentList mock DriveGetDriveCommentList method
func (r *Mock) MockDriveGetDriveCommentList(f func(ctx context.Context, request *GetDriveCommentListReq, options ...MethodOptionFunc) (*GetDriveCommentListResp, *Response, error)) {
	r.mockDriveGetDriveCommentList = f
}

// UnMockDriveGetDriveCommentList un-mock DriveGetDriveCommentList method
func (r *Mock) UnMockDriveGetDriveCommentList() {
	r.mockDriveGetDriveCommentList = nil
}

// GetDriveCommentListReq ...
type GetDriveCommentListReq struct {
	FileType   FileType `query:"file_type" json:"-"`    // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件, `docx`：新版文档
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	IsSolved   *bool    `query:"is_solved" json:"-"`    // 是否已解决（可选）, 示例值：false
	PageToken  *string  `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6916106822734578184"
	PageSize   *int64   `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
	FileToken  string   `path:"file_token" json:"-"`    // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
}

// getDriveCommentListResp ...
type getDriveCommentListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveCommentListResp `json:"data,omitempty"`
}

// GetDriveCommentListResp ...
type GetDriveCommentListResp struct {
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetDriveCommentListRespItem `json:"items,omitempty"`      // 评论列表
}

// GetDriveCommentListRespItem ...
type GetDriveCommentListRespItem struct {
	CommentID    string                                `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）
	UserID       string                                `json:"user_id,omitempty"`        // 用户ID
	CreateTime   int64                                 `json:"create_time,omitempty"`    // 创建时间
	UpdateTime   int64                                 `json:"update_time,omitempty"`    // 更新时间
	IsSolved     bool                                  `json:"is_solved,omitempty"`      // 是否已解决
	SolvedTime   int64                                 `json:"solved_time,omitempty"`    // 解决评论时间
	SolverUserID string                                `json:"solver_user_id,omitempty"` // 解决评论者的用户ID
	ReplyList    *GetDriveCommentListRespItemReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// GetDriveCommentListRespItemReplyList ...
type GetDriveCommentListRespItemReplyList struct {
	Replies []*GetDriveCommentListRespItemReplyListReply `json:"replies,omitempty"` // 回复列表
}

// GetDriveCommentListRespItemReplyListReply ...
type GetDriveCommentListRespItemReplyListReply struct {
	ReplyID    string                                            `json:"reply_id,omitempty"`    // 回复ID
	UserID     string                                            `json:"user_id,omitempty"`     // 用户ID
	CreateTime int64                                             `json:"create_time,omitempty"` // 创建时间
	UpdateTime int64                                             `json:"update_time,omitempty"` // 更新时间
	Content    *GetDriveCommentListRespItemReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// GetDriveCommentListRespItemReplyListReplyContent ...
type GetDriveCommentListRespItemReplyListReplyContent struct {
	Elements []*GetDriveCommentListRespItemReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// GetDriveCommentListRespItemReplyListReplyContentElement ...
type GetDriveCommentListRespItemReplyListReplyContentElement struct {
	Type     string                                                           `json:"type,omitempty"`      // 回复的内容元素, 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *GetDriveCommentListRespItemReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *GetDriveCommentListRespItemReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *GetDriveCommentListRespItemReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// GetDriveCommentListRespItemReplyListReplyContentElementTextRun ...
type GetDriveCommentListRespItemReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本
}

// GetDriveCommentListRespItemReplyListReplyContentElementDocsLink ...
type GetDriveCommentListRespItemReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档
}

// GetDriveCommentListRespItemReplyListReplyContentElementPerson ...
type GetDriveCommentListRespItemReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveCommentPatch 解决或恢复云文档中的评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/patch
func (r *DriveService) UpdateDriveCommentPatch(ctx context.Context, request *UpdateDriveCommentPatchReq, options ...MethodOptionFunc) (*UpdateDriveCommentPatchResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveCommentPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveCommentPatch mock enable")
		return r.cli.mock.mockDriveUpdateDriveCommentPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveCommentPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveCommentPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveCommentPatch mock DriveUpdateDriveCommentPatch method
func (r *Mock) MockDriveUpdateDriveCommentPatch(f func(ctx context.Context, request *UpdateDriveCommentPatchReq, options ...MethodOptionFunc) (*UpdateDriveCommentPatchResp, *Response, error)) {
	r.mockDriveUpdateDriveCommentPatch = f
}

// UnMockDriveUpdateDriveCommentPatch un-mock DriveUpdateDriveCommentPatch method
func (r *Mock) UnMockDriveUpdateDriveCommentPatch() {
	r.mockDriveUpdateDriveCommentPatch = nil
}

// UpdateDriveCommentPatchReq ...
type UpdateDriveCommentPatchReq struct {
	FileType  FileType `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件, `docx`：新版文档
	FileToken string   `path:"file_token" json:"-"` // 文档token, 示例值："doccnGp4UK1UskrOEJwBXd3****"
	CommentID string   `path:"comment_id" json:"-"` // 评论ID, 示例值："6916106822734578184"
	IsSolved  bool     `json:"is_solved,omitempty"` // 评论解决标志, 示例值：true
}

// updateDriveCommentPatchResp ...
type updateDriveCommentPatchResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveCommentPatchResp `json:"data,omitempty"`
}

// UpdateDriveCommentPatchResp ...
type UpdateDriveCommentPatchResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveComment 更新云文档中的某条回复。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/update
func (r *DriveService) UpdateDriveComment(ctx context.Context, request *UpdateDriveCommentReq, options ...MethodOptionFunc) (*UpdateDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveComment mock enable")
		return r.cli.mock.mockDriveUpdateDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveComment",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveComment mock DriveUpdateDriveComment method
func (r *Mock) MockDriveUpdateDriveComment(f func(ctx context.Context, request *UpdateDriveCommentReq, options ...MethodOptionFunc) (*UpdateDriveCommentResp, *Response, error)) {
	r.mockDriveUpdateDriveComment = f
}

// UnMockDriveUpdateDriveComment un-mock DriveUpdateDriveComment method
func (r *Mock) UnMockDriveUpdateDriveComment() {
	r.mockDriveUpdateDriveComment = nil
}

// UpdateDriveCommentReq ...
type UpdateDriveCommentReq struct {
	FileType   FileType                      `query:"file_type" json:"-"`    // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件, `docx`：新版文档
	UserIDType *IDType                       `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	FileToken  string                        `path:"file_token" json:"-"`    // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID  string                        `path:"comment_id" json:"-"`    // 评论ID, 示例值："6916106822734578184"
	ReplyID    string                        `path:"reply_id" json:"-"`      // 回复ID, 示例值："6916106822734594568"
	Content    *UpdateDriveCommentReqContent `json:"content,omitempty"`      // 回复内容
}

// UpdateDriveCommentReqContent ...
type UpdateDriveCommentReqContent struct {
	Elements []*UpdateDriveCommentReqContentElement `json:"elements,omitempty"` // 回复的内容
}

// UpdateDriveCommentReqContentElement ...
type UpdateDriveCommentReqContentElement struct {
	Type     string                                       `json:"type,omitempty"`      // 回复的内容元素, 示例值："text_run", 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *UpdateDriveCommentReqContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *UpdateDriveCommentReqContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *UpdateDriveCommentReqContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// UpdateDriveCommentReqContentElementTextRun ...
type UpdateDriveCommentReqContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本, 示例值："comment text"
}

// UpdateDriveCommentReqContentElementDocsLink ...
type UpdateDriveCommentReqContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档, 示例值："https://bytedance.feishu.cn/docs/doccnHh7U87HOFpii5u5G*****"
}

// UpdateDriveCommentReqContentElementPerson ...
type UpdateDriveCommentReqContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab*****"
}

// updateDriveCommentResp ...
type updateDriveCommentResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveCommentResp `json:"data,omitempty"`
}

// UpdateDriveCommentResp ...
type UpdateDriveCommentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocContent
//
// 在使用此接口前，请仔细阅读[文档概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/docs-doc-overview)和[准备接入文档 API](https://open.feishu.cn/document/ukTMukTMukTM/ugzNzUjL4czM14CO3MTN/guide/getting-start)了解文档调用的规则和约束，确保你的文档数据不会丢失或出错。
// 文档数据结构定义可参考：[文档数据结构概述](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)
// 此接口只支持获取旧版文档富文本内容，如果需要获取新版文档的富文本内容，请调用新版文档相关接口：
// - [获取文档所有块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/list)
// - [获取指定块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/get)
// - [获取指定块下所有子块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/get)
// 该接口用于获取结构化的文档内容。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDM2YjL1AjN24SNwYjN
func (r *DriveService) GetDriveDocContent(ctx context.Context, request *GetDriveDocContentReq, options ...MethodOptionFunc) (*GetDriveDocContentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocContent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocContent mock enable")
		return r.cli.mock.mockDriveGetDriveDocContent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocContent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/:docToken/content",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocContentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocContent mock DriveGetDriveDocContent method
func (r *Mock) MockDriveGetDriveDocContent(f func(ctx context.Context, request *GetDriveDocContentReq, options ...MethodOptionFunc) (*GetDriveDocContentResp, *Response, error)) {
	r.mockDriveGetDriveDocContent = f
}

// UnMockDriveGetDriveDocContent un-mock DriveGetDriveDocContent method
func (r *Mock) UnMockDriveGetDriveDocContent() {
	r.mockDriveGetDriveDocContent = nil
}

// GetDriveDocContentReq ...
type GetDriveDocContentReq struct {
	DocToken string `path:"docToken" json:"-"` // 获取方式详见 [云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)
}

// getDriveDocContentResp ...
type getDriveDocContentResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *GetDriveDocContentResp `json:"data,omitempty"`
}

// GetDriveDocContentResp ...
type GetDriveDocContentResp struct {
	Content  string `json:"content,omitempty"`  // 详情参考[文档数据结构](https://open.feishu.cn/document/ukTMukTMukTM/ukDM2YjL5AjN24SOwYjN)
	Revision int64  `json:"revision,omitempty"` // 文档当前版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveDocContent
//
// 在使用此接口前，请仔细阅读[文档概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/docs-doc-overview)和[准备接入文档 API](https://open.feishu.cn/document/ukTMukTMukTM/ugzNzUjL4czM14CO3MTN/guide/getting-start)了解文档调用的规则和约束，确保你的文档数据不会丢失或出错。
// 文档数据结构定义可参考：[文档数据结构概述](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)
// 此接口只支持编辑旧版文档内容，如果需要编辑新版文档的内容，请调用新版文档相关接口：
// - [创建块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/create)
// - [更新块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/patch)
// - [批量更新块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block/batch_update)
// - [删除块](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document-block-children/batch_delete)
// 该接口用于批量编辑更新文档内容，包括更新标题、范围删除、插入内容。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDM2YjL2AjN24iNwYjN
func (r *DriveService) UpdateDriveDocContent(ctx context.Context, request *UpdateDriveDocContentReq, options ...MethodOptionFunc) (*UpdateDriveDocContentResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveDocContent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveDocContent mock enable")
		return r.cli.mock.mockDriveUpdateDriveDocContent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveDocContent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/:docToken/batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveDocContentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveDocContent mock DriveUpdateDriveDocContent method
func (r *Mock) MockDriveUpdateDriveDocContent(f func(ctx context.Context, request *UpdateDriveDocContentReq, options ...MethodOptionFunc) (*UpdateDriveDocContentResp, *Response, error)) {
	r.mockDriveUpdateDriveDocContent = f
}

// UnMockDriveUpdateDriveDocContent un-mock DriveUpdateDriveDocContent method
func (r *Mock) UnMockDriveUpdateDriveDocContent() {
	r.mockDriveUpdateDriveDocContent = nil
}

// UpdateDriveDocContentReq ...
type UpdateDriveDocContentReq struct {
	DocToken string   `json:"docToken,omitempty"` // 文件的 token，获取方式见[云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)
	Revision int64    `json:"Revision,omitempty"` // 文档的指定版本，文档新创建后版本号是0，[获取方式](https://open.feishu.cn/document/ukTMukTMukTM/uUDM2YjL1AjN24SNwYjN)，要求>=0，post body json 字段
	Requests []string `json:"Requests,omitempty"` // post body json, OperationRequest 类型序列化 string 数组
}

// updateDriveDocContentResp ...
type updateDriveDocContentResp struct {
	Code int64                      `json:"code,omitempty"`
	Msg  string                     `json:"msg,omitempty"`
	Data *UpdateDriveDocContentResp `json:"data,omitempty"`
}

// UpdateDriveDocContentResp ...
type UpdateDriveDocContentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveDoc
//
// 在使用此接口前，请仔细阅读[文档概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/docs-doc-overview)和[准备接入文档 API](https://open.feishu.cn/document/ukTMukTMukTM/ugzNzUjL4czM14CO3MTN/guide/getting-start)了解文档调用的规则和约束，确保你的文档数据不会丢失或出错。
// 文档数据结构定义可参考：[文档数据结构概述](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)
// 此接口创建出的文档为旧版文档，如果需要创建新版文档，请使用[创建新版文档](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/create)接口。
// 该接口用于创建并初始化文档。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDM2YjL4AjN24COwYjN
func (r *DriveService) CreateDriveDoc(ctx context.Context, request *CreateDriveDocReq, options ...MethodOptionFunc) (*CreateDriveDocResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveDoc != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveDoc mock enable")
		return r.cli.mock.mockDriveCreateDriveDoc(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveDoc",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveDocResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveDoc mock DriveCreateDriveDoc method
func (r *Mock) MockDriveCreateDriveDoc(f func(ctx context.Context, request *CreateDriveDocReq, options ...MethodOptionFunc) (*CreateDriveDocResp, *Response, error)) {
	r.mockDriveCreateDriveDoc = f
}

// UnMockDriveCreateDriveDoc un-mock DriveCreateDriveDoc method
func (r *Mock) UnMockDriveCreateDriveDoc() {
	r.mockDriveCreateDriveDoc = nil
}

// CreateDriveDocReq ...
type CreateDriveDocReq struct {
	FolderToken *string `json:"FolderToken,omitempty"` // 文件夹 token，获取方式见[云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)；空表示根目录，tenant_access_token应用权限仅允许操作应用创建的目录
	Content     *string `json:"Content,omitempty"`     // 传入符合[文档数据结构](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)的字符串，若为空表示创建空文档
}

// createDriveDocResp ...
type createDriveDocResp struct {
	Code int64               `json:"code,omitempty"`
	Msg  string              `json:"msg,omitempty"`
	Data *CreateDriveDocResp `json:"data,omitempty"`
}

// CreateDriveDocResp ...
type CreateDriveDocResp struct {
	ObjToken string `json:"objToken,omitempty"` // 新建文档的token
	URL      string `json:"url,omitempty"`      // 新建文档的访问链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocMeta
//
// 此接口只支持查询旧版文档元信息，如果需要查询新版文档元信息，请使用[获取元数据](https://open.feishu.cn/document/ukTMukTMukTM/uMjN3UjLzYzN14yM2cTN)接口。
// 该接口用于根据 docToken 获取元数据。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uczN3UjL3czN14yN3cTN
func (r *DriveService) GetDriveDocMeta(ctx context.Context, request *GetDriveDocMetaReq, options ...MethodOptionFunc) (*GetDriveDocMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocMeta mock enable")
		return r.cli.mock.mockDriveGetDriveDocMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/meta/:docToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocMeta mock DriveGetDriveDocMeta method
func (r *Mock) MockDriveGetDriveDocMeta(f func(ctx context.Context, request *GetDriveDocMetaReq, options ...MethodOptionFunc) (*GetDriveDocMetaResp, *Response, error)) {
	r.mockDriveGetDriveDocMeta = f
}

// UnMockDriveGetDriveDocMeta un-mock DriveGetDriveDocMeta method
func (r *Mock) UnMockDriveGetDriveDocMeta() {
	r.mockDriveGetDriveDocMeta = nil
}

// GetDriveDocMetaReq ...
type GetDriveDocMetaReq struct {
	DocToken string `path:"docToken" json:"-"` // doc 的 token，获取方式见[云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)
}

// getDriveDocMetaResp ...
type getDriveDocMetaResp struct {
	Code int64                `json:"code,omitempty"`
	Msg  string               `json:"msg,omitempty"`
	Data *GetDriveDocMetaResp `json:"data,omitempty"`
}

// GetDriveDocMetaResp ...
type GetDriveDocMetaResp struct {
	CreateDate     string `json:"create_date,omitempty"`      // 创建日期
	CreateTime     int64  `json:"create_time,omitempty"`      // 创建时间戳
	Creator        string `json:"creator,omitempty"`          // 创建者open_id
	CreateUserName string `json:"create_user_name,omitempty"` // 创建者用户名
	DeleteFlag     int64  `json:"delete_flag,omitempty"`      // 删除标志，0表示正常访问未删除，1表示在回收站，2表示已经彻底删除
	EditTime       int64  `json:"edit_time,omitempty"`        // 最后编辑时间戳
	EditUserName   string `json:"edit_user_name,omitempty"`   // 最后编辑者用户名
	IsExternal     bool   `json:"is_external,omitempty"`      // 是否外部文档
	IsPined        bool   `json:"is_pined,omitempty"`         // 是否在接口调用者目录里快速访问
	IsStared       bool   `json:"is_stared,omitempty"`        // 是否在接口调用者目录里收藏
	ObjType        string `json:"obj_type,omitempty"`         // 文档类型，固定是doc
	Owner          string `json:"owner,omitempty"`            // 当前所有者open_id
	OwnerUserName  string `json:"owner_user_name,omitempty"`  // 当前所有者用户名
	ServerTime     int64  `json:"server_time,omitempty"`      // 处理请求时的服务器时间戳
	TenantID       string `json:"tenant_id,omitempty"`        // 文档所在租户id
	Title          string `json:"title,omitempty"`            // 文档名称
	Type           int64  `json:"type,omitempty"`             // 文档类型，固定是2
	URL            string `json:"url,omitempty"`              // 文档url
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocRawContent
//
// 此接口只支持查询旧版文档纯文本内容，如果需要查询新版文档的纯文本内容，请使用[获取新版文档纯文本内容
// ](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/raw_content)接口。
// 该接口用于获取文档的纯文本内容，不包含富文本格式信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukzNzUjL5czM14SO3MTN
func (r *DriveService) GetDriveDocRawContent(ctx context.Context, request *GetDriveDocRawContentReq, options ...MethodOptionFunc) (*GetDriveDocRawContentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocRawContent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocRawContent mock enable")
		return r.cli.mock.mockDriveGetDriveDocRawContent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocRawContent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/:docToken/raw_content",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocRawContentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocRawContent mock DriveGetDriveDocRawContent method
func (r *Mock) MockDriveGetDriveDocRawContent(f func(ctx context.Context, request *GetDriveDocRawContentReq, options ...MethodOptionFunc) (*GetDriveDocRawContentResp, *Response, error)) {
	r.mockDriveGetDriveDocRawContent = f
}

// UnMockDriveGetDriveDocRawContent un-mock DriveGetDriveDocRawContent method
func (r *Mock) UnMockDriveGetDriveDocRawContent() {
	r.mockDriveGetDriveDocRawContent = nil
}

// GetDriveDocRawContentReq ...
type GetDriveDocRawContentReq struct {
	DocToken string `path:"docToken" json:"-"` // 获取方式详见 [云文档常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)
}

// getDriveDocRawContentResp ...
type getDriveDocRawContentResp struct {
	Code int64                      `json:"code,omitempty"` // 如: 0
	Msg  string                     `json:"msg,omitempty"`  // 如: Success
	Data *GetDriveDocRawContentResp `json:"data,omitempty"`
}

// GetDriveDocRawContentResp ...
type GetDriveDocRawContentResp struct {
	Content string `json:"content,omitempty"` // 如: string
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocxDocument 获取文档最新版本号、标题等
//
// 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnWKAE4aSaIU4GcdLInSaVde)，了解相关规则及约束。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/get
func (r *DriveService) GetDriveDocxDocument(ctx context.Context, request *GetDriveDocxDocumentReq, options ...MethodOptionFunc) (*GetDriveDocxDocumentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocxDocument != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocxDocument mock enable")
		return r.cli.mock.mockDriveGetDriveDocxDocument(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocxDocument",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/docx/v1/documents/:document_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocxDocumentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocxDocument mock DriveGetDriveDocxDocument method
func (r *Mock) MockDriveGetDriveDocxDocument(f func(ctx context.Context, request *GetDriveDocxDocumentReq, options ...MethodOptionFunc) (*GetDriveDocxDocumentResp, *Response, error)) {
	r.mockDriveGetDriveDocxDocument = f
}

// UnMockDriveGetDriveDocxDocument un-mock DriveGetDriveDocxDocument method
func (r *Mock) UnMockDriveGetDriveDocxDocument() {
	r.mockDriveGetDriveDocxDocument = nil
}

// GetDriveDocxDocumentReq ...
type GetDriveDocxDocumentReq struct {
	DocumentID string `path:"document_id" json:"-"` // 文档的唯一标识, 示例值："doxcnePuYufKa49ISjhD8Ih0ikh", 长度范围：`27` ～ `27` 字符
}

// getDriveDocxDocumentResp ...
type getDriveDocxDocumentResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveDocxDocumentResp `json:"data,omitempty"`
}

// GetDriveDocxDocumentResp ...
type GetDriveDocxDocumentResp struct {
	Document *GetDriveDocxDocumentRespDocument `json:"document,omitempty"` // 文档信息
}

// GetDriveDocxDocumentRespDocument ...
type GetDriveDocxDocumentRespDocument struct {
	DocumentID string `json:"document_id,omitempty"` // 文档唯一标识
	RevisionID int64  `json:"revision_id,omitempty"` // 文档版本 ID
	Title      string `json:"title,omitempty"`       // 文档标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocxDocumentRawContent 获取文档的纯文本内容。
//
// 在调用此接口前，请仔细阅读[新版文档 OpenAPI 接口校验规则](https://bytedance.feishu.cn/docx/doxcnby5Y0yoACL3PdfZqrJEm6f#doxcnQeqI4wiKIMis6GNvCOBuqg)，了解相关规则及约束。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/document-docx/docx-v1/document/raw_content
func (r *DriveService) GetDriveDocxDocumentRawContent(ctx context.Context, request *GetDriveDocxDocumentRawContentReq, options ...MethodOptionFunc) (*GetDriveDocxDocumentRawContentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocxDocumentRawContent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocxDocumentRawContent mock enable")
		return r.cli.mock.mockDriveGetDriveDocxDocumentRawContent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocxDocumentRawContent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/docx/v1/documents/:document_id/raw_content",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocxDocumentRawContentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocxDocumentRawContent mock DriveGetDriveDocxDocumentRawContent method
func (r *Mock) MockDriveGetDriveDocxDocumentRawContent(f func(ctx context.Context, request *GetDriveDocxDocumentRawContentReq, options ...MethodOptionFunc) (*GetDriveDocxDocumentRawContentResp, *Response, error)) {
	r.mockDriveGetDriveDocxDocumentRawContent = f
}

// UnMockDriveGetDriveDocxDocumentRawContent un-mock DriveGetDriveDocxDocumentRawContent method
func (r *Mock) UnMockDriveGetDriveDocxDocumentRawContent() {
	r.mockDriveGetDriveDocxDocumentRawContent = nil
}

// GetDriveDocxDocumentRawContentReq ...
type GetDriveDocxDocumentRawContentReq struct {
	Lang       *int64 `query:"lang" json:"-"`       // 语言（用于 MentionUser 语言的选取）, 示例值：0, 可选值有: `0`：中文, `1`：英文, `2`：日文, 默认值: `0`
	DocumentID string `path:"document_id" json:"-"` // 文档的唯一标识, 示例值："doxbcmEtbFrbbq10nPNu8gO1F3b", 长度范围：`27` ～ `27` 字符
}

// getDriveDocxDocumentRawContentResp ...
type getDriveDocxDocumentRawContentResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveDocxDocumentRawContentResp `json:"data,omitempty"`
}

// GetDriveDocxDocumentRawContentResp ...
type GetDriveDocxDocumentRawContentResp struct {
	Content string `json:"content,omitempty"` // 文档纯文本
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveExportTask 创建导出任务，将云文档导出为文件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/create
func (r *DriveService) CreateDriveExportTask(ctx context.Context, request *CreateDriveExportTaskReq, options ...MethodOptionFunc) (*CreateDriveExportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveExportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveExportTask mock enable")
		return r.cli.mock.mockDriveCreateDriveExportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveExportTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/export_tasks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveExportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveExportTask mock DriveCreateDriveExportTask method
func (r *Mock) MockDriveCreateDriveExportTask(f func(ctx context.Context, request *CreateDriveExportTaskReq, options ...MethodOptionFunc) (*CreateDriveExportTaskResp, *Response, error)) {
	r.mockDriveCreateDriveExportTask = f
}

// UnMockDriveCreateDriveExportTask un-mock DriveCreateDriveExportTask method
func (r *Mock) UnMockDriveCreateDriveExportTask() {
	r.mockDriveCreateDriveExportTask = nil
}

// CreateDriveExportTaskReq ...
type CreateDriveExportTaskReq struct {
	FileExtension string `json:"file_extension,omitempty"` // 导出文件扩展名, 示例值："pdf", 可选值有: `docx`：Microsoft Word (DOCX) 格式, `pdf`：pdf 格式, `xlsx`：Microsoft Excel (XLSX) 格式
	Token         string `json:"token,omitempty"`          // 导出文档 token, 示例值："doccnxe5OxxxxxxxSNdsJviENsk"
	Type          string `json:"type,omitempty"`           // 导出文档类型, 示例值："doc", 可选值有: `doc`：旧版飞书云文档类型, `sheet`：飞书电子表格类型, `bitable`：飞书多维表格类型, `docx`：新版飞书云文档类型
}

// createDriveExportTaskResp ...
type createDriveExportTaskResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveExportTaskResp `json:"data,omitempty"`
}

// CreateDriveExportTaskResp ...
type CreateDriveExportTaskResp struct {
	Ticket string `json:"ticket,omitempty"` // 导出任务ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadDriveExportTask 根据任务导出结果的token，下载导出文件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/download
func (r *DriveService) DownloadDriveExportTask(ctx context.Context, request *DownloadDriveExportTaskReq, options ...MethodOptionFunc) (*DownloadDriveExportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveDownloadDriveExportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DownloadDriveExportTask mock enable")
		return r.cli.mock.mockDriveDownloadDriveExportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DownloadDriveExportTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/export_tasks/file/:file_token/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(downloadDriveExportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDownloadDriveExportTask mock DriveDownloadDriveExportTask method
func (r *Mock) MockDriveDownloadDriveExportTask(f func(ctx context.Context, request *DownloadDriveExportTaskReq, options ...MethodOptionFunc) (*DownloadDriveExportTaskResp, *Response, error)) {
	r.mockDriveDownloadDriveExportTask = f
}

// UnMockDriveDownloadDriveExportTask un-mock DriveDownloadDriveExportTask method
func (r *Mock) UnMockDriveDownloadDriveExportTask() {
	r.mockDriveDownloadDriveExportTask = nil
}

// DownloadDriveExportTaskReq ...
type DownloadDriveExportTaskReq struct {
	FileToken string `path:"file_token" json:"-"` // 导出文档token, 示例值："boxcnNAlfwHxxxxxxxxxxSaLSec"
}

// downloadDriveExportTaskResp ...
type downloadDriveExportTaskResp struct {
	IsFile bool                         `json:"is_file,omitempty"`
	Code   int64                        `json:"code,omitempty"`
	Msg    string                       `json:"msg,omitempty"`
	Data   *DownloadDriveExportTaskResp `json:"data,omitempty"`
}

func (r *downloadDriveExportTaskResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadDriveExportTaskResp{}
	}
	r.Data.File = file
}

// DownloadDriveExportTaskResp ...
type DownloadDriveExportTaskResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveExportTask 根据创建导出任务的ticket查询导出任务的结果
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/export_task/get
func (r *DriveService) GetDriveExportTask(ctx context.Context, request *GetDriveExportTaskReq, options ...MethodOptionFunc) (*GetDriveExportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveExportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveExportTask mock enable")
		return r.cli.mock.mockDriveGetDriveExportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveExportTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/export_tasks/:ticket",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveExportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveExportTask mock DriveGetDriveExportTask method
func (r *Mock) MockDriveGetDriveExportTask(f func(ctx context.Context, request *GetDriveExportTaskReq, options ...MethodOptionFunc) (*GetDriveExportTaskResp, *Response, error)) {
	r.mockDriveGetDriveExportTask = f
}

// UnMockDriveGetDriveExportTask un-mock DriveGetDriveExportTask method
func (r *Mock) UnMockDriveGetDriveExportTask() {
	r.mockDriveGetDriveExportTask = nil
}

// GetDriveExportTaskReq ...
type GetDriveExportTaskReq struct {
	Token  string `query:"token" json:"-"` // 导出文档的 token, 示例值："doccnZVxxxxxxxxxxxxGiyBgYqe"
	Ticket string `path:"ticket" json:"-"` // 导出任务ID, 示例值："6933093124755423251"
}

// getDriveExportTaskResp ...
type getDriveExportTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveExportTaskResp `json:"data,omitempty"`
}

// GetDriveExportTaskResp ...
type GetDriveExportTaskResp struct {
	Result *GetDriveExportTaskRespResult `json:"result,omitempty"` // 导出任务结果
}

// GetDriveExportTaskRespResult ...
type GetDriveExportTaskRespResult struct {
	FileExtension string `json:"file_extension,omitempty"` // 导出文件扩展名, 可选值有: `docx`：Microsoft Word (DOCX) 格式, `pdf`：pdf 格式, `xlsx`：Microsoft Excel (XLSX) 格式
	Type          string `json:"type,omitempty"`           // 导出文档类型, 可选值有: `doc`：旧版飞书云文档类型, `sheet`：飞书电子表格类型, `bitable`：飞书多维表格类型, `docx`：新版飞书云文档类型
	FileName      string `json:"file_name,omitempty"`      // 导出文件名
	FileToken     string `json:"file_token,omitempty"`     // 导出文件 drive token
	FileSize      int64  `json:"file_size,omitempty"`      // 导出文件大小
	JobErrorMsg   string `json:"job_error_msg,omitempty"`  // 任务失败原因
	JobStatus     int64  `json:"job_status,omitempty"`     // 任务状态, 可选值有: `0`：成功, `1`：初始化, `2`：处理中, `3`：内部错误, `107`：导出文档过大, `108`：处理超时, `109`：内部错误, `110`：无权限, `111`：导出文档已删除, `122`：创建副本中禁止导出, `123`：导出文档不存在, `6000`：导出文档图片过多
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CopyDriveFile
//
// 将文件复制到用户云空间的其他文件夹中。不支持复制文件夹。
// 如果目标文件夹是我的空间，则复制的文件会在「**我的空间**」的「**归我所有**」列表里。
// 该接口不支持并发拷贝多个文件，且调用频率上限为 5QPS 且 10000次/天
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/copy
func (r *DriveService) CopyDriveFile(ctx context.Context, request *CopyDriveFileReq, options ...MethodOptionFunc) (*CopyDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveCopyDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CopyDriveFile mock enable")
		return r.cli.mock.mockDriveCopyDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CopyDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/copy",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(copyDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCopyDriveFile mock DriveCopyDriveFile method
func (r *Mock) MockDriveCopyDriveFile(f func(ctx context.Context, request *CopyDriveFileReq, options ...MethodOptionFunc) (*CopyDriveFileResp, *Response, error)) {
	r.mockDriveCopyDriveFile = f
}

// UnMockDriveCopyDriveFile un-mock DriveCopyDriveFile method
func (r *Mock) UnMockDriveCopyDriveFile() {
	r.mockDriveCopyDriveFile = nil
}

// CopyDriveFileReq ...
type CopyDriveFileReq struct {
	FileToken   string  `path:"file_token" json:"-"`    // 被复制的文件token, 示例值："boxbcj55reGXM6YAS3C7Z4GWKNg"
	Name        string  `json:"name,omitempty"`         // 被复制文件的新名称, 示例值："123.txt"
	Type        *string `json:"type,omitempty"`         // 被复制文件的类型，如果该值为空或者与文件实际类型不匹配，接口会返回失败。, 示例值："file", 可选值有: `file`：文件类型, `doc`：文档类型, `sheet`：电子表格类型, `bitable`：多维表格类型, `docx`：新版文档类型, `mindnote`：思维笔记类型
	FolderToken string  `json:"folder_token,omitempty"` // 文件被复制到的目标文件夹token, 示例值："fldbcRho46N6MQ3mJkOAuPUZR9d"
}

// copyDriveFileResp ...
type copyDriveFileResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *CopyDriveFileResp `json:"data,omitempty"`
}

// CopyDriveFileResp ...
type CopyDriveFileResp struct {
	File *CopyDriveFileRespFile `json:"file,omitempty"` // 复制后的文件资源
}

// CopyDriveFileRespFile ...
type CopyDriveFileRespFile struct {
	Token       string `json:"token,omitempty"`        // 文件标识符
	Name        string `json:"name,omitempty"`         // 文件名
	Type        string `json:"type,omitempty"`         // 文件类型
	ParentToken string `json:"parent_token,omitempty"` // 父文件夹标识
	URL         string `json:"url,omitempty"`          // 在浏览器中查看的链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveFile
//
// 在用户云空间指定文件夹中创建文档、电子表格或者多维表格。
// 如果目标文件夹是我的空间，则新建的文档会在「我的空间」的「归我所有」列表里。
// 云空间中文件夹单层节点上限是1500个，超过限制新建文档接口会返回失败，如果有这类需求，可以考虑将文档新建在不同文件夹中。
// 为了更好地提升该接口的安全性，我们对其进行了升级，如果需要创建文档可以尝试
// [新版本>>](https://open.feishu.cn/document/ukTMukTMukTM/ugDM2YjL4AjN24COwYjN)，如果需要创建电子表格可以尝试[新版本>>](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/create)
// 该接口不支持并发创建，且调用频率上限为 5QPS 且 10000次/天
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTNzUjL0UzM14CN1MTN
func (r *DriveService) CreateDriveFile(ctx context.Context, request *CreateDriveFileReq, options ...MethodOptionFunc) (*CreateDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFile mock enable")
		return r.cli.mock.mockDriveCreateDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/file/:folderToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveFile mock DriveCreateDriveFile method
func (r *Mock) MockDriveCreateDriveFile(f func(ctx context.Context, request *CreateDriveFileReq, options ...MethodOptionFunc) (*CreateDriveFileResp, *Response, error)) {
	r.mockDriveCreateDriveFile = f
}

// UnMockDriveCreateDriveFile un-mock DriveCreateDriveFile method
func (r *Mock) UnMockDriveCreateDriveFile() {
	r.mockDriveCreateDriveFile = nil
}

// CreateDriveFileReq ...
type CreateDriveFileReq struct {
	FolderToken string `path:"folderToken" json:"-"` // 文件夹 token，用于在此文件夹下新建文档，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Title       string `json:"title,omitempty"`      // 创建文档的标题。注：type 为 "doc" 时不可用（非必填，请求会被过滤），有创建带标题doc文档需求可用 [创建文档](https://open.feishu.cn/document/ukTMukTMukTM/ugDM2YjL4AjN24COwYjN) 接口
	Type        string `json:"type,omitempty"`       // 需要创建文档的类型  "doc" 、 "sheet"  or  "bitable"
}

// createDriveFileResp ...
type createDriveFileResp struct {
	Code int64                `json:"code,omitempty"`
	Msg  string               `json:"msg,omitempty"`
	Data *CreateDriveFileResp `json:"data,omitempty"`
}

// CreateDriveFileResp ...
type CreateDriveFileResp struct {
	URL      string `json:"url,omitempty"`      // 新创建文档的 url
	Token    string `json:"token,omitempty"`    // 新创建文档的 token
	Revision int64  `json:"revision,omitempty"` // 新创建文档的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadDriveFile 使用该接口可以下载在云空间目录下的文件（不含飞书文档/表格/思维导图等在线文档）。支持range下载。
//
// 该接口支持调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/download
func (r *DriveService) DownloadDriveFile(ctx context.Context, request *DownloadDriveFileReq, options ...MethodOptionFunc) (*DownloadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveDownloadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DownloadDriveFile mock enable")
		return r.cli.mock.mockDriveDownloadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DownloadDriveFile",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(downloadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDownloadDriveFile mock DriveDownloadDriveFile method
func (r *Mock) MockDriveDownloadDriveFile(f func(ctx context.Context, request *DownloadDriveFileReq, options ...MethodOptionFunc) (*DownloadDriveFileResp, *Response, error)) {
	r.mockDriveDownloadDriveFile = f
}

// UnMockDriveDownloadDriveFile un-mock DriveDownloadDriveFile method
func (r *Mock) UnMockDriveDownloadDriveFile() {
	r.mockDriveDownloadDriveFile = nil
}

// DownloadDriveFileReq ...
type DownloadDriveFileReq struct {
	FileToken string   `path:"file_token" json:"-"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："boxcnabCdefg12345"
	Range     [2]int64 `header:"range" json:"-"`    // 指定文件下载部分, 示例值："bytes=0-1024"
}

// downloadDriveFileResp ...
type downloadDriveFileResp struct {
	IsFile bool
	Code   int64
	Msg    string
	Data   *DownloadDriveFileResp
}

func (r *downloadDriveFileResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadDriveFileResp{}
	}
	r.Data.File = file
}

func (r *downloadDriveFileResp) SetFilename(filename string) {
	if r.Data == nil {
		r.Data = &DownloadDriveFileResp{}
	}
	r.Data.Filename = filename
}

// DownloadDriveFileResp ...
type DownloadDriveFileResp struct {
	File     io.Reader
	Filename string // 文件名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveFile 删除用户在云空间内的文件或者文件夹。文件或者文件夹被删除后，会进入用户回收站里。
//
// 要删除文件需要确保应用具有下述两种权限之一：
// 1. 该应用是文件所有者并且具有该文件所在父文件夹的编辑权限。
// 2. 该应用并非文件所有者，但是是该文件所在父文件夹的所有者或者拥有该父文件夹的所有权限（full access）。
// 该接口不支持并发调用，且调用频率上限为5QPS。删除文件夹会异步执行并返回一个task_id，可以使用[task_check](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/task_check)接口查询任务执行状态。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete
func (r *DriveService) DeleteDriveFile(ctx context.Context, request *DeleteDriveFileReq, options ...MethodOptionFunc) (*DeleteDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveFile mock enable")
		return r.cli.mock.mockDriveDeleteDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveFile",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveFile mock DriveDeleteDriveFile method
func (r *Mock) MockDriveDeleteDriveFile(f func(ctx context.Context, request *DeleteDriveFileReq, options ...MethodOptionFunc) (*DeleteDriveFileResp, *Response, error)) {
	r.mockDriveDeleteDriveFile = f
}

// UnMockDriveDeleteDriveFile un-mock DriveDeleteDriveFile method
func (r *Mock) UnMockDriveDeleteDriveFile() {
	r.mockDriveDeleteDriveFile = nil
}

// DeleteDriveFileReq ...
type DeleteDriveFileReq struct {
	Type      string `query:"type" json:"-"`      // 被删除文件的类型, 示例值："file", 可选值有: `file`：文件类型, `docx`：新版文档类型, `bitable`：多维表格类型, `folder`：文件夹类型, `doc`：文档类型, `sheet`：电子表格类型, `mindnote`：思维笔记类型, `shortcut`：快捷方式类型
	FileToken string `path:"file_token" json:"-"` // 需要删除的文件token, 示例值："boxbcj55reGXM6YAS3C7Z4GWKNg"
}

// deleteDriveFileResp ...
type deleteDriveFileResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDriveFileResp `json:"data,omitempty"`
}

// DeleteDriveFileResp ...
type DeleteDriveFileResp struct {
	TaskID string `json:"task_id,omitempty"` // 异步任务id，删除文件夹时返回
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFileMeta 该接口用于根据 token 获取各类文件的元数据。
//
// 请求用户需要拥有该文件的访问（读）权限
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjN3UjLzYzN14yM2cTN
func (r *DriveService) GetDriveFileMeta(ctx context.Context, request *GetDriveFileMetaReq, options ...MethodOptionFunc) (*GetDriveFileMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileMeta mock enable")
		return r.cli.mock.mockDriveGetDriveFileMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFileMeta",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/suite/docs-api/meta",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFileMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileMeta mock DriveGetDriveFileMeta method
func (r *Mock) MockDriveGetDriveFileMeta(f func(ctx context.Context, request *GetDriveFileMetaReq, options ...MethodOptionFunc) (*GetDriveFileMetaResp, *Response, error)) {
	r.mockDriveGetDriveFileMeta = f
}

// UnMockDriveGetDriveFileMeta un-mock DriveGetDriveFileMeta method
func (r *Mock) UnMockDriveGetDriveFileMeta() {
	r.mockDriveGetDriveFileMeta = nil
}

// GetDriveFileMetaReq ...
type GetDriveFileMetaReq struct {
	RequestDocs []*GetDriveFileMetaReqRequestDocs `json:"request_docs,omitempty"` // 请求文档，一次不超过200个
}

// GetDriveFileMetaReqRequestDocs ...
type GetDriveFileMetaReqRequestDocs struct {
	DocsToken string `json:"docs_token,omitempty"` // 文件的 token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	DocsType  string `json:"docs_type,omitempty"`  // 文件类型  <br>1) "doc": 飞书文档<br>2) "sheet": 飞书电子表格 <br>3) "bitable": 飞书多维表格<br>4) "mindnote": 飞书思维笔记 <br>5) "file": 飞书文件
}

// getDriveFileMetaResp ...
type getDriveFileMetaResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *GetDriveFileMetaResp `json:"data,omitempty"`
}

// GetDriveFileMetaResp ...
type GetDriveFileMetaResp struct {
	DocsMetas []*GetDriveFileMetaRespDocsMetas `json:"docs_metas,omitempty"` // 文件元数据
}

// GetDriveFileMetaRespDocsMetas ...
type GetDriveFileMetaRespDocsMetas struct {
	DocsToken        string `json:"docs_token,omitempty"`         // 文件token
	DocsType         string `json:"docs_type,omitempty"`          // 文件类型
	Title            string `json:"title,omitempty"`              // 标题
	OwnerID          string `json:"owner_id,omitempty"`           // 文件拥有者
	CreateTime       int64  `json:"create_time,omitempty"`        // 创建时间（Unix时间戳）
	LatestModifyUser string `json:"latest_modify_user,omitempty"` // 最后编辑者
	LatestModifyTime int64  `json:"latest_modify_time,omitempty"` // 最后编辑时间（Unix时间戳）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MoveDriveFile 将文件或者文件夹移动到用户云空间的其他位置。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/move
func (r *DriveService) MoveDriveFile(ctx context.Context, request *MoveDriveFileReq, options ...MethodOptionFunc) (*MoveDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveMoveDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveDriveFile mock enable")
		return r.cli.mock.mockDriveMoveDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/move",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveDriveFile mock DriveMoveDriveFile method
func (r *Mock) MockDriveMoveDriveFile(f func(ctx context.Context, request *MoveDriveFileReq, options ...MethodOptionFunc) (*MoveDriveFileResp, *Response, error)) {
	r.mockDriveMoveDriveFile = f
}

// UnMockDriveMoveDriveFile un-mock DriveMoveDriveFile method
func (r *Mock) UnMockDriveMoveDriveFile() {
	r.mockDriveMoveDriveFile = nil
}

// MoveDriveFileReq ...
type MoveDriveFileReq struct {
	FileToken   string  `path:"file_token" json:"-"`    // 需要移动的文件token, 示例值："boxbcj55reGXM6YAS3C7Z4GWKNg"
	Type        *string `json:"type,omitempty"`         // 文件类型，如果该值为空或者与文件实际类型不匹配，接口会返回失败。, 示例值："file", 可选值有: `file`：普通文件类型, `docx`：新版文档类型, `bitable`：多维表格类型, `doc`：文档类型, `sheet`：电子表格类型, `mindnote`：思维笔记类型, `folder`：文件夹类型
	FolderToken *string `json:"folder_token,omitempty"` // 目标文件夹token, 示例值："fldbcRho46N6MQ3mJkOAuPUZR9d"
}

// moveDriveFileResp ...
type moveDriveFileResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *MoveDriveFileResp `json:"data,omitempty"`
}

// MoveDriveFileResp ...
type MoveDriveFileResp struct {
	TaskID string `json:"task_id,omitempty"` // 异步任务id，移动文件夹时返回
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchDriveFile 该接口用于根据搜索条件进行文档搜索。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDM4UjL4ADO14COwgTN
func (r *DriveService) SearchDriveFile(ctx context.Context, request *SearchDriveFileReq, options ...MethodOptionFunc) (*SearchDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveSearchDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SearchDriveFile mock enable")
		return r.cli.mock.mockDriveSearchDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "SearchDriveFile",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/suite/docs-api/search/object",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSearchDriveFile mock DriveSearchDriveFile method
func (r *Mock) MockDriveSearchDriveFile(f func(ctx context.Context, request *SearchDriveFileReq, options ...MethodOptionFunc) (*SearchDriveFileResp, *Response, error)) {
	r.mockDriveSearchDriveFile = f
}

// UnMockDriveSearchDriveFile un-mock DriveSearchDriveFile method
func (r *Mock) UnMockDriveSearchDriveFile() {
	r.mockDriveSearchDriveFile = nil
}

// SearchDriveFileReq ...
type SearchDriveFileReq struct {
	SearchKey string   `json:"search_key,omitempty"` // 搜索关键字
	Count     *int64   `json:"count,omitempty"`      // 搜索返回数量，0 <= count <= 50
	Offset    *int64   `json:"offset,omitempty"`     // 搜索偏移位，offset >= 0，offset + count < 200
	OwnerIDs  []string `json:"owner_ids,omitempty"`  // 文档所有者的userid
	ChatIDs   []string `json:"chat_ids,omitempty"`   // 文档所在群的chatid
	DocsTypes []string `json:"docs_types,omitempty"` // 文档类型，支持："doc", "sheet", "slide", "bitable", "mindnote", "file"
}

// searchDriveFileResp ...
type searchDriveFileResp struct {
	Code int64                `json:"code,omitempty"`
	Msg  string               `json:"msg,omitempty"`
	Data *SearchDriveFileResp `json:"data,omitempty"`
}

// SearchDriveFileResp ...
type SearchDriveFileResp struct {
	DocsEntities []*SearchDriveFileRespDocsEntity `json:"docs_entities,omitempty"` // 搜索匹配文档列表
	HasMore      bool                             `json:"has_more,omitempty"`      // 搜索偏移位结果列表后是否还有数据
	Total        int64                            `json:"total,omitempty"`         // 搜索匹配文档总数量
}

// SearchDriveFileRespDocsEntity ...
type SearchDriveFileRespDocsEntity struct {
	DocsToken string `json:"docs_token,omitempty"` // 文档token
	DocsType  string `json:"docs_type,omitempty"`  // 文档类型
	Title     string `json:"title,omitempty"`      // 标题
	OwnerID   string `json:"owner_id,omitempty"`   // 文件所有者
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveSheetFile 该接口用于根据 spreadsheetToken 删除对应的 sheet 文档。
//
// 为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至
// [新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete)
// </md-alert>
// <md-alert type="warn">
// 文档只能被文档所有者删除，文档被删除后将会放到回收站里
// 该接口不支持并发调用，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTNzUjL1UzM14SN1MTN/delete-sheet
//
// Deprecated
func (r *DriveService) DeleteDriveSheetFile(ctx context.Context, request *DeleteDriveSheetFileReq, options ...MethodOptionFunc) (*DeleteDriveSheetFileResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveSheetFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveSheetFile mock enable")
		return r.cli.mock.mockDriveDeleteDriveSheetFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveSheetFile",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/file/spreadsheets/:spreadsheetToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveSheetFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveSheetFile mock DriveDeleteDriveSheetFile method
func (r *Mock) MockDriveDeleteDriveSheetFile(f func(ctx context.Context, request *DeleteDriveSheetFileReq, options ...MethodOptionFunc) (*DeleteDriveSheetFileResp, *Response, error)) {
	r.mockDriveDeleteDriveSheetFile = f
}

// UnMockDriveDeleteDriveSheetFile un-mock DriveDeleteDriveSheetFile method
func (r *Mock) UnMockDriveDeleteDriveSheetFile() {
	r.mockDriveDeleteDriveSheetFile = nil
}

// DeleteDriveSheetFileReq ...
type DeleteDriveSheetFileReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

// deleteDriveSheetFileResp ...
type deleteDriveSheetFileResp struct {
	Code int64                     `json:"code,omitempty"`
	Msg  string                    `json:"msg,omitempty"`
	Data *DeleteDriveSheetFileResp `json:"data,omitempty"`
}

// DeleteDriveSheetFileResp ...
type DeleteDriveSheetFileResp struct {
	ID     string `json:"id,omitempty"`     // sheet 的 id 「字符串类型」
	Result bool   `json:"result,omitempty"` // 删除结果
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFileStatistics 此接口用于获取文件统计信息，包括文档阅读人数、次数和点赞数。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-statistics/get
func (r *DriveService) GetDriveFileStatistics(ctx context.Context, request *GetDriveFileStatisticsReq, options ...MethodOptionFunc) (*GetDriveFileStatisticsResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileStatistics != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileStatistics mock enable")
		return r.cli.mock.mockDriveGetDriveFileStatistics(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFileStatistics",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/statistics",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFileStatisticsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileStatistics mock DriveGetDriveFileStatistics method
func (r *Mock) MockDriveGetDriveFileStatistics(f func(ctx context.Context, request *GetDriveFileStatisticsReq, options ...MethodOptionFunc) (*GetDriveFileStatisticsResp, *Response, error)) {
	r.mockDriveGetDriveFileStatistics = f
}

// UnMockDriveGetDriveFileStatistics un-mock DriveGetDriveFileStatistics method
func (r *Mock) UnMockDriveGetDriveFileStatistics() {
	r.mockDriveGetDriveFileStatistics = nil
}

// GetDriveFileStatisticsReq ...
type GetDriveFileStatisticsReq struct {
	FileType  FileType `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `mindnote`：思维笔记, `bitable`：多维表格, `wiki`：知识库, `file`：文件
	FileToken string   `path:"file_token" json:"-"` // 文件 token, 示例值："doccnRs*******"
}

// getDriveFileStatisticsResp ...
type getDriveFileStatisticsResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveFileStatisticsResp `json:"data,omitempty"`
}

// GetDriveFileStatisticsResp ...
type GetDriveFileStatisticsResp struct {
	FileToken  string                                `json:"file_token,omitempty"` // 文件 token
	FileType   FileType                              `json:"file_type,omitempty"`  // 文件类型
	Statistics *GetDriveFileStatisticsRespStatistics `json:"statistics,omitempty"` // 文件统计信息
}

// GetDriveFileStatisticsRespStatistics ...
type GetDriveFileStatisticsRespStatistics struct {
	Uv        int64 `json:"uv,omitempty"`         // 文件历史访问人数，同一用户（user_id）多次访问按一次计算。
	Pv        int64 `json:"pv,omitempty"`         // 文件历史访问次数，同一用户（user_id）多次访问按多次计算。（注：同一用户相邻两次访问间隔在半小时内视为一次访问）
	LikeCount int64 `json:"like_count,omitempty"` // 文件历史点赞总数，若对应的文档类型不支持点赞，返回 -1
	Timestamp int64 `json:"timestamp,omitempty"`  // 时间戳（秒）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeDriveFile 该接口用于根据文件token和文件类型订阅 Doc/Docx/Sheet/Bitable 的事件。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/subscribe
func (r *DriveService) SubscribeDriveFile(ctx context.Context, request *SubscribeDriveFileReq, options ...MethodOptionFunc) (*SubscribeDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveSubscribeDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SubscribeDriveFile mock enable")
		return r.cli.mock.mockDriveSubscribeDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "SubscribeDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/subscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(subscribeDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSubscribeDriveFile mock DriveSubscribeDriveFile method
func (r *Mock) MockDriveSubscribeDriveFile(f func(ctx context.Context, request *SubscribeDriveFileReq, options ...MethodOptionFunc) (*SubscribeDriveFileResp, *Response, error)) {
	r.mockDriveSubscribeDriveFile = f
}

// UnMockDriveSubscribeDriveFile un-mock DriveSubscribeDriveFile method
func (r *Mock) UnMockDriveSubscribeDriveFile() {
	r.mockDriveSubscribeDriveFile = nil
}

// SubscribeDriveFileReq ...
type SubscribeDriveFileReq struct {
	FileType  FileType `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `docx`：新版文档, `sheet`：表格, `bitable`：多维表格
	FileToken string   `path:"file_token" json:"-"` // 文档token, 示例值："doccnxxxxxxxxxxxxxxxxxxxxxx"
}

// subscribeDriveFileResp ...
type subscribeDriveFileResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeDriveFileResp `json:"data,omitempty"`
}

// SubscribeDriveFileResp ...
type SubscribeDriveFileResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveFileSubscription 订阅文档中的变更事件，当前支持文档评论订阅，订阅后文档评论更新会有“云文档助手”推送给订阅的用户
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/create
func (r *DriveService) CreateDriveFileSubscription(ctx context.Context, request *CreateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*CreateDriveFileSubscriptionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFileSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFileSubscription mock enable")
		return r.cli.mock.mockDriveCreateDriveFileSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "CreateDriveFileSubscription",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/subscriptions",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(createDriveFileSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveFileSubscription mock DriveCreateDriveFileSubscription method
func (r *Mock) MockDriveCreateDriveFileSubscription(f func(ctx context.Context, request *CreateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*CreateDriveFileSubscriptionResp, *Response, error)) {
	r.mockDriveCreateDriveFileSubscription = f
}

// UnMockDriveCreateDriveFileSubscription un-mock DriveCreateDriveFileSubscription method
func (r *Mock) UnMockDriveCreateDriveFileSubscription() {
	r.mockDriveCreateDriveFileSubscription = nil
}

// CreateDriveFileSubscriptionReq ...
type CreateDriveFileSubscriptionReq struct {
	FileToken        string   `path:"file_token" json:"-"`         // 文档token, 示例值："doxcnxxxxxxxxxxxxxxxxxxxxxx"
	SubscriptionID   *string  `json:"subscription_id,omitempty"`   // 订阅关系ID, 示例值："1234567890987654321"
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 示例值："comment_update", 可选值有: `comment_update`：评论更新
	IsSubcribe       *bool    `json:"is_subcribe,omitempty"`       // 是否订阅, 示例值：true
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `docx`：新版文档, `wiki`：知识库wiki
}

// createDriveFileSubscriptionResp ...
type createDriveFileSubscriptionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveFileSubscriptionResp `json:"data,omitempty"`
}

// CreateDriveFileSubscriptionResp ...
type CreateDriveFileSubscriptionResp struct {
	Subscription *CreateDriveFileSubscriptionRespSubscription `json:"subscription,omitempty"` // 本次增加的文档订阅信息
}

// CreateDriveFileSubscriptionRespSubscription ...
type CreateDriveFileSubscriptionRespSubscription struct {
	SubscriptionID   string   `json:"subscription_id,omitempty"`   // 订阅关系ID
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 可选值有: `comment_update`：评论更新
	IsSubcribe       bool     `json:"is_subcribe,omitempty"`       // 是否订阅
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 可选值有: `doc`：文档, `docx`：新版文档, `wiki`：知识库wiki
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFileSubscription 根据订阅ID获取该订阅的状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/get
func (r *DriveService) GetDriveFileSubscription(ctx context.Context, request *GetDriveFileSubscriptionReq, options ...MethodOptionFunc) (*GetDriveFileSubscriptionResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileSubscription mock enable")
		return r.cli.mock.mockDriveGetDriveFileSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "GetDriveFileSubscription",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getDriveFileSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileSubscription mock DriveGetDriveFileSubscription method
func (r *Mock) MockDriveGetDriveFileSubscription(f func(ctx context.Context, request *GetDriveFileSubscriptionReq, options ...MethodOptionFunc) (*GetDriveFileSubscriptionResp, *Response, error)) {
	r.mockDriveGetDriveFileSubscription = f
}

// UnMockDriveGetDriveFileSubscription un-mock DriveGetDriveFileSubscription method
func (r *Mock) UnMockDriveGetDriveFileSubscription() {
	r.mockDriveGetDriveFileSubscription = nil
}

// GetDriveFileSubscriptionReq ...
type GetDriveFileSubscriptionReq struct {
	FileToken        string   `path:"file_token" json:"-"`         // 文档token, 示例值："doxcnxxxxxxxxxxxxxxxxxxxxxx"
	SubscriptionID   string   `path:"subscription_id" json:"-"`    // 订阅关系ID, 示例值："1234567890987654321"
	SubscriptionType *string  `json:"subscription_type,omitempty"` // 订阅类型, 示例值："comment_update", 可选值有: `comment_update`：评论更新
	IsSubcribe       *bool    `json:"is_subcribe,omitempty"`       // 是否订阅, 示例值：true
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `docx`：新版文档, `wiki`：知识库wiki
}

// getDriveFileSubscriptionResp ...
type getDriveFileSubscriptionResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveFileSubscriptionResp `json:"data,omitempty"`
}

// GetDriveFileSubscriptionResp ...
type GetDriveFileSubscriptionResp struct {
	Subscription *GetDriveFileSubscriptionRespSubscription `json:"subscription,omitempty"` // 文档订阅信息
}

// GetDriveFileSubscriptionRespSubscription ...
type GetDriveFileSubscriptionRespSubscription struct {
	SubscriptionID   string   `json:"subscription_id,omitempty"`   // 订阅关系ID
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 可选值有: `comment_update`：评论更新
	IsSubcribe       bool     `json:"is_subcribe,omitempty"`       // 是否订阅
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 可选值有: `doc`：文档, `docx`：新版文档, `wiki`：知识库wiki
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveFileSubscription 根据订阅ID更新订阅状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/patch
func (r *DriveService) UpdateDriveFileSubscription(ctx context.Context, request *UpdateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*UpdateDriveFileSubscriptionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveFileSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveFileSubscription mock enable")
		return r.cli.mock.mockDriveUpdateDriveFileSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "UpdateDriveFileSubscription",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(updateDriveFileSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveFileSubscription mock DriveUpdateDriveFileSubscription method
func (r *Mock) MockDriveUpdateDriveFileSubscription(f func(ctx context.Context, request *UpdateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*UpdateDriveFileSubscriptionResp, *Response, error)) {
	r.mockDriveUpdateDriveFileSubscription = f
}

// UnMockDriveUpdateDriveFileSubscription un-mock DriveUpdateDriveFileSubscription method
func (r *Mock) UnMockDriveUpdateDriveFileSubscription() {
	r.mockDriveUpdateDriveFileSubscription = nil
}

// UpdateDriveFileSubscriptionReq ...
type UpdateDriveFileSubscriptionReq struct {
	FileToken      string   `path:"file_token" json:"-"`      // 文档token, 示例值："doxcnxxxxxxxxxxxxxxxxxxxxxx"
	SubscriptionID string   `path:"subscription_id" json:"-"` // 订阅关系ID, 示例值："1234567890987654321"
	IsSubscribe    bool     `json:"is_subscribe,omitempty"`   // 是否订阅, 示例值：true
	FileType       FileType `json:"file_type,omitempty"`      // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `docx`：新版文档, `wiki`：知识库wiki
}

// updateDriveFileSubscriptionResp ...
type updateDriveFileSubscriptionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveFileSubscriptionResp `json:"data,omitempty"`
}

// UpdateDriveFileSubscriptionResp ...
type UpdateDriveFileSubscriptionResp struct {
	Subscription *UpdateDriveFileSubscriptionRespSubscription `json:"subscription,omitempty"` // 本次修改的文档订阅信息
}

// UpdateDriveFileSubscriptionRespSubscription ...
type UpdateDriveFileSubscriptionRespSubscription struct {
	SubscriptionID   string   `json:"subscription_id,omitempty"`   // 订阅关系ID
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 可选值有: `comment_update`：评论更新
	IsSubcribe       bool     `json:"is_subcribe,omitempty"`       // 是否订阅
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 可选值有: `doc`：文档, `docx`：新版文档, `wiki`：知识库wiki
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFileTask 查询删除文件夹等异步任务的状态信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/task_check
func (r *DriveService) GetDriveFileTask(ctx context.Context, request *GetDriveFileTaskReq, options ...MethodOptionFunc) (*GetDriveFileTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileTask mock enable")
		return r.cli.mock.mockDriveGetDriveFileTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFileTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/task_check",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFileTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileTask mock DriveGetDriveFileTask method
func (r *Mock) MockDriveGetDriveFileTask(f func(ctx context.Context, request *GetDriveFileTaskReq, options ...MethodOptionFunc) (*GetDriveFileTaskResp, *Response, error)) {
	r.mockDriveGetDriveFileTask = f
}

// UnMockDriveGetDriveFileTask un-mock DriveGetDriveFileTask method
func (r *Mock) UnMockDriveGetDriveFileTask() {
	r.mockDriveGetDriveFileTask = nil
}

// GetDriveFileTaskReq ...
type GetDriveFileTaskReq struct {
	TaskID string `query:"task_id" json:"-"` // 文件相关异步任务id, 示例值："12345"
}

// getDriveFileTaskResp ...
type getDriveFileTaskResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveFileTaskResp `json:"data,omitempty"`
}

// GetDriveFileTaskResp ...
type GetDriveFileTaskResp struct {
	Status string `json:"status,omitempty"` // 异步任务的执行状态，如果任务执行成功则返回success，如果任务执行失败则返回fail，如果任务还在执行中则返回process。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadDriveFile 向云空间指定目录下上传一个小文件。
//
// 请不要使用这个接口上传大于20MB的文件，如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/multipart-upload-file-/introduction)。
// 该接口支持调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all
func (r *DriveService) UploadDriveFile(ctx context.Context, request *UploadDriveFileReq, options ...MethodOptionFunc) (*UploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UploadDriveFile mock enable")
		return r.cli.mock.mockDriveUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_all",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(uploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUploadDriveFile mock DriveUploadDriveFile method
func (r *Mock) MockDriveUploadDriveFile(f func(ctx context.Context, request *UploadDriveFileReq, options ...MethodOptionFunc) (*UploadDriveFileResp, *Response, error)) {
	r.mockDriveUploadDriveFile = f
}

// UnMockDriveUploadDriveFile un-mock DriveUploadDriveFile method
func (r *Mock) UnMockDriveUploadDriveFile() {
	r.mockDriveUploadDriveFile = nil
}

// UploadDriveFileReq ...
type UploadDriveFileReq struct {
	FileName   string    `json:"file_name,omitempty"`   // 文件名。, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string    `json:"parent_type,omitempty"` // 上传点类型。, 示例值："explorer", 可选值有: `explorer`：云空间。
	ParentNode string    `json:"parent_node,omitempty"` // 文件夹token，,获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："fldcn77hdDT5"
	Size       int64     `json:"size,omitempty"`        // 文件大小（以字节为单位）。, 示例值：1024, 最大值：`20971520`
	Checksum   *string   `json:"checksum,omitempty"`    // 文件adler32校验和(可选)。, 示例值："123423882374238957235"
	File       io.Reader `json:"file,omitempty"`        // 文件二进制内容。, 示例值：file binary
}

// uploadDriveFileResp ...
type uploadDriveFileResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UploadDriveFileResp `json:"data,omitempty"`
}

// UploadDriveFileResp ...
type UploadDriveFileResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建文件的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// FinishUploadDriveFile 触发完成上传。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_finish
func (r *DriveService) FinishUploadDriveFile(ctx context.Context, request *FinishUploadDriveFileReq, options ...MethodOptionFunc) (*FinishUploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveFinishUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#FinishUploadDriveFile mock enable")
		return r.cli.mock.mockDriveFinishUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "FinishUploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_finish",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(finishUploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveFinishUploadDriveFile mock DriveFinishUploadDriveFile method
func (r *Mock) MockDriveFinishUploadDriveFile(f func(ctx context.Context, request *FinishUploadDriveFileReq, options ...MethodOptionFunc) (*FinishUploadDriveFileResp, *Response, error)) {
	r.mockDriveFinishUploadDriveFile = f
}

// UnMockDriveFinishUploadDriveFile un-mock DriveFinishUploadDriveFile method
func (r *Mock) UnMockDriveFinishUploadDriveFile() {
	r.mockDriveFinishUploadDriveFile = nil
}

// FinishUploadDriveFileReq ...
type FinishUploadDriveFileReq struct {
	UploadID string `json:"upload_id,omitempty"` // 分片上传事务ID, 示例值："123456"
	BlockNum int64  `json:"block_num,omitempty"` // 分片数量, 示例值：1
}

// finishUploadDriveFileResp ...
type finishUploadDriveFileResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *FinishUploadDriveFileResp `json:"data,omitempty"`
}

// FinishUploadDriveFileResp ...
type FinishUploadDriveFileResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建的文件token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PartUploadDriveFile 上传对应的文件块。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_part
func (r *DriveService) PartUploadDriveFile(ctx context.Context, request *PartUploadDriveFileReq, options ...MethodOptionFunc) (*PartUploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDrivePartUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PartUploadDriveFile mock enable")
		return r.cli.mock.mockDrivePartUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PartUploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_part",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(partUploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePartUploadDriveFile mock DrivePartUploadDriveFile method
func (r *Mock) MockDrivePartUploadDriveFile(f func(ctx context.Context, request *PartUploadDriveFileReq, options ...MethodOptionFunc) (*PartUploadDriveFileResp, *Response, error)) {
	r.mockDrivePartUploadDriveFile = f
}

// UnMockDrivePartUploadDriveFile un-mock DrivePartUploadDriveFile method
func (r *Mock) UnMockDrivePartUploadDriveFile() {
	r.mockDrivePartUploadDriveFile = nil
}

// PartUploadDriveFileReq ...
type PartUploadDriveFileReq struct {
	UploadID string    `json:"upload_id,omitempty"` // 分片上传事务ID。, 示例值："123456"
	Seq      int64     `json:"seq,omitempty"`       // 块号，从0开始计数。, 示例值：0
	Size     int64     `json:"size,omitempty"`      // 块大小（以字节为单位）。, 示例值：4194304
	Checksum *string   `json:"checksum,omitempty"`  // 文件分块adler32校验和(可选)。, 示例值："12342388237783294798"
	File     io.Reader `json:"file,omitempty"`      // 文件分片二进制内容。, 示例值：file binary
}

// partUploadDriveFileResp ...
type partUploadDriveFileResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *PartUploadDriveFileResp `json:"data,omitempty"`
}

// PartUploadDriveFileResp ...
type PartUploadDriveFileResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PrepareUploadDriveFile 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
//
// 你在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_prepare
func (r *DriveService) PrepareUploadDriveFile(ctx context.Context, request *PrepareUploadDriveFileReq, options ...MethodOptionFunc) (*PrepareUploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDrivePrepareUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PrepareUploadDriveFile mock enable")
		return r.cli.mock.mockDrivePrepareUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PrepareUploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_prepare",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(prepareUploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePrepareUploadDriveFile mock DrivePrepareUploadDriveFile method
func (r *Mock) MockDrivePrepareUploadDriveFile(f func(ctx context.Context, request *PrepareUploadDriveFileReq, options ...MethodOptionFunc) (*PrepareUploadDriveFileResp, *Response, error)) {
	r.mockDrivePrepareUploadDriveFile = f
}

// UnMockDrivePrepareUploadDriveFile un-mock DrivePrepareUploadDriveFile method
func (r *Mock) UnMockDrivePrepareUploadDriveFile() {
	r.mockDrivePrepareUploadDriveFile = nil
}

// PrepareUploadDriveFileReq ...
type PrepareUploadDriveFileReq struct {
	FileName   string `json:"file_name,omitempty"`   // 文件名, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string `json:"parent_type,omitempty"` // 上传点类型, 示例值："explorer", 可选值有: `explorer`：云空间
	ParentNode string `json:"parent_node,omitempty"` // 文件夹的token, 示例值："fldcnaBcdEfghdis"
	Size       int64  `json:"size,omitempty"`        // 文件大小, 示例值：1024, 最小值：`0`
}

// prepareUploadDriveFileResp ...
type prepareUploadDriveFileResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *PrepareUploadDriveFileResp `json:"data,omitempty"`
}

// PrepareUploadDriveFileResp ...
type PrepareUploadDriveFileResp struct {
	UploadID  string `json:"upload_id,omitempty"`  // 分片上传事务ID
	BlockSize int64  `json:"block_size,omitempty"` // 分片大小策略
	BlockNum  int64  `json:"block_num,omitempty"`  // 分片数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFolderChildren
//
// 获取用户云空间中指定文件夹下的文件清单。清单类型包括文件、各种在线文档（文档、电子表格、多维表格、思维笔记）、文件夹和快捷方式。该接口不支持分页，并且不会递归的获取子文件夹的清单。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEjNzUjLxYzM14SM2MTN
func (r *DriveService) GetDriveFolderChildren(ctx context.Context, request *GetDriveFolderChildrenReq, options ...MethodOptionFunc) (*GetDriveFolderChildrenResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFolderChildren != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFolderChildren mock enable")
		return r.cli.mock.mockDriveGetDriveFolderChildren(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFolderChildren",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/folder/:folderToken/children",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFolderChildrenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFolderChildren mock DriveGetDriveFolderChildren method
func (r *Mock) MockDriveGetDriveFolderChildren(f func(ctx context.Context, request *GetDriveFolderChildrenReq, options ...MethodOptionFunc) (*GetDriveFolderChildrenResp, *Response, error)) {
	r.mockDriveGetDriveFolderChildren = f
}

// UnMockDriveGetDriveFolderChildren un-mock DriveGetDriveFolderChildren method
func (r *Mock) UnMockDriveGetDriveFolderChildren() {
	r.mockDriveGetDriveFolderChildren = nil
}

// GetDriveFolderChildrenReq ...
type GetDriveFolderChildrenReq struct {
	Types       []string `query:"types" json:"-"`      // 需要查询的文件类型，默认返回所有 children；types 可多选，可选类型有 doc、sheet、file、bitable、docx、folder、mindnote 。如 url?types=folder&types=sheet
	FolderToken string   `path:"folderToken" json:"-"` // 文件夹的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

// getDriveFolderChildrenResp ...
type getDriveFolderChildrenResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *GetDriveFolderChildrenResp `json:"data,omitempty"`
}

// GetDriveFolderChildrenResp ...
type GetDriveFolderChildrenResp struct {
	ParentToken string                                         `json:"parentToken,omitempty"` // 文件夹的 token
	Children    map[string]*GetDriveFolderChildrenRespChildren `json:"children,omitempty"`    // 文件夹的下的文件
}

// GetDriveFolderChildrenRespChildren ...
type GetDriveFolderChildrenRespChildren struct {
	Token      string `json:"token,omitempty"`       // 文件的 token
	Name       string `json:"name,omitempty"`        // 文件的标题
	Type       string `json:"type,omitempty"`        // 文件的类型
	IsShortcut bool   `json:"is_shortcut,omitempty"` // 该文件是否是快捷方式，如果值为true，代表该文件是一个快捷方式
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveFolder 在用户云空间的指定文件夹中创建一个新的空文件夹。
//
// 该接口不支持并发创建，且调用频率上限为 5QPS 以及 10000次/天
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/create_folder
func (r *DriveService) CreateDriveFolder(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFolder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFolder mock enable")
		return r.cli.mock.mockDriveCreateDriveFolder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveFolder",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/create_folder",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveFolderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveFolder mock DriveCreateDriveFolder method
func (r *Mock) MockDriveCreateDriveFolder(f func(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error)) {
	r.mockDriveCreateDriveFolder = f
}

// UnMockDriveCreateDriveFolder un-mock DriveCreateDriveFolder method
func (r *Mock) UnMockDriveCreateDriveFolder() {
	r.mockDriveCreateDriveFolder = nil
}

// CreateDriveFolderReq ...
type CreateDriveFolderReq struct {
	Name        string `json:"name,omitempty"`         // 文件夹名称, 示例值："New Folder"
	FolderToken string `json:"folder_token,omitempty"` // 父文件夹token, 示例值："fldbcRho46N6MQ3mJkOAuPUZR9d"
}

// createDriveFolderResp ...
type createDriveFolderResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveFolderResp `json:"data,omitempty"`
}

// CreateDriveFolderResp ...
type CreateDriveFolderResp struct {
	Token string `json:"token,omitempty"` // 创建文件夹的token
	URL   string `json:"url,omitempty"`   // 创建文件夹的访问url
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFolderMeta
//
// 该接口用于根据 folderToken 获取该文件夹的元信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAjNzUjLwYzM14CM2MTN
func (r *DriveService) GetDriveFolderMeta(ctx context.Context, request *GetDriveFolderMetaReq, options ...MethodOptionFunc) (*GetDriveFolderMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFolderMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFolderMeta mock enable")
		return r.cli.mock.mockDriveGetDriveFolderMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFolderMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/folder/:folderToken/meta",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFolderMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFolderMeta mock DriveGetDriveFolderMeta method
func (r *Mock) MockDriveGetDriveFolderMeta(f func(ctx context.Context, request *GetDriveFolderMetaReq, options ...MethodOptionFunc) (*GetDriveFolderMetaResp, *Response, error)) {
	r.mockDriveGetDriveFolderMeta = f
}

// UnMockDriveGetDriveFolderMeta un-mock DriveGetDriveFolderMeta method
func (r *Mock) UnMockDriveGetDriveFolderMeta() {
	r.mockDriveGetDriveFolderMeta = nil
}

// GetDriveFolderMetaReq ...
type GetDriveFolderMetaReq struct {
	FolderToken string `path:"folderToken" json:"-"` // 文件夹 token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

// getDriveFolderMetaResp ...
type getDriveFolderMetaResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *GetDriveFolderMetaResp `json:"data,omitempty"`
}

// GetDriveFolderMetaResp ...
type GetDriveFolderMetaResp struct {
	ID        string `json:"id,omitempty"`        // 文件夹的 id
	Name      string `json:"name,omitempty"`      // 文件夹的标题
	Token     string `json:"token,omitempty"`     // 文件夹的 token
	CreateUid string `json:"createUid,omitempty"` // 文件夹的创建者 id
	EditUid   string `json:"editUid,omitempty"`   // 文件夹的最后编辑者 id
	ParentID  string `json:"parentId,omitempty"`  // 文件夹的上级目录 id
	OwnUid    string `json:"ownUid,omitempty"`    // 文件夹为个人文件夹时，为文件夹的所有者 id；文件夹为共享文件夹时，为文件夹树id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveRootFolderMeta
//
// 该接口用于获取 "我的空间" 的元信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/get-root-folder-meta
func (r *DriveService) GetDriveRootFolderMeta(ctx context.Context, request *GetDriveRootFolderMetaReq, options ...MethodOptionFunc) (*GetDriveRootFolderMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveRootFolderMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveRootFolderMeta mock enable")
		return r.cli.mock.mockDriveGetDriveRootFolderMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveRootFolderMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/root_folder/meta",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveRootFolderMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveRootFolderMeta mock DriveGetDriveRootFolderMeta method
func (r *Mock) MockDriveGetDriveRootFolderMeta(f func(ctx context.Context, request *GetDriveRootFolderMetaReq, options ...MethodOptionFunc) (*GetDriveRootFolderMetaResp, *Response, error)) {
	r.mockDriveGetDriveRootFolderMeta = f
}

// UnMockDriveGetDriveRootFolderMeta un-mock DriveGetDriveRootFolderMeta method
func (r *Mock) UnMockDriveGetDriveRootFolderMeta() {
	r.mockDriveGetDriveRootFolderMeta = nil
}

// GetDriveRootFolderMetaReq ...
type GetDriveRootFolderMetaReq struct {
}

// getDriveRootFolderMetaResp ...
type getDriveRootFolderMetaResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *GetDriveRootFolderMetaResp `json:"data,omitempty"`
}

// GetDriveRootFolderMetaResp ...
type GetDriveRootFolderMetaResp struct {
	Token  string `json:"token,omitempty"`   // 文件夹的 token
	ID     string `json:"id,omitempty"`      // 文件夹的 id
	UserID string `json:"user_id,omitempty"` // 文件夹的所有者 id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveImportTask 创建导入任务。支持导入为 doc、sheet、bitable，参考[导入用户指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create
func (r *DriveService) CreateDriveImportTask(ctx context.Context, request *CreateDriveImportTaskReq, options ...MethodOptionFunc) (*CreateDriveImportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveImportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveImportTask mock enable")
		return r.cli.mock.mockDriveCreateDriveImportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveImportTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/import_tasks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveImportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveImportTask mock DriveCreateDriveImportTask method
func (r *Mock) MockDriveCreateDriveImportTask(f func(ctx context.Context, request *CreateDriveImportTaskReq, options ...MethodOptionFunc) (*CreateDriveImportTaskResp, *Response, error)) {
	r.mockDriveCreateDriveImportTask = f
}

// UnMockDriveCreateDriveImportTask un-mock DriveCreateDriveImportTask method
func (r *Mock) UnMockDriveCreateDriveImportTask() {
	r.mockDriveCreateDriveImportTask = nil
}

// CreateDriveImportTaskReq ...
type CreateDriveImportTaskReq struct {
	FileExtension string                         `json:"file_extension,omitempty"` // 导入文件格式后缀, 示例值："xlsx"
	FileToken     string                         `json:"file_token,omitempty"`     // 导入文件Drive FileToken, 示例值："boxcnxe5OxxxxxxxSNdsJviENsk"
	Type          string                         `json:"type,omitempty"`           // 导入目标云文档格式, 示例值："sheet"
	FileName      *string                        `json:"file_name,omitempty"`      // 导入目标云文档文件名 ，若为空使用Drive文件名, 示例值："test"
	Point         *CreateDriveImportTaskReqPoint `json:"point,omitempty"`          // 挂载点
}

// CreateDriveImportTaskReqPoint ...
type CreateDriveImportTaskReqPoint struct {
	MountType int64  `json:"mount_type,omitempty"` // 挂载类型, 示例值：1, 可选值有: `1`：挂载到云空间
	MountKey  string `json:"mount_key,omitempty"`  // 挂载位置,对于mount_type=1, 云空间目录token，空表示根目录, 示例值："fldxxxxxxxx"
}

// createDriveImportTaskResp ...
type createDriveImportTaskResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveImportTaskResp `json:"data,omitempty"`
}

// CreateDriveImportTaskResp ...
type CreateDriveImportTaskResp struct {
	Ticket string `json:"ticket,omitempty"` // 导入任务ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveImportTask 根据创建导入任务返回的 ticket 查询导入结果。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/get
func (r *DriveService) GetDriveImportTask(ctx context.Context, request *GetDriveImportTaskReq, options ...MethodOptionFunc) (*GetDriveImportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveImportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveImportTask mock enable")
		return r.cli.mock.mockDriveGetDriveImportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveImportTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/import_tasks/:ticket",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveImportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveImportTask mock DriveGetDriveImportTask method
func (r *Mock) MockDriveGetDriveImportTask(f func(ctx context.Context, request *GetDriveImportTaskReq, options ...MethodOptionFunc) (*GetDriveImportTaskResp, *Response, error)) {
	r.mockDriveGetDriveImportTask = f
}

// UnMockDriveGetDriveImportTask un-mock DriveGetDriveImportTask method
func (r *Mock) UnMockDriveGetDriveImportTask() {
	r.mockDriveGetDriveImportTask = nil
}

// GetDriveImportTaskReq ...
type GetDriveImportTaskReq struct {
	Ticket string `path:"ticket" json:"-"` // 导入任务ID, 示例值："6990281865xxxxxxxx7843"
}

// getDriveImportTaskResp ...
type getDriveImportTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveImportTaskResp `json:"data,omitempty"`
}

// GetDriveImportTaskResp ...
type GetDriveImportTaskResp struct {
	Result *GetDriveImportTaskRespResult `json:"result,omitempty"` // 导入结果
}

// GetDriveImportTaskRespResult ...
type GetDriveImportTaskRespResult struct {
	Ticket      string   `json:"ticket,omitempty"`        // 任务ID
	Type        string   `json:"type,omitempty"`          // 导入目标云文档格式
	JobStatus   int64    `json:"job_status,omitempty"`    // 任务状态, 可选值有: `0`：成功, `1`：初始化, `2`：处理中, `3`：内部错误, `100`：导入文档已加密, `101`：内部错误, `102`：内部错误, `103`：内部错误, `104`：租户容量不足, `105`：文件夹节点太多, `106`：内部错误, `107`：导出文档过大, `108`：处理超时, `109`：内部错误, `110`：无权限, `112`：格式不支持, `113`：office格式不支持, `114`：内部错误, `115`：导入文件过大, `116`：目录无权限, `117`：目录已删除, `118`：导入文件和任务指定后缀不匹配, `119`：目录不存在, `120`：导入文件和任务指定文件类型不匹配, `121`：导入文件已过期, `122`：创建副本中禁止导出, `5000`：内部错误, `7000`：docx block 数量超过系统上限, `7001`：docx block 层级超过系统上线, `7002`：docx block 大小超过系统上限
	JobErrorMsg string   `json:"job_error_msg,omitempty"` // 任务失败原因
	Token       string   `json:"token,omitempty"`         // 导入云文档Token
	URL         string   `json:"url,omitempty"`           // 导入云文档URL
	Extra       []string `json:"extra,omitempty"`         // 任务成功后的提示信息
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetDriveMediaTmpDownloadURL 通过file_token获取素材临时下载链接，链接时效性是24小时，过期失效。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/batch_get_tmp_download_url
func (r *DriveService) BatchGetDriveMediaTmpDownloadURL(ctx context.Context, request *BatchGetDriveMediaTmpDownloadURLReq, options ...MethodOptionFunc) (*BatchGetDriveMediaTmpDownloadURLResp, *Response, error) {
	if r.cli.mock.mockDriveBatchGetDriveMediaTmpDownloadURL != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchGetDriveMediaTmpDownloadURL mock enable")
		return r.cli.mock.mockDriveBatchGetDriveMediaTmpDownloadURL(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchGetDriveMediaTmpDownloadURL",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/batch_get_tmp_download_url",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchGetDriveMediaTmpDownloadURLResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchGetDriveMediaTmpDownloadURL mock DriveBatchGetDriveMediaTmpDownloadURL method
func (r *Mock) MockDriveBatchGetDriveMediaTmpDownloadURL(f func(ctx context.Context, request *BatchGetDriveMediaTmpDownloadURLReq, options ...MethodOptionFunc) (*BatchGetDriveMediaTmpDownloadURLResp, *Response, error)) {
	r.mockDriveBatchGetDriveMediaTmpDownloadURL = f
}

// UnMockDriveBatchGetDriveMediaTmpDownloadURL un-mock DriveBatchGetDriveMediaTmpDownloadURL method
func (r *Mock) UnMockDriveBatchGetDriveMediaTmpDownloadURL() {
	r.mockDriveBatchGetDriveMediaTmpDownloadURL = nil
}

// BatchGetDriveMediaTmpDownloadURLReq ...
type BatchGetDriveMediaTmpDownloadURLReq struct {
	FileTokens []string `query:"file_tokens" json:"-"` // 文件标识符列表, 示例值：boxcnabcdefg
	Extra      *string  `query:"extra" json:"-"`       // 拓展信息(可选), 示例值："[请参考-上传点类型及对应Extra说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)"
}

// batchGetDriveMediaTmpDownloadURLResp ...
type batchGetDriveMediaTmpDownloadURLResp struct {
	Code int64                                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetDriveMediaTmpDownloadURLResp `json:"data,omitempty"`
}

// BatchGetDriveMediaTmpDownloadURLResp ...
type BatchGetDriveMediaTmpDownloadURLResp struct {
	TmpDownloadURLs []*BatchGetDriveMediaTmpDownloadURLRespTmpDownloadURL `json:"tmp_download_urls,omitempty"` // 临时下载列表
}

// BatchGetDriveMediaTmpDownloadURLRespTmpDownloadURL ...
type BatchGetDriveMediaTmpDownloadURLRespTmpDownloadURL struct {
	FileToken      string `json:"file_token,omitempty"`       // 文件标识符
	TmpDownloadURL string `json:"tmp_download_url,omitempty"` // 文件临时下载链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadDriveMedia 使用该接口可以下载素材。素材表示在各种创作容器里的文件，如Doc文档内的图片，文件均属于素材。支持range下载。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/download
func (r *DriveService) DownloadDriveMedia(ctx context.Context, request *DownloadDriveMediaReq, options ...MethodOptionFunc) (*DownloadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDriveDownloadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DownloadDriveMedia mock enable")
		return r.cli.mock.mockDriveDownloadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DownloadDriveMedia",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/:file_token/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(downloadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDownloadDriveMedia mock DriveDownloadDriveMedia method
func (r *Mock) MockDriveDownloadDriveMedia(f func(ctx context.Context, request *DownloadDriveMediaReq, options ...MethodOptionFunc) (*DownloadDriveMediaResp, *Response, error)) {
	r.mockDriveDownloadDriveMedia = f
}

// UnMockDriveDownloadDriveMedia un-mock DriveDownloadDriveMedia method
func (r *Mock) UnMockDriveDownloadDriveMedia() {
	r.mockDriveDownloadDriveMedia = nil
}

// DownloadDriveMediaReq ...
type DownloadDriveMediaReq struct {
	Extra     *string  `query:"extra" json:"-"`     // 扩展信息, 示例值："[请参考-上传点类型及对应Extra说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)"
	FileToken string   `path:"file_token" json:"-"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："boxcnabCdefg12345"
	Range     [2]int64 `header:"range" json:"-"`    // 指定文件下载部分，示例:bytes=0-1024
}

// downloadDriveMediaResp ...
type downloadDriveMediaResp struct {
	IsFile bool
	Code   int64
	Msg    string
	Data   *DownloadDriveMediaResp
}

func (r *downloadDriveMediaResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadDriveMediaResp{}
	}
	r.Data.File = file
}

func (r *downloadDriveMediaResp) SetFilename(filename string) {
	if r.Data == nil {
		r.Data = &DownloadDriveMediaResp{}
	}
	r.Data.Filename = filename
}

// DownloadDriveMediaResp ...
type DownloadDriveMediaResp struct {
	File     io.Reader
	Filename string // 文件名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadDriveMedia 将文件、图片、视频等素材文件上传到指定云文档中。素材文件在云空间中不会显示，只会显示在对应云文档中。
//
// 请不要使用这个接口上传大于20MB的文件，如果有这个需求可以尝试使用[分片上传接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/multipart-upload-media/introduction)。
// 该接口支持调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all
func (r *DriveService) UploadDriveMedia(ctx context.Context, request *UploadDriveMediaReq, options ...MethodOptionFunc) (*UploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDriveUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UploadDriveMedia mock enable")
		return r.cli.mock.mockDriveUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_all",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(uploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUploadDriveMedia mock DriveUploadDriveMedia method
func (r *Mock) MockDriveUploadDriveMedia(f func(ctx context.Context, request *UploadDriveMediaReq, options ...MethodOptionFunc) (*UploadDriveMediaResp, *Response, error)) {
	r.mockDriveUploadDriveMedia = f
}

// UnMockDriveUploadDriveMedia un-mock DriveUploadDriveMedia method
func (r *Mock) UnMockDriveUploadDriveMedia() {
	r.mockDriveUploadDriveMedia = nil
}

// UploadDriveMediaReq ...
type UploadDriveMediaReq struct {
	FileName   string    `json:"file_name,omitempty"`   // 文件名。, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string    `json:"parent_type,omitempty"` // 上传点类型。, 示例值："doc_image", 可选值有: `doc_image`：文档图片。, `docx_image`：新版文档图片。, `sheet_image`：电子表格图片。, `doc_file`：文档文件。, `docx_file`：新版文档文件。, `sheet_file`：电子表格文件。, `vc_virtual_background`：vc虚拟背景(灰度中，暂未开放)。, `bitable_image`：多维表格图片。, `bitable_file`：多维表格文件。, `moments`：同事圈(灰度中，暂未开放)。, `ccm_import_open`：云文档导入文件。
	ParentNode string    `json:"parent_node,omitempty"` // 上传点的token。, 示例值："doccnFivLCfJfblZjGZtxgZHf9e"
	Size       int64     `json:"size,omitempty"`        // 文件大小（以字节为单位）。, 示例值：1024, 最大值：`20971520`
	Checksum   *string   `json:"checksum,omitempty"`    // 文件adler32校验和（可选）。, 示例值："12345678"
	Extra      *string   `json:"extra,omitempty"`       // 扩展信息(可选)。, 示例值："{"test":"test"}"
	File       io.Reader `json:"file,omitempty"`        // 文件二进制内容。, 示例值：file binary
}

// uploadDriveMediaResp ...
type uploadDriveMediaResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *UploadDriveMediaResp `json:"data,omitempty"`
}

// UploadDriveMediaResp ...
type UploadDriveMediaResp struct {
	FileToken string `json:"file_token,omitempty"` // 素材文件的 token。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// FinishUploadDriveMedia 触发完成上传。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_finish
func (r *DriveService) FinishUploadDriveMedia(ctx context.Context, request *FinishUploadDriveMediaReq, options ...MethodOptionFunc) (*FinishUploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDriveFinishUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#FinishUploadDriveMedia mock enable")
		return r.cli.mock.mockDriveFinishUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "FinishUploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_finish",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(finishUploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveFinishUploadDriveMedia mock DriveFinishUploadDriveMedia method
func (r *Mock) MockDriveFinishUploadDriveMedia(f func(ctx context.Context, request *FinishUploadDriveMediaReq, options ...MethodOptionFunc) (*FinishUploadDriveMediaResp, *Response, error)) {
	r.mockDriveFinishUploadDriveMedia = f
}

// UnMockDriveFinishUploadDriveMedia un-mock DriveFinishUploadDriveMedia method
func (r *Mock) UnMockDriveFinishUploadDriveMedia() {
	r.mockDriveFinishUploadDriveMedia = nil
}

// FinishUploadDriveMediaReq ...
type FinishUploadDriveMediaReq struct {
	UploadID string `json:"upload_id,omitempty"` // 分片上传事务ID, 示例值："1233456"
	BlockNum int64  `json:"block_num,omitempty"` // 分片数量, 示例值：1
}

// finishUploadDriveMediaResp ...
type finishUploadDriveMediaResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *FinishUploadDriveMediaResp `json:"data,omitempty"`
}

// FinishUploadDriveMediaResp ...
type FinishUploadDriveMediaResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建文件的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PartUploadDriveMedia 上传对应的文件块。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_part
func (r *DriveService) PartUploadDriveMedia(ctx context.Context, request *PartUploadDriveMediaReq, options ...MethodOptionFunc) (*PartUploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDrivePartUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PartUploadDriveMedia mock enable")
		return r.cli.mock.mockDrivePartUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PartUploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_part",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(partUploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePartUploadDriveMedia mock DrivePartUploadDriveMedia method
func (r *Mock) MockDrivePartUploadDriveMedia(f func(ctx context.Context, request *PartUploadDriveMediaReq, options ...MethodOptionFunc) (*PartUploadDriveMediaResp, *Response, error)) {
	r.mockDrivePartUploadDriveMedia = f
}

// UnMockDrivePartUploadDriveMedia un-mock DrivePartUploadDriveMedia method
func (r *Mock) UnMockDrivePartUploadDriveMedia() {
	r.mockDrivePartUploadDriveMedia = nil
}

// PartUploadDriveMediaReq ...
type PartUploadDriveMediaReq struct {
	UploadID string    `json:"upload_id,omitempty"` // 分片上传事务ID。, 示例值："123456"
	Seq      int64     `json:"seq,omitempty"`       // 块号，从0开始计数。, 示例值：0
	Size     int64     `json:"size,omitempty"`      // 块大小（以字节为单位）。, 示例值：4194304
	Checksum *string   `json:"checksum,omitempty"`  // 文件分块adler32校验和(可选)。, 示例值："12345678"
	File     io.Reader `json:"file,omitempty"`      // 文件分片二进制内容。, 示例值：file binary
}

// partUploadDriveMediaResp ...
type partUploadDriveMediaResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *PartUploadDriveMediaResp `json:"data,omitempty"`
}

// PartUploadDriveMediaResp ...
type PartUploadDriveMediaResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PrepareUploadDriveMedia 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
//
// 您在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_prepare
func (r *DriveService) PrepareUploadDriveMedia(ctx context.Context, request *PrepareUploadDriveMediaReq, options ...MethodOptionFunc) (*PrepareUploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDrivePrepareUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PrepareUploadDriveMedia mock enable")
		return r.cli.mock.mockDrivePrepareUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PrepareUploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_prepare",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(prepareUploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePrepareUploadDriveMedia mock DrivePrepareUploadDriveMedia method
func (r *Mock) MockDrivePrepareUploadDriveMedia(f func(ctx context.Context, request *PrepareUploadDriveMediaReq, options ...MethodOptionFunc) (*PrepareUploadDriveMediaResp, *Response, error)) {
	r.mockDrivePrepareUploadDriveMedia = f
}

// UnMockDrivePrepareUploadDriveMedia un-mock DrivePrepareUploadDriveMedia method
func (r *Mock) UnMockDrivePrepareUploadDriveMedia() {
	r.mockDrivePrepareUploadDriveMedia = nil
}

// PrepareUploadDriveMediaReq ...
type PrepareUploadDriveMediaReq struct {
	FileName   string  `json:"file_name,omitempty"`   // 文件名, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string  `json:"parent_type,omitempty"` // 上传点类型, 示例值："doc_image", 可选值有: `doc_image`：docs图片, `sheet_image`：sheet图片, `doc_file`：doc文件, `sheet_file`：sheet文件, `vc_virtual_background`：vc虚拟背景(灰度中，暂未开放), `bitable_image`：多维表格图片, `bitable_file`：多维表格文件, `moments`：同事圈(灰度中，暂未开放), `ccm_import_open`：云文档导入文件
	ParentNode string  `json:"parent_node,omitempty"` // 上传点的标识符, 示例值："doccn123456675"
	Size       int64   `json:"size,omitempty"`        // 文件大小, 示例值：1024, 最小值：`0`
	Extra      *string `json:"extra,omitempty"`       // 扩展信息(可选), 示例值："{\"test\":\"test\"}"
}

// prepareUploadDriveMediaResp ...
type prepareUploadDriveMediaResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *PrepareUploadDriveMediaResp `json:"data,omitempty"`
}

// PrepareUploadDriveMediaResp ...
type PrepareUploadDriveMediaResp struct {
	UploadID  string `json:"upload_id,omitempty"`  // 分片上传事务ID
	BlockSize int64  `json:"block_size,omitempty"` // 分片大小策略
	BlockNum  int64  `json:"block_num,omitempty"`  // 分片数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CheckDriveMemberPermission 该接口用于根据 filetoken 判断当前登录用户是否具有某权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzN3UjL2czN14iN3cTN
func (r *DriveService) CheckDriveMemberPermission(ctx context.Context, request *CheckDriveMemberPermissionReq, options ...MethodOptionFunc) (*CheckDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveCheckDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CheckDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveCheckDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CheckDriveMemberPermission",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/permitted",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(checkDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCheckDriveMemberPermission mock DriveCheckDriveMemberPermission method
func (r *Mock) MockDriveCheckDriveMemberPermission(f func(ctx context.Context, request *CheckDriveMemberPermissionReq, options ...MethodOptionFunc) (*CheckDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveCheckDriveMemberPermission = f
}

// UnMockDriveCheckDriveMemberPermission un-mock DriveCheckDriveMemberPermission method
func (r *Mock) UnMockDriveCheckDriveMemberPermission() {
	r.mockDriveCheckDriveMemberPermission = nil
}

// CheckDriveMemberPermissionReq ...
type CheckDriveMemberPermissionReq struct {
	Token string `json:"token,omitempty"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f)
	Type  string `json:"type,omitempty"`  // 文档类型，可选 **doc、docx、sheet、bitable、file**
	Perm  string `json:"perm,omitempty"`  // 权限，"view" or "edit" or "share"
}

// checkDriveMemberPermissionResp ...
type checkDriveMemberPermissionResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *CheckDriveMemberPermissionResp `json:"data,omitempty"`
}

// CheckDriveMemberPermissionResp ...
type CheckDriveMemberPermissionResp struct {
	IsPermitted bool `json:"is_permitted,omitempty"` // 是否具有指定权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveMemberPermission 该接口用于根据 filetoken 给用户增加文档的权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create
func (r *DriveService) CreateDriveMemberPermission(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveCreateDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveMemberPermission",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveMemberPermission mock DriveCreateDriveMemberPermission method
func (r *Mock) MockDriveCreateDriveMemberPermission(f func(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveCreateDriveMemberPermission = f
}

// UnMockDriveCreateDriveMemberPermission un-mock DriveCreateDriveMemberPermission method
func (r *Mock) UnMockDriveCreateDriveMemberPermission() {
	r.mockDriveCreateDriveMemberPermission = nil
}

// CreateDriveMemberPermissionReq ...
type CreateDriveMemberPermissionReq struct {
	Type             string `query:"type" json:"-"`              // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点, `bitable`：多维表格, `docx`：新版文档, `folder`：文件夹（未来支持）
	NeedNotification *bool  `query:"need_notification" json:"-"` // 添加权限后是否通知对方,**注意：** 使用`tenant_access_token`访问不支持该参数, 示例值：false, 默认值: `false`
	Token            string `path:"token" json:"-"`              // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	MemberType       string `json:"member_type,omitempty"`       // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`, 示例值："openid"
	MemberID         string `json:"member_id,omitempty"`         // 用户类型下的值, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Perm             string `json:"perm,omitempty"`              // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限, 示例值："view"
}

// createDriveMemberPermissionResp ...
type createDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveMemberPermissionResp `json:"data,omitempty"`
}

// CreateDriveMemberPermissionResp ...
type CreateDriveMemberPermissionResp struct {
	Member *CreateDriveMemberPermissionRespMember `json:"member,omitempty"` // 本次添加权限的用户信息
}

// CreateDriveMemberPermissionRespMember ...
type CreateDriveMemberPermissionRespMember struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveMemberPermissionOld 该接口用于根据 filetoken 给用户增加文档的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzNzUjLzczM14yM3MTN
func (r *DriveService) CreateDriveMemberPermissionOld(ctx context.Context, request *CreateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionOldResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveMemberPermissionOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermissionOld mock enable")
		return r.cli.mock.mockDriveCreateDriveMemberPermissionOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveMemberPermissionOld",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveMemberPermissionOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveMemberPermissionOld mock DriveCreateDriveMemberPermissionOld method
func (r *Mock) MockDriveCreateDriveMemberPermissionOld(f func(ctx context.Context, request *CreateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionOldResp, *Response, error)) {
	r.mockDriveCreateDriveMemberPermissionOld = f
}

// UnMockDriveCreateDriveMemberPermissionOld un-mock DriveCreateDriveMemberPermissionOld method
func (r *Mock) UnMockDriveCreateDriveMemberPermissionOld() {
	r.mockDriveCreateDriveMemberPermissionOld = nil
}

// CreateDriveMemberPermissionOldReq ...
type CreateDriveMemberPermissionOldReq struct {
	Token      string                                    `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string                                    `json:"type,omitempty"`        // 文档类型  "doc" 、"sheet" 、 "bitable" or "file"
	Members    *CreateDriveMemberPermissionOldReqMembers `json:"members,omitempty"`     // 用户
	NotifyLark *bool                                     `json:"notify_lark,omitempty"` // 添加权限后是否飞书/lark通知对方<br>true 通知 or false 不通知
}

// CreateDriveMemberPermissionOldReqMembers ...
type CreateDriveMemberPermissionOldReqMembers struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **email 、openid、openchat、userid**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要增加的权限，权限值："view"，"edit"
}

// createDriveMemberPermissionOldResp ...
type createDriveMemberPermissionOldResp struct {
	Code int64                               `json:"code,omitempty"`
	Msg  string                              `json:"msg,omitempty"`
	Data *CreateDriveMemberPermissionOldResp `json:"data,omitempty"`
}

// CreateDriveMemberPermissionOldResp ...
type CreateDriveMemberPermissionOldResp struct {
	IsAllSuccess bool                                           `json:"is_all_success,omitempty"` // 是否全部成功
	FailMembers  *CreateDriveMemberPermissionOldRespFailMembers `json:"fail_members,omitempty"`   // 添加权限失败的用户信息
}

// CreateDriveMemberPermissionOldRespFailMembers ...
type CreateDriveMemberPermissionOldRespFailMembers struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要增加的权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveMemberPermission 该接口用于根据 filetoken 移除文档协作者的权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/delete
func (r *DriveService) DeleteDriveMemberPermission(ctx context.Context, request *DeleteDriveMemberPermissionReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveDeleteDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveMemberPermission",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveMemberPermission mock DriveDeleteDriveMemberPermission method
func (r *Mock) MockDriveDeleteDriveMemberPermission(f func(ctx context.Context, request *DeleteDriveMemberPermissionReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveDeleteDriveMemberPermission = f
}

// UnMockDriveDeleteDriveMemberPermission un-mock DriveDeleteDriveMemberPermission method
func (r *Mock) UnMockDriveDeleteDriveMemberPermission() {
	r.mockDriveDeleteDriveMemberPermission = nil
}

// DeleteDriveMemberPermissionReq ...
type DeleteDriveMemberPermissionReq struct {
	Type       string `query:"type" json:"-"`        // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点, `bitable`：多维表格, `docx`：新版文档, `folder`：文件夹（未来支持）
	MemberType string `query:"member_type" json:"-"` // 权限成员类型，放于query参数中，如：`?member_type=openid`, 示例值："openid", 可选值有: `email`：邮箱地址, `openid`：[开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`：[开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`：[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`：[用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)
	Token      string `path:"token" json:"-"`        // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	MemberID   string `path:"member_id" json:"-"`    // 权限成员的ID，与`member_type`相对应, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// deleteDriveMemberPermissionResp ...
type deleteDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDriveMemberPermissionResp `json:"data,omitempty"`
}

// DeleteDriveMemberPermissionResp ...
type DeleteDriveMemberPermissionResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveMemberPermissionOld 该接口用于根据 filetoken 移除文档协作者的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTN3UjL2UzN14iN1cTN
func (r *DriveService) DeleteDriveMemberPermissionOld(ctx context.Context, request *DeleteDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionOldResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveMemberPermissionOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveMemberPermissionOld mock enable")
		return r.cli.mock.mockDriveDeleteDriveMemberPermissionOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveMemberPermissionOld",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveMemberPermissionOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveMemberPermissionOld mock DriveDeleteDriveMemberPermissionOld method
func (r *Mock) MockDriveDeleteDriveMemberPermissionOld(f func(ctx context.Context, request *DeleteDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionOldResp, *Response, error)) {
	r.mockDriveDeleteDriveMemberPermissionOld = f
}

// UnMockDriveDeleteDriveMemberPermissionOld un-mock DriveDeleteDriveMemberPermissionOld method
func (r *Mock) UnMockDriveDeleteDriveMemberPermissionOld() {
	r.mockDriveDeleteDriveMemberPermissionOld = nil
}

// DeleteDriveMemberPermissionOldReq ...
type DeleteDriveMemberPermissionOldReq struct {
	Token      string `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string `json:"type,omitempty"`        // 文档类型 "doc"  or  "sheet" or "bitable"  or "file"
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **"openid"、"openchat"、"userid"**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
}

// deleteDriveMemberPermissionOldResp ...
type deleteDriveMemberPermissionOldResp struct {
	Code int64                               `json:"code,omitempty"`
	Msg  string                              `json:"msg,omitempty"`
	Data *DeleteDriveMemberPermissionOldResp `json:"data,omitempty"`
}

// DeleteDriveMemberPermissionOldResp ...
type DeleteDriveMemberPermissionOldResp struct {
	IsSuccess bool `json:"is_success,omitempty"` // 是否操作成功
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveMemberPermissionList 该接口用于根据 filetoken 查询协作者，目前包括人("user")和群("chat") 。
//
// 你能获取到协作者列表的前提是你对该文档有分享权限
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATN3UjLwUzN14CM1cTN
func (r *DriveService) GetDriveMemberPermissionList(ctx context.Context, request *GetDriveMemberPermissionListReq, options ...MethodOptionFunc) (*GetDriveMemberPermissionListResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveMemberPermissionList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveMemberPermissionList mock enable")
		return r.cli.mock.mockDriveGetDriveMemberPermissionList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveMemberPermissionList",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveMemberPermissionListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveMemberPermissionList mock DriveGetDriveMemberPermissionList method
func (r *Mock) MockDriveGetDriveMemberPermissionList(f func(ctx context.Context, request *GetDriveMemberPermissionListReq, options ...MethodOptionFunc) (*GetDriveMemberPermissionListResp, *Response, error)) {
	r.mockDriveGetDriveMemberPermissionList = f
}

// UnMockDriveGetDriveMemberPermissionList un-mock DriveGetDriveMemberPermissionList method
func (r *Mock) UnMockDriveGetDriveMemberPermissionList() {
	r.mockDriveGetDriveMemberPermissionList = nil
}

// GetDriveMemberPermissionListReq ...
type GetDriveMemberPermissionListReq struct {
	Token string `json:"token,omitempty"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f)
	Type  string `json:"type,omitempty"`  // 文档类型，可选 **doc、docx、sheet、bitable、file**
}

// getDriveMemberPermissionListResp ...
type getDriveMemberPermissionListResp struct {
	Code int64                             `json:"code,omitempty"`
	Msg  string                            `json:"msg,omitempty"`
	Data *GetDriveMemberPermissionListResp `json:"data,omitempty"`
}

// GetDriveMemberPermissionListResp ...
type GetDriveMemberPermissionListResp struct {
	Members []*GetDriveMemberPermissionListRespMember `json:"members,omitempty"` // 协作者列表
}

// GetDriveMemberPermissionListRespMember ...
type GetDriveMemberPermissionListRespMember struct {
	MemberType   string `json:"member_type,omitempty"`    // 协作者类型 "user" or "chat"
	MemberOpenID string `json:"member_open_id,omitempty"` // 协作者openid
	MemberUserID string `json:"member_user_id,omitempty"` // 协作者userid(仅当member_type="user"时有效)
	Perm         string `json:"perm,omitempty"`           // 协作者权限 (注意: **有"edit"权限的协作者一定有"view"权限**)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// TransferDriveMemberPermission 该接口用于根据文档信息和用户信息转移文档的所有者。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQzNzUjL0czM14CN3MTN
func (r *DriveService) TransferDriveMemberPermission(ctx context.Context, request *TransferDriveMemberPermissionReq, options ...MethodOptionFunc) (*TransferDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveTransferDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#TransferDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveTransferDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "TransferDriveMemberPermission",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/transfer",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(transferDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveTransferDriveMemberPermission mock DriveTransferDriveMemberPermission method
func (r *Mock) MockDriveTransferDriveMemberPermission(f func(ctx context.Context, request *TransferDriveMemberPermissionReq, options ...MethodOptionFunc) (*TransferDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveTransferDriveMemberPermission = f
}

// UnMockDriveTransferDriveMemberPermission un-mock DriveTransferDriveMemberPermission method
func (r *Mock) UnMockDriveTransferDriveMemberPermission() {
	r.mockDriveTransferDriveMemberPermission = nil
}

// TransferDriveMemberPermissionReq ...
type TransferDriveMemberPermissionReq struct {
	Token          string                                 `json:"token,omitempty"`            // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f)
	Type           string                                 `json:"type,omitempty"`             // 文档类型，可选 **doc、docx、sheet、bitable、file**
	Owner          *TransferDriveMemberPermissionReqOwner `json:"owner,omitempty"`            // 要转移到的新的文档所有者
	RemoveOldOwner *bool                                  `json:"remove_old_owner,omitempty"` // true 为转移后删除旧 owner 的权限，默认为false
	CancelNotify   *bool                                  `json:"cancel_notify,omitempty"`    // true为不通知新owner，默认为false
}

// TransferDriveMemberPermissionReqOwner ...
type TransferDriveMemberPermissionReqOwner struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **email、openid、userid、unionid**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值，获取方式见 [如何获得 User ID、Open ID 和 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)
}

// transferDriveMemberPermissionResp ...
type transferDriveMemberPermissionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *TransferDriveMemberPermissionResp `json:"data,omitempty"`
}

// TransferDriveMemberPermissionResp ...
type TransferDriveMemberPermissionResp struct {
	IsSuccess bool                                    `json:"is_success,omitempty"` // 请求是否成功
	Type      string                                  `json:"type,omitempty"`       // 文档类型，可选 **doc、sheet、bitable、file**
	Token     string                                  `json:"token,omitempty"`      // 文档的 token
	Owner     *TransferDriveMemberPermissionRespOwner `json:"owner,omitempty"`      // 文档当前所有者
}

// TransferDriveMemberPermissionRespOwner ...
type TransferDriveMemberPermissionRespOwner struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，有 **email、openid、userid、unionid**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveMemberPermission 该接口用于根据 filetoken 更新文档协作者的权限。
//
// 该接口要求文档协作者已存在，如还未对文档协作者授权请先调用[「增加权限」 ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create)接口进行授权。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/update
func (r *DriveService) UpdateDriveMemberPermission(ctx context.Context, request *UpdateDriveMemberPermissionReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveUpdateDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveMemberPermission",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveMemberPermission mock DriveUpdateDriveMemberPermission method
func (r *Mock) MockDriveUpdateDriveMemberPermission(f func(ctx context.Context, request *UpdateDriveMemberPermissionReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveUpdateDriveMemberPermission = f
}

// UnMockDriveUpdateDriveMemberPermission un-mock DriveUpdateDriveMemberPermission method
func (r *Mock) UnMockDriveUpdateDriveMemberPermission() {
	r.mockDriveUpdateDriveMemberPermission = nil
}

// UpdateDriveMemberPermissionReq ...
type UpdateDriveMemberPermissionReq struct {
	NeedNotification *bool  `query:"need_notification" json:"-"` // 更新权限后是否通知对方,**注意：** 使用`tenant_access_token`访问不支持该参数, 示例值：false, 默认值: `false`
	Type             string `query:"type" json:"-"`              // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点, `bitable`：多维表格, `docx`：新版文档
	Token            string `path:"token" json:"-"`              // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	MemberID         string `path:"member_id" json:"-"`          // 权限成员的ID，与`member_type`相对应, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	MemberType       string `json:"member_type,omitempty"`       // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`, 示例值："openid"
	Perm             string `json:"perm,omitempty"`              // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限, 示例值："view"
}

// updateDriveMemberPermissionResp ...
type updateDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveMemberPermissionResp `json:"data,omitempty"`
}

// UpdateDriveMemberPermissionResp ...
type UpdateDriveMemberPermissionResp struct {
	Member *UpdateDriveMemberPermissionRespMember `json:"member,omitempty"` // 本次更新权限的用户信息
}

// UpdateDriveMemberPermissionRespMember ...
type UpdateDriveMemberPermissionRespMember struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveMemberPermissionOld 该接口用于根据 filetoken 更新文档协作者的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucTN3UjL3UzN14yN1cTN
func (r *DriveService) UpdateDriveMemberPermissionOld(ctx context.Context, request *UpdateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionOldResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveMemberPermissionOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveMemberPermissionOld mock enable")
		return r.cli.mock.mockDriveUpdateDriveMemberPermissionOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveMemberPermissionOld",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveMemberPermissionOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveMemberPermissionOld mock DriveUpdateDriveMemberPermissionOld method
func (r *Mock) MockDriveUpdateDriveMemberPermissionOld(f func(ctx context.Context, request *UpdateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionOldResp, *Response, error)) {
	r.mockDriveUpdateDriveMemberPermissionOld = f
}

// UnMockDriveUpdateDriveMemberPermissionOld un-mock DriveUpdateDriveMemberPermissionOld method
func (r *Mock) UnMockDriveUpdateDriveMemberPermissionOld() {
	r.mockDriveUpdateDriveMemberPermissionOld = nil
}

// UpdateDriveMemberPermissionOldReq ...
type UpdateDriveMemberPermissionOldReq struct {
	Token      string `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string `json:"type,omitempty"`        // 文档类型  "doc"  or  "sheet" or "file"
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **"openid"、"openchat"、"userid"**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 权限，"view" or "edit"
	NotifyLark bool   `json:"notify_lark,omitempty"` // 修改权限后是否飞书/lark通知对方<br>true 通知 or false 不通知
}

// updateDriveMemberPermissionOldResp ...
type updateDriveMemberPermissionOldResp struct {
	Code int64                               `json:"code,omitempty"`
	Msg  string                              `json:"msg,omitempty"`
	Data *UpdateDriveMemberPermissionOldResp `json:"data,omitempty"`
}

// UpdateDriveMemberPermissionOldResp ...
type UpdateDriveMemberPermissionOldResp struct {
	IsSuccess bool `json:"is_success,omitempty"` // 是否操作成功
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDrivePublicPermission 该接口用于根据 filetoken 获取云文档的权限设置。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-public/get
func (r *DriveService) GetDrivePublicPermission(ctx context.Context, request *GetDrivePublicPermissionReq, options ...MethodOptionFunc) (*GetDrivePublicPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveGetDrivePublicPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDrivePublicPermission mock enable")
		return r.cli.mock.mockDriveGetDrivePublicPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDrivePublicPermission",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/public",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDrivePublicPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDrivePublicPermission mock DriveGetDrivePublicPermission method
func (r *Mock) MockDriveGetDrivePublicPermission(f func(ctx context.Context, request *GetDrivePublicPermissionReq, options ...MethodOptionFunc) (*GetDrivePublicPermissionResp, *Response, error)) {
	r.mockDriveGetDrivePublicPermission = f
}

// UnMockDriveGetDrivePublicPermission un-mock DriveGetDrivePublicPermission method
func (r *Mock) UnMockDriveGetDrivePublicPermission() {
	r.mockDriveGetDrivePublicPermission = nil
}

// GetDrivePublicPermissionReq ...
type GetDrivePublicPermissionReq struct {
	Type  string `query:"type" json:"-"` // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点, `bitable`：多维表格, `docx`：新版文档
	Token string `path:"token" json:"-"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
}

// getDrivePublicPermissionResp ...
type getDrivePublicPermissionResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetDrivePublicPermissionResp `json:"data,omitempty"`
}

// GetDrivePublicPermissionResp ...
type GetDrivePublicPermissionResp struct {
	PermissionPublic *GetDrivePublicPermissionRespPermissionPublic `json:"permission_public,omitempty"` // 返回的文档权限设置
}

// GetDrivePublicPermissionRespPermissionPublic ...
type GetDrivePublicPermissionRespPermissionPublic struct {
	ExternalAccess  bool   `json:"external_access,omitempty"`   // 允许内容被分享到组织外, 可选值有:  , `true`: 允许, `false`: 不允许
	SecurityEntity  string `json:"security_entity,omitempty"`   // 谁可以复制内容、创建副本、打印、下载, 可选值有: `anyone_can_view`：拥有可阅读权限的用户, `anyone_can_edit`：拥有可编辑权限的用户, `only_full_access`：拥有可管理权限（包括我）的用户
	CommentEntity   string `json:"comment_entity,omitempty"`    // 可评论设置, 可选值有: `anyone_can_view`：拥有可阅读权限的用户, `anyone_can_edit`：拥有可编辑权限的用户
	ShareEntity     string `json:"share_entity,omitempty"`      // 谁可以添加和管理协作者, 可选值有: `anyone`：所有可阅读或编辑此文档的用户, `same_tenant`：组织内所有可阅读或编辑此文档的用户, `only_full_access`：拥有可管理权限（包括我）的用户
	LinkShareEntity string `json:"link_share_entity,omitempty"` // 链接分享设置, 可选值有: `tenant_readable`：组织内获得链接的人可阅读, `tenant_editable`：组织内获得链接的人可编辑, `anyone_readable`：互联网上获得链接的任何人可阅读,    **提示：** 仅`external_access=true`时有效, `anyone_editable`：互联网上获得链接的任何人可编辑,    **提示：** 仅`external_access=true`时有效, `closed`：关闭链接分享
	InviteExternal  bool   `json:"invite_external,omitempty"`   // 允许非「可管理权限」的人分享到组织外,**提示：** 仅`share_entity="same_tenant"`时有效
	LockSwitch      bool   `json:"lock_switch,omitempty"`       // 节点加锁状态
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDrivePublicPermission 该接口用于根据 filetoken 更新云文档的权限设置。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-public/patch
func (r *DriveService) UpdateDrivePublicPermission(ctx context.Context, request *UpdateDrivePublicPermissionReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDrivePublicPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDrivePublicPermission mock enable")
		return r.cli.mock.mockDriveUpdateDrivePublicPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDrivePublicPermission",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/public",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDrivePublicPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDrivePublicPermission mock DriveUpdateDrivePublicPermission method
func (r *Mock) MockDriveUpdateDrivePublicPermission(f func(ctx context.Context, request *UpdateDrivePublicPermissionReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionResp, *Response, error)) {
	r.mockDriveUpdateDrivePublicPermission = f
}

// UnMockDriveUpdateDrivePublicPermission un-mock DriveUpdateDrivePublicPermission method
func (r *Mock) UnMockDriveUpdateDrivePublicPermission() {
	r.mockDriveUpdateDrivePublicPermission = nil
}

// UpdateDrivePublicPermissionReq ...
type UpdateDrivePublicPermissionReq struct {
	Type            string  `query:"type" json:"-"`              // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点, `bitable`：多维表格, `docx`：新版文档
	Token           string  `path:"token" json:"-"`              // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN#8353e05f), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	ExternalAccess  *bool   `json:"external_access,omitempty"`   // 允许内容被分享到组织外, 示例值：true
	SecurityEntity  *string `json:"security_entity,omitempty"`   // 谁可以复制内容、创建副本、打印、下载, 示例值："anyone_can_view", 可选值有: `anyone_can_view`：拥有可阅读权限的用户, `anyone_can_edit`：拥有可编辑权限的用户, `only_full_access`：拥有可管理权限（包括我）的用户
	CommentEntity   *string `json:"comment_entity,omitempty"`    // 谁可以评论, 示例值："anyone_can_view", 可选值有: `anyone_can_view`：拥有可阅读权限的用户, `anyone_can_edit`：拥有可编辑权限的用户
	ShareEntity     *string `json:"share_entity,omitempty"`      // 谁可以添加和管理协作者, 示例值："anyone", 可选值有: `anyone`：所有可阅读或编辑此文档的用户, `same_tenant`：组织内所有可阅读或编辑此文档的用户, `only_full_access`：拥有可管理权限（包括我）的用户
	LinkShareEntity *string `json:"link_share_entity,omitempty"` // 链接分享设置, 示例值："tenant_readable", 可选值有: `tenant_readable`：组织内获得链接的人可阅读, `tenant_editable`：组织内获得链接的人可编辑, `anyone_readable`：互联网上获得链接的任何人可阅读,    **提示：** 仅`external_access=true`时有效, `anyone_editable`：互联网上获得链接的任何人可编辑,    **提示：** 仅`external_access=true`时有效, `closed`：关闭链接分享
	InviteExternal  *bool   `json:"invite_external,omitempty"`   // 允许非「可管理权限」的人分享到组织外,**提示：** 仅`share_entity="same_tenant"`时有效, 示例值：true
}

// updateDrivePublicPermissionResp ...
type updateDrivePublicPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDrivePublicPermissionResp `json:"data,omitempty"`
}

// UpdateDrivePublicPermissionResp ...
type UpdateDrivePublicPermissionResp struct {
	PermissionPublic *UpdateDrivePublicPermissionRespPermissionPublic `json:"permission_public,omitempty"` // 本次更新后的文档权限设置
}

// UpdateDrivePublicPermissionRespPermissionPublic ...
type UpdateDrivePublicPermissionRespPermissionPublic struct {
	ExternalAccess  bool   `json:"external_access,omitempty"`   // 允许内容被分享到组织外, 可选值有:  , `true`: 允许, `false`: 不允许
	SecurityEntity  string `json:"security_entity,omitempty"`   // 谁可以复制内容、创建副本、打印、下载, 可选值有: `anyone_can_view`：拥有可阅读权限的用户, `anyone_can_edit`：拥有可编辑权限的用户, `only_full_access`：拥有可管理权限（包括我）的用户
	CommentEntity   string `json:"comment_entity,omitempty"`    // 可评论设置, 可选值有: `anyone_can_view`：拥有可阅读权限的用户, `anyone_can_edit`：拥有可编辑权限的用户
	ShareEntity     string `json:"share_entity,omitempty"`      // 谁可以添加和管理协作者, 可选值有: `anyone`：所有可阅读或编辑此文档的用户, `same_tenant`：组织内所有可阅读或编辑此文档的用户, `only_full_access`：拥有可管理权限（包括我）的用户
	LinkShareEntity string `json:"link_share_entity,omitempty"` // 链接分享设置, 可选值有: `tenant_readable`：组织内获得链接的人可阅读, `tenant_editable`：组织内获得链接的人可编辑, `anyone_readable`：互联网上获得链接的任何人可阅读,    **提示：** 仅`external_access=true`时有效, `anyone_editable`：互联网上获得链接的任何人可编辑,    **提示：** 仅`external_access=true`时有效, `closed`：关闭链接分享
	InviteExternal  bool   `json:"invite_external,omitempty"`   // 允许非「可管理权限」的人分享到组织外,**提示：** 仅`share_entity="same_tenant"`时有效
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchUpdateSheet
//
// 该接口用于根据 spreadsheetToken 操作表格，如增加工作表，复制工作表、删除工作表。
// 该接口和 [更新工作表属性](https://open.feishu.cn/document/ukTMukTMukTM/ugjMzUjL4IzM14COyMTN) 的请求地址相同，但参数不同，调用前请仔细阅读文档。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTMzUjL2EzM14iNxMTN
func (r *DriveService) BatchUpdateSheet(ctx context.Context, request *BatchUpdateSheetReq, options ...MethodOptionFunc) (*BatchUpdateSheetResp, *Response, error) {
	if r.cli.mock.mockDriveBatchUpdateSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchUpdateSheet mock enable")
		return r.cli.mock.mockDriveBatchUpdateSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchUpdateSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/sheets_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchUpdateSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchUpdateSheet mock DriveBatchUpdateSheet method
func (r *Mock) MockDriveBatchUpdateSheet(f func(ctx context.Context, request *BatchUpdateSheetReq, options ...MethodOptionFunc) (*BatchUpdateSheetResp, *Response, error)) {
	r.mockDriveBatchUpdateSheet = f
}

// UnMockDriveBatchUpdateSheet un-mock DriveBatchUpdateSheet method
func (r *Mock) UnMockDriveBatchUpdateSheet() {
	r.mockDriveBatchUpdateSheet = nil
}

// BatchUpdateSheetReq ...
type BatchUpdateSheetReq struct {
	SpreadSheetToken string                        `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Requests         []*BatchUpdateSheetReqRequest `json:"requests,omitempty"`        // 请求操作，支持增、删、复制工作表 ，三个操作选一个
}

// BatchUpdateSheetReqRequest ...
type BatchUpdateSheetReqRequest struct {
	UpdateSheet *BatchUpdateSheetReqRequestUpdateSheet `json:"updateSheet,omitempty"`
	AddSheet    *BatchUpdateSheetReqRequestAddSheet    `json:"addSheet,omitempty"`    // 增加工作表
	CopySheet   *BatchUpdateSheetReqRequestCopySheet   `json:"copySheet,omitempty"`   // 复制工作表
	DeleteSheet *BatchUpdateSheetReqRequestDeleteSheet `json:"deleteSheet,omitempty"` // 删除 sheet
}

// BatchUpdateSheetReqRequestUpdateSheet ...
type BatchUpdateSheetReqRequestUpdateSheet struct {
	Properties *BatchUpdateSheetReqRequestUpdateSheetProperties `json:"properties,omitempty"` // 工作表属性
}

// BatchUpdateSheetReqRequestUpdateSheetProperties ...
type BatchUpdateSheetReqRequestUpdateSheetProperties struct {
	SheetID        string                                                  `json:"sheetId,omitempty"`        // read-only ,作为表格唯一识别参数
	Title          *string                                                 `json:"title,omitempty"`          // 更改工作表标题
	Index          *int64                                                  `json:"index,omitempty"`          // 移动工作表的位置
	Hidden         *bool                                                   `json:"hidden,omitempty"`         // 隐藏表格，默认 false
	FrozenRowCount *int64                                                  `json:"frozenRowCount,omitempty"` // 冻结行数，小于等于工作表的最大行数，0表示取消冻结行
	FrozenColCount *int64                                                  `json:"frozenColCount,omitempty"` // 该 sheet 的冻结列数，小于等于工作表的最大列数，0表示取消冻结列
	Protect        *BatchUpdateSheetReqRequestUpdateSheetPropertiesProtect `json:"protect,omitempty"`        // 锁定表格
}

// BatchUpdateSheetReqRequestUpdateSheetPropertiesProtect ...
type BatchUpdateSheetReqRequestUpdateSheetPropertiesProtect struct {
	Lock     string   `json:"lock,omitempty"`     // LOCK 、UNLOCK 上锁/解锁
	LockInfo *string  `json:"lockInfo,omitempty"` // 锁定信息
	UserIDs  []string `json:"userIDs,omitempty"`  // 除了本人与所有者外，添加其他的可编辑人员,user_id_type不为空时使用该字段
}

// BatchUpdateSheetReqRequestAddSheet ...
type BatchUpdateSheetReqRequestAddSheet struct {
	Properties *BatchUpdateSheetReqRequestAddSheetProperties `json:"properties,omitempty"` // 工作表属性
}

// BatchUpdateSheetReqRequestAddSheetProperties ...
type BatchUpdateSheetReqRequestAddSheetProperties struct {
	Title string `json:"title,omitempty"` // 工作表标题
	Index *int64 `json:"index,omitempty"` // 新增工作表的位置，不填默认往前增加工作表
}

// BatchUpdateSheetReqRequestCopySheet ...
type BatchUpdateSheetReqRequestCopySheet struct {
	Source      *BatchUpdateSheetReqRequestCopySheetSource      `json:"source,omitempty"`      // 需要复制的工作表资源
	Destination *BatchUpdateSheetReqRequestCopySheetDestination `json:"destination,omitempty"` // 工作表 的属性
}

// BatchUpdateSheetReqRequestCopySheetSource ...
type BatchUpdateSheetReqRequestCopySheetSource struct {
	SheetID string `json:"sheetId,omitempty"` // 源 sheetId
}

// BatchUpdateSheetReqRequestCopySheetDestination ...
type BatchUpdateSheetReqRequestCopySheetDestination struct {
	Title *string `json:"title,omitempty"` // 目标工作表名称。不填为 old_title(副本_0)
}

// BatchUpdateSheetReqRequestDeleteSheet ...
type BatchUpdateSheetReqRequestDeleteSheet struct {
	SheetID string `json:"sheetId,omitempty"` // sheetId
}

// batchUpdateSheetResp ...
type batchUpdateSheetResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *BatchUpdateSheetResp `json:"data,omitempty"`
}

// BatchUpdateSheetResp ...
type BatchUpdateSheetResp struct {
	Replies []*BatchUpdateSheetRespReply `json:"replies,omitempty"` // 返回本次相关操作工作表的结果
}

// BatchUpdateSheetRespReply ...
type BatchUpdateSheetRespReply struct {
	AddSheet    *BatchUpdateSheetRespReplyAddSheet    `json:"addSheet,omitempty"`  // 增加/复制工作表的属性
	CopySheet   *BatchUpdateSheetRespReplyCopySheet   `json:"copySheet,omitempty"` // 增加/复制工作表的属性
	UpdateSheet *BatchUpdateSheetRespReplyUpdateSheet `json:"updateSheet,omitempty"`
	DeleteSheet *BatchUpdateSheetRespReplyDeleteSheet `json:"deleteSheet,omitempty"` // 删除工作表
}

// BatchUpdateSheetRespReplyAddSheet ...
type BatchUpdateSheetRespReplyAddSheet struct {
	Properties *BatchUpdateSheetRespReplyAddSheetProperties `json:"properties,omitempty"` // 表格属性
}

// BatchUpdateSheetRespReplyAddSheetProperties ...
type BatchUpdateSheetRespReplyAddSheetProperties struct {
	SheetID string `json:"sheetId,omitempty"` // sheetId
	Title   string `json:"title,omitempty"`   // 工作表标题
	Index   int64  `json:"index,omitempty"`   // 工作表位置
}

// BatchUpdateSheetRespReplyCopySheet ...
type BatchUpdateSheetRespReplyCopySheet struct {
	Properties *BatchUpdateSheetRespReplyCopySheetProperties `json:"properties,omitempty"` // 表格属性
}

// BatchUpdateSheetRespReplyCopySheetProperties ...
type BatchUpdateSheetRespReplyCopySheetProperties struct {
	SheetID string `json:"sheetId,omitempty"` // sheetId
	Title   string `json:"title,omitempty"`   // 工作表标题
	Index   int64  `json:"index,omitempty"`   // 工作表位置
}

// BatchUpdateSheetRespReplyUpdateSheet ...
type BatchUpdateSheetRespReplyUpdateSheet struct {
	Properties *BatchUpdateSheetRespReplyUpdateSheetProperties `json:"properties,omitempty"` // 工作表属性
}

// BatchUpdateSheetRespReplyUpdateSheetProperties ...
type BatchUpdateSheetRespReplyUpdateSheetProperties struct {
	SheetID        string                                                 `json:"sheetId,omitempty"`        // 表格的 sheetId
	Title          string                                                 `json:"title,omitempty"`          // 更新的工作表标题
	Index          int64                                                  `json:"index,omitempty"`          // 移动工作表的位置
	Hidden         bool                                                   `json:"hidden,omitempty"`         // 是否隐藏表格
	FrozenRowCount int64                                                  `json:"frozenRowCount,omitempty"` // 冻结行数
	FrozenColCount int64                                                  `json:"frozenColCount,omitempty"` // 冻结列数
	Protect        *BatchUpdateSheetRespReplyUpdateSheetPropertiesProtect `json:"protect,omitempty"`        // 保护工作表
}

// BatchUpdateSheetRespReplyUpdateSheetPropertiesProtect ...
type BatchUpdateSheetRespReplyUpdateSheetPropertiesProtect struct {
	Lock     string   `json:"lock,omitempty"`     // LOCK 、UNLOCK 上锁/解锁
	LockInfo string   `json:"lockInfo,omitempty"` // 锁定信息
	UserIDs  []string `json:"userIDs,omitempty"`  // 除了本人与所有者外，添加其他的可编辑人员,user_id_type不为空时使用该字段
}

// BatchUpdateSheetRespReplyDeleteSheet ...
type BatchUpdateSheetRespReplyDeleteSheet struct {
	Result  bool   `json:"result,omitempty"`  // 删除工作表是否成功
	SheetID string `json:"sheetId,omitempty"` // sheetId
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MergeSheetCell
//
// 该接口用于根据 spreadsheetToken 和维度信息合并单元格；单次操作不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukDNzUjL5QzM14SO0MTN
func (r *DriveService) MergeSheetCell(ctx context.Context, request *MergeSheetCellReq, options ...MethodOptionFunc) (*MergeSheetCellResp, *Response, error) {
	if r.cli.mock.mockDriveMergeSheetCell != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MergeSheetCell mock enable")
		return r.cli.mock.mockDriveMergeSheetCell(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MergeSheetCell",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/merge_cells",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(mergeSheetCellResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMergeSheetCell mock DriveMergeSheetCell method
func (r *Mock) MockDriveMergeSheetCell(f func(ctx context.Context, request *MergeSheetCellReq, options ...MethodOptionFunc) (*MergeSheetCellResp, *Response, error)) {
	r.mockDriveMergeSheetCell = f
}

// UnMockDriveMergeSheetCell un-mock DriveMergeSheetCell method
func (r *Mock) UnMockDriveMergeSheetCell() {
	r.mockDriveMergeSheetCell = nil
}

// MergeSheetCellReq ...
type MergeSheetCellReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range            string `json:"range,omitempty"`           // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	MergeType        string `json:"mergeType,omitempty"`       // 可选三个类型，"MERGE_ALL"  将所选区域直接合并、"MERGE_ROWS"  将所选区域按行合并、"MERGE_COLUMNS"  将所选区域按列合并响应
}

// mergeSheetCellResp ...
type mergeSheetCellResp struct {
	Code int64               `json:"code,omitempty"`
	Msg  string              `json:"msg,omitempty"`
	Data *MergeSheetCellResp `json:"data,omitempty"`
}

// MergeSheetCellResp ...
type MergeSheetCellResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnmergeSheetCell
//
// 该接口用于根据 spreadsheetToken 和维度信息拆分单元格；单次操作不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNzUjLwUzM14CM1MTN
func (r *DriveService) UnmergeSheetCell(ctx context.Context, request *UnmergeSheetCellReq, options ...MethodOptionFunc) (*UnmergeSheetCellResp, *Response, error) {
	if r.cli.mock.mockDriveUnmergeSheetCell != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UnmergeSheetCell mock enable")
		return r.cli.mock.mockDriveUnmergeSheetCell(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UnmergeSheetCell",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/unmerge_cells",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(unmergeSheetCellResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUnmergeSheetCell mock DriveUnmergeSheetCell method
func (r *Mock) MockDriveUnmergeSheetCell(f func(ctx context.Context, request *UnmergeSheetCellReq, options ...MethodOptionFunc) (*UnmergeSheetCellResp, *Response, error)) {
	r.mockDriveUnmergeSheetCell = f
}

// UnMockDriveUnmergeSheetCell un-mock DriveUnmergeSheetCell method
func (r *Mock) UnMockDriveUnmergeSheetCell() {
	r.mockDriveUnmergeSheetCell = nil
}

// UnmergeSheetCellReq ...
type UnmergeSheetCellReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range            string `json:"range,omitempty"`           // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// unmergeSheetCellResp ...
type unmergeSheetCellResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *UnmergeSheetCellResp `json:"data,omitempty"`
}

// UnmergeSheetCellResp ...
type UnmergeSheetCellResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetConditionFormat
//
// 该接口用于创建新的条件格式，单次最多支持增加10个条件格式，每个条件格式的设置会返回成功或者失败，失败的情况包括各种参数的校验。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-set
func (r *DriveService) CreateSheetConditionFormat(ctx context.Context, request *CreateSheetConditionFormatReq, options ...MethodOptionFunc) (*CreateSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveCreateSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetConditionFormat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetConditionFormat mock DriveCreateSheetConditionFormat method
func (r *Mock) MockDriveCreateSheetConditionFormat(f func(ctx context.Context, request *CreateSheetConditionFormatReq, options ...MethodOptionFunc) (*CreateSheetConditionFormatResp, *Response, error)) {
	r.mockDriveCreateSheetConditionFormat = f
}

// UnMockDriveCreateSheetConditionFormat un-mock DriveCreateSheetConditionFormat method
func (r *Mock) UnMockDriveCreateSheetConditionFormat() {
	r.mockDriveCreateSheetConditionFormat = nil
}

// CreateSheetConditionFormatReq ...
type CreateSheetConditionFormatReq struct {
	SpreadSheetToken      string                                               `path:"spreadsheetToken" json:"-"`         // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetConditionFormats []*CreateSheetConditionFormatReqSheetConditionFormat `json:"sheet_condition_formats,omitempty"` // 表格的条件格式信息
}

// CreateSheetConditionFormatReqSheetConditionFormat ...
type CreateSheetConditionFormatReqSheetConditionFormat struct {
	SheetID         string                                                            `json:"sheet_id,omitempty"`         // sheet的id
	ConditionFormat *CreateSheetConditionFormatReqSheetConditionFormatConditionFormat `json:"condition_format,omitempty"` // 一个条件格式的详细信息
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormat ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormat struct {
	Ranges   []string                                                                `json:"ranges,omitempty"`    // 条件格式应用的范围，支持：sheetId（整表）；sheetId!1:2（整行）；sheetId!A:B（整列）；sheetId!A1:B2（普通范围）；sheetId!A1:C（应用至最后一行）。应用范围不能超过表格的行总数和列总数，sheetId要与参数的sheetId一致
	RuleType string                                                                  `json:"rule_type,omitempty"` // 条件格式规则类型，目前只有7种：***containsBlanks（为空）、notContainsBlanks（不为空）、duplicateValues（重复值）、uniqueValues（唯一值）、cellIs（限定值范围）、containsText（包含内容）、timePeriod（日期）***
	Attrs    []*CreateSheetConditionFormatReqSheetConditionFormatConditionFormatAttr `json:"attrs,omitempty"`     // rule_type对应的具体属性信息，详见 [条件格式指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-guide)
	Style    *CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyle  `json:"style,omitempty"`     // 条件格式样式，只支持以下样式，以下样式每个参数都可选，但是不能设置空的style
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormatAttr ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormatAttr struct {
	Operator   *string  `json:"operator,omitempty"`    // 操作方法
	TimePeriod *string  `json:"time_period,omitempty"` // 时间范围
	Formula    []string `json:"formula,omitempty"`     // 格式
	Text       *string  `json:"text,omitempty"`        // 文本
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyle ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyle struct {
	Font           *CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyleFont `json:"font,omitempty"`            // 字体样式
	TextDecoration *int64                                                                     `json:"text_decoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	ForeColor      *string                                                                    `json:"fore_color,omitempty"`      // 字体颜色
	BackColor      *string                                                                    `json:"back_color,omitempty"`      // 背景颜色
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyleFont ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyleFont struct {
	Bold   *bool `json:"bold,omitempty"`   // 加粗
	Italic *bool `json:"italic,omitempty"` // 斜体
}

// createSheetConditionFormatResp ...
type createSheetConditionFormatResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *CreateSheetConditionFormatResp `json:"data,omitempty"`
}

// CreateSheetConditionFormatResp ...
type CreateSheetConditionFormatResp struct {
	Responses []*CreateSheetConditionFormatRespResponse `json:"responses,omitempty"` // 响应
}

// CreateSheetConditionFormatRespResponse ...
type CreateSheetConditionFormatRespResponse struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的Id
	CfID    string `json:"cf_id,omitempty"`    // 设置成功的条件格式id
	ResCode int64  `json:"res_code,omitempty"` // 条件格式设置状态码，0表示成功，非0表示失败
	ResMsg  string `json:"res_msg,omitempty"`  // 条件格式设置返回的状态信息，空表示成功，非空表示失败原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetConditionFormat
//
// 该接口用于删除已有的条件格式，单次最多支持删除10个条件格式，每个条件格式的删除会返回成功或者失败，失败的情况包括各种参数的校验。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-delete
func (r *DriveService) DeleteSheetConditionFormat(ctx context.Context, request *DeleteSheetConditionFormatReq, options ...MethodOptionFunc) (*DeleteSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveDeleteSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetConditionFormat",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetConditionFormat mock DriveDeleteSheetConditionFormat method
func (r *Mock) MockDriveDeleteSheetConditionFormat(f func(ctx context.Context, request *DeleteSheetConditionFormatReq, options ...MethodOptionFunc) (*DeleteSheetConditionFormatResp, *Response, error)) {
	r.mockDriveDeleteSheetConditionFormat = f
}

// UnMockDriveDeleteSheetConditionFormat un-mock DriveDeleteSheetConditionFormat method
func (r *Mock) UnMockDriveDeleteSheetConditionFormat() {
	r.mockDriveDeleteSheetConditionFormat = nil
}

// DeleteSheetConditionFormatReq ...
type DeleteSheetConditionFormatReq struct {
	SpreadSheetToken string                                   `path:"spreadsheetToken" json:"-"` // sheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetCfIDs       *DeleteSheetConditionFormatReqSheetCfIDs `json:"sheet_cf_ids,omitempty"`    // 表格条件格式id
}

// DeleteSheetConditionFormatReqSheetCfIDs ...
type DeleteSheetConditionFormatReqSheetCfIDs struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的id
	CfID    string `json:"cf_id,omitempty"`    // 条件格式id
}

// deleteSheetConditionFormatResp ...
type deleteSheetConditionFormatResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *DeleteSheetConditionFormatResp `json:"data,omitempty"`
}

// DeleteSheetConditionFormatResp ...
type DeleteSheetConditionFormatResp struct {
	Responses []*DeleteSheetConditionFormatRespResponse `json:"responses,omitempty"` // 响应
}

// DeleteSheetConditionFormatRespResponse ...
type DeleteSheetConditionFormatRespResponse struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的Id
	CfID    string `json:"cf_id,omitempty"`    // 条件格式id
	ResCode int64  `json:"res_code,omitempty"` // 条件格式删除状态码，0表示成功，非0表示失败
	ResMsg  string `json:"res_msg,omitempty"`  // 条件格式删除返回的状态信息，空表示成功，非空表示失败原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetConditionFormat
//
// 该接口用于根据sheetId查询详细的条件格式信息，最多支持同时查询10个sheetId。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-get
func (r *DriveService) GetSheetConditionFormat(ctx context.Context, request *GetSheetConditionFormatReq, options ...MethodOptionFunc) (*GetSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveGetSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetConditionFormat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetConditionFormat mock DriveGetSheetConditionFormat method
func (r *Mock) MockDriveGetSheetConditionFormat(f func(ctx context.Context, request *GetSheetConditionFormatReq, options ...MethodOptionFunc) (*GetSheetConditionFormatResp, *Response, error)) {
	r.mockDriveGetSheetConditionFormat = f
}

// UnMockDriveGetSheetConditionFormat un-mock DriveGetSheetConditionFormat method
func (r *Mock) UnMockDriveGetSheetConditionFormat() {
	r.mockDriveGetSheetConditionFormat = nil
}

// GetSheetConditionFormatReq ...
type GetSheetConditionFormatReq struct {
	SheetIDs         []string `query:"sheet_ids" join_sep:"," json:"-"` // 工作表ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN)接口获取，多个ID用逗号分隔，如xxxID1,xxxID2
	SpreadSheetToken string   `path:"spreadsheetToken" json:"-"`        // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetConditionFormatResp ...
type getSheetConditionFormatResp struct {
	Code int64                        `json:"code,omitempty"`
	Msg  string                       `json:"msg,omitempty"`
	Data *GetSheetConditionFormatResp `json:"data,omitempty"`
}

// GetSheetConditionFormatResp ...
type GetSheetConditionFormatResp struct {
	SheetConditionFormats []*GetSheetConditionFormatRespSheetConditionFormat `json:"sheet_condition_formats,omitempty"` // 表格的条件格式信息
}

// GetSheetConditionFormatRespSheetConditionFormat ...
type GetSheetConditionFormatRespSheetConditionFormat struct {
	SheetID         string                                                          `json:"sheet_id,omitempty"`         // sheet的id
	ConditionFormat *GetSheetConditionFormatRespSheetConditionFormatConditionFormat `json:"condition_format,omitempty"` // 一个条件格式的详细信息
}

// GetSheetConditionFormatRespSheetConditionFormatConditionFormat ...
type GetSheetConditionFormatRespSheetConditionFormatConditionFormat struct {
	CfID     string                                                               `json:"cf_id,omitempty"`     // 条件格式的id
	Ranges   []string                                                             `json:"ranges,omitempty"`    // 条件格式应用的范围，支持：sheetId（整表）；sheetId!1:2（整行）；sheetId!A:B（整列）；sheetId!A1:B2（普通范围）；sheetId!A1:C（应用至最后一行）。应用范围不能超过表格的行总数和列总数
	RuleType string                                                               `json:"rule_type,omitempty"` // 条件格式规则类型，目前只有7种：***containsBlanks（为空）、notContainsBlanks（不为空）、duplicateValues（重复值）、uniqueValues（唯一值）、cellIs（限定值范围）、containsText（包含内容）、timePeriod（日期）***
	Attrs    []*SheetRuleAttr                                                     `json:"attrs,omitempty"`     // rule_type对应的具体属性信息，详见 [条件格式指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-guide)
	Style    *GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyle `json:"style,omitempty"`     // 条件格式样式，只支持以下样式
}

// GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyle ...
type GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyle struct {
	Font           *GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyleFont `json:"font,omitempty"`            // 字体样式
	TextDecoration int64                                                                    `json:"text_decoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	ForeColor      string                                                                   `json:"fore_color,omitempty"`      // 字体颜色
	BackColor      string                                                                   `json:"back_color,omitempty"`      // 背景颜色
}

// GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyleFont ...
type GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyleFont struct {
	Bold   bool `json:"bold,omitempty"`   // 加粗
	Italic bool `json:"italic,omitempty"` // 斜体
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetConditionFormat
//
// 该接口用于更新已有的条件格式，单次最多支持更新10个条件格式，每个条件格式的更新会返回成功或者失败，失败的情况包括各种参数的校验。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-update
func (r *DriveService) UpdateSheetConditionFormat(ctx context.Context, request *UpdateSheetConditionFormatReq, options ...MethodOptionFunc) (*UpdateSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveUpdateSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetConditionFormat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetConditionFormat mock DriveUpdateSheetConditionFormat method
func (r *Mock) MockDriveUpdateSheetConditionFormat(f func(ctx context.Context, request *UpdateSheetConditionFormatReq, options ...MethodOptionFunc) (*UpdateSheetConditionFormatResp, *Response, error)) {
	r.mockDriveUpdateSheetConditionFormat = f
}

// UnMockDriveUpdateSheetConditionFormat un-mock DriveUpdateSheetConditionFormat method
func (r *Mock) UnMockDriveUpdateSheetConditionFormat() {
	r.mockDriveUpdateSheetConditionFormat = nil
}

// UpdateSheetConditionFormatReq ...
type UpdateSheetConditionFormatReq struct {
	SpreadSheetToken      string                                              `path:"spreadsheetToken" json:"-"`         // sheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetConditionFormats *UpdateSheetConditionFormatReqSheetConditionFormats `json:"sheet_condition_formats,omitempty"` // 表格的条件格式信息
}

// UpdateSheetConditionFormatReqSheetConditionFormats ...
type UpdateSheetConditionFormatReqSheetConditionFormats struct {
	SheetID         string                                                             `json:"sheet_id,omitempty"`         // sheet的id
	ConditionFormat *UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormat `json:"condition_format,omitempty"` // 一个条件格式的详细信息
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormat ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormat struct {
	CfID     string                                                                   `json:"cf_id,omitempty"`     // 需要更新的条件格式id，会校验id是否存在
	Ranges   []string                                                                 `json:"ranges,omitempty"`    // 条件格式应用的范围，支持：sheetId（整表）；sheetId!1:2（整行）；sheetId!A:B（整列）；sheetId!A1:B2（普通范围）；sheetId!A1:C（应用至最后一行）。应用范围不能超过表格的行总数和列总数，sheetId要与参数的sheetId一致
	RuleType string                                                                   `json:"rule_type,omitempty"` // 条件格式规则类型，目前只有7种：***containsBlanks（为空）、notContainsBlanks（不为空）、duplicateValues（重复值）、uniqueValues（唯一值）、cellIs（限定值范围）、containsText（包含内容）、timePeriod（日期）***
	Attrs    []*UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatAttr `json:"attrs,omitempty"`     // rule_type对应的具体属性信息，详见 [条件格式指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-guide)
	Style    *UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyle  `json:"style,omitempty"`     // 条件格式样式，只支持以下样式，以下样式每个参数都可选，但是不能设置空的style
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatAttr ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatAttr struct {
	Operator   *string  `json:"operator,omitempty"`    // 操作方法
	TimePeriod *string  `json:"time_period,omitempty"` // 时间范围
	Formula    []string `json:"formula,omitempty"`     // 格式
	Text       *string  `json:"text,omitempty"`        // 文本
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyle ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyle struct {
	Font           *UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyleFont `json:"font,omitempty"`            // 字体样式
	TextDecoration *int64                                                                      `json:"text_decoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	ForeColor      *string                                                                     `json:"fore_color,omitempty"`      // 字体颜色
	BackColor      *string                                                                     `json:"back_color,omitempty"`      // 背景颜色
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyleFont ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyleFont struct {
	Bold   *bool `json:"bold,omitempty"`   // 加粗
	Italic *bool `json:"italic,omitempty"` // 斜体
}

// updateSheetConditionFormatResp ...
type updateSheetConditionFormatResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *UpdateSheetConditionFormatResp `json:"data,omitempty"`
}

// UpdateSheetConditionFormatResp ...
type UpdateSheetConditionFormatResp struct {
	Responses []*UpdateSheetConditionFormatRespResponse `json:"responses,omitempty"` // 响应
}

// UpdateSheetConditionFormatRespResponse ...
type UpdateSheetConditionFormatRespResponse struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的Id
	CfID    string `json:"cf_id,omitempty"`    // 更新的条件格式id
	ResCode int64  `json:"res_code,omitempty"` // 条件格式更新状态码，0表示成功，非0表示失败
	ResMsg  string `json:"res_msg,omitempty"`  // 条件格式更新返回的状态信息，空表示成功，不空表示失败原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheet 使用该接口可以在指定的目录下创建在线表格。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/create
func (r *DriveService) CreateSheet(ctx context.Context, request *CreateSheetReq, options ...MethodOptionFunc) (*CreateSheetResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheet mock enable")
		return r.cli.mock.mockDriveCreateSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheet mock DriveCreateSheet method
func (r *Mock) MockDriveCreateSheet(f func(ctx context.Context, request *CreateSheetReq, options ...MethodOptionFunc) (*CreateSheetResp, *Response, error)) {
	r.mockDriveCreateSheet = f
}

// UnMockDriveCreateSheet un-mock DriveCreateSheet method
func (r *Mock) UnMockDriveCreateSheet() {
	r.mockDriveCreateSheet = nil
}

// CreateSheetReq ...
type CreateSheetReq struct {
	Title       *string `json:"title,omitempty"`        // 表格标题, 示例值："title"
	FolderToken *string `json:"folder_token,omitempty"` // 文件夹token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："fldcnMsNb*****hIW9IjG1LVswg"
}

// createSheetResp ...
type createSheetResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetResp `json:"data,omitempty"`
}

// CreateSheetResp ...
type CreateSheetResp struct {
	Spreadsheet *CreateSheetRespSpreadsheet `json:"spreadsheet,omitempty"` // 表格
}

// CreateSheetRespSpreadsheet ...
type CreateSheetRespSpreadsheet struct {
	Title            string `json:"title,omitempty"`             // 表格标题
	FolderToken      string `json:"folder_token,omitempty"`      // 文件夹token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	URL              string `json:"url,omitempty"`               // 文档url
	SpreadSheetToken string `json:"spreadsheet_token,omitempty"` // 表格token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、range 和下拉列表属性给单元格设置下拉列表规则；单次设置范围不超过5000行，100列。当一个数据区域中已有数据，支持将有效数据直接转为选项。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/set-dropdown
func (r *DriveService) CreateSheetDataValidationDropdown(ctx context.Context, request *CreateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*CreateSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveCreateSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetDataValidationDropdown",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetDataValidationDropdown mock DriveCreateSheetDataValidationDropdown method
func (r *Mock) MockDriveCreateSheetDataValidationDropdown(f func(ctx context.Context, request *CreateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*CreateSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveCreateSheetDataValidationDropdown = f
}

// UnMockDriveCreateSheetDataValidationDropdown un-mock DriveCreateSheetDataValidationDropdown method
func (r *Mock) UnMockDriveCreateSheetDataValidationDropdown() {
	r.mockDriveCreateSheetDataValidationDropdown = nil
}

// CreateSheetDataValidationDropdownReq ...
type CreateSheetDataValidationDropdownReq struct {
	SpreadSheetToken   string                                              `path:"spreadsheetToken" json:"-"`    // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range              string                                              `json:"range,omitempty"`              // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationType string                                              `json:"dataValidationType,omitempty"` // 下拉列表填"list"
	DataValidation     *CreateSheetDataValidationDropdownReqDataValidation `json:"dataValidation,omitempty"`     // 下拉列表规则属性
}

// CreateSheetDataValidationDropdownReqDataValidation ...
type CreateSheetDataValidationDropdownReqDataValidation struct {
	ConditionValues []string                                                   `json:"conditionValues,omitempty"` // 下拉列表选项值, 需为字符串,不能包含","，选项值最长100字符,选项个数最多500个
	Options         *CreateSheetDataValidationDropdownReqDataValidationOptions `json:"options,omitempty"`         // 可选属性
}

// CreateSheetDataValidationDropdownReqDataValidationOptions ...
type CreateSheetDataValidationDropdownReqDataValidationOptions struct {
	MultipleValues     *bool    `json:"multipleValues,omitempty"`     // 单选填false, 多选填true，不填默认为false
	HighlightValidData *bool    `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式, 不填默认为false
	Colors             []string `json:"colors,omitempty"`             // 当highlightValidData为true时，color需填颜色,与conditionValues中的值一一对应。需是RGB16进制格式,如"#fffd00"
}

// createSheetDataValidationDropdownResp ...
type createSheetDataValidationDropdownResp struct {
	Code int64                                  `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                                `json:"msg,omitempty"`  // 状态信息
	Data *CreateSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// CreateSheetDataValidationDropdownResp ...
type CreateSheetDataValidationDropdownResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、range 移除选定数据范围单元格的下拉列表设置，但保留选项文本。单个删除范围不超过5000单元格。单次请求range最大数量100个。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/delete-datavalidation
func (r *DriveService) DeleteSheetDataValidationDropdown(ctx context.Context, request *DeleteSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*DeleteSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveDeleteSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetDataValidationDropdown",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetDataValidationDropdown mock DriveDeleteSheetDataValidationDropdown method
func (r *Mock) MockDriveDeleteSheetDataValidationDropdown(f func(ctx context.Context, request *DeleteSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*DeleteSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveDeleteSheetDataValidationDropdown = f
}

// UnMockDriveDeleteSheetDataValidationDropdown un-mock DriveDeleteSheetDataValidationDropdown method
func (r *Mock) UnMockDriveDeleteSheetDataValidationDropdown() {
	r.mockDriveDeleteSheetDataValidationDropdown = nil
}

// DeleteSheetDataValidationDropdownReq ...
type DeleteSheetDataValidationDropdownReq struct {
	SpreadSheetToken     string                                                     `path:"spreadsheetToken" json:"-"`      // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationRanges []*DeleteSheetDataValidationDropdownReqDataValidationRange `json:"dataValidationRanges,omitempty"` // 范围数组，每个range 最大单元格数量5000，每个range独立执行，一个range的失败不影响其他range的执行。返回结果会返回每个range的执行结果
}

// DeleteSheetDataValidationDropdownReqDataValidationRange ...
type DeleteSheetDataValidationDropdownReqDataValidationRange struct {
	Range             string  `json:"range,omitempty"`             // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationIDs []int64 `json:"dataValidationIds,omitempty"` // 指定需要删除的dataValidationIds
}

// deleteSheetDataValidationDropdownResp ...
type deleteSheetDataValidationDropdownResp struct {
	Code int64                                  `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                                `json:"msg,omitempty"`  // 状态信息
	Data *DeleteSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// DeleteSheetDataValidationDropdownResp ...
type DeleteSheetDataValidationDropdownResp struct {
	RangeResults []*DeleteSheetDataValidationDropdownRespRangeResult `json:"rangeResults,omitempty"`
}

// DeleteSheetDataValidationDropdownRespRangeResult ...
type DeleteSheetDataValidationDropdownRespRangeResult struct {
	Range        string  `json:"range,omitempty"`        // 执行的range,与请求入参中的range 对应
	Msg          *string `json:"msg,omitempty"`          // 结果信息
	Success      bool    `json:"success,omitempty"`      // 执行结果
	UpdatedCells int64   `json:"updatedCells,omitempty"` // 影响的单元格数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、range 查询range内的下拉列表设置信息；单次查询范围不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/query-datavalidation
func (r *DriveService) GetSheetDataValidationDropdown(ctx context.Context, request *GetSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*GetSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveGetSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetDataValidationDropdown",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetDataValidationDropdown mock DriveGetSheetDataValidationDropdown method
func (r *Mock) MockDriveGetSheetDataValidationDropdown(f func(ctx context.Context, request *GetSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*GetSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveGetSheetDataValidationDropdown = f
}

// UnMockDriveGetSheetDataValidationDropdown un-mock DriveGetSheetDataValidationDropdown method
func (r *Mock) UnMockDriveGetSheetDataValidationDropdown() {
	r.mockDriveGetSheetDataValidationDropdown = nil
}

// GetSheetDataValidationDropdownReq ...
type GetSheetDataValidationDropdownReq struct {
	Range              string `query:"range" json:"-"`              // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationType string `query:"dataValidationType" json:"-"` // 下拉列表填"list"
	SpreadSheetToken   string `path:"spreadsheetToken" json:"-"`    // spreadsheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetDataValidationDropdownResp ...
type getSheetDataValidationDropdownResp struct {
	Code int64                               `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                             `json:"msg,omitempty"`  // 状态信息
	Data *GetSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// GetSheetDataValidationDropdownResp ...
type GetSheetDataValidationDropdownResp struct {
	SpreadSheetToken string                                              `json:"spreadsheetToken,omitempty"` // spreadsheet的token
	SheetID          string                                              `json:"sheetId,omitempty"`          // 工作表 sheet 的 id
	Revision         int64                                               `json:"revision,omitempty"`         // 版本号
	DataValidations  []*GetSheetDataValidationDropdownRespDataValidation `json:"dataValidations,omitempty"`  // 下拉列表数组, 不存在时为空
}

// GetSheetDataValidationDropdownRespDataValidation ...
type GetSheetDataValidationDropdownRespDataValidation struct {
	DataValidationID   int64                                                    `json:"dataValidationId,omitempty"`   // 唯一标示id
	DataValidationType string                                                   `json:"dataValidationType,omitempty"` // 下拉列表为"list"
	ConditionValues    []string                                                 `json:"conditionValues,omitempty"`    // 下拉列表选项值
	Options            *GetSheetDataValidationDropdownRespDataValidationOptions `json:"options,omitempty"`            // 可选属性
}

// GetSheetDataValidationDropdownRespDataValidationOptions ...
type GetSheetDataValidationDropdownRespDataValidationOptions struct {
	MultipleValues     *bool             `json:"multipleValues,omitempty"`     // 单选填false, 多选填true
	HighlightValidData *bool             `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式
	ColorValueMap      map[string]string `json:"colorValueMap,omitempty"`      // 当highlightValidData为true时，colorValueMap的key与conditionValues中的值一一对应，value为对应的颜色参数。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、sheetId、dataValidationId 更新下拉列表的属性。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/update-datavalidation
func (r *DriveService) UpdateSheetDataValidationDropdown(ctx context.Context, request *UpdateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*UpdateSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveUpdateSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetDataValidationDropdown",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation/:sheetId/:dataValidationId",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetDataValidationDropdown mock DriveUpdateSheetDataValidationDropdown method
func (r *Mock) MockDriveUpdateSheetDataValidationDropdown(f func(ctx context.Context, request *UpdateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*UpdateSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveUpdateSheetDataValidationDropdown = f
}

// UnMockDriveUpdateSheetDataValidationDropdown un-mock DriveUpdateSheetDataValidationDropdown method
func (r *Mock) UnMockDriveUpdateSheetDataValidationDropdown() {
	r.mockDriveUpdateSheetDataValidationDropdown = nil
}

// UpdateSheetDataValidationDropdownReq ...
type UpdateSheetDataValidationDropdownReq struct {
	SpreadSheetToken   string                                              `path:"spreadsheetToken" json:"-"`    // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetID            string                                              `path:"sheetId" json:"-"`             // 子sheet唯一识别参数
	DataValidationID   int64                                               `path:"dataValidationId" json:"-"`    // sheet中下拉列表的唯一标示id
	DataValidationType string                                              `json:"dataValidationType,omitempty"` // 下拉列表填"list"
	DataValidation     *UpdateSheetDataValidationDropdownReqDataValidation `json:"dataValidation,omitempty"`     // 下拉列表规则属性
}

// UpdateSheetDataValidationDropdownReqDataValidation ...
type UpdateSheetDataValidationDropdownReqDataValidation struct {
	ConditionValues []string                                                   `json:"conditionValues,omitempty"` // 下拉列表选项值, 需为字符串,不能包含","，选项值最长100字符,选项个数最多500个
	Options         *UpdateSheetDataValidationDropdownReqDataValidationOptions `json:"options,omitempty"`         // 可选属性
}

// UpdateSheetDataValidationDropdownReqDataValidationOptions ...
type UpdateSheetDataValidationDropdownReqDataValidationOptions struct {
	MultipleValues     *bool    `json:"multipleValues,omitempty"`     // 单选填false, 多选填true，不填默认为false
	HighlightValidData *bool    `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式, 不填默认为false
	Colors             []string `json:"colors,omitempty"`             // 当highlightValidData为true时，color需填颜色,与conditionValues中的值一一对应。需是RGB16进制格式,如"#fffd00"
}

// updateSheetDataValidationDropdownResp ...
type updateSheetDataValidationDropdownResp struct {
	Code int64                                  `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                                `json:"msg,omitempty"`  // 状态信息
	Data *UpdateSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// UpdateSheetDataValidationDropdownResp ...
type UpdateSheetDataValidationDropdownResp struct {
	SpreadSheetToken string                                               `json:"spreadsheetToken,omitempty"` // spreadsheet的token
	SheetID          string                                               `json:"sheetId,omitempty"`          // 工作表 sheet 的 id
	DataValidation   *UpdateSheetDataValidationDropdownRespDataValidation `json:"dataValidation,omitempty"`
}

// UpdateSheetDataValidationDropdownRespDataValidation ...
type UpdateSheetDataValidationDropdownRespDataValidation struct {
	DataValidationID   int64                                                       `json:"dataValidationId,omitempty"`   // 唯一标示id
	DataValidationType string                                                      `json:"dataValidationType,omitempty"` // 下拉列表为"list"
	ConditionValues    []string                                                    `json:"conditionValues,omitempty"`    // 下拉列表选项值
	Options            *UpdateSheetDataValidationDropdownRespDataValidationOptions `json:"options,omitempty"`            // 可选属性
}

// UpdateSheetDataValidationDropdownRespDataValidationOptions ...
type UpdateSheetDataValidationDropdownRespDataValidationOptions struct {
	MultipleValues     *bool             `json:"multipleValues,omitempty"`     // 单选填false, 多选填true
	HighlightValidData *bool             `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式
	ColorValueMap      map[string]string `json:"colorValueMap,omitempty"`      // 当highlightValidData为true时，colorValueMap的key与conditionValues中的值一一对应，value为对应的颜色参数。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MoveSheetDimension 该接口用于移动行列，行列被移动到目标位置后，原本在目标位置的行列会对应右移或下移。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/move_dimension
func (r *DriveService) MoveSheetDimension(ctx context.Context, request *MoveSheetDimensionReq, options ...MethodOptionFunc) (*MoveSheetDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveMoveSheetDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveSheetDimension mock enable")
		return r.cli.mock.mockDriveMoveSheetDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveSheetDimension",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/move_dimension",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveSheetDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveSheetDimension mock DriveMoveSheetDimension method
func (r *Mock) MockDriveMoveSheetDimension(f func(ctx context.Context, request *MoveSheetDimensionReq, options ...MethodOptionFunc) (*MoveSheetDimensionResp, *Response, error)) {
	r.mockDriveMoveSheetDimension = f
}

// UnMockDriveMoveSheetDimension un-mock DriveMoveSheetDimension method
func (r *Mock) UnMockDriveMoveSheetDimension() {
	r.mockDriveMoveSheetDimension = nil
}

// MoveSheetDimensionReq ...
type MoveSheetDimensionReq struct {
	SpreadSheetToken string                       `path:"spreadsheet_token" json:"-"`  // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string                       `path:"sheet_id" json:"-"`           // 子表 id, 示例值："0b\**12"
	Source           *MoveSheetDimensionReqSource `json:"source,omitempty"`            // 移动源位置参数
	DestinationIndex *int64                       `json:"destination_index,omitempty"` // 移动的目标位置行或者列号, 示例值：4
}

// MoveSheetDimensionReqSource ...
type MoveSheetDimensionReqSource struct {
	MajorDimension *string `json:"major_dimension,omitempty"` // 操作行还是列，取值：ROWS、COLUMNS, 示例值："ROWS"
	StartIndex     *int64  `json:"start_index,omitempty"`     // 起始行或者列号, 示例值：0
	EndIndex       *int64  `json:"end_index,omitempty"`       // 结束行或者列号, 示例值：1
}

// moveSheetDimensionResp ...
type moveSheetDimensionResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *MoveSheetDimensionResp `json:"data,omitempty"`
}

// MoveSheetDimensionResp ...
type MoveSheetDimensionResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和长度，在末尾增加空行/列；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUjMzUjL1IzM14SNyMTN
func (r *DriveService) AddSheetDimensionRange(ctx context.Context, request *AddSheetDimensionRangeReq, options ...MethodOptionFunc) (*AddSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveAddSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#AddSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveAddSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "AddSheetDimensionRange",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(addSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveAddSheetDimensionRange mock DriveAddSheetDimensionRange method
func (r *Mock) MockDriveAddSheetDimensionRange(f func(ctx context.Context, request *AddSheetDimensionRangeReq, options ...MethodOptionFunc) (*AddSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveAddSheetDimensionRange = f
}

// UnMockDriveAddSheetDimensionRange un-mock DriveAddSheetDimensionRange method
func (r *Mock) UnMockDriveAddSheetDimensionRange() {
	r.mockDriveAddSheetDimensionRange = nil
}

// AddSheetDimensionRangeReq ...
type AddSheetDimensionRangeReq struct {
	SpreadSheetToken string                              `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension        *AddSheetDimensionRangeReqDimension `json:"dimension,omitempty"`       // 需要增加行列的维度信息
}

// AddSheetDimensionRangeReqDimension ...
type AddSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	Length         int64   `json:"length,omitempty"`         // 要增加的行/列数,0<length<5000
}

// addSheetDimensionRangeResp ...
type addSheetDimensionRangeResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *AddSheetDimensionRangeResp `json:"data,omitempty"`
}

// AddSheetDimensionRangeResp ...
type AddSheetDimensionRangeResp struct {
	AddCount       int64  `json:"addCount,omitempty"`       // 增加的行/列数
	MajorDimension string `json:"majorDimension,omitempty"` // 插入维度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和维度信息删除行/列 。单次删除最大5000行/列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucjMzUjL3IzM14yNyMTN
func (r *DriveService) DeleteSheetDimensionRange(ctx context.Context, request *DeleteSheetDimensionRangeReq, options ...MethodOptionFunc) (*DeleteSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveDeleteSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetDimensionRange",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetDimensionRange mock DriveDeleteSheetDimensionRange method
func (r *Mock) MockDriveDeleteSheetDimensionRange(f func(ctx context.Context, request *DeleteSheetDimensionRangeReq, options ...MethodOptionFunc) (*DeleteSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveDeleteSheetDimensionRange = f
}

// UnMockDriveDeleteSheetDimensionRange un-mock DriveDeleteSheetDimensionRange method
func (r *Mock) UnMockDriveDeleteSheetDimensionRange() {
	r.mockDriveDeleteSheetDimensionRange = nil
}

// DeleteSheetDimensionRangeReq ...
type DeleteSheetDimensionRangeReq struct {
	SpreadSheetToken string                                 `path:"spreadsheetToken" json:"-"` // spreadsheet的token，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension        *DeleteSheetDimensionRangeReqDimension `json:"dimension,omitempty"`       // 需要删除行列的维度信息
}

// DeleteSheetDimensionRangeReqDimension ...
type DeleteSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// deleteSheetDimensionRangeResp ...
type deleteSheetDimensionRangeResp struct {
	Code int64                          `json:"code,omitempty"`
	Msg  string                         `json:"msg,omitempty"`
	Data *DeleteSheetDimensionRangeResp `json:"data,omitempty"`
}

// DeleteSheetDimensionRangeResp ...
type DeleteSheetDimensionRangeResp struct {
	DelCount       int64  `json:"delCount,omitempty"`       // 删除的行/列数
	MajorDimension string `json:"majorDimension,omitempty"` // 插入维度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// InsertSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和维度信息 插入空行/列。
// 如 startIndex=3, endIndex=7，则从第 4 行开始开始插入行列，一直到第 7 行，共插入 4 行；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQjMzUjL0IzM14CNyMTN
func (r *DriveService) InsertSheetDimensionRange(ctx context.Context, request *InsertSheetDimensionRangeReq, options ...MethodOptionFunc) (*InsertSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveInsertSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#InsertSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveInsertSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "InsertSheetDimensionRange",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/insert_dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(insertSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveInsertSheetDimensionRange mock DriveInsertSheetDimensionRange method
func (r *Mock) MockDriveInsertSheetDimensionRange(f func(ctx context.Context, request *InsertSheetDimensionRangeReq, options ...MethodOptionFunc) (*InsertSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveInsertSheetDimensionRange = f
}

// UnMockDriveInsertSheetDimensionRange un-mock DriveInsertSheetDimensionRange method
func (r *Mock) UnMockDriveInsertSheetDimensionRange() {
	r.mockDriveInsertSheetDimensionRange = nil
}

// InsertSheetDimensionRangeReq ...
type InsertSheetDimensionRangeReq struct {
	SpreadSheetToken string                                 `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension        *InsertSheetDimensionRangeReqDimension `json:"dimension,omitempty"`       // 需要插入行列的维度信息
	InheritStyle     *string                                `json:"inheritStyle,omitempty"`    // BEFORE 或 AFTER，不填为不继承 style
}

// InsertSheetDimensionRangeReqDimension ...
type InsertSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheet 的 Id
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// insertSheetDimensionRangeResp ...
type insertSheetDimensionRangeResp struct {
	Code int64                          `json:"code,omitempty"`
	Msg  string                         `json:"msg,omitempty"`
	Data *InsertSheetDimensionRangeResp `json:"data,omitempty"`
}

// InsertSheetDimensionRangeResp ...
type InsertSheetDimensionRangeResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和维度信息更新隐藏行列、单元格大小；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYjMzUjL2IzM14iNyMTN
func (r *DriveService) UpdateSheetDimensionRange(ctx context.Context, request *UpdateSheetDimensionRangeReq, options ...MethodOptionFunc) (*UpdateSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveUpdateSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetDimensionRange",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetDimensionRange mock DriveUpdateSheetDimensionRange method
func (r *Mock) MockDriveUpdateSheetDimensionRange(f func(ctx context.Context, request *UpdateSheetDimensionRangeReq, options ...MethodOptionFunc) (*UpdateSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveUpdateSheetDimensionRange = f
}

// UnMockDriveUpdateSheetDimensionRange un-mock DriveUpdateSheetDimensionRange method
func (r *Mock) UnMockDriveUpdateSheetDimensionRange() {
	r.mockDriveUpdateSheetDimensionRange = nil
}

// UpdateSheetDimensionRangeReq ...
type UpdateSheetDimensionRangeReq struct {
	SpreadSheetToken    string                                           `path:"spreadsheetToken" json:"-"`     // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension           *UpdateSheetDimensionRangeReqDimension           `json:"dimension,omitempty"`           // 需要更新行列的维度信息
	DimensionProperties *UpdateSheetDimensionRangeReqDimensionProperties `json:"dimensionProperties,omitempty"` // 需要更新行列的属性
}

// UpdateSheetDimensionRangeReqDimension ...
type UpdateSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// UpdateSheetDimensionRangeReqDimensionProperties ...
type UpdateSheetDimensionRangeReqDimensionProperties struct {
	Visible   *bool  `json:"visible,omitempty"`   // true 为显示，false 为隐藏行列
	FixedSize *int64 `json:"fixedSize,omitempty"` // 行/列的大小
}

// updateSheetDimensionRangeResp ...
type updateSheetDimensionRangeResp struct {
	Code int64                          `json:"code,omitempty"`
	Msg  string                         `json:"msg,omitempty"`
	Data *UpdateSheetDimensionRangeResp `json:"data,omitempty"`
}

// UpdateSheetDimensionRangeResp ...
type UpdateSheetDimensionRangeResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFilter 在子表内创建筛选。
//
// 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/create
func (r *DriveService) CreateSheetFilter(ctx context.Context, request *CreateSheetFilterReq, options ...MethodOptionFunc) (*CreateSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFilter mock enable")
		return r.cli.mock.mockDriveCreateSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFilter",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFilter mock DriveCreateSheetFilter method
func (r *Mock) MockDriveCreateSheetFilter(f func(ctx context.Context, request *CreateSheetFilterReq, options ...MethodOptionFunc) (*CreateSheetFilterResp, *Response, error)) {
	r.mockDriveCreateSheetFilter = f
}

// UnMockDriveCreateSheetFilter un-mock DriveCreateSheetFilter method
func (r *Mock) UnMockDriveCreateSheetFilter() {
	r.mockDriveCreateSheetFilter = nil
}

// CreateSheetFilterReq ...
type CreateSheetFilterReq struct {
	SpreadSheetToken string                         `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string                         `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
	Range            string                         `json:"range,omitempty"`            // 筛选应用范围, 示例值："xxxxxx!C1:H14"
	Col              string                         `json:"col,omitempty"`              // 设置筛选条件的列, 示例值："E"
	Condition        *CreateSheetFilterReqCondition `json:"condition,omitempty"`        // 筛选的条件
}

// CreateSheetFilterReqCondition ...
type CreateSheetFilterReqCondition struct {
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型, 示例值："number"
	CompareType *string  `json:"compare_type,omitempty"` // 比较类型, 示例值："less"
	Expected    []string `json:"expected,omitempty"`     // 筛选参数, 示例值：6
}

// createSheetFilterResp ...
type createSheetFilterResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFilterResp `json:"data,omitempty"`
}

// CreateSheetFilterResp ...
type CreateSheetFilterResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFilter 删除子表的筛选
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/delete
func (r *DriveService) DeleteSheetFilter(ctx context.Context, request *DeleteSheetFilterReq, options ...MethodOptionFunc) (*DeleteSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFilter mock enable")
		return r.cli.mock.mockDriveDeleteSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFilter",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFilter mock DriveDeleteSheetFilter method
func (r *Mock) MockDriveDeleteSheetFilter(f func(ctx context.Context, request *DeleteSheetFilterReq, options ...MethodOptionFunc) (*DeleteSheetFilterResp, *Response, error)) {
	r.mockDriveDeleteSheetFilter = f
}

// UnMockDriveDeleteSheetFilter un-mock DriveDeleteSheetFilter method
func (r *Mock) UnMockDriveDeleteSheetFilter() {
	r.mockDriveDeleteSheetFilter = nil
}

// DeleteSheetFilterReq ...
type DeleteSheetFilterReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
}

// deleteSheetFilterResp ...
type deleteSheetFilterResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFilterResp `json:"data,omitempty"`
}

// DeleteSheetFilterResp ...
type DeleteSheetFilterResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFilter 获取子表的详细筛选信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/get
func (r *DriveService) GetSheetFilter(ctx context.Context, request *GetSheetFilterReq, options ...MethodOptionFunc) (*GetSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFilter mock enable")
		return r.cli.mock.mockDriveGetSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFilter",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFilter mock DriveGetSheetFilter method
func (r *Mock) MockDriveGetSheetFilter(f func(ctx context.Context, request *GetSheetFilterReq, options ...MethodOptionFunc) (*GetSheetFilterResp, *Response, error)) {
	r.mockDriveGetSheetFilter = f
}

// UnMockDriveGetSheetFilter un-mock DriveGetSheetFilter method
func (r *Mock) UnMockDriveGetSheetFilter() {
	r.mockDriveGetSheetFilter = nil
}

// GetSheetFilterReq ...
type GetSheetFilterReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
}

// getSheetFilterResp ...
type getSheetFilterResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFilterResp `json:"data,omitempty"`
}

// GetSheetFilterResp ...
type GetSheetFilterResp struct {
	SheetFilterInfo *GetSheetFilterRespSheetFilterInfo `json:"sheet_filter_info,omitempty"` // 筛选信息
}

// GetSheetFilterRespSheetFilterInfo ...
type GetSheetFilterRespSheetFilterInfo struct {
	Range           string                                         `json:"range,omitempty"`             // 筛选应用范围
	FilteredOutRows []int64                                        `json:"filtered_out_rows,omitempty"` // 筛选出来隐藏的行
	FilterInfos     []*GetSheetFilterRespSheetFilterInfoFilterInfo `json:"filter_infos,omitempty"`      // sheet的筛选条件
}

// GetSheetFilterRespSheetFilterInfoFilterInfo ...
type GetSheetFilterRespSheetFilterInfoFilterInfo struct {
	Col        string                                                  `json:"col,omitempty"`        // 设置了筛选条件的列
	Conditions []*GetSheetFilterRespSheetFilterInfoFilterInfoCondition `json:"conditions,omitempty"` // 筛选条件
}

// GetSheetFilterRespSheetFilterInfoFilterInfoCondition ...
type GetSheetFilterRespSheetFilterInfoFilterInfoCondition struct {
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFilter 更新子表筛选范围中的列筛选条件。
//
// 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/update
func (r *DriveService) UpdateSheetFilter(ctx context.Context, request *UpdateSheetFilterReq, options ...MethodOptionFunc) (*UpdateSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFilter mock enable")
		return r.cli.mock.mockDriveUpdateSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFilter",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFilter mock DriveUpdateSheetFilter method
func (r *Mock) MockDriveUpdateSheetFilter(f func(ctx context.Context, request *UpdateSheetFilterReq, options ...MethodOptionFunc) (*UpdateSheetFilterResp, *Response, error)) {
	r.mockDriveUpdateSheetFilter = f
}

// UnMockDriveUpdateSheetFilter un-mock DriveUpdateSheetFilter method
func (r *Mock) UnMockDriveUpdateSheetFilter() {
	r.mockDriveUpdateSheetFilter = nil
}

// UpdateSheetFilterReq ...
type UpdateSheetFilterReq struct {
	SpreadSheetToken string                         `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string                         `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
	Col              string                         `json:"col,omitempty"`              // 更新筛选条件的列, 示例值："E"
	Condition        *UpdateSheetFilterReqCondition `json:"condition,omitempty"`        // 筛选条件
}

// UpdateSheetFilterReqCondition ...
type UpdateSheetFilterReqCondition struct {
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型, 示例值："number"
	CompareType *string  `json:"compare_type,omitempty"` // 比较类型, 示例值："less"
	Expected    []string `json:"expected,omitempty"`     // 筛选参数, 示例值：6
}

// updateSheetFilterResp ...
type updateSheetFilterResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFilterResp `json:"data,omitempty"`
}

// UpdateSheetFilterResp ...
type UpdateSheetFilterResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFilterViewCondition 在筛选视图的筛选范围的某一列创建筛选条件。
//
// 筛选条件参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/create
func (r *DriveService) CreateSheetFilterViewCondition(ctx context.Context, request *CreateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*CreateSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveCreateSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFilterViewCondition",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFilterViewCondition mock DriveCreateSheetFilterViewCondition method
func (r *Mock) MockDriveCreateSheetFilterViewCondition(f func(ctx context.Context, request *CreateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*CreateSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveCreateSheetFilterViewCondition = f
}

// UnMockDriveCreateSheetFilterViewCondition un-mock DriveCreateSheetFilterViewCondition method
func (r *Mock) UnMockDriveCreateSheetFilterViewCondition() {
	r.mockDriveCreateSheetFilterViewCondition = nil
}

// CreateSheetFilterViewConditionReq ...
type CreateSheetFilterViewConditionReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string   `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      *string  `json:"condition_id,omitempty"`     // 设置筛选条件的列，使用字母号, 示例值："E"
	FilterType       *string  `json:"filter_type,omitempty"`      // 筛选类型, 示例值："number"
	CompareType      *string  `json:"compare_type,omitempty"`     // 比较类型, 示例值："less"
	Expected         []string `json:"expected,omitempty"`         // 筛选参数, 示例值：6
}

// createSheetFilterViewConditionResp ...
type createSheetFilterViewConditionResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFilterViewConditionResp `json:"data,omitempty"`
}

// CreateSheetFilterViewConditionResp ...
type CreateSheetFilterViewConditionResp struct {
	Condition *CreateSheetFilterViewConditionRespCondition `json:"condition,omitempty"` // 创建的筛选条件
}

// CreateSheetFilterViewConditionRespCondition ...
type CreateSheetFilterViewConditionRespCondition struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFilterViewCondition 删除筛选视图的筛选范围某一列的筛选条件。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/delete
func (r *DriveService) DeleteSheetFilterViewCondition(ctx context.Context, request *DeleteSheetFilterViewConditionReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveDeleteSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFilterViewCondition",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFilterViewCondition mock DriveDeleteSheetFilterViewCondition method
func (r *Mock) MockDriveDeleteSheetFilterViewCondition(f func(ctx context.Context, request *DeleteSheetFilterViewConditionReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveDeleteSheetFilterViewCondition = f
}

// UnMockDriveDeleteSheetFilterViewCondition un-mock DriveDeleteSheetFilterViewCondition method
func (r *Mock) UnMockDriveDeleteSheetFilterViewCondition() {
	r.mockDriveDeleteSheetFilterViewCondition = nil
}

// DeleteSheetFilterViewConditionReq ...
type DeleteSheetFilterViewConditionReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      string `path:"condition_id" json:"-"`      // 筛选范围内的某列字母号, 示例值："E"
}

// deleteSheetFilterViewConditionResp ...
type deleteSheetFilterViewConditionResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFilterViewConditionResp `json:"data,omitempty"`
}

// DeleteSheetFilterViewConditionResp ...
type DeleteSheetFilterViewConditionResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFilterViewCondition 获取筛选视图某列的筛选条件信息。
//
// 筛选条件含义参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/get
func (r *DriveService) GetSheetFilterViewCondition(ctx context.Context, request *GetSheetFilterViewConditionReq, options ...MethodOptionFunc) (*GetSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveGetSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFilterViewCondition",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFilterViewCondition mock DriveGetSheetFilterViewCondition method
func (r *Mock) MockDriveGetSheetFilterViewCondition(f func(ctx context.Context, request *GetSheetFilterViewConditionReq, options ...MethodOptionFunc) (*GetSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveGetSheetFilterViewCondition = f
}

// UnMockDriveGetSheetFilterViewCondition un-mock DriveGetSheetFilterViewCondition method
func (r *Mock) UnMockDriveGetSheetFilterViewCondition() {
	r.mockDriveGetSheetFilterViewCondition = nil
}

// GetSheetFilterViewConditionReq ...
type GetSheetFilterViewConditionReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      string `path:"condition_id" json:"-"`      // 需要查询筛选条件的列字母号, 示例值："E"
}

// getSheetFilterViewConditionResp ...
type getSheetFilterViewConditionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFilterViewConditionResp `json:"data,omitempty"`
}

// GetSheetFilterViewConditionResp ...
type GetSheetFilterViewConditionResp struct {
	Condition *GetSheetFilterViewConditionRespCondition `json:"condition,omitempty"` // 筛选的条件
}

// GetSheetFilterViewConditionRespCondition ...
type GetSheetFilterViewConditionRespCondition struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// QuerySheetFilterViewCondition 查询一个筛选视图的所有筛选条件，返回筛选视图的筛选范围内的筛选条件。
//
// 筛选条件含义可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/query
func (r *DriveService) QuerySheetFilterViewCondition(ctx context.Context, request *QuerySheetFilterViewConditionReq, options ...MethodOptionFunc) (*QuerySheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveQuerySheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#QuerySheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveQuerySheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "QuerySheetFilterViewCondition",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(querySheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveQuerySheetFilterViewCondition mock DriveQuerySheetFilterViewCondition method
func (r *Mock) MockDriveQuerySheetFilterViewCondition(f func(ctx context.Context, request *QuerySheetFilterViewConditionReq, options ...MethodOptionFunc) (*QuerySheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveQuerySheetFilterViewCondition = f
}

// UnMockDriveQuerySheetFilterViewCondition un-mock DriveQuerySheetFilterViewCondition method
func (r *Mock) UnMockDriveQuerySheetFilterViewCondition() {
	r.mockDriveQuerySheetFilterViewCondition = nil
}

// QuerySheetFilterViewConditionReq ...
type QuerySheetFilterViewConditionReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
}

// querySheetFilterViewConditionResp ...
type querySheetFilterViewConditionResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *QuerySheetFilterViewConditionResp `json:"data,omitempty"`
}

// QuerySheetFilterViewConditionResp ...
type QuerySheetFilterViewConditionResp struct {
	Items []*QuerySheetFilterViewConditionRespItem `json:"items,omitempty"` // 筛选视图设置的所有筛选条件
}

// QuerySheetFilterViewConditionRespItem ...
type QuerySheetFilterViewConditionRespItem struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFilterViewCondition 更新筛选视图范围的某列的筛选条件，condition id 即为列的字母号。
//
// 筛选条件参数可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/update
func (r *DriveService) UpdateSheetFilterViewCondition(ctx context.Context, request *UpdateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveUpdateSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFilterViewCondition",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFilterViewCondition mock DriveUpdateSheetFilterViewCondition method
func (r *Mock) MockDriveUpdateSheetFilterViewCondition(f func(ctx context.Context, request *UpdateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveUpdateSheetFilterViewCondition = f
}

// UnMockDriveUpdateSheetFilterViewCondition un-mock DriveUpdateSheetFilterViewCondition method
func (r *Mock) UnMockDriveUpdateSheetFilterViewCondition() {
	r.mockDriveUpdateSheetFilterViewCondition = nil
}

// UpdateSheetFilterViewConditionReq ...
type UpdateSheetFilterViewConditionReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string   `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      string   `path:"condition_id" json:"-"`      // 列字母号, 示例值："E"
	FilterType       *string  `json:"filter_type,omitempty"`      // 筛选类型, 示例值："number"
	CompareType      *string  `json:"compare_type,omitempty"`     // 比较类型, 示例值："less"
	Expected         []string `json:"expected,omitempty"`         // 筛选参数, 示例值：6
}

// updateSheetFilterViewConditionResp ...
type updateSheetFilterViewConditionResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFilterViewConditionResp `json:"data,omitempty"`
}

// UpdateSheetFilterViewConditionResp ...
type UpdateSheetFilterViewConditionResp struct {
	Condition *UpdateSheetFilterViewConditionRespCondition `json:"condition,omitempty"` // 更新后的筛选条件
}

// UpdateSheetFilterViewConditionRespCondition ...
type UpdateSheetFilterViewConditionRespCondition struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFilterView 根据传入的参数创建一个筛选视图。Id 和 名字可选，不填的话会默认生成；range 必填。Id 长度为10，由 0-9、a-z、A-Z 组合生成。名字长度不超过100。单个子表内的筛选视图个数不超过 150。
//
// 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/create
func (r *DriveService) CreateSheetFilterView(ctx context.Context, request *CreateSheetFilterViewReq, options ...MethodOptionFunc) (*CreateSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFilterView mock enable")
		return r.cli.mock.mockDriveCreateSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFilterView",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFilterView mock DriveCreateSheetFilterView method
func (r *Mock) MockDriveCreateSheetFilterView(f func(ctx context.Context, request *CreateSheetFilterViewReq, options ...MethodOptionFunc) (*CreateSheetFilterViewResp, *Response, error)) {
	r.mockDriveCreateSheetFilterView = f
}

// UnMockDriveCreateSheetFilterView un-mock DriveCreateSheetFilterView method
func (r *Mock) UnMockDriveCreateSheetFilterView() {
	r.mockDriveCreateSheetFilterView = nil
}

// CreateSheetFilterViewReq ...
type CreateSheetFilterViewReq struct {
	SpreadSheetToken string  `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string  `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     *string `json:"filter_view_id,omitempty"`   // 筛选视图 id, 示例值："pH9hbVcCXA"
	FilterViewName   *string `json:"filter_view_name,omitempty"` // 筛选视图名字, 示例值："筛选视图 1"
	Range            *string `json:"range,omitempty"`            // 筛选视图的筛选范围, 示例值："0b**12!C1:H14"
}

// createSheetFilterViewResp ...
type createSheetFilterViewResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFilterViewResp `json:"data,omitempty"`
}

// CreateSheetFilterViewResp ...
type CreateSheetFilterViewResp struct {
	FilterView *CreateSheetFilterViewRespFilterView `json:"filter_view,omitempty"` // 创建的筛选视图的 id 、name、range
}

// CreateSheetFilterViewRespFilterView ...
type CreateSheetFilterViewRespFilterView struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFilterView 删除指定 id 对应的筛选视图。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/delete
func (r *DriveService) DeleteSheetFilterView(ctx context.Context, request *DeleteSheetFilterViewReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFilterView mock enable")
		return r.cli.mock.mockDriveDeleteSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFilterView",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFilterView mock DriveDeleteSheetFilterView method
func (r *Mock) MockDriveDeleteSheetFilterView(f func(ctx context.Context, request *DeleteSheetFilterViewReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewResp, *Response, error)) {
	r.mockDriveDeleteSheetFilterView = f
}

// UnMockDriveDeleteSheetFilterView un-mock DriveDeleteSheetFilterView method
func (r *Mock) UnMockDriveDeleteSheetFilterView() {
	r.mockDriveDeleteSheetFilterView = nil
}

// DeleteSheetFilterViewReq ...
type DeleteSheetFilterViewReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
}

// deleteSheetFilterViewResp ...
type deleteSheetFilterViewResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFilterViewResp `json:"data,omitempty"`
}

// DeleteSheetFilterViewResp ...
type DeleteSheetFilterViewResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFilterView 获取指定筛选视图 id 的名字和筛选范围。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/get
func (r *DriveService) GetSheetFilterView(ctx context.Context, request *GetSheetFilterViewReq, options ...MethodOptionFunc) (*GetSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFilterView mock enable")
		return r.cli.mock.mockDriveGetSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFilterView",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFilterView mock DriveGetSheetFilterView method
func (r *Mock) MockDriveGetSheetFilterView(f func(ctx context.Context, request *GetSheetFilterViewReq, options ...MethodOptionFunc) (*GetSheetFilterViewResp, *Response, error)) {
	r.mockDriveGetSheetFilterView = f
}

// UnMockDriveGetSheetFilterView un-mock DriveGetSheetFilterView method
func (r *Mock) UnMockDriveGetSheetFilterView() {
	r.mockDriveGetSheetFilterView = nil
}

// GetSheetFilterViewReq ...
type GetSheetFilterViewReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
}

// getSheetFilterViewResp ...
type getSheetFilterViewResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFilterViewResp `json:"data,omitempty"`
}

// GetSheetFilterViewResp ...
type GetSheetFilterViewResp struct {
	FilterView *GetSheetFilterViewRespFilterView `json:"filter_view,omitempty"` // 筛选视图信息，包括 id、name、range
}

// GetSheetFilterViewRespFilterView ...
type GetSheetFilterViewRespFilterView struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// QuerySheetFilterView 查询子表内所有的筛选视图基本信息，包括 id、name 和 range
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query
func (r *DriveService) QuerySheetFilterView(ctx context.Context, request *QuerySheetFilterViewReq, options ...MethodOptionFunc) (*QuerySheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveQuerySheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#QuerySheetFilterView mock enable")
		return r.cli.mock.mockDriveQuerySheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "QuerySheetFilterView",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(querySheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveQuerySheetFilterView mock DriveQuerySheetFilterView method
func (r *Mock) MockDriveQuerySheetFilterView(f func(ctx context.Context, request *QuerySheetFilterViewReq, options ...MethodOptionFunc) (*QuerySheetFilterViewResp, *Response, error)) {
	r.mockDriveQuerySheetFilterView = f
}

// UnMockDriveQuerySheetFilterView un-mock DriveQuerySheetFilterView method
func (r *Mock) UnMockDriveQuerySheetFilterView() {
	r.mockDriveQuerySheetFilterView = nil
}

// QuerySheetFilterViewReq ...
type QuerySheetFilterViewReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
}

// querySheetFilterViewResp ...
type querySheetFilterViewResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *QuerySheetFilterViewResp `json:"data,omitempty"`
}

// QuerySheetFilterViewResp ...
type QuerySheetFilterViewResp struct {
	Items []*QuerySheetFilterViewRespItem `json:"items,omitempty"` // 子表的所有筛选视图信息，id、name、range
}

// QuerySheetFilterViewRespItem ...
type QuerySheetFilterViewRespItem struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFilterView 更新筛选视图的名字或者筛选范围。名字长度不超过100，不能重复即子表内唯一；筛选范围不超过子表的最大范围。
//
// 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/patch
func (r *DriveService) UpdateSheetFilterView(ctx context.Context, request *UpdateSheetFilterViewReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFilterView mock enable")
		return r.cli.mock.mockDriveUpdateSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFilterView",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFilterView mock DriveUpdateSheetFilterView method
func (r *Mock) MockDriveUpdateSheetFilterView(f func(ctx context.Context, request *UpdateSheetFilterViewReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewResp, *Response, error)) {
	r.mockDriveUpdateSheetFilterView = f
}

// UnMockDriveUpdateSheetFilterView un-mock DriveUpdateSheetFilterView method
func (r *Mock) UnMockDriveUpdateSheetFilterView() {
	r.mockDriveUpdateSheetFilterView = nil
}

// UpdateSheetFilterViewReq ...
type UpdateSheetFilterViewReq struct {
	SpreadSheetToken string  `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string  `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string  `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	FilterViewName   *string `json:"filter_view_name,omitempty"` // 筛选视图名字, 示例值："筛选视图 1"
	Range            *string `json:"range,omitempty"`            // 筛选视图的筛选范围, 示例值："0b**12!C1:H14"
}

// updateSheetFilterViewResp ...
type updateSheetFilterViewResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFilterViewResp `json:"data,omitempty"`
}

// UpdateSheetFilterViewResp ...
type UpdateSheetFilterViewResp struct {
	FilterView *UpdateSheetFilterViewRespFilterView `json:"filter_view,omitempty"` // 更新后的筛选视图的 id 、name、range
}

// UpdateSheetFilterViewRespFilterView ...
type UpdateSheetFilterViewRespFilterView struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// FindSheet 按照指定的条件查找子表的某个范围内的数据符合条件的单元格位置。请求体中的 range 和 find 字段为必填。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/find
func (r *DriveService) FindSheet(ctx context.Context, request *FindSheetReq, options ...MethodOptionFunc) (*FindSheetResp, *Response, error) {
	if r.cli.mock.mockDriveFindSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#FindSheet mock enable")
		return r.cli.mock.mockDriveFindSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "FindSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/find",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(findSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveFindSheet mock DriveFindSheet method
func (r *Mock) MockDriveFindSheet(f func(ctx context.Context, request *FindSheetReq, options ...MethodOptionFunc) (*FindSheetResp, *Response, error)) {
	r.mockDriveFindSheet = f
}

// UnMockDriveFindSheet un-mock DriveFindSheet method
func (r *Mock) UnMockDriveFindSheet() {
	r.mockDriveFindSheet = nil
}

// FindSheetReq ...
type FindSheetReq struct {
	SpreadSheetToken string                     `path:"spreadsheet_token" json:"-"` // 表格的 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string                     `path:"sheet_id" json:"-"`          // 子表的 id, 示例值："0b**12"
	FindCondition    *FindSheetReqFindCondition `json:"find_condition,omitempty"`   // 查找条件
	Find             string                     `json:"find,omitempty"`             // 查找的字符串, 示例值："hello"
}

// FindSheetReqFindCondition ...
type FindSheetReqFindCondition struct {
	Range           string `json:"range,omitempty"`             // 查找范围, 示例值："0b**12!A1:H10"
	MatchCase       *bool  `json:"match_case,omitempty"`        // 是否忽略大小写, 示例值：true
	MatchEntireCell *bool  `json:"match_entire_cell,omitempty"` // 是否匹配整个单元格, 示例值：false
	SearchByRegex   *bool  `json:"search_by_regex,omitempty"`   // 是否为正则匹配, 示例值：false
	IncludeFormulas *bool  `json:"include_formulas,omitempty"`  // 是否搜索公式内容, 示例值：false
}

// findSheetResp ...
type findSheetResp struct {
	Code int64          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string         `json:"msg,omitempty"`  // 错误描述
	Data *FindSheetResp `json:"data,omitempty"`
}

// FindSheetResp ...
type FindSheetResp struct {
	FindResult *FindSheetRespFindResult `json:"find_result,omitempty"` // 查找返回符合条件的信息
}

// FindSheetRespFindResult ...
type FindSheetRespFindResult struct {
	MatchedCells        []string `json:"matched_cells,omitempty"`         // 符合查找条件的单元格数组，不包含公式，例如["A1", "A2"...]
	MatchedFormulaCells []string `json:"matched_formula_cells,omitempty"` // 符合查找条件的含有公式的单元格数组，例如["B3", "H7"...]
	RowsCount           int64    `json:"rows_count,omitempty"`            // 符合查找条件的总行数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFloatImage 根据传入的参数创建一张浮动图片。Float_image_token （[上传图片至表格后得到](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all)）和range（只支持一个单元格） 必填。Float_image_id 可选，不填的话会默认生成，长度为10，由 0-9、a-z、A-Z 组合生成。表格内不重复的图片（浮动图片+单元格图片）总数不超过4000。width 和 height 为图片展示的宽高，可选，不填的话会使用图片的真实宽高。offset_x 和 offset_y 为图片左上角距离所在单元格左上角的偏移，可选，默认为 0。
//
// 浮动图片的设置参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/create
func (r *DriveService) CreateSheetFloatImage(ctx context.Context, request *CreateSheetFloatImageReq, options ...MethodOptionFunc) (*CreateSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFloatImage mock enable")
		return r.cli.mock.mockDriveCreateSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFloatImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFloatImage mock DriveCreateSheetFloatImage method
func (r *Mock) MockDriveCreateSheetFloatImage(f func(ctx context.Context, request *CreateSheetFloatImageReq, options ...MethodOptionFunc) (*CreateSheetFloatImageResp, *Response, error)) {
	r.mockDriveCreateSheetFloatImage = f
}

// UnMockDriveCreateSheetFloatImage un-mock DriveCreateSheetFloatImage method
func (r *Mock) UnMockDriveCreateSheetFloatImage() {
	r.mockDriveCreateSheetFloatImage = nil
}

// CreateSheetFloatImageReq ...
type CreateSheetFloatImageReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"`  // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`           // 子表 id, 示例值："0b**12"
	FloatImageID     *string  `json:"float_image_id,omitempty"`    // 浮动图片 id, 示例值："ye06SS14ph"
	FloatImageToken  *string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作, 示例值："boxbcbQsaSqIXsxxxxx1HCPJFbh"
	Range            *string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格, 示例值："0b**12!A1:A1"
	Width            *float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px, 示例值：100
	Height           *float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px, 示例值：100
	OffsetX          *float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度, 示例值：0
	OffsetY          *float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度, 示例值：0
}

// createSheetFloatImageResp ...
type createSheetFloatImageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFloatImageResp `json:"data,omitempty"`
}

// CreateSheetFloatImageResp ...
type CreateSheetFloatImageResp struct {
	FloatImage *CreateSheetFloatImageRespFloatImage `json:"float_image,omitempty"` // 浮动图片返回值
}

// CreateSheetFloatImageRespFloatImage ...
type CreateSheetFloatImageRespFloatImage struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFloatImage 删除 float_image_id 对应的浮动图片。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/delete
func (r *DriveService) DeleteSheetFloatImage(ctx context.Context, request *DeleteSheetFloatImageReq, options ...MethodOptionFunc) (*DeleteSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFloatImage mock enable")
		return r.cli.mock.mockDriveDeleteSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFloatImage",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFloatImage mock DriveDeleteSheetFloatImage method
func (r *Mock) MockDriveDeleteSheetFloatImage(f func(ctx context.Context, request *DeleteSheetFloatImageReq, options ...MethodOptionFunc) (*DeleteSheetFloatImageResp, *Response, error)) {
	r.mockDriveDeleteSheetFloatImage = f
}

// UnMockDriveDeleteSheetFloatImage un-mock DriveDeleteSheetFloatImage method
func (r *Mock) UnMockDriveDeleteSheetFloatImage() {
	r.mockDriveDeleteSheetFloatImage = nil
}

// DeleteSheetFloatImageReq ...
type DeleteSheetFloatImageReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FloatImageID     string `path:"float_image_id" json:"-"`    // 浮动图片 id, 示例值："ye06SS14ph"
}

// deleteSheetFloatImageResp ...
type deleteSheetFloatImageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFloatImageResp `json:"data,omitempty"`
}

// DeleteSheetFloatImageResp ...
type DeleteSheetFloatImageResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFloatImage 根据 float_image_id 获取对应浮动图片的信息。
//
// 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/get
func (r *DriveService) GetSheetFloatImage(ctx context.Context, request *GetSheetFloatImageReq, options ...MethodOptionFunc) (*GetSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFloatImage mock enable")
		return r.cli.mock.mockDriveGetSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFloatImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFloatImage mock DriveGetSheetFloatImage method
func (r *Mock) MockDriveGetSheetFloatImage(f func(ctx context.Context, request *GetSheetFloatImageReq, options ...MethodOptionFunc) (*GetSheetFloatImageResp, *Response, error)) {
	r.mockDriveGetSheetFloatImage = f
}

// UnMockDriveGetSheetFloatImage un-mock DriveGetSheetFloatImage method
func (r *Mock) UnMockDriveGetSheetFloatImage() {
	r.mockDriveGetSheetFloatImage = nil
}

// GetSheetFloatImageReq ...
type GetSheetFloatImageReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FloatImageID     string `path:"float_image_id" json:"-"`    // 浮动图片 id, 示例值："ye06SS14ph"
}

// getSheetFloatImageResp ...
type getSheetFloatImageResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFloatImageResp `json:"data,omitempty"`
}

// GetSheetFloatImageResp ...
type GetSheetFloatImageResp struct {
	FloatImage *GetSheetFloatImageRespFloatImage `json:"float_image,omitempty"` // 浮动图片信息
}

// GetSheetFloatImageRespFloatImage ...
type GetSheetFloatImageRespFloatImage struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// QuerySheetFloatImage 返回子表内所有的浮动图片信息。
//
// 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/query
func (r *DriveService) QuerySheetFloatImage(ctx context.Context, request *QuerySheetFloatImageReq, options ...MethodOptionFunc) (*QuerySheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveQuerySheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#QuerySheetFloatImage mock enable")
		return r.cli.mock.mockDriveQuerySheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "QuerySheetFloatImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(querySheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveQuerySheetFloatImage mock DriveQuerySheetFloatImage method
func (r *Mock) MockDriveQuerySheetFloatImage(f func(ctx context.Context, request *QuerySheetFloatImageReq, options ...MethodOptionFunc) (*QuerySheetFloatImageResp, *Response, error)) {
	r.mockDriveQuerySheetFloatImage = f
}

// UnMockDriveQuerySheetFloatImage un-mock DriveQuerySheetFloatImage method
func (r *Mock) UnMockDriveQuerySheetFloatImage() {
	r.mockDriveQuerySheetFloatImage = nil
}

// QuerySheetFloatImageReq ...
type QuerySheetFloatImageReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
}

// querySheetFloatImageResp ...
type querySheetFloatImageResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *QuerySheetFloatImageResp `json:"data,omitempty"`
}

// QuerySheetFloatImageResp ...
type QuerySheetFloatImageResp struct {
	Items []*QuerySheetFloatImageRespItem `json:"items,omitempty"` // 子表的所有浮动图片信息
}

// QuerySheetFloatImageRespItem ...
type QuerySheetFloatImageRespItem struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFloatImage 更新已有的浮动图片位置和宽高，包括 range、width、height、offset_x 和 offset_y，不包括 float_image_id 和 float_image_token。
//
// 浮动图片更新参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/patch
func (r *DriveService) UpdateSheetFloatImage(ctx context.Context, request *UpdateSheetFloatImageReq, options ...MethodOptionFunc) (*UpdateSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFloatImage mock enable")
		return r.cli.mock.mockDriveUpdateSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFloatImage",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFloatImage mock DriveUpdateSheetFloatImage method
func (r *Mock) MockDriveUpdateSheetFloatImage(f func(ctx context.Context, request *UpdateSheetFloatImageReq, options ...MethodOptionFunc) (*UpdateSheetFloatImageResp, *Response, error)) {
	r.mockDriveUpdateSheetFloatImage = f
}

// UnMockDriveUpdateSheetFloatImage un-mock DriveUpdateSheetFloatImage method
func (r *Mock) UnMockDriveUpdateSheetFloatImage() {
	r.mockDriveUpdateSheetFloatImage = nil
}

// UpdateSheetFloatImageReq ...
type UpdateSheetFloatImageReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"`  // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`           // 子表 id, 示例值："0b**12"
	FloatImageID     string   `path:"float_image_id" json:"-"`     // 浮动图片 id, 示例值："ye06SS14ph"
	FloatImageToken  *string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作, 示例值："boxbcbQsaSqIXsxxxxx1HCPJFbh"
	Range            *string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格, 示例值："0b**12!A1:A1"
	Width            *float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px, 示例值：100
	Height           *float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px, 示例值：100
	OffsetX          *float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度, 示例值：0
	OffsetY          *float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度, 示例值：0
}

// updateSheetFloatImageResp ...
type updateSheetFloatImageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFloatImageResp `json:"data,omitempty"`
}

// UpdateSheetFloatImageResp ...
type UpdateSheetFloatImageResp struct {
	FloatImage *UpdateSheetFloatImageRespFloatImage `json:"float_image,omitempty"` // 浮动图片信息
}

// UpdateSheetFloatImageRespFloatImage ...
type UpdateSheetFloatImageRespFloatImage struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetSheetValueImage
//
// 该接口用于根据 spreadsheetToken 和 range 向单个格子写入图片。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDNxYjL1QTM24SN0EjN
func (r *DriveService) SetSheetValueImage(ctx context.Context, request *SetSheetValueImageReq, options ...MethodOptionFunc) (*SetSheetValueImageResp, *Response, error) {
	if r.cli.mock.mockDriveSetSheetValueImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SetSheetValueImage mock enable")
		return r.cli.mock.mockDriveSetSheetValueImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "SetSheetValueImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_image",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setSheetValueImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSetSheetValueImage mock DriveSetSheetValueImage method
func (r *Mock) MockDriveSetSheetValueImage(f func(ctx context.Context, request *SetSheetValueImageReq, options ...MethodOptionFunc) (*SetSheetValueImageResp, *Response, error)) {
	r.mockDriveSetSheetValueImage = f
}

// UnMockDriveSetSheetValueImage un-mock DriveSetSheetValueImage method
func (r *Mock) UnMockDriveSetSheetValueImage() {
	r.mockDriveSetSheetValueImage = nil
}

// SetSheetValueImageReq ...
type SetSheetValueImageReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet的token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range            string `json:"range,omitempty"`           // 查询范围  range=<sheetId>!<开始格子>:<结束格子> 如：xxxx!A1:D5，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。此处限定为一个格子，如: xxxx!A1:A1
	Image            []byte `json:"image,omitempty"`           // 需要写入的图片二进制流，支持  "PNG", "JPEG", "JPG", "GIF", "BMP", "JFIF", "EXIF", "TIFF", "BPG", "WEBP", "HEIC" 等图片格式
	Name             string `json:"name,omitempty"`            // 写入的图片名字
}

// setSheetValueImageResp ...
type setSheetValueImageResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *SetSheetValueImageResp `json:"data,omitempty"`
}

// SetSheetValueImageResp ...
type SetSheetValueImageResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	Revision         int64  `json:"revision,omitempty"`         // spreadsheet 的版本号
	UpdateRange      string `json:"updateRange,omitempty"`      // 写入图片的range
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ImportSheet
//
// >  为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)
// 该接口用于将本地表格导入到云空间上。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATO2YjLwkjN24CM5YjN
//
// Deprecated
func (r *DriveService) ImportSheet(ctx context.Context, request *ImportSheetReq, options ...MethodOptionFunc) (*ImportSheetResp, *Response, error) {
	if r.cli.mock.mockDriveImportSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#ImportSheet mock enable")
		return r.cli.mock.mockDriveImportSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "ImportSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/import",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(importSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveImportSheet mock DriveImportSheet method
func (r *Mock) MockDriveImportSheet(f func(ctx context.Context, request *ImportSheetReq, options ...MethodOptionFunc) (*ImportSheetResp, *Response, error)) {
	r.mockDriveImportSheet = f
}

// UnMockDriveImportSheet un-mock DriveImportSheet method
func (r *Mock) UnMockDriveImportSheet() {
	r.mockDriveImportSheet = nil
}

// ImportSheetReq ...
type ImportSheetReq struct {
	File        []byte  `json:"file,omitempty"`        // 需要导入的文件数据，转换成字节数组的形式，支持"xlsx","csv"格式，最大不超过20M
	Name        string  `json:"name,omitempty"`        // 文件名，带上文件拓展名，如"hello.csv"、"hello.xlsx"。导入后sheet的标题将去除文件拓展名，如"hello.xlsx"导入后标题为"hello"。
	FolderToken *string `json:"folderToken,omitempty"` // 导入的文件夹token，默认导入到根目录下
}

// importSheetResp ...
type importSheetResp struct {
	Code int64            `json:"code,omitempty"`
	Msg  string           `json:"msg,omitempty"`
	Data *ImportSheetResp `json:"data,omitempty"`
}

// ImportSheetResp ...
type ImportSheetResp struct {
	Ticket string `json:"ticket,omitempty"` // 与导入文件一一对应的凭证，用于查询文件导入的进度，详见[查询导入结果的接口](https://open.feishu.cn/document/ukTMukTMukTM/uETO2YjLxkjN24SM5YjN)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetMeta
//
// 该接口用于根据 spreadsheetToken 获取表格元数据。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN
func (r *DriveService) GetSheetMeta(ctx context.Context, request *GetSheetMetaReq, options ...MethodOptionFunc) (*GetSheetMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetMeta mock enable")
		return r.cli.mock.mockDriveGetSheetMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/metainfo",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetMeta mock DriveGetSheetMeta method
func (r *Mock) MockDriveGetSheetMeta(f func(ctx context.Context, request *GetSheetMetaReq, options ...MethodOptionFunc) (*GetSheetMetaResp, *Response, error)) {
	r.mockDriveGetSheetMeta = f
}

// UnMockDriveGetSheetMeta un-mock DriveGetSheetMeta method
func (r *Mock) UnMockDriveGetSheetMeta() {
	r.mockDriveGetSheetMeta = nil
}

// GetSheetMetaReq ...
type GetSheetMetaReq struct {
	ExtFields        *string `query:"extFields" json:"-"`       // 额外返回的字段，extFields=protectedRange时返回保护行列信息
	UserIDType       *IDType `query:"user_id_type" json:"-"`    // 返回的用户id类型，可选open_id,union_id
	SpreadSheetToken string  `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token；获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetMetaResp ...
type getSheetMetaResp struct {
	Code int64             `json:"code,omitempty"`
	Msg  string            `json:"msg,omitempty"`
	Data *GetSheetMetaResp `json:"data,omitempty"`
}

// GetSheetMetaResp ...
type GetSheetMetaResp struct {
	SpreadSheetToken string                      `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	Properties       *GetSheetMetaRespProperties `json:"properties,omitempty"`       // spreadsheet 的属性
	Sheets           []*GetSheetMetaRespSheet    `json:"sheets,omitempty"`           // spreadsheet 下的sheet列表
}

// GetSheetMetaRespProperties ...
type GetSheetMetaRespProperties struct {
	Title       string `json:"title,omitempty"`       // spreadsheet 的标题
	OwnerUser   int64  `json:"ownerUser,omitempty"`   // 所有者的 id
	OwnerUserID string `json:"ownerUserID,omitempty"` // 所有者的 id，取决于user_id_type的值，仅user_id_type不为空是返回该值
	SheetCount  int64  `json:"sheetCount,omitempty"`  // spreadsheet 下的 sheet 数
	Revision    int64  `json:"revision,omitempty"`    // 该 sheet 的版本
}

// GetSheetMetaRespSheet ...
type GetSheetMetaRespSheet struct {
	SheetID        string                               `json:"sheetId,omitempty"`        // sheet 的 id
	Title          string                               `json:"title,omitempty"`          // sheet 的标题
	Index          int64                                `json:"index,omitempty"`          // sheet 的位置
	RowCount       int64                                `json:"rowCount,omitempty"`       // sheet 的最大行数
	ColumnCount    int64                                `json:"columnCount,omitempty"`    // sheet 的最大列数
	FrozenRowCount int64                                `json:"frozenRowCount,omitempty"` // 该 sheet 的冻结行数，小于等于 sheet 的最大行数，0表示未设置冻结
	FrozenColCount int64                                `json:"frozenColCount,omitempty"` // 该 sheet 的冻结列数，小于等于 sheet 的最大列数，0表示未设置冻结
	Merges         []*GetSheetMetaRespSheetMerge        `json:"merges,omitempty"`         // 该 sheet 中合并单元格的范围
	ProtectedRange *GetSheetMetaRespSheetProtectedRange `json:"protectedRange,omitempty"` // 该 sheet 中保护范围
	BlockInfo      *GetSheetMetaRespSheetBlockInfo      `json:"blockInfo,omitempty"`      // 若含有该字段，则此工作表不为表格
}

// GetSheetMetaRespSheetMerge ...
type GetSheetMetaRespSheetMerge struct {
	StartRowIndex    int64 `json:"startRowIndex,omitempty"`    // 合并单元格范围的开始行下标，index 从 0 开始
	StartColumnIndex int64 `json:"startColumnIndex,omitempty"` // 合并单元格范围的开始列下标，index 从 0 开始
	RowCount         int64 `json:"rowCount,omitempty"`         // 合并单元格范围的行数量
	ColumnCount      int64 `json:"columnCount,omitempty"`      // 合并单元格范围的列数量
}

// GetSheetMetaRespSheetProtectedRange ...
type GetSheetMetaRespSheetProtectedRange struct {
	Dimension *GetSheetMetaRespSheetProtectedRangeDimension `json:"dimension,omitempty"` // 保护行列的信息，如果为保护工作表，则该字段为空
	ProtectID string                                        `json:"protectId,omitempty"` // 保护范围ID
	LockInfo  string                                        `json:"lockInfo,omitempty"`  // 保护说明
	SheetID   string                                        `json:"sheetId,omitempty"`   // 保护工作表 ID
}

// GetSheetMetaRespSheetProtectedRangeDimension ...
type GetSheetMetaRespSheetProtectedRangeDimension struct {
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列的起始位置，位置从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列的结束位置，位置从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 若为ROWS，则为保护行；为COLUMNS，则为保护列
	SheetID        string `json:"sheetId,omitempty"`        // 保护范围所在工作表 ID
}

// GetSheetMetaRespSheetBlockInfo ...
type GetSheetMetaRespSheetBlockInfo struct {
	BlockToken string `json:"blockToken,omitempty"` // block的token
	BlockType  string `json:"blockType,omitempty"`  // block的类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetProperty
//
// 该接口用于根据 spreadsheetToken 更新表格属性，如更新表格标题。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucTMzUjL3EzM14yNxMTN
func (r *DriveService) UpdateSheetProperty(ctx context.Context, request *UpdateSheetPropertyReq, options ...MethodOptionFunc) (*UpdateSheetPropertyResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetProperty != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetProperty mock enable")
		return r.cli.mock.mockDriveUpdateSheetProperty(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetProperty",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/properties",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetPropertyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetProperty mock DriveUpdateSheetProperty method
func (r *Mock) MockDriveUpdateSheetProperty(f func(ctx context.Context, request *UpdateSheetPropertyReq, options ...MethodOptionFunc) (*UpdateSheetPropertyResp, *Response, error)) {
	r.mockDriveUpdateSheetProperty = f
}

// UnMockDriveUpdateSheetProperty un-mock DriveUpdateSheetProperty method
func (r *Mock) UnMockDriveUpdateSheetProperty() {
	r.mockDriveUpdateSheetProperty = nil
}

// UpdateSheetPropertyReq ...
type UpdateSheetPropertyReq struct {
	SpreadSheetToken string                            `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Properties       *UpdateSheetPropertyReqProperties `json:"properties,omitempty"`      // spreadsheet 的属性
}

// UpdateSheetPropertyReqProperties ...
type UpdateSheetPropertyReqProperties struct {
	Title string `json:"title,omitempty"` // spreadsheet 的标题，最大长度100个字符
}

// updateSheetPropertyResp ...
type updateSheetPropertyResp struct {
	Code int64                    `json:"code,omitempty"`
	Msg  string                   `json:"msg,omitempty"`
	Data *UpdateSheetPropertyResp `json:"data,omitempty"`
}

// UpdateSheetPropertyResp ...
type UpdateSheetPropertyResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	Title            string `json:"title,omitempty"`            // spreadsheet 的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetProtectedDimension
//
// 该接口用于根据 spreadsheetToken 和维度信息增加多个保护范围；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDNzUjL4QzM14CO0MTN
func (r *DriveService) CreateSheetProtectedDimension(ctx context.Context, request *CreateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*CreateSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveCreateSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetProtectedDimension",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_dimension",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetProtectedDimension mock DriveCreateSheetProtectedDimension method
func (r *Mock) MockDriveCreateSheetProtectedDimension(f func(ctx context.Context, request *CreateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*CreateSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveCreateSheetProtectedDimension = f
}

// UnMockDriveCreateSheetProtectedDimension un-mock DriveCreateSheetProtectedDimension method
func (r *Mock) UnMockDriveCreateSheetProtectedDimension() {
	r.mockDriveCreateSheetProtectedDimension = nil
}

// CreateSheetProtectedDimensionReq ...
type CreateSheetProtectedDimensionReq struct {
	UserIDType            *IDType                                                  `query:"user_id_type" json:"-"`          // 请求的用户id类型，可选open_id,union_id
	SpreadSheetToken      string                                                   `path:"spreadsheetToken" json:"-"`       // spreadsheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	AddProtectedDimension []*CreateSheetProtectedDimensionReqAddProtectedDimension `json:"addProtectedDimension,omitempty"` // 需要增加保护范围的维度信息，可多个范围
}

// CreateSheetProtectedDimensionReqAddProtectedDimension ...
type CreateSheetProtectedDimensionReqAddProtectedDimension struct {
	Dimension *CreateSheetProtectedDimensionReqAddProtectedDimensionDimension `json:"dimension,omitempty"` // 需要保护行列的维度信息
	Editors   []int64                                                         `json:"editors,omitempty"`   // 允许编辑保护范围的用户的 userID
	Users     []string                                                        `json:"users,omitempty"`     // 允许编辑保护范围的用户的id，id类型取决于user_id_type
	LockInfo  *string                                                         `json:"lockInfo,omitempty"`  // 保护范围的信息
}

// CreateSheetProtectedDimensionReqAddProtectedDimensionDimension ...
type CreateSheetProtectedDimensionReqAddProtectedDimensionDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// createSheetProtectedDimensionResp ...
type createSheetProtectedDimensionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *CreateSheetProtectedDimensionResp `json:"data,omitempty"`
}

// CreateSheetProtectedDimensionResp ...
type CreateSheetProtectedDimensionResp struct {
	AddProtectedDimension []*CreateSheetProtectedDimensionRespAddProtectedDimension `json:"addProtectedDimension,omitempty"` // 需要增加保护范围的维度信息，可多个范围
}

// CreateSheetProtectedDimensionRespAddProtectedDimension ...
type CreateSheetProtectedDimensionRespAddProtectedDimension struct {
	Dimension *CreateSheetProtectedDimensionRespAddProtectedDimensionDimension `json:"dimension,omitempty"` // 需要保护行列的维度信息
	Editors   []int64                                                          `json:"editors,omitempty"`   // 允许编辑保护范围的用户的 userID
	Users     []string                                                         `json:"users,omitempty"`     // 允许编辑保护范围的用户的id，id类型取决于user_id_type
	LockInfo  string                                                           `json:"lockInfo,omitempty"`  // 保护范围的信息
	ProtectID string                                                           `json:"protectId,omitempty"` // 保护区域的唯一 uid ，可用做后续解除保护
}

// CreateSheetProtectedDimensionRespAddProtectedDimensionDimension ...
type CreateSheetProtectedDimensionRespAddProtectedDimensionDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheetId
	MajorDimension string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64  `json:"startIndex"`               // 开始的位置
	EndIndex       int64  `json:"endIndex,omitempty"`       // 结束的位置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetProtectedDimension
//
// 该接口用于根据保护范围ID删除保护范围，最多支持同时删除10个ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTM5YjL2ETO24iNxkjN
func (r *DriveService) DeleteSheetProtectedDimension(ctx context.Context, request *DeleteSheetProtectedDimensionReq, options ...MethodOptionFunc) (*DeleteSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveDeleteSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetProtectedDimension",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_del",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetProtectedDimension mock DriveDeleteSheetProtectedDimension method
func (r *Mock) MockDriveDeleteSheetProtectedDimension(f func(ctx context.Context, request *DeleteSheetProtectedDimensionReq, options ...MethodOptionFunc) (*DeleteSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveDeleteSheetProtectedDimension = f
}

// UnMockDriveDeleteSheetProtectedDimension un-mock DriveDeleteSheetProtectedDimension method
func (r *Mock) UnMockDriveDeleteSheetProtectedDimension() {
	r.mockDriveDeleteSheetProtectedDimension = nil
}

// DeleteSheetProtectedDimensionReq ...
type DeleteSheetProtectedDimensionReq struct {
	SpreadSheetToken string   `path:"spreadsheetToken" json:"-"` // sheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ProtectIDs       []string `json:"protectIds,omitempty"`      // 需要删除的保护范围ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN)接口获取
}

// deleteSheetProtectedDimensionResp ...
type deleteSheetProtectedDimensionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *DeleteSheetProtectedDimensionResp `json:"data,omitempty"`
}

// DeleteSheetProtectedDimensionResp ...
type DeleteSheetProtectedDimensionResp struct {
	DelProtectIDs []string `json:"delProtectIds,omitempty"` // 成功删除的保护范围ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetProtectedDimension
//
// 该接口用于根据保护范围ID查询详细的保护行列信息，最多支持同时查询5个ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTM5YjL0ETO24CNxkjN
func (r *DriveService) GetSheetProtectedDimension(ctx context.Context, request *GetSheetProtectedDimensionReq, options ...MethodOptionFunc) (*GetSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveGetSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetProtectedDimension",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetProtectedDimension mock DriveGetSheetProtectedDimension method
func (r *Mock) MockDriveGetSheetProtectedDimension(f func(ctx context.Context, request *GetSheetProtectedDimensionReq, options ...MethodOptionFunc) (*GetSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveGetSheetProtectedDimension = f
}

// UnMockDriveGetSheetProtectedDimension un-mock DriveGetSheetProtectedDimension method
func (r *Mock) UnMockDriveGetSheetProtectedDimension() {
	r.mockDriveGetSheetProtectedDimension = nil
}

// GetSheetProtectedDimensionReq ...
type GetSheetProtectedDimensionReq struct {
	ProtectIDs       []string `query:"protectIds" join_sep:"," json:"-"` // 保护范围ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN)接口获取，多个ID用逗号分隔，如xxxID1,xxxID2
	MemberType       *string  `query:"memberType" json:"-"`              // 返回的用户类型，可选userId,openId,unionId,默认使用userId
	SpreadSheetToken string   `path:"spreadsheetToken" json:"-"`         // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetProtectedDimensionResp ...
type getSheetProtectedDimensionResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *GetSheetProtectedDimensionResp `json:"data,omitempty"`
}

// GetSheetProtectedDimensionResp ...
type GetSheetProtectedDimensionResp struct {
	ProtectedRange *GetSheetProtectedDimensionRespProtectedRange `json:"protectedRange,omitempty"` // 保护范围
}

// GetSheetProtectedDimensionRespProtectedRange ...
type GetSheetProtectedDimensionRespProtectedRange struct {
	ProtectID string                                                 `json:"protectId,omitempty"` // 保护范围ID
	Dimension *GetSheetProtectedDimensionRespProtectedRangeDimension `json:"dimension,omitempty"` // 保护范围，如果为空，则为保护子表
	SheetID   string                                                 `json:"sheetId,omitempty"`   // sheet的id
	LockInfo  string                                                 `json:"lockInfo,omitempty"`  // 保护说明
	Editors   *GetSheetProtectedDimensionRespProtectedRangeEditors   `json:"editors,omitempty"`   // 用户信息
}

// GetSheetProtectedDimensionRespProtectedRangeDimension ...
type GetSheetProtectedDimensionRespProtectedRangeDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheet 的 id
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列起始下标，下标从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列终止下标，下标从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 保护范围的维度，COLUMNS为保护列，ROWS为保护行
}

// GetSheetProtectedDimensionRespProtectedRangeEditors ...
type GetSheetProtectedDimensionRespProtectedRangeEditors struct {
	Users []*GetSheetProtectedDimensionRespProtectedRangeEditorsUser `json:"users,omitempty"` // 用户信息列表
}

// GetSheetProtectedDimensionRespProtectedRangeEditorsUser ...
type GetSheetProtectedDimensionRespProtectedRangeEditorsUser struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型
	MemberID   string `json:"memberId,omitempty"`   // 用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetProtectedDimension
//
// 该接口用于根据保护范围ID修改保护范围，单次最多支持同时修改10个ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTM5YjL1ETO24SNxkjN
func (r *DriveService) UpdateSheetProtectedDimension(ctx context.Context, request *UpdateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*UpdateSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveUpdateSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetProtectedDimension",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetProtectedDimension mock DriveUpdateSheetProtectedDimension method
func (r *Mock) MockDriveUpdateSheetProtectedDimension(f func(ctx context.Context, request *UpdateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*UpdateSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveUpdateSheetProtectedDimension = f
}

// UnMockDriveUpdateSheetProtectedDimension un-mock DriveUpdateSheetProtectedDimension method
func (r *Mock) UnMockDriveUpdateSheetProtectedDimension() {
	r.mockDriveUpdateSheetProtectedDimension = nil
}

// UpdateSheetProtectedDimensionReq ...
type UpdateSheetProtectedDimensionReq struct {
	SpreadSheetToken string                                    `path:"spreadsheetToken" json:"-"` // sheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Requests         *UpdateSheetProtectedDimensionReqRequests `json:"requests,omitempty"`        // 请求
}

// UpdateSheetProtectedDimensionReqRequests ...
type UpdateSheetProtectedDimensionReqRequests struct {
	ProtectID string                                             `json:"protectId,omitempty"` // 保护范围ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN) 接口获取
	Dimension *UpdateSheetProtectedDimensionReqRequestsDimension `json:"dimension,omitempty"` // 行列保护信息
	Editors   *UpdateSheetProtectedDimensionReqRequestsEditors   `json:"editors,omitempty"`   // 可编辑保护范围的用户
	LockInfo  *string                                            `json:"lockInfo,omitempty"`  // 保护说明
}

// UpdateSheetProtectedDimensionReqRequestsDimension ...
type UpdateSheetProtectedDimensionReqRequestsDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheetId
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列起始下标，下标从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列终止下标，下标从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 保护范围ID对应的保护范围的维度，COLUMNS为保护列，ROWS为保护行
}

// UpdateSheetProtectedDimensionReqRequestsEditors ...
type UpdateSheetProtectedDimensionReqRequestsEditors struct {
	AddEditors *UpdateSheetProtectedDimensionReqRequestsEditorsAddEditors `json:"addEditors,omitempty"` // 需要增加的用户的列表，用户需要有文档的编辑权限
	DelEditors *UpdateSheetProtectedDimensionReqRequestsEditorsDelEditors `json:"delEditors,omitempty"` // 需要删除的用户的列表
}

// UpdateSheetProtectedDimensionReqRequestsEditorsAddEditors ...
type UpdateSheetProtectedDimensionReqRequestsEditorsAddEditors struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型，支持userId,openId,unionId
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// UpdateSheetProtectedDimensionReqRequestsEditorsDelEditors ...
type UpdateSheetProtectedDimensionReqRequestsEditorsDelEditors struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型，支持userId,openId,unionId
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// updateSheetProtectedDimensionResp ...
type updateSheetProtectedDimensionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *UpdateSheetProtectedDimensionResp `json:"data,omitempty"`
}

// UpdateSheetProtectedDimensionResp ...
type UpdateSheetProtectedDimensionResp struct {
	Replies []*UpdateSheetProtectedDimensionRespReply `json:"replies,omitempty"` // 响应
}

// UpdateSheetProtectedDimensionRespReply ...
type UpdateSheetProtectedDimensionRespReply struct {
	SheetID   string                                           `json:"sheetId,omitempty"`   // sheet的id
	Dimension *UpdateSheetProtectedDimensionRespReplyDimension `json:"dimension,omitempty"` // 成功修改的保护行列信息
	Editors   *UpdateSheetProtectedDimensionRespReplyEditors   `json:"editors,omitempty"`   // 可编辑保护范围的用户
	LockInfo  string                                           `json:"lockInfo,omitempty"`  // 成功修改的保护说明
}

// UpdateSheetProtectedDimensionRespReplyDimension ...
type UpdateSheetProtectedDimensionRespReplyDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheetId
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列起始下标，下标从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列终止下标，下标从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 保护范围的维度
}

// UpdateSheetProtectedDimensionRespReplyEditors ...
type UpdateSheetProtectedDimensionRespReplyEditors struct {
	AddEditors []*UpdateSheetProtectedDimensionRespReplyEditorsAddEditor `json:"addEditors,omitempty"` // 成功增加的用户的列表
	DelEditors []*UpdateSheetProtectedDimensionRespReplyEditorsDelEditor `json:"delEditors,omitempty"` // 成功删除的用户的列表
}

// UpdateSheetProtectedDimensionRespReplyEditorsAddEditor ...
type UpdateSheetProtectedDimensionRespReplyEditorsAddEditor struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// UpdateSheetProtectedDimensionRespReplyEditorsDelEditor ...
type UpdateSheetProtectedDimensionRespReplyEditorsDelEditor struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ReplaceSheet 按照指定的条件查找子表的某个范围内的数据符合条件的单元格并替换值，返回替换成功的单元格位置。一次请求最多允许替换5000个单元格，如果超过请将range缩小范围再操作。请求体中的 range、find、replaccement 字段必填。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/replace
func (r *DriveService) ReplaceSheet(ctx context.Context, request *ReplaceSheetReq, options ...MethodOptionFunc) (*ReplaceSheetResp, *Response, error) {
	if r.cli.mock.mockDriveReplaceSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#ReplaceSheet mock enable")
		return r.cli.mock.mockDriveReplaceSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "ReplaceSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/replace",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(replaceSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveReplaceSheet mock DriveReplaceSheet method
func (r *Mock) MockDriveReplaceSheet(f func(ctx context.Context, request *ReplaceSheetReq, options ...MethodOptionFunc) (*ReplaceSheetResp, *Response, error)) {
	r.mockDriveReplaceSheet = f
}

// UnMockDriveReplaceSheet un-mock DriveReplaceSheet method
func (r *Mock) UnMockDriveReplaceSheet() {
	r.mockDriveReplaceSheet = nil
}

// ReplaceSheetReq ...
type ReplaceSheetReq struct {
	SpreadSheetToken string                        `path:"spreadsheet_token" json:"-"` // Spreadsheet token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string                        `path:"sheet_id" json:"-"`          // Sheet id, 示例值："0b**12"
	FindCondition    *ReplaceSheetReqFindCondition `json:"find_condition,omitempty"`   // 查找条件
	Find             string                        `json:"find,omitempty"`             // 查找的字符串, 示例值："hello"
	Replacement      string                        `json:"replacement,omitempty"`      // 替换的字符串, 示例值："world"
}

// ReplaceSheetReqFindCondition ...
type ReplaceSheetReqFindCondition struct {
	Range           string `json:"range,omitempty"`             // 查找范围, 示例值："0b**12!A1:H10"
	MatchCase       *bool  `json:"match_case,omitempty"`        // 是否忽略大小写, 示例值：true
	MatchEntireCell *bool  `json:"match_entire_cell,omitempty"` // 是否匹配整个单元格, 示例值：false
	SearchByRegex   *bool  `json:"search_by_regex,omitempty"`   // 是否为正则匹配, 示例值：false
	IncludeFormulas *bool  `json:"include_formulas,omitempty"`  // 是否搜索公式内容, 示例值：false
}

// replaceSheetResp ...
type replaceSheetResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *ReplaceSheetResp `json:"data,omitempty"`
}

// ReplaceSheetResp ...
type ReplaceSheetResp struct {
	ReplaceResult *ReplaceSheetRespReplaceResult `json:"replace_result,omitempty"` // 符合查找条件并替换的单元格信息
}

// ReplaceSheetRespReplaceResult ...
type ReplaceSheetRespReplaceResult struct {
	MatchedCells        []string `json:"matched_cells,omitempty"`         // 符合查找条件的单元格数组，不包含公式，例如["A1", "A2"...]
	MatchedFormulaCells []string `json:"matched_formula_cells,omitempty"` // 符合查找条件的含有公式的单元格数组，例如["B3", "H7"...]
	RowsCount           int64    `json:"rows_count,omitempty"`            // 符合查找条件的总行数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchSetSheetStyle
//
// 该接口用于根据 spreadsheetToken 、range和样式信息 批量更新单元格样式；单次写入不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAzMzUjLwMzM14CMzMTN
func (r *DriveService) BatchSetSheetStyle(ctx context.Context, request *BatchSetSheetStyleReq, options ...MethodOptionFunc) (*BatchSetSheetStyleResp, *Response, error) {
	if r.cli.mock.mockDriveBatchSetSheetStyle != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchSetSheetStyle mock enable")
		return r.cli.mock.mockDriveBatchSetSheetStyle(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchSetSheetStyle",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/styles_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchSetSheetStyleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchSetSheetStyle mock DriveBatchSetSheetStyle method
func (r *Mock) MockDriveBatchSetSheetStyle(f func(ctx context.Context, request *BatchSetSheetStyleReq, options ...MethodOptionFunc) (*BatchSetSheetStyleResp, *Response, error)) {
	r.mockDriveBatchSetSheetStyle = f
}

// UnMockDriveBatchSetSheetStyle un-mock DriveBatchSetSheetStyle method
func (r *Mock) UnMockDriveBatchSetSheetStyle() {
	r.mockDriveBatchSetSheetStyle = nil
}

// BatchSetSheetStyleReq ...
type BatchSetSheetStyleReq struct {
	SpreadSheetToken string                       `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Data             []*BatchSetSheetStyleReqData `json:"data,omitempty"`            // 请求数据
}

// BatchSetSheetStyleReqData ...
type BatchSetSheetStyleReqData struct {
	Ranges []string                        `json:"ranges,omitempty"` // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Style  *BatchSetSheetStyleReqDataStyle `json:"style,omitempty"`  // 需要更新的样式
}

// BatchSetSheetStyleReqDataStyle ...
type BatchSetSheetStyleReqDataStyle struct {
	Font           *BatchSetSheetStyleReqDataStyleFont `json:"font,omitempty"`           // 字体相关样式
	TextDecoration *int64                              `json:"textDecoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	Formatter      *string                             `json:"formatter,omitempty"`      // 数字格式，详见附录 [sheet支持数字格式类型](https://open.feishu.cn/document/ukTMukTMukTM/uMjM2UjLzIjN14yMyYTN)
	HAlign         *int64                              `json:"hAlign,omitempty"`         // 水平对齐，0 左对齐，1 中对齐，2 右对齐
	VAlign         *int64                              `json:"vAlign,omitempty"`         // 垂直对齐, 0 上对齐，1 中对齐, 2 下对齐
	ForeColor      *string                             `json:"foreColor,omitempty"`      // 字体颜色
	BackColor      *string                             `json:"backColor,omitempty"`      // 背景颜色
	BorderType     *string                             `json:"borderType,omitempty"`     // 边框类型，可选 "FULL_BORDER"，"OUTER_BORDER"，"INNER_BORDER"，"NO_BORDER"，"LEFT_BORDER"，"RIGHT_BORDER"，"TOP_BORDER"，"BOTTOM_BORDER"
	BorderColor    *string                             `json:"borderColor,omitempty"`    // 边框颜色
	Clean          *bool                               `json:"clean,omitempty"`          // 是否清除所有格式,默认 false
}

// BatchSetSheetStyleReqDataStyleFont ...
type BatchSetSheetStyleReqDataStyleFont struct {
	Bold     *bool   `json:"bold,omitempty"`     // 是否加粗
	Italic   *bool   `json:"italic,omitempty"`   // 是否斜体
	FontSize *string `json:"fontSize,omitempty"` // 字体大小 字号大小为9~36 行距固定为1.5，如:10pt/1.5
}

// batchSetSheetStyleResp ...
type batchSetSheetStyleResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *BatchSetSheetStyleResp `json:"data,omitempty"`
}

// BatchSetSheetStyleResp ...
type BatchSetSheetStyleResp struct {
	SpreadSheetToken    string                            `json:"spreadsheetToken,omitempty"`    // spreadsheet 的 token
	TotalUpdatedRows    int64                             `json:"totalUpdatedRows,omitempty"`    // 设置样式的总行数
	TotalUpdatedColumns int64                             `json:"totalUpdatedColumns,omitempty"` // 设置样式的总列数
	TotalUpdatedCells   int64                             `json:"totalUpdatedCells,omitempty"`   // 设置样式的单元格总数
	Revision            int64                             `json:"revision,omitempty"`            // sheet 的版本号
	Responses           []*BatchSetSheetStyleRespResponse `json:"responses,omitempty"`           // 各个范围的设置单元格样式的范围、行列数等
}

// BatchSetSheetStyleRespResponse ...
type BatchSetSheetStyleRespResponse struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 设置样式的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 设置样式的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 设置样式的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 设置样式的单元格数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetSheetStyle
//
// 该接口用于根据 spreadsheetToken 、range 和样式信息更新单元格样式；单次写入不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukjMzUjL5IzM14SOyMTN
func (r *DriveService) SetSheetStyle(ctx context.Context, request *SetSheetStyleReq, options ...MethodOptionFunc) (*SetSheetStyleResp, *Response, error) {
	if r.cli.mock.mockDriveSetSheetStyle != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SetSheetStyle mock enable")
		return r.cli.mock.mockDriveSetSheetStyle(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "SetSheetStyle",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/style",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setSheetStyleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSetSheetStyle mock DriveSetSheetStyle method
func (r *Mock) MockDriveSetSheetStyle(f func(ctx context.Context, request *SetSheetStyleReq, options ...MethodOptionFunc) (*SetSheetStyleResp, *Response, error)) {
	r.mockDriveSetSheetStyle = f
}

// UnMockDriveSetSheetStyle un-mock DriveSetSheetStyle method
func (r *Mock) UnMockDriveSetSheetStyle() {
	r.mockDriveSetSheetStyle = nil
}

// SetSheetStyleReq ...
type SetSheetStyleReq struct {
	SpreadSheetToken string                       `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	AppendStyle      *SetSheetStyleReqAppendStyle `json:"appendStyle,omitempty"`     // 设置单元格样式
}

// SetSheetStyleReqAppendStyle ...
type SetSheetStyleReqAppendStyle struct {
	Range string                            `json:"range,omitempty"` // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Style *SetSheetStyleReqAppendStyleStyle `json:"style,omitempty"` // 需要更新的样式
}

// SetSheetStyleReqAppendStyleStyle ...
type SetSheetStyleReqAppendStyleStyle struct {
	Font           *SetSheetStyleReqAppendStyleStyleFont `json:"font,omitempty"`           // 字体相关样式
	TextDecoration *int64                                `json:"textDecoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	Formatter      *string                               `json:"formatter,omitempty"`      // 数字格式，详见附录 [sheet支持数字格式类型](https://open.feishu.cn/document/ukTMukTMukTM/uMjM2UjLzIjN14yMyYTN)
	HAlign         *int64                                `json:"hAlign,omitempty"`         // 水平对齐，0 左对齐，1 中对齐，2 右对齐
	VAlign         *int64                                `json:"vAlign,omitempty"`         // 垂直对齐, 0 上对齐，1 中对齐, 2 下对齐
	ForeColor      *string                               `json:"foreColor,omitempty"`      // 字体颜色
	BackColor      *string                               `json:"backColor,omitempty"`      // 背景颜色
	BorderType     *string                               `json:"borderType,omitempty"`     // 边框类型，可选 "FULL_BORDER"，"OUTER_BORDER"，"INNER_BORDER"，"NO_BORDER"，"LEFT_BORDER"，"RIGHT_BORDER"，"TOP_BORDER"，"BOTTOM_BORDER"
	BorderColor    *string                               `json:"borderColor,omitempty"`    // 边框颜色
	Clean          *bool                                 `json:"clean,omitempty"`          // 是否清除所有格式,默认 false
}

// SetSheetStyleReqAppendStyleStyleFont ...
type SetSheetStyleReqAppendStyleStyleFont struct {
	Bold     *bool   `json:"bold,omitempty"`     // 是否加粗
	Italic   *bool   `json:"italic,omitempty"`   // 是否斜体
	FontSize *string `json:"fontSize,omitempty"` // 字体大小 字号大小为9~36 行距固定为1.5，如:10pt/1.5
	Clean    *bool   `json:"clean,omitempty"`    // 清除 font 格式,默认 false
}

// setSheetStyleResp ...
type setSheetStyleResp struct {
	Code int64              `json:"code,omitempty"`
	Msg  string             `json:"msg,omitempty"`
	Data *SetSheetStyleResp `json:"data,omitempty"`
}

// SetSheetStyleResp ...
type SetSheetStyleResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 设置样式的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 设置样式的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 设置样式的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 设置样式的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AppendSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 遇到空行则进行覆盖追加或新增行追加数据。 空行：默认该行第一个格子是空，则认为是空行；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjMzUjLzIzM14yMyMTN
func (r *DriveService) AppendSheetValue(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveAppendSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#AppendSheetValue mock enable")
		return r.cli.mock.mockDriveAppendSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "AppendSheetValue",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(appendSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveAppendSheetValue mock DriveAppendSheetValue method
func (r *Mock) MockDriveAppendSheetValue(f func(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error)) {
	r.mockDriveAppendSheetValue = f
}

// UnMockDriveAppendSheetValue un-mock DriveAppendSheetValue method
func (r *Mock) UnMockDriveAppendSheetValue() {
	r.mockDriveAppendSheetValue = nil
}

// AppendSheetValueReq ...
type AppendSheetValueReq struct {
	InsertDataOption *string                        `query:"insertDataOption" json:"-"` // 遇到空行追加，默认 OVERWRITE，若空行的数量小于追加数据的行数，则会覆盖已有数据；可选 INSERT_ROWS ，会在插入足够数量的行后再进行数据追加
	SpreadSheetToken string                         `path:"spreadsheetToken" json:"-"`  // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *AppendSheetValueReqValueRange `json:"valueRange,omitempty"`       // 值与范围
}

// AppendSheetValueReqValueRange ...
type AppendSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // ⁣查询范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。range所表示的范围需要大于等于values占用的范围。
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// appendSheetValueResp ...
type appendSheetValueResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *AppendSheetValueResp `json:"data,omitempty"`
}

// AppendSheetValueResp ...
type AppendSheetValueResp struct {
	SpreadSheetToken string                       `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	TableRange       string                       `json:"tableRange,omitempty"`       // 写入的范围
	Revision         int64                        `json:"revision,omitempty"`         // sheet 的版本号
	Updates          *AppendSheetValueRespUpdates `json:"updates,omitempty"`          // 插入数据的范围、行列数等
}

// AppendSheetValueRespUpdates ...
type AppendSheetValueRespUpdates struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 ranges 读取表格多个范围的值，返回数据限制为10M。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTMzUjL5EzM14SOxMTN
func (r *DriveService) BatchGetSheetValue(ctx context.Context, request *BatchGetSheetValueReq, options ...MethodOptionFunc) (*BatchGetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveBatchGetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchGetSheetValue mock enable")
		return r.cli.mock.mockDriveBatchGetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchGetSheetValue",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchGetSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchGetSheetValue mock DriveBatchGetSheetValue method
func (r *Mock) MockDriveBatchGetSheetValue(f func(ctx context.Context, request *BatchGetSheetValueReq, options ...MethodOptionFunc) (*BatchGetSheetValueResp, *Response, error)) {
	r.mockDriveBatchGetSheetValue = f
}

// UnMockDriveBatchGetSheetValue un-mock DriveBatchGetSheetValue method
func (r *Mock) UnMockDriveBatchGetSheetValue() {
	r.mockDriveBatchGetSheetValue = nil
}

// BatchGetSheetValueReq ...
type BatchGetSheetValueReq struct {
	Ranges               []string `query:"ranges" join_sep:"," json:"-"`  // 多个查询范围 如 url?ranges=range1,range2 ，⁣其中 range 包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRenderOption    *string  `query:"valueRenderOption" json:"-"`    // valueRenderOption=ToString 可返回纯文本的值(数值类型除外)；valueRenderOption=FormattedValue 计算并格式化单元格；valueRenderOption=Formula单元格中含有公式时返回公式本身；valueRenderOption=UnformattedValue计算但不对单元格进行格式化
	DateTimeRenderOption *string  `query:"dateTimeRenderOption" json:"-"` // dateTimeRenderOption=FormattedString 计算并将时间日期按照其格式进行格式化，但不会对数字进行格式化，返回格式化后的字符串。详见[电子表格常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/guide/sheets-faq)
	UserIDType           *IDType  `query:"user_id_type" json:"-"`         // 返回的用户id类型，可选open_id,union_id
	SpreadSheetToken     string   `path:"spreadsheetToken" json:"-"`      // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// batchGetSheetValueResp ...
type batchGetSheetValueResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *BatchGetSheetValueResp `json:"data,omitempty"`
}

// BatchGetSheetValueResp ...
type BatchGetSheetValueResp struct {
	Revision         int64                               `json:"revision,omitempty"`         // sheet 的版本号
	SpreadSheetToken string                              `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	TotalCells       int64                               `json:"totalCells,omitempty"`       // 读取的单元格总数
	ValueRanges      []*BatchGetSheetValueRespValueRange `json:"valueRanges,omitempty"`      // 值与范围
}

// BatchGetSheetValueRespValueRange ...
type BatchGetSheetValueRespValueRange struct {
	MajorDimension string           `json:"majorDimension,omitempty"` // 插入维度
	Range          string           `json:"range,omitempty"`          // 返回数据的范围，为空时表示查询范围没有数据
	Revision       int64            `json:"revision,omitempty"`       // sheet 的版本号
	Values         [][]SheetContent `json:"values,omitempty"`         // 查询得到的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchSetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 向多个范围写入数据，若范围内有数据，将被更新覆盖；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEjMzUjLxIzM14SMyMTN
func (r *DriveService) BatchSetSheetValue(ctx context.Context, request *BatchSetSheetValueReq, options ...MethodOptionFunc) (*BatchSetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveBatchSetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchSetSheetValue mock enable")
		return r.cli.mock.mockDriveBatchSetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchSetSheetValue",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchSetSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchSetSheetValue mock DriveBatchSetSheetValue method
func (r *Mock) MockDriveBatchSetSheetValue(f func(ctx context.Context, request *BatchSetSheetValueReq, options ...MethodOptionFunc) (*BatchSetSheetValueResp, *Response, error)) {
	r.mockDriveBatchSetSheetValue = f
}

// UnMockDriveBatchSetSheetValue un-mock DriveBatchSetSheetValue method
func (r *Mock) UnMockDriveBatchSetSheetValue() {
	r.mockDriveBatchSetSheetValue = nil
}

// BatchSetSheetValueReq ...
type BatchSetSheetValueReq struct {
	SpreadSheetToken string                             `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRanges      []*BatchSetSheetValueReqValueRange `json:"valueRanges,omitempty"`     // 需要更新的多个范围
}

// BatchSetSheetValueReqValueRange ...
type BatchSetSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // 更新范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。range所表示的范围需要大于等于values占用的范围。
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// batchSetSheetValueResp ...
type batchSetSheetValueResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *BatchSetSheetValueResp `json:"data,omitempty"`
}

// BatchSetSheetValueResp ...
type BatchSetSheetValueResp struct {
	Responses        []*BatchSetSheetValueRespResponse `json:"responses,omitempty"`        // 响应
	Revision         int64                             `json:"revision,omitempty"`         // sheet 的版本号
	SpreadSheetToken string                            `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// BatchSetSheetValueRespResponse ...
type BatchSetSheetValueRespResponse struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 读取表格单个范围的值，返回数据限制为10M。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugTMzUjL4EzM14COxMTN
func (r *DriveService) GetSheetValue(ctx context.Context, request *GetSheetValueReq, options ...MethodOptionFunc) (*GetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetValue mock enable")
		return r.cli.mock.mockDriveGetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetValue",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values/:range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetValue mock DriveGetSheetValue method
func (r *Mock) MockDriveGetSheetValue(f func(ctx context.Context, request *GetSheetValueReq, options ...MethodOptionFunc) (*GetSheetValueResp, *Response, error)) {
	r.mockDriveGetSheetValue = f
}

// UnMockDriveGetSheetValue un-mock DriveGetSheetValue method
func (r *Mock) UnMockDriveGetSheetValue() {
	r.mockDriveGetSheetValue = nil
}

// GetSheetValueReq ...
type GetSheetValueReq struct {
	ValueRenderOption    *string `query:"valueRenderOption" json:"-"`    // valueRenderOption=ToString 可返回纯文本的值(数值类型除外)；valueRenderOption=FormattedValue 计算并格式化单元格；valueRenderOption=Formula单元格中含有公式时返回公式本身；valueRenderOption=UnformattedValue计算但不对单元格进行格式化。
	DateTimeRenderOption *string `query:"dateTimeRenderOption" json:"-"` // dateTimeRenderOption=FormattedString 计算并对时间日期按照其格式进行格式化，但不会对数字进行格式化，返回格式化后的字符串。详见[电子表格常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/guide/sheets-faq)
	UserIDType           *IDType `query:"user_id_type" json:"-"`         // 返回的用户id类型，可选open_id,union_id
	SpreadSheetToken     string  `path:"spreadsheetToken" json:"-"`      // spreadsheet 的 token，详见电子表格[概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range                string  `path:"range" json:"-"`                 // 查询范围，包含 sheetId 与单元格范围两部分，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetValueResp ...
type getSheetValueResp struct {
	Code int64              `json:"code,omitempty"`
	Msg  string             `json:"msg,omitempty"`
	Data *GetSheetValueResp `json:"data,omitempty"`
}

// GetSheetValueResp ...
type GetSheetValueResp struct {
	Revision         int64                        `json:"revision,omitempty"`         // sheet 的版本号
	SpreadSheetToken string                       `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token，详见电子表格[概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *GetSheetValueRespValueRange `json:"valueRange,omitempty"`       // 值与范围
}

// GetSheetValueRespValueRange ...
type GetSheetValueRespValueRange struct {
	MajorDimension string           `json:"majorDimension,omitempty"` // 插入维度
	Range          string           `json:"range,omitempty"`          // 返回数据的范围，为空时表示查询范围没有数据
	Revision       int64            `json:"revision,omitempty"`       // sheet 的版本号
	Values         [][]SheetContent `json:"values,omitempty"`         // 查询得到的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PrependSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 向范围之前增加相应数据的行和相应的数据，相当于数组的插入操作；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjMzUjLyIzM14iMyMTN
func (r *DriveService) PrependSheetValue(ctx context.Context, request *PrependSheetValueReq, options ...MethodOptionFunc) (*PrependSheetValueResp, *Response, error) {
	if r.cli.mock.mockDrivePrependSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PrependSheetValue mock enable")
		return r.cli.mock.mockDrivePrependSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PrependSheetValue",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_prepend",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(prependSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePrependSheetValue mock DrivePrependSheetValue method
func (r *Mock) MockDrivePrependSheetValue(f func(ctx context.Context, request *PrependSheetValueReq, options ...MethodOptionFunc) (*PrependSheetValueResp, *Response, error)) {
	r.mockDrivePrependSheetValue = f
}

// UnMockDrivePrependSheetValue un-mock DrivePrependSheetValue method
func (r *Mock) UnMockDrivePrependSheetValue() {
	r.mockDrivePrependSheetValue = nil
}

// PrependSheetValueReq ...
type PrependSheetValueReq struct {
	SpreadSheetToken string                          `path:"spreadsheetToken" json:"-"` // sheet的token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *PrependSheetValueReqValueRange `json:"valueRange,omitempty"`      // 值与范围
}

// PrependSheetValueReqValueRange ...
type PrependSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // ⁣插入范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)，range所表示的范围需要大于等于values占用的范围。
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// prependSheetValueResp ...
type prependSheetValueResp struct {
	Code int64                  `json:"code,omitempty"`
	Msg  string                 `json:"msg,omitempty"`
	Data *PrependSheetValueResp `json:"data,omitempty"`
}

// PrependSheetValueResp ...
type PrependSheetValueResp struct {
	SpreadSheetToken string                        `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	TableRange       string                        `json:"tableRange,omitempty"`       // 写入的范围
	Revision         int64                         `json:"revision,omitempty"`         // sheet 的版本号
	Updates          *PrependSheetValueRespUpdates `json:"updates,omitempty"`          // 插入数据的范围、行列数等
}

// PrependSheetValueRespUpdates ...
type PrependSheetValueRespUpdates struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 向单个范围写入数据，若范围内有数据，将被更新覆盖；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAjMzUjLwIzM14CMyMTN
func (r *DriveService) SetSheetValue(ctx context.Context, request *SetSheetValueReq, options ...MethodOptionFunc) (*SetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveSetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SetSheetValue mock enable")
		return r.cli.mock.mockDriveSetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "SetSheetValue",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSetSheetValue mock DriveSetSheetValue method
func (r *Mock) MockDriveSetSheetValue(f func(ctx context.Context, request *SetSheetValueReq, options ...MethodOptionFunc) (*SetSheetValueResp, *Response, error)) {
	r.mockDriveSetSheetValue = f
}

// UnMockDriveSetSheetValue un-mock DriveSetSheetValue method
func (r *Mock) UnMockDriveSetSheetValue() {
	r.mockDriveSetSheetValue = nil
}

// SetSheetValueReq ...
type SetSheetValueReq struct {
	SpreadSheetToken string                      `path:"spreadsheetToken" json:"-"` // spreadsheet的token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *SetSheetValueReqValueRange `json:"valueRange,omitempty"`      // 值与范围
}

// SetSheetValueReqValueRange ...
type SetSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // 更新范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)，range所表示的范围需要大于等于values占用的范围
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// setSheetValueResp ...
type setSheetValueResp struct {
	Code int64              `json:"code,omitempty"`
	Msg  string             `json:"msg,omitempty"`
	Data *SetSheetValueResp `json:"data,omitempty"`
}

// SetSheetValueResp ...
type SetSheetValueResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MoveDocsToWiki 该接口允许添加已有云文档至知识库，并挂载在指定父页面下
//
// ### 移动操作 ###
// 移动后，文档将从“我的空间”或“共享空间”转移至“知识库”，并将从以下功能入口消失：
// - 云空间主页：最近访问、快速访问
// - 我的空间
// - 共享空间
// - 收藏
// ### 权限变更 ###
// 移动后，文档会向所有可查看“页面树”的用户显示，默认继承父页面的权限设置。
// </md-alert
// 仅支持文档所有者发起请求
// 此接口为异步接口。若移动已完成（或节点已在Wiki中），则直接返回结果（Wiki token）。若尚未完成，则返回task id。请使用[获取任务结果](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get)接口进行查询。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki
func (r *DriveService) MoveDocsToWiki(ctx context.Context, request *MoveDocsToWikiReq, options ...MethodOptionFunc) (*MoveDocsToWikiResp, *Response, error) {
	if r.cli.mock.mockDriveMoveDocsToWiki != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveDocsToWiki mock enable")
		return r.cli.mock.mockDriveMoveDocsToWiki(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveDocsToWiki",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveDocsToWikiResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveDocsToWiki mock DriveMoveDocsToWiki method
func (r *Mock) MockDriveMoveDocsToWiki(f func(ctx context.Context, request *MoveDocsToWikiReq, options ...MethodOptionFunc) (*MoveDocsToWikiResp, *Response, error)) {
	r.mockDriveMoveDocsToWiki = f
}

// UnMockDriveMoveDocsToWiki un-mock DriveMoveDocsToWiki method
func (r *Mock) UnMockDriveMoveDocsToWiki() {
	r.mockDriveMoveDocsToWiki = nil
}

// MoveDocsToWikiReq ...
type MoveDocsToWikiReq struct {
	SpaceID         string  `path:"space_id" json:"-"`           // 知识库id, 示例值："1565676577122621"
	ParentWikiToken *string `json:"parent_wiki_token,omitempty"` // 节点的父亲token, 示例值："wikbcOHIFxB0PJS2UTd2kF2SP6c"
	ObjType         string  `json:"obj_type,omitempty"`          // 文档类型, 示例值："doc", 可选值有: `doc`：doc（文档）, `sheet`：sheet（表格）, `bitable`：bitable（多维表格）, `mindnote`：mindnote（思维导图）, `docx`：docx, `file`：file (文件)
	ObjToken        string  `json:"obj_token,omitempty"`         // 文档token, 示例值："docbc6e1qBqt1O5mCBVA1QUKVEg"
}

// moveDocsToWikiResp ...
type moveDocsToWikiResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *MoveDocsToWikiResp `json:"data,omitempty"`
}

// MoveDocsToWikiResp ...
type MoveDocsToWikiResp struct {
	WikiToken string `json:"wiki_token,omitempty"` // 移动后的知识库token
	TaskID    string `json:"task_id,omitempty"`    // 任务id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateWikiNode 此接口用于在知识库里创建节点
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/create
func (r *DriveService) CreateWikiNode(ctx context.Context, request *CreateWikiNodeReq, options ...MethodOptionFunc) (*CreateWikiNodeResp, *Response, error) {
	if r.cli.mock.mockDriveCreateWikiNode != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateWikiNode mock enable")
		return r.cli.mock.mockDriveCreateWikiNode(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateWikiNode",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createWikiNodeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateWikiNode mock DriveCreateWikiNode method
func (r *Mock) MockDriveCreateWikiNode(f func(ctx context.Context, request *CreateWikiNodeReq, options ...MethodOptionFunc) (*CreateWikiNodeResp, *Response, error)) {
	r.mockDriveCreateWikiNode = f
}

// UnMockDriveCreateWikiNode un-mock DriveCreateWikiNode method
func (r *Mock) UnMockDriveCreateWikiNode() {
	r.mockDriveCreateWikiNode = nil
}

// CreateWikiNodeReq ...
type CreateWikiNodeReq struct {
	SpaceID         string  `path:"space_id" json:"-"`           // 知识空间id, 示例值："6704147935988285963"
	ObjType         string  `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 示例值："doc/sheet/mindnote", 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken *string `json:"parent_node_token,omitempty"` // 节点的父亲token, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
	NodeType        string  `json:"node_type,omitempty"`         // 节点类型, 示例值："origin/shortcut", 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken *string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
}

// createWikiNodeResp ...
type createWikiNodeResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *CreateWikiNodeResp `json:"data,omitempty"`
}

// CreateWikiNodeResp ...
type CreateWikiNodeResp struct {
	Node *CreateWikiNodeRespNode `json:"node,omitempty"` // 节点
}

// CreateWikiNodeRespNode ...
type CreateWikiNodeRespNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiNode 获取节点信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node
func (r *DriveService) GetWikiNode(ctx context.Context, request *GetWikiNodeReq, options ...MethodOptionFunc) (*GetWikiNodeResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiNode != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiNode mock enable")
		return r.cli.mock.mockDriveGetWikiNode(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiNode",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/get_node",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiNodeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiNode mock DriveGetWikiNode method
func (r *Mock) MockDriveGetWikiNode(f func(ctx context.Context, request *GetWikiNodeReq, options ...MethodOptionFunc) (*GetWikiNodeResp, *Response, error)) {
	r.mockDriveGetWikiNode = f
}

// UnMockDriveGetWikiNode un-mock DriveGetWikiNode method
func (r *Mock) UnMockDriveGetWikiNode() {
	r.mockDriveGetWikiNode = nil
}

// GetWikiNodeReq ...
type GetWikiNodeReq struct {
	Token string `query:"token" json:"-"` // 文档的wiki token, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
}

// getWikiNodeResp ...
type getWikiNodeResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiNodeResp `json:"data,omitempty"`
}

// GetWikiNodeResp ...
type GetWikiNodeResp struct {
	Node *GetWikiNodeRespNode `json:"node,omitempty"` // 节点信息
}

// GetWikiNodeRespNode ...
type GetWikiNodeRespNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiNodeList 此接口用于分页获取Wiki节点的子节点列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/list
func (r *DriveService) GetWikiNodeList(ctx context.Context, request *GetWikiNodeListReq, options ...MethodOptionFunc) (*GetWikiNodeListResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiNodeList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiNodeList mock enable")
		return r.cli.mock.mockDriveGetWikiNodeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiNodeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiNodeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiNodeList mock DriveGetWikiNodeList method
func (r *Mock) MockDriveGetWikiNodeList(f func(ctx context.Context, request *GetWikiNodeListReq, options ...MethodOptionFunc) (*GetWikiNodeListResp, *Response, error)) {
	r.mockDriveGetWikiNodeList = f
}

// UnMockDriveGetWikiNodeList un-mock DriveGetWikiNodeList method
func (r *Mock) UnMockDriveGetWikiNodeList() {
	r.mockDriveGetWikiNodeList = nil
}

// GetWikiNodeListReq ...
type GetWikiNodeListReq struct {
	PageSize        *int64  `query:"page_size" json:"-"`         // 分页大小, 示例值：10, 最大值：`50`
	PageToken       *string `query:"page_token" json:"-"`        // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6946843325487456878"
	ParentNodeToken *string `query:"parent_node_token" json:"-"` // 父节点token, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
	SpaceID         string  `path:"space_id" json:"-"`           // 知识空间id, 示例值："6946843325487906839"
}

// getWikiNodeListResp ...
type getWikiNodeListResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiNodeListResp `json:"data,omitempty"`
}

// GetWikiNodeListResp ...
type GetWikiNodeListResp struct {
	Items     []*GetWikiNodeListRespItem `json:"items,omitempty"`      // 数据列表
	PageToken string                     `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                       `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetWikiNodeListRespItem ...
type GetWikiNodeListRespItem struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MoveWikiNode 此方法用于在Wiki内移动节点，支持跨知识空间移动
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move
func (r *DriveService) MoveWikiNode(ctx context.Context, request *MoveWikiNodeReq, options ...MethodOptionFunc) (*MoveWikiNodeResp, *Response, error) {
	if r.cli.mock.mockDriveMoveWikiNode != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveWikiNode mock enable")
		return r.cli.mock.mockDriveMoveWikiNode(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveWikiNode",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/move",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveWikiNodeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveWikiNode mock DriveMoveWikiNode method
func (r *Mock) MockDriveMoveWikiNode(f func(ctx context.Context, request *MoveWikiNodeReq, options ...MethodOptionFunc) (*MoveWikiNodeResp, *Response, error)) {
	r.mockDriveMoveWikiNode = f
}

// UnMockDriveMoveWikiNode un-mock DriveMoveWikiNode method
func (r *Mock) UnMockDriveMoveWikiNode() {
	r.mockDriveMoveWikiNode = nil
}

// MoveWikiNodeReq ...
type MoveWikiNodeReq struct {
	SpaceID           string `path:"space_id" json:"-"`             // 知识空间id, 示例值："7008061636015554580"
	NodeToken         string `path:"node_token" json:"-"`           // 需要迁移的节点token, 示例值："wikbcd6ydSUyOEzbdlt1BfpA5Yc"
	TargetParentToken string `json:"target_parent_token,omitempty"` // 移动到的父节点token, 示例值："wikbcd6ydSUyOEzbdlt1BfpA5Yc"
}

// moveWikiNodeResp ...
type moveWikiNodeResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *MoveWikiNodeResp `json:"data,omitempty"`
}

// MoveWikiNodeResp ...
type MoveWikiNodeResp struct {
	Node *MoveWikiNodeRespNode `json:"node,omitempty"` // 移动后的节点信息
}

// MoveWikiNodeRespNode ...
type MoveWikiNodeRespNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateWikiSpace 此接口用于创建知识空间
//
// 此接口不支持应用身份访问
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/create
func (r *DriveService) CreateWikiSpace(ctx context.Context, request *CreateWikiSpaceReq, options ...MethodOptionFunc) (*CreateWikiSpaceResp, *Response, error) {
	if r.cli.mock.mockDriveCreateWikiSpace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateWikiSpace mock enable")
		return r.cli.mock.mockDriveCreateWikiSpace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "CreateWikiSpace",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/wiki/v2/spaces",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(createWikiSpaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateWikiSpace mock DriveCreateWikiSpace method
func (r *Mock) MockDriveCreateWikiSpace(f func(ctx context.Context, request *CreateWikiSpaceReq, options ...MethodOptionFunc) (*CreateWikiSpaceResp, *Response, error)) {
	r.mockDriveCreateWikiSpace = f
}

// UnMockDriveCreateWikiSpace un-mock DriveCreateWikiSpace method
func (r *Mock) UnMockDriveCreateWikiSpace() {
	r.mockDriveCreateWikiSpace = nil
}

// CreateWikiSpaceReq ...
type CreateWikiSpaceReq struct {
	Name        *string `json:"name,omitempty"`        // 知识空间名称, 示例值："知识空间"
	Description *string `json:"description,omitempty"` // 知识空间描述, 示例值："知识空间描述"
}

// createWikiSpaceResp ...
type createWikiSpaceResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *CreateWikiSpaceResp `json:"data,omitempty"`
}

// CreateWikiSpaceResp ...
type CreateWikiSpaceResp struct {
	Space *CreateWikiSpaceRespSpace `json:"space,omitempty"` // 知识空间
}

// CreateWikiSpaceRespSpace ...
type CreateWikiSpaceRespSpace struct {
	Name        string `json:"name,omitempty"`        // 知识空间名称
	Description string `json:"description,omitempty"` // 知识空间描述
	SpaceID     string `json:"space_id,omitempty"`    // 知识空间id
	SpaceType   string `json:"space_type,omitempty"`  // 表示知识空间类型（团队空间 或 个人空间）, 可选值有: `team`：团队空间, `person`：个人空间
	Visibility  string `json:"visibility,omitempty"`  // 表示知识空间可见性（公开空间 或 私有空间）, 可选值有: `public`：公开空间, `private`：私有空间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiSpace 此接口用于根据知识空间ID来查询知识空间的信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get
func (r *DriveService) GetWikiSpace(ctx context.Context, request *GetWikiSpaceReq, options ...MethodOptionFunc) (*GetWikiSpaceResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiSpace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiSpace mock enable")
		return r.cli.mock.mockDriveGetWikiSpace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiSpace",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiSpaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiSpace mock DriveGetWikiSpace method
func (r *Mock) MockDriveGetWikiSpace(f func(ctx context.Context, request *GetWikiSpaceReq, options ...MethodOptionFunc) (*GetWikiSpaceResp, *Response, error)) {
	r.mockDriveGetWikiSpace = f
}

// UnMockDriveGetWikiSpace un-mock DriveGetWikiSpace method
func (r *Mock) UnMockDriveGetWikiSpace() {
	r.mockDriveGetWikiSpace = nil
}

// GetWikiSpaceReq ...
type GetWikiSpaceReq struct {
	SpaceID string `path:"space_id" json:"-"` // 知识空间id, 示例值："6870403571079249922"
}

// getWikiSpaceResp ...
type getWikiSpaceResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiSpaceResp `json:"data,omitempty"`
}

// GetWikiSpaceResp ...
type GetWikiSpaceResp struct {
	Space *GetWikiSpaceRespSpace `json:"space,omitempty"` // 知识空间
}

// GetWikiSpaceRespSpace ...
type GetWikiSpaceRespSpace struct {
	Name        string `json:"name,omitempty"`        // 知识空间名称
	Description string `json:"description,omitempty"` // 知识空间描述
	SpaceID     string `json:"space_id,omitempty"`    // 知识空间id
	SpaceType   string `json:"space_type,omitempty"`  // 表示知识空间类型（团队空间 或 个人空间）, 可选值有: `team`：团队空间, `person`：个人空间
	Visibility  string `json:"visibility,omitempty"`  // 表示知识空间可见性（公开空间 或 私有空间）, 可选值有: `public`：公开空间, `private`：私有空间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiSpaceList 此接口用于获取有权限访问的知识空间列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list
func (r *DriveService) GetWikiSpaceList(ctx context.Context, request *GetWikiSpaceListReq, options ...MethodOptionFunc) (*GetWikiSpaceListResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiSpaceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiSpaceList mock enable")
		return r.cli.mock.mockDriveGetWikiSpaceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiSpaceList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiSpaceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiSpaceList mock DriveGetWikiSpaceList method
func (r *Mock) MockDriveGetWikiSpaceList(f func(ctx context.Context, request *GetWikiSpaceListReq, options ...MethodOptionFunc) (*GetWikiSpaceListResp, *Response, error)) {
	r.mockDriveGetWikiSpaceList = f
}

// UnMockDriveGetWikiSpaceList un-mock DriveGetWikiSpaceList method
func (r *Mock) UnMockDriveGetWikiSpaceList() {
	r.mockDriveGetWikiSpaceList = nil
}

// GetWikiSpaceListReq ...
type GetWikiSpaceListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1565676577122621"
}

// getWikiSpaceListResp ...
type getWikiSpaceListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiSpaceListResp `json:"data,omitempty"`
}

// GetWikiSpaceListResp ...
type GetWikiSpaceListResp struct {
	Items     []*GetWikiSpaceListRespItem `json:"items,omitempty"`      // 数据列表
	PageToken string                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetWikiSpaceListRespItem ...
type GetWikiSpaceListRespItem struct {
	Name        string `json:"name,omitempty"`        // 知识空间名称
	Description string `json:"description,omitempty"` // 知识空间描述
	SpaceID     string `json:"space_id,omitempty"`    // 知识空间id
	SpaceType   string `json:"space_type,omitempty"`  // 表示知识空间类型（团队空间 或 个人空间）, 可选值有: `team`：团队空间, `person`：个人空间
	Visibility  string `json:"visibility,omitempty"`  // 表示知识空间可见性（公开空间 或 私有空间）, 可选值有: `public`：公开空间, `private`：私有空间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddWikiSpaceMember 添加知识空间成员
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/create
func (r *DriveService) AddWikiSpaceMember(ctx context.Context, request *AddWikiSpaceMemberReq, options ...MethodOptionFunc) (*AddWikiSpaceMemberResp, *Response, error) {
	if r.cli.mock.mockDriveAddWikiSpaceMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#AddWikiSpaceMember mock enable")
		return r.cli.mock.mockDriveAddWikiSpaceMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "AddWikiSpaceMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(addWikiSpaceMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveAddWikiSpaceMember mock DriveAddWikiSpaceMember method
func (r *Mock) MockDriveAddWikiSpaceMember(f func(ctx context.Context, request *AddWikiSpaceMemberReq, options ...MethodOptionFunc) (*AddWikiSpaceMemberResp, *Response, error)) {
	r.mockDriveAddWikiSpaceMember = f
}

// UnMockDriveAddWikiSpaceMember un-mock DriveAddWikiSpaceMember method
func (r *Mock) UnMockDriveAddWikiSpaceMember() {
	r.mockDriveAddWikiSpaceMember = nil
}

// AddWikiSpaceMemberReq ...
type AddWikiSpaceMemberReq struct {
	NeedNotification *bool   `query:"need_notification" json:"-"` // 添加权限后是否通知对方, 示例值：true/fasle
	SpaceID          string  `path:"space_id" json:"-"`           // 知识空间id, 示例值："1565676577122621"
	MemberType       *string `json:"member_type,omitempty"`       // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid, 示例值："userid"
	MemberID         *string `json:"member_id,omitempty"`         // 用户id, 示例值："1565676577122621"
	MemberRole       *string `json:"member_role,omitempty"`       // 角色:,“admin” - 管理员,“member” - 成员, 示例值："admin"
}

// addWikiSpaceMemberResp ...
type addWikiSpaceMemberResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *AddWikiSpaceMemberResp `json:"data,omitempty"`
}

// AddWikiSpaceMemberResp ...
type AddWikiSpaceMemberResp struct {
	Member *AddWikiSpaceMemberRespMember `json:"member,omitempty"` // 知识空间成员
}

// AddWikiSpaceMemberRespMember ...
type AddWikiSpaceMemberRespMember struct {
	MemberType string `json:"member_type,omitempty"` // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid
	MemberID   string `json:"member_id,omitempty"`   // 用户id
	MemberRole string `json:"member_role,omitempty"` // 角色:,“admin” - 管理员,“member” - 成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteWikiSpaceMember 此接口用于删除知识空间成员
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/delete
func (r *DriveService) DeleteWikiSpaceMember(ctx context.Context, request *DeleteWikiSpaceMemberReq, options ...MethodOptionFunc) (*DeleteWikiSpaceMemberResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteWikiSpaceMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteWikiSpaceMember mock enable")
		return r.cli.mock.mockDriveDeleteWikiSpaceMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteWikiSpaceMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteWikiSpaceMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteWikiSpaceMember mock DriveDeleteWikiSpaceMember method
func (r *Mock) MockDriveDeleteWikiSpaceMember(f func(ctx context.Context, request *DeleteWikiSpaceMemberReq, options ...MethodOptionFunc) (*DeleteWikiSpaceMemberResp, *Response, error)) {
	r.mockDriveDeleteWikiSpaceMember = f
}

// UnMockDriveDeleteWikiSpaceMember un-mock DriveDeleteWikiSpaceMember method
func (r *Mock) UnMockDriveDeleteWikiSpaceMember() {
	r.mockDriveDeleteWikiSpaceMember = nil
}

// DeleteWikiSpaceMemberReq ...
type DeleteWikiSpaceMemberReq struct {
	SpaceID    string  `path:"space_id" json:"-"`     // 知识空间id, 示例值："7008061636015554580"
	MemberID   string  `path:"member_id" json:"-"`    // 成员id, 示例值："g64fb7g7"
	MemberType *string `json:"member_type,omitempty"` // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid, 示例值："userid"
	MemberRole *string `json:"member_role,omitempty"` // 角色:,“admin” - 管理员,“member” - 成员, 示例值："admin"
}

// deleteWikiSpaceMemberResp ...
type deleteWikiSpaceMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteWikiSpaceMemberResp `json:"data,omitempty"`
}

// DeleteWikiSpaceMemberResp ...
type DeleteWikiSpaceMemberResp struct {
	Member *DeleteWikiSpaceMemberRespMember `json:"member,omitempty"` // 成员信息
}

// DeleteWikiSpaceMemberRespMember ...
type DeleteWikiSpaceMemberRespMember struct {
	MemberType string `json:"member_type,omitempty"` // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid
	MemberID   string `json:"member_id,omitempty"`   // 用户id
	MemberRole string `json:"member_role,omitempty"` // 角色:,“admin” - 管理员,“member” - 成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateWikiSpaceSetting 根据space_id更新知识空间公共设置
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-setting/update
func (r *DriveService) UpdateWikiSpaceSetting(ctx context.Context, request *UpdateWikiSpaceSettingReq, options ...MethodOptionFunc) (*UpdateWikiSpaceSettingResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateWikiSpaceSetting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateWikiSpaceSetting mock enable")
		return r.cli.mock.mockDriveUpdateWikiSpaceSetting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateWikiSpaceSetting",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/setting",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateWikiSpaceSettingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateWikiSpaceSetting mock DriveUpdateWikiSpaceSetting method
func (r *Mock) MockDriveUpdateWikiSpaceSetting(f func(ctx context.Context, request *UpdateWikiSpaceSettingReq, options ...MethodOptionFunc) (*UpdateWikiSpaceSettingResp, *Response, error)) {
	r.mockDriveUpdateWikiSpaceSetting = f
}

// UnMockDriveUpdateWikiSpaceSetting un-mock DriveUpdateWikiSpaceSetting method
func (r *Mock) UnMockDriveUpdateWikiSpaceSetting() {
	r.mockDriveUpdateWikiSpaceSetting = nil
}

// UpdateWikiSpaceSettingReq ...
type UpdateWikiSpaceSettingReq struct {
	SpaceID         string  `path:"space_id" json:"-"`          // 知识空间id, 示例值："1565676577122621"
	CreateSetting   *string `json:"create_setting,omitempty"`   // 谁可以创建空间的一级页面： "admin_and_member" = 管理员和成员 "admin"  - 仅管理员, 示例值："admin/admin_and_member"
	SecuritySetting *string `json:"security_setting,omitempty"` // 可阅读用户可否创建副本/打印/导出/复制： "allow" - 允许 "not_allow" - 不允许, 示例值："allow/not_allow"
	CommentSetting  *string `json:"comment_setting,omitempty"`  // 可阅读用户可否评论： "allow" - 允许 "not_allow" - 不允许, 示例值："allow/not_allow"
}

// updateWikiSpaceSettingResp ...
type updateWikiSpaceSettingResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateWikiSpaceSettingResp `json:"data,omitempty"`
}

// UpdateWikiSpaceSettingResp ...
type UpdateWikiSpaceSettingResp struct {
	Setting *UpdateWikiSpaceSettingRespSetting `json:"setting,omitempty"` // 知识空间设置
}

// UpdateWikiSpaceSettingRespSetting ...
type UpdateWikiSpaceSettingRespSetting struct {
	CreateSetting   string `json:"create_setting,omitempty"`   // 谁可以创建空间的一级页面： "admin_and_member" = 管理员和成员 "admin"  - 仅管理员
	SecuritySetting string `json:"security_setting,omitempty"` // 可阅读用户可否创建副本/打印/导出/复制： "allow" - 允许 "not_allow" - 不允许
	CommentSetting  string `json:"comment_setting,omitempty"`  // 可阅读用户可否评论： "allow" - 允许 "not_allow" - 不允许
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiTask 该方法用于获取wiki异步任务的结果
//
// 仅发起任务的用户（或应用）可以查询任务结果。否则会返回权限报错。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get
func (r *DriveService) GetWikiTask(ctx context.Context, request *GetWikiTaskReq, options ...MethodOptionFunc) (*GetWikiTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiTask mock enable")
		return r.cli.mock.mockDriveGetWikiTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiTask mock DriveGetWikiTask method
func (r *Mock) MockDriveGetWikiTask(f func(ctx context.Context, request *GetWikiTaskReq, options ...MethodOptionFunc) (*GetWikiTaskResp, *Response, error)) {
	r.mockDriveGetWikiTask = f
}

// UnMockDriveGetWikiTask un-mock DriveGetWikiTask method
func (r *Mock) UnMockDriveGetWikiTask() {
	r.mockDriveGetWikiTask = nil
}

// GetWikiTaskReq ...
type GetWikiTaskReq struct {
	TaskType string `query:"task_type" json:"-"` // 任务类型, 示例值："move", 可选值有: `move`：MoveDocsToWiki任务
	TaskID   string `path:"task_id" json:"-"`    // 任务id, 示例值："7037044037068177428-075c9481e6a0007c1df689dfbe5b55a08b6b06f7"
}

// getWikiTaskResp ...
type getWikiTaskResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiTaskResp `json:"data,omitempty"`
}

// GetWikiTaskResp ...
type GetWikiTaskResp struct {
	Task *GetWikiTaskRespTask `json:"task,omitempty"` // 任务结果
}

// GetWikiTaskRespTask ...
type GetWikiTaskRespTask struct {
	TaskID     string                           `json:"task_id,omitempty"`     // 任务id
	MoveResult []*GetWikiTaskRespTaskMoveResult `json:"move_result,omitempty"` // MoveDocsToWiki任务结果
}

// GetWikiTaskRespTaskMoveResult ...
type GetWikiTaskRespTaskMoveResult struct {
	Node      *GetWikiTaskRespTaskMoveResultNode `json:"node,omitempty"`       // 移动完成的节点信息
	Status    int64                              `json:"status,omitempty"`     // 节点移动状态码
	StatusMsg string                             `json:"status_msg,omitempty"` // 节点移动状态信息
}

// GetWikiTaskRespTaskMoveResultNode ...
type GetWikiTaskRespTaskMoveResultNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadEHRAttachments
//
// 根据文件 token 下载文件。
// 调用 「批量获取员工花名册信息」接口的返回值中，「文件」类型的字段 id，即是文件 token
// ![image.png](//sf1-ttcdn-tos.pstatp.com/obj/open-platform-opendoc/bed391d2a8ce6ed2d5985ea69bf92850_9GY1mnuDXP.png)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/attachment/get
func (r *EHRService) DownloadEHRAttachments(ctx context.Context, request *DownloadEHRAttachmentsReq, options ...MethodOptionFunc) (*DownloadEHRAttachmentsResp, *Response, error) {
	if r.cli.mock.mockEHRDownloadEHRAttachments != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] EHR#DownloadEHRAttachments mock enable")
		return r.cli.mock.mockEHRDownloadEHRAttachments(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "EHR",
		API:                   "DownloadEHRAttachments",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/ehr/v1/attachments/:token",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadEHRAttachmentsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockEHRDownloadEHRAttachments mock EHRDownloadEHRAttachments method
func (r *Mock) MockEHRDownloadEHRAttachments(f func(ctx context.Context, request *DownloadEHRAttachmentsReq, options ...MethodOptionFunc) (*DownloadEHRAttachmentsResp, *Response, error)) {
	r.mockEHRDownloadEHRAttachments = f
}

// UnMockEHRDownloadEHRAttachments un-mock EHRDownloadEHRAttachments method
func (r *Mock) UnMockEHRDownloadEHRAttachments() {
	r.mockEHRDownloadEHRAttachments = nil
}

// DownloadEHRAttachmentsReq ...
type DownloadEHRAttachmentsReq struct {
	Token string `path:"token" json:"-"` // 文件 token, 示例值："09bf7b924f9a4a69875788891b5970d8"
}

// downloadEHRAttachmentsResp ...
type downloadEHRAttachmentsResp struct {
	IsFile bool                        `json:"is_file,omitempty"`
	Code   int64                       `json:"code,omitempty"`
	Msg    string                      `json:"msg,omitempty"`
	Data   *DownloadEHRAttachmentsResp `json:"data,omitempty"`
}

func (r *downloadEHRAttachmentsResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadEHRAttachmentsResp{}
	}
	r.Data.File = file
}

// DownloadEHRAttachmentsResp ...
type DownloadEHRAttachmentsResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetEHREmployeeList 根据员工飞书用户 ID / 员工状态 / 雇员类型等搜索条件 ，批量获取员工花名册字段信息。字段包括「系统标准字段 / system_fields」和「自定义字段 / custom_fields」
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/employee/list
func (r *EHRService) GetEHREmployeeList(ctx context.Context, request *GetEHREmployeeListReq, options ...MethodOptionFunc) (*GetEHREmployeeListResp, *Response, error) {
	if r.cli.mock.mockEHRGetEHREmployeeList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] EHR#GetEHREmployeeList mock enable")
		return r.cli.mock.mockEHRGetEHREmployeeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "EHR",
		API:                   "GetEHREmployeeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/ehr/v1/employees",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getEHREmployeeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockEHRGetEHREmployeeList mock EHRGetEHREmployeeList method
func (r *Mock) MockEHRGetEHREmployeeList(f func(ctx context.Context, request *GetEHREmployeeListReq, options ...MethodOptionFunc) (*GetEHREmployeeListResp, *Response, error)) {
	r.mockEHRGetEHREmployeeList = f
}

// UnMockEHRGetEHREmployeeList un-mock EHRGetEHREmployeeList method
func (r *Mock) UnMockEHRGetEHREmployeeList() {
	r.mockEHRGetEHREmployeeList = nil
}

// GetEHREmployeeListReq ...
type GetEHREmployeeListReq struct {
	View       *string  `query:"view" json:"-"`         // 返回数据类型, 示例值："basic", 可选值有: `basic`：概览，只返回 id、name 等基本信息, `full`：明细，返回系统标准字段和自定义字段集合
	Status     []int64  `query:"status" json:"-"`       // 员工状态，不传代表查询所有员工状态,实际在职 = 2&4,可同时查询多个状态的记录，如 status=2&status=4, 示例值：2, 可选值有: `1`：待入职, `2`：在职, `3`：已取消入职, `4`：待离职, `5`：已离职
	Type       []int64  `query:"type" json:"-"`         // 雇员类型，不传代表查询所有雇员类型, 示例值：1, 可选值有: `1`：全职, `2`：实习, `3`：顾问, `4`：外包, `5`：劳务
	StartTime  *string  `query:"start_time" json:"-"`   // 查询开始时间（创建时间 &gt;= 此时间）, 示例值："1608690517811"
	EndTime    *string  `query:"end_time" json:"-"`     // 查询结束时间（创建时间 &lt;= 此时间）, 示例值："1608690517811"
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserIDs    []string `query:"user_ids" json:"-"`     // user_id、open_id 或 union_id，默认为 open_id。,如果传入的值不是 open_id，需要一并传入 user_id_type 参数。,可一次查询多个 id 的用户，例如：user_ids=ou_8ebd4f35d7101ffdeb4771d7c8ec517e&user_ids=ou_7abc4f35d7101ffdeb4771dabcde,[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值：ou_8ebd4f35d7101ffdeb4771d7c8ec517e, 最大长度：`100`
	PageToken  *string  `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："10"
	PageSize   *int64   `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
}

// getEHREmployeeListResp ...
type getEHREmployeeListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetEHREmployeeListResp `json:"data,omitempty"`
}

// GetEHREmployeeListResp ...
type GetEHREmployeeListResp struct {
	Items     []*GetEHREmployeeListRespItem `json:"items,omitempty"`      // 员工列表
	PageToken string                        `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetEHREmployeeListRespItem ...
type GetEHREmployeeListRespItem struct {
	UserID       string                                   `json:"user_id,omitempty"`       // 员工的用户 ID,user_id_type 为 user_id 时返回 user_id；,user_id_type 为 open_id 时返回 open_id；,user_id_type 为 union_id 时返回 union_id；,「待入职」和「已取消入职」的员工，此字段值为 null
	SystemFields *GetEHREmployeeListRespItemSystemFields  `json:"system_fields,omitempty"` // 系统字段
	CustomFields []*GetEHREmployeeListRespItemCustomField `json:"custom_fields,omitempty"` // 自定义字段
}

// GetEHREmployeeListRespItemSystemFields ...
type GetEHREmployeeListRespItemSystemFields struct {
	Name                    string                                                 `json:"name,omitempty"`                      // 中文姓名
	EnName                  string                                                 `json:"en_name,omitempty"`                   // 英文姓名
	Email                   string                                                 `json:"email,omitempty"`                     // 邮箱
	Mobile                  string                                                 `json:"mobile,omitempty"`                    // 手机号码
	DepartmentID            string                                                 `json:"department_id,omitempty"`             // 部门的飞书 open_department_id
	Manager                 *GetEHREmployeeListRespItemSystemFieldsManager         `json:"manager,omitempty"`                   // 上级
	Job                     *GetEHREmployeeListRespItemSystemFieldsJob             `json:"job,omitempty"`                       // 职位
	JobLevel                *GetEHREmployeeListRespItemSystemFieldsJobLevel        `json:"job_level,omitempty"`                 // 职级
	WorkLocation            *GetEHREmployeeListRespItemSystemFieldsWorkLocation    `json:"work_location,omitempty"`             // 工作地点
	Gender                  int64                                                  `json:"gender,omitempty"`                    // 性别, 可选值有: `1`：男, `2`：女
	Birthday                string                                                 `json:"birthday,omitempty"`                  // 出生日期
	NativeRegion            *GetEHREmployeeListRespItemSystemFieldsNativeRegion    `json:"native_region,omitempty"`             // 籍贯
	Ethnicity               int64                                                  `json:"ethnicity,omitempty"`                 // 民族, 可选值有: `1`：汉族, `2`：蒙古族, `3`：回族, `4`：藏族, `5`：维吾尔族, `6`：苗族, `7`：彝族, `8`：壮族, `9`：布依族, `10`：朝鲜族, `11`：满族, `12`：侗族, `13`：瑶族, `14`：白族, `15`：土家族, `16`：哈尼族, `17`：哈萨克族, `18`：傣族, `19`：黎族, `20`：傈僳族, `21`：佤族, `22`：畲族, `23`：高山族, `24`：拉祜族, `25`：水族, `26`：东乡族, `27`：纳西族, `28`：景颇族, `29`：阿昌族, `30`：柯尔克孜族, `31`：土族, `32`：达斡尔族, `33`：仫佬族, `34`：羌族, `35`：布朗族, `36`：撒拉族, `37`：毛南族, `38`：仡佬族, `39`：锡伯族, `40`：普米族, `41`：塔吉克族, `42`：怒族, `43`：乌孜别克族, `44`：俄罗斯族, `45`：鄂温克族, `46`：德昂族, `47`：保安族, `48`：裕固族, `49`：京族, `50`：塔塔尔族, `51`：独龙族, `52`：鄂伦春族, `53`：赫哲族, `54`：门巴族, `55`：珞巴族, `56`：基诺族, `57`：其他
	MaritalStatus           int64                                                  `json:"marital_status,omitempty"`            // 婚姻状况, 可选值有: `1`：未婚, `2`：已婚, `3`：离异, `4`：其他
	PoliticalStatus         int64                                                  `json:"political_status,omitempty"`          // 政治面貌, 可选值有: `1`：中共党员, `2`：中国农工民主党, `3`：中国国民党革命委员会, `4`：中国民主促进会会员, `5`：中国民主同盟成员, `6`：中国民主建国会, `7`：中国致公党党员, `8`：九三学社社员, `9`：共青团员, `10`：其它党派成员, `11`：民主人士, `12`：群众
	EnteredWorkforceDate    string                                                 `json:"entered_workforce_date,omitempty"`    // 参加工作日期
	IDType                  int64                                                 `json:"id_type,omitempty"`                   // 证件类型, 可选值有: `1`：居民身份证, `2`：港澳居民来往内地通行证, `3`：台湾居民来往大陆通行证, `4`：护照, `5`：其他
	IDNumber                string                                                 `json:"id_number,omitempty"`                 // 证件号
	HukouType               int64                                                  `json:"hukou_type,omitempty"`                // 户口类型, 可选值有: `1`：本市城镇, `2`：外埠城镇, `3`：本市农村, `4`：外埠农村
	HukouLocation           string                                                 `json:"hukou_location,omitempty"`            // 户口所在地
	BankAccountNumber       string                                                 `json:"bank_account_number,omitempty"`       // 银行卡号
	BankName                string                                                 `json:"bank_name,omitempty"`                 // 开户行
	SocialSecurityAccount   string                                                 `json:"social_security_account,omitempty"`   // 社保账号
	ProvidentFundAccount    string                                                 `json:"provident_fund_account,omitempty"`    // 公积金账号
	EmployeeNo              string                                                 `json:"employee_no,omitempty"`               // 工号
	EmployeeType            int64                                                  `json:"employee_type,omitempty"`             // 雇员类型, 可选值有: `1`：全职, `2`：实习, `3`：顾问, `4`：外包, `5`：劳务
	Status                  int64                                                  `json:"status,omitempty"`                    // 员工状态, 可选值有: `1`：待入职, `2`：在职, `3`：已取消入职, `4`：待离职, `5`：已离职
	HireDate                string                                                 `json:"hire_date,omitempty"`                 // 入职日期
	ProbationMonths         float64                                                `json:"probation_months,omitempty"`          // 试用期（月）
	ConversionDate          string                                                 `json:"conversion_date,omitempty"`           // 转正日期
	Application             int64                                                  `json:"application,omitempty"`               // 转正申请, 可选值有: `1`：未申请, `2`：审批中, `3`：被驳回, `4`：已通过
	ApplicationStatus       int64                                                  `json:"application_status,omitempty"`        // 转正状态, 可选值有: `1`：无需转正, `2`：待转正, `3`：已转正
	LastDay                 string                                                 `json:"last_day,omitempty"`                  // 离职日期
	DepartureType           int64                                                  `json:"departure_type,omitempty"`            // 离职类型, 可选值有: `1`：主动, `2`：被动
	DepartureReason         int64                                                  `json:"departure_reason,omitempty"`          // 离职原因, 可选值有: `1`：身体、家庭原因, `2`：职业发展, `3`：薪资福利不满意, `4`：工作压力大, `5`：合同到期不续签, `6`：其他, `7`：无法胜任工作, `8`：组织业务调整和岗位优化, `9`：违反公司条例, `10`：试用期未通过, `11`：其他
	DepartureNotes          string                                                 `json:"departure_notes,omitempty"`           // 离职备注
	ContractCompany         *GetEHREmployeeListRespItemSystemFieldsContractCompany `json:"contract_company,omitempty"`          // 合同公司
	ContractType            int64                                                  `json:"contract_type,omitempty"`             // 合同类型, 可选值有: `1`：固定期限劳动合同, `2`：无固定期限劳动合同, `3`：实习协议, `4`：外包协议, `5`：劳务派遣合同, `6`：返聘协议, `7`：其他
	ContractStartDate       string                                                 `json:"contract_start_date,omitempty"`       // 合同开始日期
	ContractExpirationDate  string                                                 `json:"contract_expiration_date,omitempty"`  // 合同到期日期
	ContractSignTimes       int64                                                  `json:"contract_sign_times,omitempty"`       // 劳动合同签订次数
	PersonalEmail           string                                                 `json:"personal_email,omitempty"`            // 个人邮箱
	FamilyAddress           string                                                 `json:"family_address,omitempty"`            // 家庭地址
	PrimaryEmergencyContact *EHREmergencyContact                                   `json:"primary_emergency_contact,omitempty"` // 主要紧急联系人
	EmergencyContact        []*EHREmergencyContact                                 `json:"emergency_contact,omitempty"`         // 紧急联系人
	HighestLevelOfEdu       *EHREducation                                          `json:"highest_level_of_edu,omitempty"`      // 最高学历
	Education               []*EHREducation                                        `json:"education,omitempty"`                 // 教育经历
	FormerWorkExp           *EHRWorkExperience                                     `json:"former_work_exp,omitempty"`           // 前工作经历
	WorkExp                 []*EHRWorkExperience                                   `json:"work_exp,omitempty"`                  // 工作经历
	IDPhotoPoSide           []*EHRAttachment                                       `json:"id_photo_po_side,omitempty"`          // 身份证照片（人像面）
	IDPhotoEmSide           []*EHRAttachment                                       `json:"id_photo_em_side,omitempty"`          // 身份证照片（国徽面）
	IDPhoto                 []*EHRAttachment                                       `json:"id_photo,omitempty"`                  // 证件照
	DiplomaPhoto            []*EHRAttachment                                       `json:"diploma_photo,omitempty"`             // 学位证书
	GraduationCert          []*EHRAttachment                                       `json:"graduation_cert,omitempty"`           // 毕业证书
	CertOfMerit             []*EHRAttachment                                       `json:"cert_of_merit,omitempty"`             // 奖励证明
	OffboardingFile         []*EHRAttachment                                       `json:"offboarding_file,omitempty"`          // 离职证明
	CancelOnboardingReason  int64                                                  `json:"cancel_onboarding_reason,omitempty"`  // 取消入职原因, 可选值有: `1`：个人原因, `2`：原单位留任, `3`：接受其他 Offer, `4`：其他
	CancelOnboardingNotes   string                                                 `json:"cancel_onboarding_notes,omitempty"`   // 取消入职备注
	EmployeeFormStatus      int64                                                  `json:"employee_form_status,omitempty"`      // 入职登记表状态, 可选值有: `1`：未发送, `2`：待提交, `3`：已提交
	CreateTime              int64                                                  `json:"create_time,omitempty"`               // 创建时间
	UpdateTime              int64                                                  `json:"update_time,omitempty"`               // 更新时间
}

// GetEHREmployeeListRespItemSystemFieldsManager ...
type GetEHREmployeeListRespItemSystemFieldsManager struct {
	UserID string `json:"user_id,omitempty"` // 上级的用户 ID（user_id）
	Name   string `json:"name,omitempty"`    // 中文名
	EnName string `json:"en_name,omitempty"` // 英文名
}

// GetEHREmployeeListRespItemSystemFieldsJob ...
type GetEHREmployeeListRespItemSystemFieldsJob struct {
	ID   int64  `json:"id,omitempty"`   // 职位 ID
	Name string `json:"name,omitempty"` // 职位名称
}

// GetEHREmployeeListRespItemSystemFieldsJobLevel ...
type GetEHREmployeeListRespItemSystemFieldsJobLevel struct {
	ID   int64  `json:"id,omitempty"`   // 职级 ID
	Name string `json:"name,omitempty"` // 职级名称
}

// GetEHREmployeeListRespItemSystemFieldsWorkLocation ...
type GetEHREmployeeListRespItemSystemFieldsWorkLocation struct {
	ID   int64  `json:"id,omitempty"`   // 工作地点 ID
	Name string `json:"name,omitempty"` // 工作地点名称
}

// GetEHREmployeeListRespItemSystemFieldsNativeRegion ...
type GetEHREmployeeListRespItemSystemFieldsNativeRegion struct {
	IsoCode string `json:"iso_code,omitempty"` // ISO 编码
	Name    string `json:"name,omitempty"`     // 名称
}

// GetEHREmployeeListRespItemSystemFieldsContractCompany ...
type GetEHREmployeeListRespItemSystemFieldsContractCompany struct {
	ID   int64  `json:"id,omitempty"`   // 公司 ID
	Name string `json:"name,omitempty"` // 公司名称
}

// GetEHREmployeeListRespItemCustomField ...
type GetEHREmployeeListRespItemCustomField struct {
	Key   string `json:"key,omitempty"`   // 自定义字段key
	Label string `json:"label,omitempty"` // 自定义字段名称
	Type  string `json:"type,omitempty"`  // 自定义字段类型, 可选值有: `text`：文本类型, `date`：日期类型，如 2020-01-01, `option`：枚举类型, `file`：附件类型
	Value string `json:"value,omitempty"` // 根据 type 不同，结构不同，不同 type 对应的数据结构在 type 的枚举值中有描述
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetEventOutboundIpList 飞书开放平台向应用配置的回调地址推送事件时，是通过特定的IP发送出去的。如果企业需要做防火墙配置，那么可以通过这个接口获取到所有相关的IP段。
//
// IP段有变更可能，建议企业每隔6小时定时拉取IP段更新防火墙设置，这样因IP变更导致推送失败的事件还可以通过重试解决。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDNxYjL2QTM24iN0EjN/event-v1/outbound_ip/list
func (r *EventService) GetEventOutboundIpList(ctx context.Context, request *GetEventOutboundIpListReq, options ...MethodOptionFunc) (*GetEventOutboundIpListResp, *Response, error) {
	if r.cli.mock.mockEventGetEventOutboundIpList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Event#GetEventOutboundIpList mock enable")
		return r.cli.mock.mockEventGetEventOutboundIpList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Event",
		API:                   "GetEventOutboundIpList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/event/v1/outbound_ip",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getEventOutboundIpListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockEventGetEventOutboundIpList mock EventGetEventOutboundIpList method
func (r *Mock) MockEventGetEventOutboundIpList(f func(ctx context.Context, request *GetEventOutboundIpListReq, options ...MethodOptionFunc) (*GetEventOutboundIpListResp, *Response, error)) {
	r.mockEventGetEventOutboundIpList = f
}

// UnMockEventGetEventOutboundIpList un-mock EventGetEventOutboundIpList method
func (r *Mock) UnMockEventGetEventOutboundIpList() {
	r.mockEventGetEventOutboundIpList = nil
}

// GetEventOutboundIpListReq ...
type GetEventOutboundIpListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
}

// getEventOutboundIpListResp ...
type getEventOutboundIpListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetEventOutboundIpListResp `json:"data,omitempty"`
}

// GetEventOutboundIpListResp ...
type GetEventOutboundIpListResp struct {
	IpList    []string `json:"ip_list,omitempty"`    // outbound ip
	PageToken string   `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool     `json:"has_more,omitempty"`   // 是否还有更多项
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadFile 下载文件接口，只能下载应用自己上传的文件
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能下载机器人自己上传的文件
// - 下载用户发送的资源，请使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/get
func (r *FileService) DownloadFile(ctx context.Context, request *DownloadFileReq, options ...MethodOptionFunc) (*DownloadFileResp, *Response, error) {
	if r.cli.mock.mockFileDownloadFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] File#DownloadFile mock enable")
		return r.cli.mock.mockFileDownloadFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "DownloadFile",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/files/:file_key",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileDownloadFile mock FileDownloadFile method
func (r *Mock) MockFileDownloadFile(f func(ctx context.Context, request *DownloadFileReq, options ...MethodOptionFunc) (*DownloadFileResp, *Response, error)) {
	r.mockFileDownloadFile = f
}

// UnMockFileDownloadFile un-mock FileDownloadFile method
func (r *Mock) UnMockFileDownloadFile() {
	r.mockFileDownloadFile = nil
}

// DownloadFileReq ...
type DownloadFileReq struct {
	FileKey string `path:"file_key" json:"-"` // 文件的key, 示例值："file_456a92d6-c6ea-4de4-ac3f-7afcf44ac78g"
}

// downloadFileResp ...
type downloadFileResp struct {
	IsFile bool              `json:"is_file,omitempty"`
	Code   int64             `json:"code,omitempty"`
	Msg    string            `json:"msg,omitempty"`
	Data   *DownloadFileResp `json:"data,omitempty"`
}

func (r *downloadFileResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadFileResp{}
	}
	r.Data.File = file
}

// DownloadFileResp ...
type DownloadFileResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadImage 下载图片资源，只能下载应用自己上传且图片类型为message的图片
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能下载机器人自己上传且图片类型为message的图片，avatar类型暂不支持下载；
// - 下载用户发送的资源，请使用[获取消息中的资源文件](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get)接口
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/get
func (r *FileService) DownloadImage(ctx context.Context, request *DownloadImageReq, options ...MethodOptionFunc) (*DownloadImageResp, *Response, error) {
	if r.cli.mock.mockFileDownloadImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] File#DownloadImage mock enable")
		return r.cli.mock.mockFileDownloadImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "DownloadImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/images/:image_key",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileDownloadImage mock FileDownloadImage method
func (r *Mock) MockFileDownloadImage(f func(ctx context.Context, request *DownloadImageReq, options ...MethodOptionFunc) (*DownloadImageResp, *Response, error)) {
	r.mockFileDownloadImage = f
}

// UnMockFileDownloadImage un-mock FileDownloadImage method
func (r *Mock) UnMockFileDownloadImage() {
	r.mockFileDownloadImage = nil
}

// DownloadImageReq ...
type DownloadImageReq struct {
	ImageKey string `path:"image_key" json:"-"` // 图片的key, 示例值："img_8d5181ca-0aed-40f0-b0d1-b1452132afbg"
}

// downloadImageResp ...
type downloadImageResp struct {
	IsFile bool               `json:"is_file,omitempty"`
	Code   int64              `json:"code,omitempty"`
	Msg    string             `json:"msg,omitempty"`
	Data   *DownloadImageResp `json:"data,omitempty"`
}

func (r *downloadImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadImageResp{}
	}
	r.Data.File = file
}

// DownloadImageResp ...
type DownloadImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadFile 上传文件，可以上传视频，音频和常见的文件类型
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 不允许上传空文件
// - 示例代码中需要自行替换文件路径和鉴权Token
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create
func (r *FileService) UploadFile(ctx context.Context, request *UploadFileReq, options ...MethodOptionFunc) (*UploadFileResp, *Response, error) {
	if r.cli.mock.mockFileUploadFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] File#UploadFile mock enable")
		return r.cli.mock.mockFileUploadFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "UploadFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/files",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileUploadFile mock FileUploadFile method
func (r *Mock) MockFileUploadFile(f func(ctx context.Context, request *UploadFileReq, options ...MethodOptionFunc) (*UploadFileResp, *Response, error)) {
	r.mockFileUploadFile = f
}

// UnMockFileUploadFile un-mock FileUploadFile method
func (r *Mock) UnMockFileUploadFile() {
	r.mockFileUploadFile = nil
}

// UploadFileReq ...
type UploadFileReq struct {
	FileType FileType  `json:"file_type,omitempty"` // 文件类型, 示例值："mp4", 可选值有: `opus`：上传opus音频文件；,其他格式的音频文件，请转为opus格式后上传，转换方式可参考：ffmpeg -i  SourceFile.mp3 -acodec libopus -ac 1 -ar 16000 TargetFile.opus, `mp4`：上传mp4视频文件, `pdf`：上传pdf格式文件, `doc`：上传doc格式文件, `xls`：上传xls格式文件, `ppt`：上传ppt格式文件, `stream`：上传stream格式文件。以上类型之外，可以使用stream格式
	FileName string    `json:"file_name,omitempty"` // 带后缀的文件名, 示例值："测试视频.mp4"
	Duration *int64    `json:"duration,omitempty"`  // 文件的时长（视频，音频），单位:毫秒。不填充时无法显示具体时长。, 示例值：3000
	File     io.Reader `json:"file,omitempty"`      // 文件内容, 示例值：二进制文件
}

// uploadFileResp ...
type uploadFileResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UploadFileResp `json:"data,omitempty"`
}

// UploadFileResp ...
type UploadFileResp struct {
	FileKey string `json:"file_key,omitempty"` // 文件的key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadImage 上传图片接口，可以上传 JPEG、PNG、WEBP、GIF、TIFF、BMP、ICO格式图片
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 上传的图片大小不能超过10MB
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create
func (r *FileService) UploadImage(ctx context.Context, request *UploadImageReq, options ...MethodOptionFunc) (*UploadImageResp, *Response, error) {
	if r.cli.mock.mockFileUploadImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] File#UploadImage mock enable")
		return r.cli.mock.mockFileUploadImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "UploadImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileUploadImage mock FileUploadImage method
func (r *Mock) MockFileUploadImage(f func(ctx context.Context, request *UploadImageReq, options ...MethodOptionFunc) (*UploadImageResp, *Response, error)) {
	r.mockFileUploadImage = f
}

// UnMockFileUploadImage un-mock FileUploadImage method
func (r *Mock) UnMockFileUploadImage() {
	r.mockFileUploadImage = nil
}

// UploadImageReq ...
type UploadImageReq struct {
	ImageType ImageType `json:"image_type,omitempty"` // 图片类型, 示例值："message", 可选值有: `message`：用于发送消息, `avatar`：用于设置头像
	Image     io.Reader `json:"image,omitempty"`      // 图片内容, 示例值：二进制文件
}

// uploadImageResp ...
type uploadImageResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *UploadImageResp `json:"data,omitempty"`
}

// UploadImageResp ...
type UploadImageResp struct {
	ImageKey string `json:"image_key,omitempty"` // 图片的key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentEmail 该接口用于获取客服邮箱地址
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/agent_email
func (r *HelpdeskService) GetHelpdeskAgentEmail(ctx context.Context, request *GetHelpdeskAgentEmailReq, options ...MethodOptionFunc) (*GetHelpdeskAgentEmailResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentEmail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentEmail mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentEmail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentEmail",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_emails",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentEmailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentEmail mock HelpdeskGetHelpdeskAgentEmail method
func (r *Mock) MockHelpdeskGetHelpdeskAgentEmail(f func(ctx context.Context, request *GetHelpdeskAgentEmailReq, options ...MethodOptionFunc) (*GetHelpdeskAgentEmailResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentEmail = f
}

// UnMockHelpdeskGetHelpdeskAgentEmail un-mock HelpdeskGetHelpdeskAgentEmail method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentEmail() {
	r.mockHelpdeskGetHelpdeskAgentEmail = nil
}

// GetHelpdeskAgentEmailReq ...
type GetHelpdeskAgentEmailReq struct {
}

// getHelpdeskAgentEmailResp ...
type getHelpdeskAgentEmailResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentEmailResp `json:"data,omitempty"`
}

// GetHelpdeskAgentEmailResp ...
type GetHelpdeskAgentEmailResp struct {
	Agents string `json:"agents,omitempty"` // agent emails
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskAgent 更新客服状态等信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/patch
func (r *HelpdeskService) UpdateHelpdeskAgent(ctx context.Context, request *UpdateHelpdeskAgentReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgent mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgent",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskAgent mock HelpdeskUpdateHelpdeskAgent method
func (r *Mock) MockHelpdeskUpdateHelpdeskAgent(f func(ctx context.Context, request *UpdateHelpdeskAgentReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgent = f
}

// UnMockHelpdeskUpdateHelpdeskAgent un-mock HelpdeskUpdateHelpdeskAgent method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgent() {
	r.mockHelpdeskUpdateHelpdeskAgent = nil
}

// UpdateHelpdeskAgentReq ...
type UpdateHelpdeskAgentReq struct {
	AgentID string `path:"agent_id" json:"-"` // 客服id, 示例值："ou_14777d82ffef0f707de5a8c7ff2c5ebe"
	Status  *int64 `json:"status,omitempty"`  // agent status, 示例值：1：在线；2：离线
}

// updateHelpdeskAgentResp ...
type updateHelpdeskAgentResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentResp `json:"data,omitempty"`
}

// UpdateHelpdeskAgentResp ...
type UpdateHelpdeskAgentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskAgentSchedule 该接口用于创建客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/create
func (r *HelpdeskService) CreateHelpdeskAgentSchedule(ctx context.Context, request *CreateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskAgentSchedule",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskAgentSchedule mock HelpdeskCreateHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskCreateHelpdeskAgentSchedule(f func(ctx context.Context, request *CreateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskAgentSchedule = f
}

// UnMockHelpdeskCreateHelpdeskAgentSchedule un-mock HelpdeskCreateHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskCreateHelpdeskAgentSchedule() {
	r.mockHelpdeskCreateHelpdeskAgentSchedule = nil
}

// CreateHelpdeskAgentScheduleReq ...
type CreateHelpdeskAgentScheduleReq struct {
	AgentSchedules []*CreateHelpdeskAgentScheduleReqAgentSchedule `json:"agent_schedules,omitempty"` // 新客服日程
}

// CreateHelpdeskAgentScheduleReqAgentSchedule ...
type CreateHelpdeskAgentScheduleReqAgentSchedule struct {
	AgentID       *string                                                `json:"agent_id,omitempty"`        // 客服id,[可以以普通用户身份在服务台发起工单，从工单详情里面获取用户guest.id](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get), 示例值："agent-id"
	Schedule      []*CreateHelpdeskAgentScheduleReqAgentScheduleSchedule `json:"schedule,omitempty"`        // 工作日程列表
	AgentSkillIDs []string                                               `json:"agent_skill_ids,omitempty"` // 客服技能 ids
}

// CreateHelpdeskAgentScheduleReqAgentScheduleSchedule ...
type CreateHelpdeskAgentScheduleReqAgentScheduleSchedule struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59, 示例值："00:00"
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59, 示例值："24:00"
	Weekday   *int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend, 示例值：9
}

// createHelpdeskAgentScheduleResp ...
type createHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// CreateHelpdeskAgentScheduleResp ...
type CreateHelpdeskAgentScheduleResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskAgentSchedule 该接口用于删除客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/delete
func (r *HelpdeskService) DeleteHelpdeskAgentSchedule(ctx context.Context, request *DeleteHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskAgentSchedule",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskAgentSchedule mock HelpdeskDeleteHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskDeleteHelpdeskAgentSchedule(f func(ctx context.Context, request *DeleteHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskAgentSchedule = f
}

// UnMockHelpdeskDeleteHelpdeskAgentSchedule un-mock HelpdeskDeleteHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskAgentSchedule() {
	r.mockHelpdeskDeleteHelpdeskAgentSchedule = nil
}

// DeleteHelpdeskAgentScheduleReq ...
type DeleteHelpdeskAgentScheduleReq struct {
	AgentID string `path:"agent_id" json:"-"` // agent user id, 示例值："12345"
}

// deleteHelpdeskAgentScheduleResp ...
type deleteHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// DeleteHelpdeskAgentScheduleResp ...
type DeleteHelpdeskAgentScheduleResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSchedule 该接口用于获取客服信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/get
func (r *HelpdeskService) GetHelpdeskAgentSchedule(ctx context.Context, request *GetHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSchedule",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSchedule mock HelpdeskGetHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSchedule(f func(ctx context.Context, request *GetHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSchedule = f
}

// UnMockHelpdeskGetHelpdeskAgentSchedule un-mock HelpdeskGetHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSchedule() {
	r.mockHelpdeskGetHelpdeskAgentSchedule = nil
}

// GetHelpdeskAgentScheduleReq ...
type GetHelpdeskAgentScheduleReq struct {
	AgentID string `path:"agent_id" json:"-"` // 客服 id, 示例值："	客服 id"
}

// getHelpdeskAgentScheduleResp ...
type getHelpdeskAgentScheduleResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// GetHelpdeskAgentScheduleResp ...
type GetHelpdeskAgentScheduleResp struct {
	AgentSchedule *GetHelpdeskAgentScheduleRespAgentSchedule `json:"agent_schedule,omitempty"` // 客服日程
}

// GetHelpdeskAgentScheduleRespAgentSchedule ...
type GetHelpdeskAgentScheduleRespAgentSchedule struct {
	Status      int64                                                  `json:"status,omitempty"`       // 客服状态, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)自动处于非服务时间段
	Agent       *GetHelpdeskAgentScheduleRespAgentScheduleAgent        `json:"agent,omitempty"`        // 客服信息
	Schedule    []*GetHelpdeskAgentScheduleRespAgentScheduleSchedule   `json:"schedule,omitempty"`     // 工作日程列表
	AgentSkills []*GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill `json:"agent_skills,omitempty"` // 客服技能
}

// GetHelpdeskAgentScheduleRespAgentScheduleAgent ...
type GetHelpdeskAgentScheduleRespAgentScheduleAgent struct {
	ID          string `json:"id,omitempty"`           // 客服 id
	AvatarURL   string `json:"avatar_url,omitempty"`   // avatar url
	Name        string `json:"name,omitempty"`         // 客服名字
	Email       string `json:"email,omitempty"`        // email
	Department  string `json:"department,omitempty"`   // 部门
	CompanyName string `json:"company_name,omitempty"` // 公司名
}

// GetHelpdeskAgentScheduleRespAgentScheduleSchedule ...
type GetHelpdeskAgentScheduleRespAgentScheduleSchedule struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59
	EndTime   string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59
	Weekday   int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend
}

// GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill ...
type GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill struct {
	ID        string `json:"id,omitempty"`         // 客服技能 id
	Name      string `json:"name,omitempty"`       // 客服技能名
	IsDefault bool   `json:"is_default,omitempty"` // 是默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentScheduleList 该接口用于获取所有客服信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/list
func (r *HelpdeskService) GetHelpdeskAgentScheduleList(ctx context.Context, request *GetHelpdeskAgentScheduleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentScheduleList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentScheduleList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentScheduleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentScheduleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_schedules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentScheduleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentScheduleList mock HelpdeskGetHelpdeskAgentScheduleList method
func (r *Mock) MockHelpdeskGetHelpdeskAgentScheduleList(f func(ctx context.Context, request *GetHelpdeskAgentScheduleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentScheduleList = f
}

// UnMockHelpdeskGetHelpdeskAgentScheduleList un-mock HelpdeskGetHelpdeskAgentScheduleList method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentScheduleList() {
	r.mockHelpdeskGetHelpdeskAgentScheduleList = nil
}

// GetHelpdeskAgentScheduleListReq ...
type GetHelpdeskAgentScheduleListReq struct {
	Status []int64 `query:"status" json:"-"` // 筛选条件, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)客服, 4 - 移除客服, 示例值：status=1&status=2
}

// getHelpdeskAgentScheduleListResp ...
type getHelpdeskAgentScheduleListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentScheduleListResp `json:"data,omitempty"`
}

// GetHelpdeskAgentScheduleListResp ...
type GetHelpdeskAgentScheduleListResp struct {
	AgentSchedules []*GetHelpdeskAgentScheduleListRespAgentSchedule `json:"agent_schedules,omitempty"` // 客服列表
}

// GetHelpdeskAgentScheduleListRespAgentSchedule ...
type GetHelpdeskAgentScheduleListRespAgentSchedule struct {
	Status      int64                                                      `json:"status,omitempty"`       // 客服状态, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)自动处于非服务时间段
	Agent       *GetHelpdeskAgentScheduleListRespAgentScheduleAgent        `json:"agent,omitempty"`        // 客服信息
	Schedule    []*GetHelpdeskAgentScheduleListRespAgentScheduleSchedule   `json:"schedule,omitempty"`     // 工作日程列表
	AgentSkills []*GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill `json:"agent_skills,omitempty"` // 客服技能
}

// GetHelpdeskAgentScheduleListRespAgentScheduleAgent ...
type GetHelpdeskAgentScheduleListRespAgentScheduleAgent struct {
	ID          string `json:"id,omitempty"`           // 客服 id
	AvatarURL   string `json:"avatar_url,omitempty"`   // avatar url
	Name        string `json:"name,omitempty"`         // 客服名字
	Email       string `json:"email,omitempty"`        // email
	Department  string `json:"department,omitempty"`   // 部门
	CompanyName string `json:"company_name,omitempty"` // 公司名
}

// GetHelpdeskAgentScheduleListRespAgentScheduleSchedule ...
type GetHelpdeskAgentScheduleListRespAgentScheduleSchedule struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59
	EndTime   string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59
	Weekday   int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend
}

// GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill ...
type GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill struct {
	ID        string `json:"id,omitempty"`         // 客服技能 id
	Name      string `json:"name,omitempty"`       // 客服技能名
	IsDefault bool   `json:"is_default,omitempty"` // 是默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskAgentSchedule 该接口用于更新客服的日程
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/patch
func (r *HelpdeskService) UpdateHelpdeskAgentSchedule(ctx context.Context, request *UpdateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgentSchedule",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskAgentSchedule mock HelpdeskUpdateHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskUpdateHelpdeskAgentSchedule(f func(ctx context.Context, request *UpdateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgentSchedule = f
}

// UnMockHelpdeskUpdateHelpdeskAgentSchedule un-mock HelpdeskUpdateHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgentSchedule() {
	r.mockHelpdeskUpdateHelpdeskAgentSchedule = nil
}

// UpdateHelpdeskAgentScheduleReq ...
type UpdateHelpdeskAgentScheduleReq struct {
	AgentID       string                                       `path:"agent_id" json:"-"`        // 客服 id, 示例值："123456"
	AgentSchedule *UpdateHelpdeskAgentScheduleReqAgentSchedule `json:"agent_schedule,omitempty"` // 工作日程列表
}

// UpdateHelpdeskAgentScheduleReqAgentSchedule ...
type UpdateHelpdeskAgentScheduleReqAgentSchedule struct {
	Schedule      []*UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule `json:"schedule,omitempty"`        // 工作日程列表
	AgentSkillIDs []string                                               `json:"agent_skill_ids,omitempty"` // 客服技能 ids
}

// UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule ...
type UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59, 示例值："00:00"
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59, 示例值："24:00"
	Weekday   *int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend, 示例值：9
}

// updateHelpdeskAgentScheduleResp ...
type updateHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// UpdateHelpdeskAgentScheduleResp ...
type UpdateHelpdeskAgentScheduleResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskAgentSkill 该接口用于创建客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/create
func (r *HelpdeskService) CreateHelpdeskAgentSkill(ctx context.Context, request *CreateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskAgentSkill",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskAgentSkill mock HelpdeskCreateHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskCreateHelpdeskAgentSkill(f func(ctx context.Context, request *CreateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskAgentSkill = f
}

// UnMockHelpdeskCreateHelpdeskAgentSkill un-mock HelpdeskCreateHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskCreateHelpdeskAgentSkill() {
	r.mockHelpdeskCreateHelpdeskAgentSkill = nil
}

// CreateHelpdeskAgentSkillReq ...
type CreateHelpdeskAgentSkillReq struct {
	Name     *string                            `json:"name,omitempty"`      // 技能名, 示例值："test-skill"
	Rules    []*CreateHelpdeskAgentSkillReqRule `json:"rules,omitempty"`     // 技能rules
	AgentIDs []string                           `json:"agent_ids,omitempty"` // 客服 ids, 示例值：["客服ID"]
}

// CreateHelpdeskAgentSkillReqRule ...
type CreateHelpdeskAgentSkillReqRule struct {
	ID               *string `json:"id,omitempty"`                // rule id, 参考[获取客服技能rules](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list) 用于获取rules options, 示例值："test-skill-id"
	SelectedOperator *int64  `json:"selected_operator,omitempty"` // 运算符比较, 参考[客服技能运算符选项](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options), 示例值：8
	Operand          *string `json:"operand,omitempty"`           // rule 操作数的值, 示例值："{,                "selected_departments": [,                    {,                        "id": "部门ID",,                        "name": "IT",                    },                ],            }"
	Category         *int64  `json:"category,omitempty"`          // rule 类型，1-知识库，2-工单信息，3-用户飞书信息, 示例值：3
}

// createHelpdeskAgentSkillResp ...
type createHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// CreateHelpdeskAgentSkillResp ...
type CreateHelpdeskAgentSkillResp struct {
	AgentSkillID string `json:"agent_skill_id,omitempty"` // 客服技能id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskAgentSkill 该接口用于删除客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/delete
func (r *HelpdeskService) DeleteHelpdeskAgentSkill(ctx context.Context, request *DeleteHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskAgentSkill",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskAgentSkill mock HelpdeskDeleteHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskDeleteHelpdeskAgentSkill(f func(ctx context.Context, request *DeleteHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskAgentSkill = f
}

// UnMockHelpdeskDeleteHelpdeskAgentSkill un-mock HelpdeskDeleteHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskAgentSkill() {
	r.mockHelpdeskDeleteHelpdeskAgentSkill = nil
}

// DeleteHelpdeskAgentSkillReq ...
type DeleteHelpdeskAgentSkillReq struct {
	AgentSkillID string `path:"agent_skill_id" json:"-"` // agent group id, 示例值："test-skill-id"
}

// deleteHelpdeskAgentSkillResp ...
type deleteHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// DeleteHelpdeskAgentSkillResp ...
type DeleteHelpdeskAgentSkillResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkill 该接口用于获取客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/get
func (r *HelpdeskService) GetHelpdeskAgentSkill(ctx context.Context, request *GetHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkill",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSkill mock HelpdeskGetHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSkill(f func(ctx context.Context, request *GetHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkill = f
}

// UnMockHelpdeskGetHelpdeskAgentSkill un-mock HelpdeskGetHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkill() {
	r.mockHelpdeskGetHelpdeskAgentSkill = nil
}

// GetHelpdeskAgentSkillReq ...
type GetHelpdeskAgentSkillReq struct {
	AgentSkillID string `path:"agent_skill_id" json:"-"` // agent skill id, 示例值："6941215891786825756"
}

// getHelpdeskAgentSkillResp ...
type getHelpdeskAgentSkillResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// GetHelpdeskAgentSkillResp ...
type GetHelpdeskAgentSkillResp struct {
	AgentSkill *GetHelpdeskAgentSkillRespAgentSkill `json:"agent_skill,omitempty"` // 技能
}

// GetHelpdeskAgentSkillRespAgentSkill ...
type GetHelpdeskAgentSkillRespAgentSkill struct {
	ID        string                                      `json:"id,omitempty"`         // 技能id
	Name      string                                      `json:"name,omitempty"`       // 技能名
	Rules     []*GetHelpdeskAgentSkillRespAgentSkillRule  `json:"rules,omitempty"`      // 技能rules
	AgentIDs  []string                                    `json:"agent_ids,omitempty"`  // 具有此技能的客服ids
	IsDefault bool                                        `json:"is_default,omitempty"` // 默认技能
	Agents    []*GetHelpdeskAgentSkillRespAgentSkillAgent `json:"agents,omitempty"`     // 客服 info
}

// GetHelpdeskAgentSkillRespAgentSkillRule ...
type GetHelpdeskAgentSkillRespAgentSkillRule struct {
	ID               string  `json:"id,omitempty"`                // rule id, 参考[获取客服技能rules](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list) 用于获取rules options
	SelectedOperator int64   `json:"selected_operator,omitempty"` // 运算符比较, 参考[客服技能运算符选项](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	OperatorOptions  []int64 `json:"operator_options,omitempty"`  // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand          string  `json:"operand,omitempty"`           // rule 操作数的值
	Category         int64   `json:"category,omitempty"`          // rule 类型，1-知识库，2-工单信息，3-用户飞书信息
	DisplayName      string  `json:"display_name,omitempty"`      // rule 名
}

// GetHelpdeskAgentSkillRespAgentSkillAgent ...
type GetHelpdeskAgentSkillRespAgentSkillAgent struct {
	ID        string `json:"id,omitempty"`         // user id
	AvatarURL string `json:"avatar_url,omitempty"` // user avatar url
	Name      string `json:"name,omitempty"`       // user name
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkillList 获取全部客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/list
func (r *HelpdeskService) GetHelpdeskAgentSkillList(ctx context.Context, request *GetHelpdeskAgentSkillListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkillList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkillList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSkillList mock HelpdeskGetHelpdeskAgentSkillList method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSkillList(f func(ctx context.Context, request *GetHelpdeskAgentSkillListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkillList = f
}

// UnMockHelpdeskGetHelpdeskAgentSkillList un-mock HelpdeskGetHelpdeskAgentSkillList method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkillList() {
	r.mockHelpdeskGetHelpdeskAgentSkillList = nil
}

// GetHelpdeskAgentSkillListReq ...
type GetHelpdeskAgentSkillListReq struct {
}

// getHelpdeskAgentSkillListResp ...
type getHelpdeskAgentSkillListResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillListResp `json:"data,omitempty"`
}

// GetHelpdeskAgentSkillListResp ...
type GetHelpdeskAgentSkillListResp struct {
	AgentSkills []*GetHelpdeskAgentSkillListRespAgentSkill `json:"agent_skills,omitempty"` // 客服技能列表
}

// GetHelpdeskAgentSkillListRespAgentSkill ...
type GetHelpdeskAgentSkillListRespAgentSkill struct {
	ID        string   `json:"id,omitempty"`         // 技能id
	Name      string   `json:"name,omitempty"`       // 技能名
	AgentIDs  []string `json:"agent_ids,omitempty"`  // 具有此技能的客服ids
	IsDefault bool     `json:"is_default,omitempty"` // 默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkillRuleList 该接口用于获取全部客服技能。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list
func (r *HelpdeskService) GetHelpdeskAgentSkillRuleList(ctx context.Context, request *GetHelpdeskAgentSkillRuleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillRuleListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillRuleList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkillRuleList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillRuleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkillRuleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skill_rules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillRuleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSkillRuleList mock HelpdeskGetHelpdeskAgentSkillRuleList method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSkillRuleList(f func(ctx context.Context, request *GetHelpdeskAgentSkillRuleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillRuleListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkillRuleList = f
}

// UnMockHelpdeskGetHelpdeskAgentSkillRuleList un-mock HelpdeskGetHelpdeskAgentSkillRuleList method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkillRuleList() {
	r.mockHelpdeskGetHelpdeskAgentSkillRuleList = nil
}

// GetHelpdeskAgentSkillRuleListReq ...
type GetHelpdeskAgentSkillRuleListReq struct {
}

// getHelpdeskAgentSkillRuleListResp ...
type getHelpdeskAgentSkillRuleListResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillRuleListResp `json:"data,omitempty"`
}

// GetHelpdeskAgentSkillRuleListResp ...
type GetHelpdeskAgentSkillRuleListResp struct {
	Rules []*GetHelpdeskAgentSkillRuleListRespRule `json:"rules,omitempty"` // rules列表
}

// GetHelpdeskAgentSkillRuleListRespRule ...
type GetHelpdeskAgentSkillRuleListRespRule struct {
	ID              string  `json:"id,omitempty"`               // rule id, 参考[获取客服技能rules](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list) 用于获取rules options
	OperatorOptions []int64 `json:"operator_options,omitempty"` // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand         string  `json:"operand,omitempty"`          // rule 操作数的值
	Category        int64   `json:"category,omitempty"`         // rule 类型，1-知识库，2-工单信息，3-用户飞书信息
	DisplayName     string  `json:"display_name,omitempty"`     // rule 名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskAgentSkill 该接口用于更新客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/patch
func (r *HelpdeskService) UpdateHelpdeskAgentSkill(ctx context.Context, request *UpdateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgentSkill",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskAgentSkill mock HelpdeskUpdateHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskUpdateHelpdeskAgentSkill(f func(ctx context.Context, request *UpdateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgentSkill = f
}

// UnMockHelpdeskUpdateHelpdeskAgentSkill un-mock HelpdeskUpdateHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgentSkill() {
	r.mockHelpdeskUpdateHelpdeskAgentSkill = nil
}

// UpdateHelpdeskAgentSkillReq ...
type UpdateHelpdeskAgentSkillReq struct {
	AgentSkillID string                                 `path:"agent_skill_id" json:"-"` // agent skill id, 示例值："test-skill-id"
	AgentSkill   *UpdateHelpdeskAgentSkillReqAgentSkill `json:"agent_skill,omitempty"`   // 更新技能
}

// UpdateHelpdeskAgentSkillReqAgentSkill ...
type UpdateHelpdeskAgentSkillReqAgentSkill struct {
	Name     *string                                     `json:"name,omitempty"`      // 技能名, 示例值："skill-name"
	Rules    *UpdateHelpdeskAgentSkillReqAgentSkillRules `json:"rules,omitempty"`     // 技能rules
	AgentIDs []string                                    `json:"agent_ids,omitempty"` // 具有此技能的客服ids
}

// UpdateHelpdeskAgentSkillReqAgentSkillRules ...
type UpdateHelpdeskAgentSkillReqAgentSkillRules struct {
	ID               *string `json:"id,omitempty"`                // rule id, 参考[获取客服技能rules](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list) 用于获取rules options, 示例值："test-skill-id"
	SelectedOperator *int64  `json:"selected_operator,omitempty"` // 运算符比较, 参考[客服技能运算符选项](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options), 示例值：8
	OperatorOptions  []int64 `json:"operator_options,omitempty"`  // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand          *string `json:"operand,omitempty"`           // rule 操作数的值, 示例值："{,                "selected_departments": [,                    {,                        "id": "部门ID",,                        "name": "IT",                    },                ],            }"
}

// updateHelpdeskAgentSkillResp ...
type updateHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// UpdateHelpdeskAgentSkillResp ...
type UpdateHelpdeskAgentSkillResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskCategory 该接口用于创建知识库分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/create
func (r *HelpdeskService) CreateHelpdeskCategory(ctx context.Context, request *CreateHelpdeskCategoryReq, options ...MethodOptionFunc) (*CreateHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskCategory",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskCategory mock HelpdeskCreateHelpdeskCategory method
func (r *Mock) MockHelpdeskCreateHelpdeskCategory(f func(ctx context.Context, request *CreateHelpdeskCategoryReq, options ...MethodOptionFunc) (*CreateHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskCategory = f
}

// UnMockHelpdeskCreateHelpdeskCategory un-mock HelpdeskCreateHelpdeskCategory method
func (r *Mock) UnMockHelpdeskCreateHelpdeskCategory() {
	r.mockHelpdeskCreateHelpdeskCategory = nil
}

// CreateHelpdeskCategoryReq ...
type CreateHelpdeskCategoryReq struct {
	Name     string  `json:"name,omitempty"`      // 名称, 示例值："创建团队和邀请成员"
	ParentID string  `json:"parent_id,omitempty"` // 父知识库分类ID, 示例值："0"
	Language *string `json:"language,omitempty"`  // 语言, 示例值："zh_cn"
}

// createHelpdeskCategoryResp ...
type createHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskCategoryResp `json:"data,omitempty"`
}

// CreateHelpdeskCategoryResp ...
type CreateHelpdeskCategoryResp struct {
	Category *HelpdeskCategory `json:"category,omitempty"` // 知识库分类
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskCategory 该接口用于删除知识库分类详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/delete
func (r *HelpdeskService) DeleteHelpdeskCategory(ctx context.Context, request *DeleteHelpdeskCategoryReq, options ...MethodOptionFunc) (*DeleteHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskCategory",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskCategory mock HelpdeskDeleteHelpdeskCategory method
func (r *Mock) MockHelpdeskDeleteHelpdeskCategory(f func(ctx context.Context, request *DeleteHelpdeskCategoryReq, options ...MethodOptionFunc) (*DeleteHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskCategory = f
}

// UnMockHelpdeskDeleteHelpdeskCategory un-mock HelpdeskDeleteHelpdeskCategory method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskCategory() {
	r.mockHelpdeskDeleteHelpdeskCategory = nil
}

// DeleteHelpdeskCategoryReq ...
type DeleteHelpdeskCategoryReq struct {
	ID string `path:"id" json:"-"` // 知识库分类ID, 示例值："6948728206392295444"
}

// deleteHelpdeskCategoryResp ...
type deleteHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskCategoryResp `json:"data,omitempty"`
}

// DeleteHelpdeskCategoryResp ...
type DeleteHelpdeskCategoryResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskCategory 该接口用于获取知识库分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/get
func (r *HelpdeskService) GetHelpdeskCategory(ctx context.Context, request *GetHelpdeskCategoryReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskCategory",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskCategory mock HelpdeskGetHelpdeskCategory method
func (r *Mock) MockHelpdeskGetHelpdeskCategory(f func(ctx context.Context, request *GetHelpdeskCategoryReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskCategory = f
}

// UnMockHelpdeskGetHelpdeskCategory un-mock HelpdeskGetHelpdeskCategory method
func (r *Mock) UnMockHelpdeskGetHelpdeskCategory() {
	r.mockHelpdeskGetHelpdeskCategory = nil
}

// GetHelpdeskCategoryReq ...
type GetHelpdeskCategoryReq struct {
	ID string `path:"id" json:"-"` // 知识库分类ID, 示例值："6948728206392295444"
}

// getHelpdeskCategoryResp ...
type getHelpdeskCategoryResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskCategoryResp `json:"data,omitempty"`
}

// GetHelpdeskCategoryResp ...
type GetHelpdeskCategoryResp struct {
	CategoryID string `json:"category_id,omitempty"` // 知识库分类ID
	ID         string `json:"id,omitempty"`          // 知识库分类ID，（旧版，请使用category_id）
	Name       string `json:"name,omitempty"`        // 名称
	HelpdeskID string `json:"helpdesk_id,omitempty"` // 服务台ID
	Language   string `json:"language,omitempty"`    // 语言
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskCategoryList
//
// 该接口用于获取服务台知识库所有分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/list-categories
func (r *HelpdeskService) GetHelpdeskCategoryList(ctx context.Context, request *GetHelpdeskCategoryListReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskCategoryList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskCategoryList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskCategoryList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskCategoryList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskCategoryListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskCategoryList mock HelpdeskGetHelpdeskCategoryList method
func (r *Mock) MockHelpdeskGetHelpdeskCategoryList(f func(ctx context.Context, request *GetHelpdeskCategoryListReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskCategoryList = f
}

// UnMockHelpdeskGetHelpdeskCategoryList un-mock HelpdeskGetHelpdeskCategoryList method
func (r *Mock) UnMockHelpdeskGetHelpdeskCategoryList() {
	r.mockHelpdeskGetHelpdeskCategoryList = nil
}

// GetHelpdeskCategoryListReq ...
type GetHelpdeskCategoryListReq struct {
	Lang    *string `query:"lang" json:"-"`     // 知识库分类语言, 示例值："zh_cn"
	OrderBy *int64  `query:"order_by" json:"-"` // 排序键。1: 根据知识库分类更新时间排序, 示例值：1
	Asc     *bool   `query:"asc" json:"-"`      // 顺序。true: 正序；false：反序, 示例值：true
}

// getHelpdeskCategoryListResp ...
type getHelpdeskCategoryListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskCategoryListResp `json:"data,omitempty"`
}

// GetHelpdeskCategoryListResp ...
type GetHelpdeskCategoryListResp struct {
	Categories []*HelpdeskCategory `json:"categories,omitempty"` // 知识库分类列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskCategory 该接口用于更新知识库分类详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/patch
func (r *HelpdeskService) UpdateHelpdeskCategory(ctx context.Context, request *UpdateHelpdeskCategoryReq, options ...MethodOptionFunc) (*UpdateHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskCategory",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskCategory mock HelpdeskUpdateHelpdeskCategory method
func (r *Mock) MockHelpdeskUpdateHelpdeskCategory(f func(ctx context.Context, request *UpdateHelpdeskCategoryReq, options ...MethodOptionFunc) (*UpdateHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskCategory = f
}

// UnMockHelpdeskUpdateHelpdeskCategory un-mock HelpdeskUpdateHelpdeskCategory method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskCategory() {
	r.mockHelpdeskUpdateHelpdeskCategory = nil
}

// UpdateHelpdeskCategoryReq ...
type UpdateHelpdeskCategoryReq struct {
	ID       string  `path:"id" json:"-"`         // category id, 示例值："6948728206392295444"
	Name     *string `json:"name,omitempty"`      // 名称, 示例值："创建团队和邀请成员"
	ParentID *string `json:"parent_id,omitempty"` // 父知识库分类ID, 示例值："0"
}

// updateHelpdeskCategoryResp ...
type updateHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskCategoryResp `json:"data,omitempty"`
}

// UpdateHelpdeskCategoryResp ...
type UpdateHelpdeskCategoryResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeHelpdeskEvent 用于订阅服务台事件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/subscribe
func (r *HelpdeskService) SubscribeHelpdeskEvent(ctx context.Context, request *SubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*SubscribeHelpdeskEventResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSubscribeHelpdeskEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SubscribeHelpdeskEvent mock enable")
		return r.cli.mock.mockHelpdeskSubscribeHelpdeskEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SubscribeHelpdeskEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/events/subscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(subscribeHelpdeskEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSubscribeHelpdeskEvent mock HelpdeskSubscribeHelpdeskEvent method
func (r *Mock) MockHelpdeskSubscribeHelpdeskEvent(f func(ctx context.Context, request *SubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*SubscribeHelpdeskEventResp, *Response, error)) {
	r.mockHelpdeskSubscribeHelpdeskEvent = f
}

// UnMockHelpdeskSubscribeHelpdeskEvent un-mock HelpdeskSubscribeHelpdeskEvent method
func (r *Mock) UnMockHelpdeskSubscribeHelpdeskEvent() {
	r.mockHelpdeskSubscribeHelpdeskEvent = nil
}

// SubscribeHelpdeskEventReq ...
type SubscribeHelpdeskEventReq struct {
	Events []*SubscribeHelpdeskEventReqEvent `json:"events,omitempty"` // 可订阅的事件列表
}

// SubscribeHelpdeskEventReqEvent ...
type SubscribeHelpdeskEventReqEvent struct {
	Type    string `json:"type,omitempty"`    // 事件类型, 示例值："helpdesk.ticket_message"
	Subtype string `json:"subtype,omitempty"` // 事件子类型, 示例值："ticket_message.created_v1"
}

// subscribeHelpdeskEventResp ...
type subscribeHelpdeskEventResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeHelpdeskEventResp `json:"data,omitempty"`
}

// SubscribeHelpdeskEventResp ...
type SubscribeHelpdeskEventResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnsubscribeHelpdeskEvent 用于取消订阅服务台事件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/unsubscribe
func (r *HelpdeskService) UnsubscribeHelpdeskEvent(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UnsubscribeHelpdeskEvent mock enable")
		return r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "UnsubscribeHelpdeskEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/events/unsubscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(unsubscribeHelpdeskEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUnsubscribeHelpdeskEvent mock HelpdeskUnsubscribeHelpdeskEvent method
func (r *Mock) MockHelpdeskUnsubscribeHelpdeskEvent(f func(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error)) {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = f
}

// UnMockHelpdeskUnsubscribeHelpdeskEvent un-mock HelpdeskUnsubscribeHelpdeskEvent method
func (r *Mock) UnMockHelpdeskUnsubscribeHelpdeskEvent() {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = nil
}

// UnsubscribeHelpdeskEventReq ...
type UnsubscribeHelpdeskEventReq struct {
	Events []*UnsubscribeHelpdeskEventReqEvent `json:"events,omitempty"` // event list to unsubscribe
}

// UnsubscribeHelpdeskEventReqEvent ...
type UnsubscribeHelpdeskEventReqEvent struct {
	Type    string `json:"type,omitempty"`    // 事件类型, 示例值："helpdesk.ticket_message"
	Subtype string `json:"subtype,omitempty"` // 事件子类型, 示例值："ticket_message.created_v1"
}

// unsubscribeHelpdeskEventResp ...
type unsubscribeHelpdeskEventResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UnsubscribeHelpdeskEventResp `json:"data,omitempty"`
}

// UnsubscribeHelpdeskEventResp ...
type UnsubscribeHelpdeskEventResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskFAQ 该接口用于创建知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/create
func (r *HelpdeskService) CreateHelpdeskFAQ(ctx context.Context, request *CreateHelpdeskFAQReq, options ...MethodOptionFunc) (*CreateHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskFAQ",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskFAQ mock HelpdeskCreateHelpdeskFAQ method
func (r *Mock) MockHelpdeskCreateHelpdeskFAQ(f func(ctx context.Context, request *CreateHelpdeskFAQReq, options ...MethodOptionFunc) (*CreateHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskFAQ = f
}

// UnMockHelpdeskCreateHelpdeskFAQ un-mock HelpdeskCreateHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskCreateHelpdeskFAQ() {
	r.mockHelpdeskCreateHelpdeskFAQ = nil
}

// CreateHelpdeskFAQReq ...
type CreateHelpdeskFAQReq struct {
	FAQ *CreateHelpdeskFAQReqFAQ `json:"faq,omitempty"` // 知识库详情
}

// CreateHelpdeskFAQReqFAQ ...
type CreateHelpdeskFAQReqFAQ struct {
	CategoryID     *string  `json:"category_id,omitempty"`     // 知识库分类ID, 示例值："6836004780707807251"
	Question       string   `json:"question,omitempty"`        // 问题, 示例值："问题"
	Answer         *string  `json:"answer,omitempty"`          // 答案, 示例值："答案"
	AnswerRichtext *string  `json:"answer_richtext,omitempty"` // 富文本答案和答案必须有一个必填。Json Array格式，富文本结构请见[了解更多: 富文本](https://open.feishu.cn/document/ukTMukTMukTM/uITM0YjLyEDN24iMxQjN), 示例值："[{,                        "content": "这只是一个测试，医保问题",,                        "type": "text",                    }]"
	Tags           []string `json:"tags,omitempty"`            // 相似问题, 示例值：["tag1","tag2","tag3"]
}

// createHelpdeskFAQResp ...
type createHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskFAQResp `json:"data,omitempty"`
}

// CreateHelpdeskFAQResp ...
type CreateHelpdeskFAQResp struct {
	FAQ *CreateHelpdeskFAQRespFAQ `json:"faq,omitempty"` // 知识库详情
}

// CreateHelpdeskFAQRespFAQ ...
type CreateHelpdeskFAQRespFAQ struct {
	FAQID          string                              `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                              `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                              `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                              `json:"question,omitempty"`        // 问题
	Answer         string                              `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                              `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                               `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                               `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                 `json:"categories,omitempty"`      // 分类
	Tags           []string                            `json:"tags,omitempty"`            // 相似问题列表
	ExpireTime     int64                               `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *CreateHelpdeskFAQRespFAQUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *CreateHelpdeskFAQRespFAQCreateUser `json:"create_user,omitempty"`     // 创建用户
}

// CreateHelpdeskFAQRespFAQUpdateUser ...
type CreateHelpdeskFAQRespFAQUpdateUser struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// CreateHelpdeskFAQRespFAQCreateUser ...
type CreateHelpdeskFAQRespFAQCreateUser struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskFAQ 该接口用于删除知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/delete
func (r *HelpdeskService) DeleteHelpdeskFAQ(ctx context.Context, request *DeleteHelpdeskFAQReq, options ...MethodOptionFunc) (*DeleteHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskFAQ",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskFAQ mock HelpdeskDeleteHelpdeskFAQ method
func (r *Mock) MockHelpdeskDeleteHelpdeskFAQ(f func(ctx context.Context, request *DeleteHelpdeskFAQReq, options ...MethodOptionFunc) (*DeleteHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskFAQ = f
}

// UnMockHelpdeskDeleteHelpdeskFAQ un-mock HelpdeskDeleteHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskFAQ() {
	r.mockHelpdeskDeleteHelpdeskFAQ = nil
}

// DeleteHelpdeskFAQReq ...
type DeleteHelpdeskFAQReq struct {
	ID string `path:"id" json:"-"` // id, 示例值："12345"
}

// deleteHelpdeskFAQResp ...
type deleteHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskFAQResp `json:"data,omitempty"`
}

// DeleteHelpdeskFAQResp ...
type DeleteHelpdeskFAQResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQ 该接口用于获取服务台知识库详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/get
func (r *HelpdeskService) GetHelpdeskFAQ(ctx context.Context, request *GetHelpdeskFAQReq, options ...MethodOptionFunc) (*GetHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQ",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskFAQ mock HelpdeskGetHelpdeskFAQ method
func (r *Mock) MockHelpdeskGetHelpdeskFAQ(f func(ctx context.Context, request *GetHelpdeskFAQReq, options ...MethodOptionFunc) (*GetHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQ = f
}

// UnMockHelpdeskGetHelpdeskFAQ un-mock HelpdeskGetHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskGetHelpdeskFAQ() {
	r.mockHelpdeskGetHelpdeskFAQ = nil
}

// GetHelpdeskFAQReq ...
type GetHelpdeskFAQReq struct {
	ID string `path:"id" json:"-"` // 知识库ID, 示例值："6856395634652479491"
}

// getHelpdeskFAQResp ...
type getHelpdeskFAQResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskFAQResp `json:"data,omitempty"`
}

// GetHelpdeskFAQResp ...
type GetHelpdeskFAQResp struct {
	FAQ *GetHelpdeskFAQRespFAQ `json:"faq,omitempty"` // 知识库详情
}

// GetHelpdeskFAQRespFAQ ...
type GetHelpdeskFAQRespFAQ struct {
	FAQID          string                           `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                           `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                           `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                           `json:"question,omitempty"`        // 问题
	Answer         string                           `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                           `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                            `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                            `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory              `json:"categories,omitempty"`      // 分类
	Tags           []string                         `json:"tags,omitempty"`            // 相似问题列表
	ExpireTime     int64                            `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *GetHelpdeskFAQRespFAQUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *GetHelpdeskFAQRespFAQCreateUser `json:"create_user,omitempty"`     // 创建用户
}

// GetHelpdeskFAQRespFAQUpdateUser ...
type GetHelpdeskFAQRespFAQUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// GetHelpdeskFAQRespFAQCreateUser ...
type GetHelpdeskFAQRespFAQCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQImage 该接口用于获取知识库图像。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/faq_image
func (r *HelpdeskService) GetHelpdeskFAQImage(ctx context.Context, request *GetHelpdeskFAQImageReq, options ...MethodOptionFunc) (*GetHelpdeskFAQImageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQImage mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id/image/:image_key",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskFAQImage mock HelpdeskGetHelpdeskFAQImage method
func (r *Mock) MockHelpdeskGetHelpdeskFAQImage(f func(ctx context.Context, request *GetHelpdeskFAQImageReq, options ...MethodOptionFunc) (*GetHelpdeskFAQImageResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQImage = f
}

// UnMockHelpdeskGetHelpdeskFAQImage un-mock HelpdeskGetHelpdeskFAQImage method
func (r *Mock) UnMockHelpdeskGetHelpdeskFAQImage() {
	r.mockHelpdeskGetHelpdeskFAQImage = nil
}

// GetHelpdeskFAQImageReq ...
type GetHelpdeskFAQImageReq struct {
	ID       string `path:"id" json:"-"`        // 知识库ID, 示例值："12345"
	ImageKey string `path:"image_key" json:"-"` // 图像key, 示例值："img_b07ffac0-19c1-48a3-afca-599f8ea825fj"
}

// getHelpdeskFAQImageResp ...
type getHelpdeskFAQImageResp struct {
	IsFile bool                     `json:"is_file,omitempty"`
	Code   int64                    `json:"code,omitempty"`
	Msg    string                   `json:"msg,omitempty"`
	Data   *GetHelpdeskFAQImageResp `json:"data,omitempty"`
}

func (r *getHelpdeskFAQImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetHelpdeskFAQImageResp{}
	}
	r.Data.File = file
}

// GetHelpdeskFAQImageResp ...
type GetHelpdeskFAQImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQList 该接口用于获取服务台知识库详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/list
func (r *HelpdeskService) GetHelpdeskFAQList(ctx context.Context, request *GetHelpdeskFAQListReq, options ...MethodOptionFunc) (*GetHelpdeskFAQListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskFAQList mock HelpdeskGetHelpdeskFAQList method
func (r *Mock) MockHelpdeskGetHelpdeskFAQList(f func(ctx context.Context, request *GetHelpdeskFAQListReq, options ...MethodOptionFunc) (*GetHelpdeskFAQListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQList = f
}

// UnMockHelpdeskGetHelpdeskFAQList un-mock HelpdeskGetHelpdeskFAQList method
func (r *Mock) UnMockHelpdeskGetHelpdeskFAQList() {
	r.mockHelpdeskGetHelpdeskFAQList = nil
}

// GetHelpdeskFAQListReq ...
type GetHelpdeskFAQListReq struct {
	CategoryID *string `query:"category_id" json:"-"` // 知识库分类ID, 示例值："6856395522433908739"
	Status     *string `query:"status" json:"-"`      // 搜索条件: 知识库状态 1:在线 0:删除，可恢复 2：删除，不可恢复	, 示例值："1"
	Search     *string `query:"search" json:"-"`      // 搜索条件: 关键词，匹配问题标题，问题关键字，用户姓名	, 示例值："点餐"
	PageToken  *string `query:"page_token" json:"-"`  // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6856395634652479491"
	PageSize   *int64  `query:"page_size" json:"-"`   // 分页大小, 示例值：10, 最大值：`100`
}

// getHelpdeskFAQListResp ...
type getHelpdeskFAQListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskFAQListResp `json:"data,omitempty"`
}

// GetHelpdeskFAQListResp ...
type GetHelpdeskFAQListResp struct {
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                        `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	PageSize  int64                         `json:"page_size,omitempty"`  // 实际返回的FAQ数量
	Total     int64                         `json:"total,omitempty"`      // 总数
	Items     []*GetHelpdeskFAQListRespItem `json:"items,omitempty"`      // 知识库列表
}

// GetHelpdeskFAQListRespItem ...
type GetHelpdeskFAQListRespItem struct {
	FAQID          string                                `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                                `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                                `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                                `json:"question,omitempty"`        // 问题
	Answer         string                                `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                                `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                                 `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                                 `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                   `json:"categories,omitempty"`      // 分类
	Tags           []string                              `json:"tags,omitempty"`            // 相似问题列表
	ExpireTime     int64                                 `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *GetHelpdeskFAQListRespItemUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *GetHelpdeskFAQListRespItemCreateUser `json:"create_user,omitempty"`     // 创建用户
}

// GetHelpdeskFAQListRespItemUpdateUser ...
type GetHelpdeskFAQListRespItemUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// GetHelpdeskFAQListRespItemCreateUser ...
type GetHelpdeskFAQListRespItemCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchHelpdeskFAQ 该接口用于搜索服务台知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/search
func (r *HelpdeskService) SearchHelpdeskFAQ(ctx context.Context, request *SearchHelpdeskFAQReq, options ...MethodOptionFunc) (*SearchHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSearchHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SearchHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskSearchHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SearchHelpdeskFAQ",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(searchHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSearchHelpdeskFAQ mock HelpdeskSearchHelpdeskFAQ method
func (r *Mock) MockHelpdeskSearchHelpdeskFAQ(f func(ctx context.Context, request *SearchHelpdeskFAQReq, options ...MethodOptionFunc) (*SearchHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskSearchHelpdeskFAQ = f
}

// UnMockHelpdeskSearchHelpdeskFAQ un-mock HelpdeskSearchHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskSearchHelpdeskFAQ() {
	r.mockHelpdeskSearchHelpdeskFAQ = nil
}

// SearchHelpdeskFAQReq ...
type SearchHelpdeskFAQReq struct {
	Query     string  `query:"query" json:"-"`      // 搜索query,，query内容如果不是英文，包含中文空格等有两种编码策略：1. url编码 2. base64编码，同时加上base64=true参数, 示例值："wifi"
	Base64    *string `query:"base64" json:"-"`     // 是否转换为base64,输入true表示是，不填写表示否，中文需要转换为base64, 示例值："5bel5Y2V"
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6936004780707807251"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
}

// searchHelpdeskFAQResp ...
type searchHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *SearchHelpdeskFAQResp `json:"data,omitempty"`
}

// SearchHelpdeskFAQResp ...
type SearchHelpdeskFAQResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*SearchHelpdeskFAQRespItem `json:"items,omitempty"`      // 知识库列表
}

// SearchHelpdeskFAQRespItem ...
type SearchHelpdeskFAQRespItem struct {
	FAQID          string                                     `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                                     `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                                     `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                                     `json:"question,omitempty"`        // 问题
	Answer         string                                     `json:"answer,omitempty"`          // 答案
	AnswerRichtext []*SearchHelpdeskFAQRespItemAnswerRichtext `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                                      `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                                      `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                        `json:"categories,omitempty"`      // 分类
	Tags           []string                                   `json:"tags,omitempty"`            // 相似问题列表
	ExpireTime     int64                                      `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *SearchHelpdeskFAQRespItemUpdateUser       `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *SearchHelpdeskFAQRespItemCreateUser       `json:"create_user,omitempty"`     // 创建用户
}

// SearchHelpdeskFAQRespItemAnswerRichtext ...
type SearchHelpdeskFAQRespItemAnswerRichtext struct {
	Content string `json:"content,omitempty"` // 内容
	Type    string `json:"type,omitempty"`    // 类型
}

// SearchHelpdeskFAQRespItemUpdateUser ...
type SearchHelpdeskFAQRespItemUpdateUser struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// SearchHelpdeskFAQRespItemCreateUser ...
type SearchHelpdeskFAQRespItemCreateUser struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskFAQ 该接口用于修改知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/patch
func (r *HelpdeskService) UpdateHelpdeskFAQ(ctx context.Context, request *UpdateHelpdeskFAQReq, options ...MethodOptionFunc) (*UpdateHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskFAQ",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskFAQ mock HelpdeskUpdateHelpdeskFAQ method
func (r *Mock) MockHelpdeskUpdateHelpdeskFAQ(f func(ctx context.Context, request *UpdateHelpdeskFAQReq, options ...MethodOptionFunc) (*UpdateHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskFAQ = f
}

// UnMockHelpdeskUpdateHelpdeskFAQ un-mock HelpdeskUpdateHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskFAQ() {
	r.mockHelpdeskUpdateHelpdeskFAQ = nil
}

// UpdateHelpdeskFAQReq ...
type UpdateHelpdeskFAQReq struct {
	ID  string                   `path:"id" json:"-"`   // 知识库ID, 示例值："6856395634652479491"
	FAQ *UpdateHelpdeskFAQReqFAQ `json:"faq,omitempty"` // 修改的知识库内容
}

// UpdateHelpdeskFAQReqFAQ ...
type UpdateHelpdeskFAQReqFAQ struct {
	CategoryID     *string  `json:"category_id,omitempty"`     // 知识库分类ID, 示例值："6836004780707807251"
	Question       string   `json:"question,omitempty"`        // 问题, 示例值："问题"
	Answer         *string  `json:"answer,omitempty"`          // 答案, 示例值："答案"
	AnswerRichtext *string  `json:"answer_richtext,omitempty"` // 富文本答案和答案必须有一个必填。Json Array格式，富文本结构请见[了解更多: 富文本](https://open.feishu.cn/document/ukTMukTMukTM/uITM0YjLyEDN24iMxQjN), 示例值："[{,                        "content": "这只是一个测试，医保问题",,                        "type": "text",                    }]"
	Tags           []string `json:"tags,omitempty"`            // 相似问题
}

// updateHelpdeskFAQResp ...
type updateHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskFAQResp `json:"data,omitempty"`
}

// UpdateHelpdeskFAQResp ...
type UpdateHelpdeskFAQResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendHelpdeskMessage 通过服务台机器人给指定用户的服务台专属群或私聊发送消息，支持文本、富文本、卡片、图片。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/bot-message/create
func (r *HelpdeskService) SendHelpdeskMessage(ctx context.Context, request *SendHelpdeskMessageReq, options ...MethodOptionFunc) (*SendHelpdeskMessageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSendHelpdeskMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendHelpdeskMessage mock enable")
		return r.cli.mock.mockHelpdeskSendHelpdeskMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SendHelpdeskMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/message",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(sendHelpdeskMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSendHelpdeskMessage mock HelpdeskSendHelpdeskMessage method
func (r *Mock) MockHelpdeskSendHelpdeskMessage(f func(ctx context.Context, request *SendHelpdeskMessageReq, options ...MethodOptionFunc) (*SendHelpdeskMessageResp, *Response, error)) {
	r.mockHelpdeskSendHelpdeskMessage = f
}

// UnMockHelpdeskSendHelpdeskMessage un-mock HelpdeskSendHelpdeskMessage method
func (r *Mock) UnMockHelpdeskSendHelpdeskMessage() {
	r.mockHelpdeskSendHelpdeskMessage = nil
}

// SendHelpdeskMessageReq ...
type SendHelpdeskMessageReq struct {
	UserIDType  *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MsgType     MsgType `json:"msg_type,omitempty"`     // 消息类型, 示例值："post", 可选值有: `text`：普通文本, `post`：富文本, `image`：图片, `interactive`：卡片消息
	Content     string  `json:"content,omitempty"`      // 消息内容，json格式结构序列化成string。格式说明参考: [发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json), 示例值："{\"post\":{\"zh_cn\":{\"title\":\"some title\",\"content\":[[{\"tag\":\"text\",\"text\":\"some content\"}]]}}}"
	ReceiverID  string  `json:"receiver_id,omitempty"`  // 接收消息用户id, 示例值："ou_7346484524"
	ReceiveType *string `json:"receive_type,omitempty"` // 接收消息方式，chat(服务台专属服务群)或user(服务台机器人私聊)。若选择专属服务群，用户有正在处理的工单将会发送失败。默认以chat方式发送。, 示例值："chat", 可选值有: `chat`：通过服务台专属群发送, `user`：通过服务台机器人私聊发送
}

// sendHelpdeskMessageResp ...
type sendHelpdeskMessageResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *SendHelpdeskMessageResp `json:"data,omitempty"`
}

// SendHelpdeskMessageResp ...
type SendHelpdeskMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // chat消息open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CancelApproveHelpdeskNotification 提交审核后，如果需要取消审核，则调用此接口
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_approve
func (r *HelpdeskService) CancelApproveHelpdeskNotification(ctx context.Context, request *CancelApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelApproveHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCancelApproveHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CancelApproveHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskCancelApproveHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CancelApproveHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/cancel_approve",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(cancelApproveHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCancelApproveHelpdeskNotification mock HelpdeskCancelApproveHelpdeskNotification method
func (r *Mock) MockHelpdeskCancelApproveHelpdeskNotification(f func(ctx context.Context, request *CancelApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelApproveHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskCancelApproveHelpdeskNotification = f
}

// UnMockHelpdeskCancelApproveHelpdeskNotification un-mock HelpdeskCancelApproveHelpdeskNotification method
func (r *Mock) UnMockHelpdeskCancelApproveHelpdeskNotification() {
	r.mockHelpdeskCancelApproveHelpdeskNotification = nil
}

// CancelApproveHelpdeskNotificationReq ...
type CancelApproveHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 唯一ID, 示例值："6981801914270744596"
}

// cancelApproveHelpdeskNotificationResp ...
type cancelApproveHelpdeskNotificationResp struct {
	Code int64                                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                 `json:"msg,omitempty"`  // 错误描述
	Data *CancelApproveHelpdeskNotificationResp `json:"data,omitempty"`
}

// CancelApproveHelpdeskNotificationResp ...
type CancelApproveHelpdeskNotificationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CancelSendHelpdeskNotification 取消推送接口，审核通过后待调度可以调用，发送过程中可以调用（会撤回已发送的消息），发送完成后可以需要推送（会撤回所有已发送的消息）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_send
func (r *HelpdeskService) CancelSendHelpdeskNotification(ctx context.Context, request *CancelSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelSendHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCancelSendHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CancelSendHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskCancelSendHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CancelSendHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/cancel_send",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(cancelSendHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCancelSendHelpdeskNotification mock HelpdeskCancelSendHelpdeskNotification method
func (r *Mock) MockHelpdeskCancelSendHelpdeskNotification(f func(ctx context.Context, request *CancelSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelSendHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskCancelSendHelpdeskNotification = f
}

// UnMockHelpdeskCancelSendHelpdeskNotification un-mock HelpdeskCancelSendHelpdeskNotification method
func (r *Mock) UnMockHelpdeskCancelSendHelpdeskNotification() {
	r.mockHelpdeskCancelSendHelpdeskNotification = nil
}

// CancelSendHelpdeskNotificationReq ...
type CancelSendHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 唯一ID, 示例值："6981801914270744596"
	IsRecall       bool   `json:"is_recall,omitempty"`      // 是否召回已发送的消息,新人入职消息同样适用, 示例值：true
}

// cancelSendHelpdeskNotificationResp ...
type cancelSendHelpdeskNotificationResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *CancelSendHelpdeskNotificationResp `json:"data,omitempty"`
}

// CancelSendHelpdeskNotificationResp ...
type CancelSendHelpdeskNotificationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskNotification 调用接口创建推送，创建成功后为草稿状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/create
func (r *HelpdeskService) CreateHelpdeskNotification(ctx context.Context, request *CreateHelpdeskNotificationReq, options ...MethodOptionFunc) (*CreateHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskNotification mock HelpdeskCreateHelpdeskNotification method
func (r *Mock) MockHelpdeskCreateHelpdeskNotification(f func(ctx context.Context, request *CreateHelpdeskNotificationReq, options ...MethodOptionFunc) (*CreateHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskNotification = f
}

// UnMockHelpdeskCreateHelpdeskNotification un-mock HelpdeskCreateHelpdeskNotification method
func (r *Mock) UnMockHelpdeskCreateHelpdeskNotification() {
	r.mockHelpdeskCreateHelpdeskNotification = nil
}

// CreateHelpdeskNotificationReq ...
type CreateHelpdeskNotificationReq struct {
	UserIDType                  *IDType                                                 `query:"user_id_type" json:"-"`                    // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	ID                          *string                                                 `json:"id,omitempty"`                              // 非必填，创建成功后返回, 示例值："6981801914270744596"
	JobName                     *string                                                 `json:"job_name,omitempty"`                        // 必填，任务名称, 示例值："测试推送任务"
	Status                      *int64                                                  `json:"status,omitempty"`                          // 非必填，创建成功后返回, 示例值：0
	CreateUser                  *CreateHelpdeskNotificationReqCreateUser                `json:"create_user,omitempty"`                     // 非必填，创建人
	CreatedAt                   *string                                                 `json:"created_at,omitempty"`                      // 非必填，创建时间（毫秒时间戳）, 示例值："1626332244719"
	UpdateUser                  *CreateHelpdeskNotificationReqUpdateUser                `json:"update_user,omitempty"`                     // 非必填，更新用户
	UpdatedAt                   *string                                                 `json:"updated_at,omitempty"`                      // 非必填，更新时间（毫秒时间戳）, 示例值："1626332244719"
	TargetUserCount             *int64                                                  `json:"target_user_count,omitempty"`               // 非必填，目标推送用户总数, 示例值：1
	SentUserCount               *int64                                                  `json:"sent_user_count,omitempty"`                 // 非必填，已推送用户总数, 示例值：1
	ReadUserCount               *int64                                                  `json:"read_user_count,omitempty"`                 // 非必填，已读用户总数, 示例值：1
	SendAt                      *string                                                 `json:"send_at,omitempty"`                         // 非必填，推送任务触发时间（毫秒时间戳）, 示例值："1626332244719"
	PushContent                 *string                                                 `json:"push_content,omitempty"`                    // 必填，推送内容，详见：https://open.feishu.cn/tool/cardbuilder?from=howtoguide, 示例值："{   \"config\": {     \"wide_screen_mode\": true   },   \"elements\": [     {       \"tag\": \"div\",       \"text\": {         \"tag\": \"lark_md\",         \"content\": \"[飞书](https://www.feishu.cn)整合即时沟通、日历、音视频会议、云文档、云盘、工作台等功能于一体，成就组织和个人，更高效、更愉悦。\"       }     }   ] }"
	PushType                    *int64                                                  `json:"push_type,omitempty"`                       // 必填，,0（定时推送：push_scope不能等于3） 1（新人入职推送：push_scope必须等于1或者3；new_staff_scope_type不能为空）, 示例值：0
	PushScopeType               *int64                                                  `json:"push_scope_type,omitempty"`                 // 必填，,推送范围（服务台私信） 0：组织内全部成员（user_list和department_list必须为空） 1：不推送任何成员（user_list和department_list必须为空，chat_list不可为空） 2：推送到部分成员（user_list或department_list不能为空） 3：入职新人 以上四种状态，chat_list都相对独立，只有在推送范围为1时，必须需要设置chat_list, 示例值：0
	NewStaffScopeType           *int64                                                  `json:"new_staff_scope_type,omitempty"`            // 非必填，,新人入职范围类型（push_type为1时生效） 0：组织内所有新人 1：组织内特定的部门（new_staff_scope_department_list 字段不能为空）, 示例值：0
	NewStaffScopeDepartmentList []*CreateHelpdeskNotificationReqNewStaffScopeDepartment `json:"new_staff_scope_department_list,omitempty"` // 非必填，新人入职生效部门列表
	UserList                    []*CreateHelpdeskNotificationReqUser                    `json:"user_list,omitempty"`                       // 非必填，push推送到成员列表
	DepartmentList              []*CreateHelpdeskNotificationReqDepartment              `json:"department_list,omitempty"`                 // 非必填，push推送到的部门信息列表
	ChatList                    []*CreateHelpdeskNotificationReqChat                    `json:"chat_list,omitempty"`                       // 非必填，push推送到的会话列表(群)
	Ext                         *string                                                 `json:"ext,omitempty"`                             // 非必填，预留扩展字段, 示例值："{}"
}

// CreateHelpdeskNotificationReqCreateUser ...
type CreateHelpdeskNotificationReqCreateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// CreateHelpdeskNotificationReqUpdateUser ...
type CreateHelpdeskNotificationReqUpdateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// CreateHelpdeskNotificationReqNewStaffScopeDepartment ...
type CreateHelpdeskNotificationReqNewStaffScopeDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// CreateHelpdeskNotificationReqUser ...
type CreateHelpdeskNotificationReqUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// CreateHelpdeskNotificationReqDepartment ...
type CreateHelpdeskNotificationReqDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// CreateHelpdeskNotificationReqChat ...
type CreateHelpdeskNotificationReqChat struct {
	ChatID *string `json:"chat_id,omitempty"` // 非必填，会话ID, 示例值："oc_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name   *string `json:"name,omitempty"`    // 非必填，会话名称, 示例值："测试群聊"
}

// createHelpdeskNotificationResp ...
type createHelpdeskNotificationResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskNotificationResp `json:"data,omitempty"`
}

// CreateHelpdeskNotificationResp ...
type CreateHelpdeskNotificationResp struct {
	NotificationID string `json:"notification_id,omitempty"` // 创建成功后的唯一id
	Status         int64  `json:"status,omitempty"`          // 当前状态
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ExecuteSendHelpdeskNotification 审核通过后调用此接口设置推送时间，等待调度系统调度，发送消息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/execute_send
func (r *HelpdeskService) ExecuteSendHelpdeskNotification(ctx context.Context, request *ExecuteSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*ExecuteSendHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskExecuteSendHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#ExecuteSendHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskExecuteSendHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "ExecuteSendHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/execute_send",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(executeSendHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskExecuteSendHelpdeskNotification mock HelpdeskExecuteSendHelpdeskNotification method
func (r *Mock) MockHelpdeskExecuteSendHelpdeskNotification(f func(ctx context.Context, request *ExecuteSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*ExecuteSendHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskExecuteSendHelpdeskNotification = f
}

// UnMockHelpdeskExecuteSendHelpdeskNotification un-mock HelpdeskExecuteSendHelpdeskNotification method
func (r *Mock) UnMockHelpdeskExecuteSendHelpdeskNotification() {
	r.mockHelpdeskExecuteSendHelpdeskNotification = nil
}

// ExecuteSendHelpdeskNotificationReq ...
type ExecuteSendHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 创建接口返回的唯一id, 示例值："6985032626234982420"
	SendAt         string `json:"send_at,omitempty"`        // 发送时间戳(毫秒), 示例值："1624326025000"
}

// executeSendHelpdeskNotificationResp ...
type executeSendHelpdeskNotificationResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *ExecuteSendHelpdeskNotificationResp `json:"data,omitempty"`
}

// ExecuteSendHelpdeskNotificationResp ...
type ExecuteSendHelpdeskNotificationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskNotification 查询推送详情
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/get
func (r *HelpdeskService) GetHelpdeskNotification(ctx context.Context, request *GetHelpdeskNotificationReq, options ...MethodOptionFunc) (*GetHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskNotification",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskNotification mock HelpdeskGetHelpdeskNotification method
func (r *Mock) MockHelpdeskGetHelpdeskNotification(f func(ctx context.Context, request *GetHelpdeskNotificationReq, options ...MethodOptionFunc) (*GetHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskNotification = f
}

// UnMockHelpdeskGetHelpdeskNotification un-mock HelpdeskGetHelpdeskNotification method
func (r *Mock) UnMockHelpdeskGetHelpdeskNotification() {
	r.mockHelpdeskGetHelpdeskNotification = nil
}

// GetHelpdeskNotificationReq ...
type GetHelpdeskNotificationReq struct {
	UserIDType     *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NotificationID string  `path:"notification_id" json:"-"` // 唯一ID, 示例值："1624326025000"
}

// getHelpdeskNotificationResp ...
type getHelpdeskNotificationResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskNotificationResp `json:"data,omitempty"`
}

// GetHelpdeskNotificationResp ...
type GetHelpdeskNotificationResp struct {
	Notification    *GetHelpdeskNotificationRespNotification `json:"notification,omitempty"`      // push任务详情
	ApprovalAppLink string                                   `json:"approval_app_link,omitempty"` // 审批链接
}

// GetHelpdeskNotificationRespNotification ...
type GetHelpdeskNotificationRespNotification struct {
	ID                          string                                                            `json:"id,omitempty"`                              // 非必填，创建成功后返回
	JobName                     string                                                            `json:"job_name,omitempty"`                        // 必填，任务名称
	Status                      int64                                                             `json:"status,omitempty"`                          // 非必填，创建成功后返回
	CreateUser                  *GetHelpdeskNotificationRespNotificationCreateUser                `json:"create_user,omitempty"`                     // 非必填，创建人
	CreatedAt                   string                                                            `json:"created_at,omitempty"`                      // 非必填，创建时间（毫秒时间戳）
	UpdateUser                  *GetHelpdeskNotificationRespNotificationUpdateUser                `json:"update_user,omitempty"`                     // 非必填，更新用户
	UpdatedAt                   string                                                            `json:"updated_at,omitempty"`                      // 非必填，更新时间（毫秒时间戳）
	TargetUserCount             int64                                                             `json:"target_user_count,omitempty"`               // 非必填，目标推送用户总数
	SentUserCount               int64                                                             `json:"sent_user_count,omitempty"`                 // 非必填，已推送用户总数
	ReadUserCount               int64                                                             `json:"read_user_count,omitempty"`                 // 非必填，已读用户总数
	SendAt                      string                                                            `json:"send_at,omitempty"`                         // 非必填，推送任务触发时间（毫秒时间戳）
	PushContent                 string                                                            `json:"push_content,omitempty"`                    // 必填，推送内容，详见：https://open.feishu.cn/tool/cardbuilder?from=howtoguide
	PushType                    int64                                                             `json:"push_type,omitempty"`                       // 必填，,0（定时推送：push_scope不能等于3） 1（新人入职推送：push_scope必须等于1或者3；new_staff_scope_type不能为空）
	PushScopeType               int64                                                             `json:"push_scope_type,omitempty"`                 // 必填，,推送范围（服务台私信） 0：组织内全部成员（user_list和department_list必须为空） 1：不推送任何成员（user_list和department_list必须为空，chat_list不可为空） 2：推送到部分成员（user_list或department_list不能为空） 3：入职新人 以上四种状态，chat_list都相对独立，只有在推送范围为1时，必须需要设置chat_list
	NewStaffScopeType           int64                                                             `json:"new_staff_scope_type,omitempty"`            // 非必填，,新人入职范围类型（push_type为1时生效） 0：组织内所有新人 1：组织内特定的部门（new_staff_scope_department_list 字段不能为空）
	NewStaffScopeDepartmentList []*GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment `json:"new_staff_scope_department_list,omitempty"` // 非必填，新人入职生效部门列表
	UserList                    []*GetHelpdeskNotificationRespNotificationUser                    `json:"user_list,omitempty"`                       // 非必填，push推送到成员列表
	DepartmentList              []*GetHelpdeskNotificationRespNotificationDepartment              `json:"department_list,omitempty"`                 // 非必填，push推送到的部门信息列表
	ChatList                    []*GetHelpdeskNotificationRespNotificationChat                    `json:"chat_list,omitempty"`                       // 非必填，push推送到的会话列表(群)
	Ext                         string                                                            `json:"ext,omitempty"`                             // 非必填，预留扩展字段
}

// GetHelpdeskNotificationRespNotificationCreateUser ...
type GetHelpdeskNotificationRespNotificationCreateUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填，用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填，头像地址
	Name      string `json:"name,omitempty"`       // 非必填，用户名称
}

// GetHelpdeskNotificationRespNotificationUpdateUser ...
type GetHelpdeskNotificationRespNotificationUpdateUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填，用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填，头像地址
	Name      string `json:"name,omitempty"`       // 非必填，用户名称
}

// GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment ...
type GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment struct {
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
	Name         string `json:"name,omitempty"`          // 非必填，部门名称
}

// GetHelpdeskNotificationRespNotificationUser ...
type GetHelpdeskNotificationRespNotificationUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填，用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填，头像地址
	Name      string `json:"name,omitempty"`       // 非必填，用户名称
}

// GetHelpdeskNotificationRespNotificationDepartment ...
type GetHelpdeskNotificationRespNotificationDepartment struct {
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
	Name         string `json:"name,omitempty"`          // 非必填，部门名称
}

// GetHelpdeskNotificationRespNotificationChat ...
type GetHelpdeskNotificationRespNotificationChat struct {
	ChatID string `json:"chat_id,omitempty"` // 非必填，会话ID
	Name   string `json:"name,omitempty"`    // 非必填，会话名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PreviewHelpdeskNotification 在正式执行推送之前是可以调用此接口预览设置的推送内容
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/preview
func (r *HelpdeskService) PreviewHelpdeskNotification(ctx context.Context, request *PreviewHelpdeskNotificationReq, options ...MethodOptionFunc) (*PreviewHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskPreviewHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#PreviewHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskPreviewHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "PreviewHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/preview",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(previewHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskPreviewHelpdeskNotification mock HelpdeskPreviewHelpdeskNotification method
func (r *Mock) MockHelpdeskPreviewHelpdeskNotification(f func(ctx context.Context, request *PreviewHelpdeskNotificationReq, options ...MethodOptionFunc) (*PreviewHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskPreviewHelpdeskNotification = f
}

// UnMockHelpdeskPreviewHelpdeskNotification un-mock HelpdeskPreviewHelpdeskNotification method
func (r *Mock) UnMockHelpdeskPreviewHelpdeskNotification() {
	r.mockHelpdeskPreviewHelpdeskNotification = nil
}

// PreviewHelpdeskNotificationReq ...
type PreviewHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 创建推送接口成功后返回的唯一id, 示例值："6985032626234982420"
}

// previewHelpdeskNotificationResp ...
type previewHelpdeskNotificationResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *PreviewHelpdeskNotificationResp `json:"data,omitempty"`
}

// PreviewHelpdeskNotificationResp ...
type PreviewHelpdeskNotificationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubmitApproveHelpdeskNotification 正常情况下调用创建推送接口后，就可以调用提交审核接口，如果创建人是服务台owner则会自动审核通过，否则会通知服务台owner审核此推送信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/submit_approve
func (r *HelpdeskService) SubmitApproveHelpdeskNotification(ctx context.Context, request *SubmitApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*SubmitApproveHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSubmitApproveHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SubmitApproveHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskSubmitApproveHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "SubmitApproveHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/submit_approve",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(submitApproveHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSubmitApproveHelpdeskNotification mock HelpdeskSubmitApproveHelpdeskNotification method
func (r *Mock) MockHelpdeskSubmitApproveHelpdeskNotification(f func(ctx context.Context, request *SubmitApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*SubmitApproveHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskSubmitApproveHelpdeskNotification = f
}

// UnMockHelpdeskSubmitApproveHelpdeskNotification un-mock HelpdeskSubmitApproveHelpdeskNotification method
func (r *Mock) UnMockHelpdeskSubmitApproveHelpdeskNotification() {
	r.mockHelpdeskSubmitApproveHelpdeskNotification = nil
}

// SubmitApproveHelpdeskNotificationReq ...
type SubmitApproveHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 创建接口返回的唯一id, 示例值："6985032626234982420"
	Reason         string `json:"reason,omitempty"`         // 提交审批理由, 示例值："测试发送消息"
}

// submitApproveHelpdeskNotificationResp ...
type submitApproveHelpdeskNotificationResp struct {
	Code int64                                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                 `json:"msg,omitempty"`  // 错误描述
	Data *SubmitApproveHelpdeskNotificationResp `json:"data,omitempty"`
}

// SubmitApproveHelpdeskNotificationResp ...
type SubmitApproveHelpdeskNotificationResp struct {
	HasAccess bool `json:"has_access,omitempty"` // 是否有权限创建或者管理审批流程 （有两种情况会导致没有权限： 1：用户没有安装服务台小程序，需要在https://app.feishu.cn/app/cli_9f9f8825d53b900d 安装小程序 2：用户安装的服务台小程序版本过低）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskNotification 更新推送信息，只有在草稿状态下才可以调用此接口进行更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/patch
func (r *HelpdeskService) UpdateHelpdeskNotification(ctx context.Context, request *UpdateHelpdeskNotificationReq, options ...MethodOptionFunc) (*UpdateHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskNotification",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskNotification mock HelpdeskUpdateHelpdeskNotification method
func (r *Mock) MockHelpdeskUpdateHelpdeskNotification(f func(ctx context.Context, request *UpdateHelpdeskNotificationReq, options ...MethodOptionFunc) (*UpdateHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskNotification = f
}

// UnMockHelpdeskUpdateHelpdeskNotification un-mock HelpdeskUpdateHelpdeskNotification method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskNotification() {
	r.mockHelpdeskUpdateHelpdeskNotification = nil
}

// UpdateHelpdeskNotificationReq ...
type UpdateHelpdeskNotificationReq struct {
	UserIDType                  *IDType                                                 `query:"user_id_type" json:"-"`                    // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NotificationID              string                                                  `path:"notification_id" json:"-"`                  // push任务唯一id, 示例值："6985032626234982420"
	ID                          *string                                                 `json:"id,omitempty"`                              // 非必填，创建成功后返回, 示例值："6981801914270744596"
	JobName                     *string                                                 `json:"job_name,omitempty"`                        // 必填，任务名称, 示例值："测试推送任务"
	Status                      *int64                                                  `json:"status,omitempty"`                          // 非必填，创建成功后返回, 示例值：0
	CreateUser                  *UpdateHelpdeskNotificationReqCreateUser                `json:"create_user,omitempty"`                     // 非必填，创建人
	CreatedAt                   *string                                                 `json:"created_at,omitempty"`                      // 非必填，创建时间（毫秒时间戳）, 示例值："1626332244719"
	UpdateUser                  *UpdateHelpdeskNotificationReqUpdateUser                `json:"update_user,omitempty"`                     // 非必填，更新用户
	UpdatedAt                   *string                                                 `json:"updated_at,omitempty"`                      // 非必填，更新时间（毫秒时间戳）, 示例值："1626332244719"
	TargetUserCount             *int64                                                  `json:"target_user_count,omitempty"`               // 非必填，目标推送用户总数, 示例值：1
	SentUserCount               *int64                                                  `json:"sent_user_count,omitempty"`                 // 非必填，已推送用户总数, 示例值：1
	ReadUserCount               *int64                                                  `json:"read_user_count,omitempty"`                 // 非必填，已读用户总数, 示例值：1
	SendAt                      *string                                                 `json:"send_at,omitempty"`                         // 非必填，推送任务触发时间（毫秒时间戳）, 示例值："1626332244719"
	PushContent                 *string                                                 `json:"push_content,omitempty"`                    // 必填，推送内容，详见：https://open.feishu.cn/tool/cardbuilder?from=howtoguide, 示例值："{   \"config\": {     \"wide_screen_mode\": true   },   \"elements\": [     {       \"tag\": \"div\",       \"text\": {         \"tag\": \"lark_md\",         \"content\": \"[飞书](https://www.feishu.cn)整合即时沟通、日历、音视频会议、云文档、云盘、工作台等功能于一体，成就组织和个人，更高效、更愉悦。\"       }     }   ] }"
	PushType                    *int64                                                  `json:"push_type,omitempty"`                       // 必填，,0（定时推送：push_scope不能等于3） 1（新人入职推送：push_scope必须等于1或者3；new_staff_scope_type不能为空）, 示例值：0
	PushScopeType               *int64                                                  `json:"push_scope_type,omitempty"`                 // 必填，,推送范围（服务台私信） 0：组织内全部成员（user_list和department_list必须为空） 1：不推送任何成员（user_list和department_list必须为空，chat_list不可为空） 2：推送到部分成员（user_list或department_list不能为空） 3：入职新人 以上四种状态，chat_list都相对独立，只有在推送范围为1时，必须需要设置chat_list, 示例值：0
	NewStaffScopeType           *int64                                                  `json:"new_staff_scope_type,omitempty"`            // 非必填，,新人入职范围类型（push_type为1时生效） 0：组织内所有新人 1：组织内特定的部门（new_staff_scope_department_list 字段不能为空）, 示例值：0
	NewStaffScopeDepartmentList []*UpdateHelpdeskNotificationReqNewStaffScopeDepartment `json:"new_staff_scope_department_list,omitempty"` // 非必填，新人入职生效部门列表
	UserList                    []*UpdateHelpdeskNotificationReqUser                    `json:"user_list,omitempty"`                       // 非必填，push推送到成员列表
	DepartmentList              []*UpdateHelpdeskNotificationReqDepartment              `json:"department_list,omitempty"`                 // 非必填，push推送到的部门信息列表
	ChatList                    []*UpdateHelpdeskNotificationReqChat                    `json:"chat_list,omitempty"`                       // 非必填，push推送到的会话列表(群)
	Ext                         *string                                                 `json:"ext,omitempty"`                             // 非必填，预留扩展字段, 示例值："{}"
}

// UpdateHelpdeskNotificationReqCreateUser ...
type UpdateHelpdeskNotificationReqCreateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// UpdateHelpdeskNotificationReqUpdateUser ...
type UpdateHelpdeskNotificationReqUpdateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// UpdateHelpdeskNotificationReqNewStaffScopeDepartment ...
type UpdateHelpdeskNotificationReqNewStaffScopeDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// UpdateHelpdeskNotificationReqUser ...
type UpdateHelpdeskNotificationReqUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// UpdateHelpdeskNotificationReqDepartment ...
type UpdateHelpdeskNotificationReqDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// UpdateHelpdeskNotificationReqChat ...
type UpdateHelpdeskNotificationReqChat struct {
	ChatID *string `json:"chat_id,omitempty"` // 非必填，会话ID, 示例值："oc_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name   *string `json:"name,omitempty"`    // 非必填，会话名称, 示例值："测试群聊"
}

// updateHelpdeskNotificationResp ...
type updateHelpdeskNotificationResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskNotificationResp `json:"data,omitempty"`
}

// UpdateHelpdeskNotificationResp ...
type UpdateHelpdeskNotificationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// StartHelpdeskService 该接口用于创建服务台对话。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/start_service
func (r *HelpdeskService) StartHelpdeskService(ctx context.Context, request *StartHelpdeskServiceReq, options ...MethodOptionFunc) (*StartHelpdeskServiceResp, *Response, error) {
	if r.cli.mock.mockHelpdeskStartHelpdeskService != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#StartHelpdeskService mock enable")
		return r.cli.mock.mockHelpdeskStartHelpdeskService(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "StartHelpdeskService",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/start_service",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(startHelpdeskServiceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskStartHelpdeskService mock HelpdeskStartHelpdeskService method
func (r *Mock) MockHelpdeskStartHelpdeskService(f func(ctx context.Context, request *StartHelpdeskServiceReq, options ...MethodOptionFunc) (*StartHelpdeskServiceResp, *Response, error)) {
	r.mockHelpdeskStartHelpdeskService = f
}

// UnMockHelpdeskStartHelpdeskService un-mock HelpdeskStartHelpdeskService method
func (r *Mock) UnMockHelpdeskStartHelpdeskService() {
	r.mockHelpdeskStartHelpdeskService = nil
}

// StartHelpdeskServiceReq ...
type StartHelpdeskServiceReq struct {
	HumanService    *bool    `json:"human_service,omitempty"`    // 是否直接进入人工(若appointed_agents填写了，该值为必填), 示例值：false
	AppointedAgents []string `json:"appointed_agents,omitempty"` // 客服 open ids (获取方式参考[获取单个用户信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get))，human_service需要为true, 示例值：[ou_7dab8a3d3cdcc9da365777c7ad535d62]
	OpenID          string   `json:"open_id,omitempty"`          // 用户 open id,(获取方式参考[获取单个用户信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get)), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	CustomizedInfo  *string  `json:"customized_info,omitempty"`  // 工单来源自定义信息，长度限制1024字符，如设置，[获取工单详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get)会返回此信息, 示例值："测试自定义字段信息"
}

// startHelpdeskServiceResp ...
type startHelpdeskServiceResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *StartHelpdeskServiceResp `json:"data,omitempty"`
}

// StartHelpdeskServiceResp ...
type StartHelpdeskServiceResp struct {
	ChatID string `json:"chat_id,omitempty"` // 客服群open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AnswerHelpdeskTicketUserQuery 该接口用于回复用户提问结果至工单，需要工单仍处于进行中且未接入人工状态。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/answer_user_query
func (r *HelpdeskService) AnswerHelpdeskTicketUserQuery(ctx context.Context, request *AnswerHelpdeskTicketUserQueryReq, options ...MethodOptionFunc) (*AnswerHelpdeskTicketUserQueryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskAnswerHelpdeskTicketUserQuery != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#AnswerHelpdeskTicketUserQuery mock enable")
		return r.cli.mock.mockHelpdeskAnswerHelpdeskTicketUserQuery(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "AnswerHelpdeskTicketUserQuery",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/answer_user_query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(answerHelpdeskTicketUserQueryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskAnswerHelpdeskTicketUserQuery mock HelpdeskAnswerHelpdeskTicketUserQuery method
func (r *Mock) MockHelpdeskAnswerHelpdeskTicketUserQuery(f func(ctx context.Context, request *AnswerHelpdeskTicketUserQueryReq, options ...MethodOptionFunc) (*AnswerHelpdeskTicketUserQueryResp, *Response, error)) {
	r.mockHelpdeskAnswerHelpdeskTicketUserQuery = f
}

// UnMockHelpdeskAnswerHelpdeskTicketUserQuery un-mock HelpdeskAnswerHelpdeskTicketUserQuery method
func (r *Mock) UnMockHelpdeskAnswerHelpdeskTicketUserQuery() {
	r.mockHelpdeskAnswerHelpdeskTicketUserQuery = nil
}

// AnswerHelpdeskTicketUserQueryReq ...
type AnswerHelpdeskTicketUserQueryReq struct {
	TicketID string                                 `path:"ticket_id" json:"-"` // 工单ID, 示例值："6945345902185807891"
	EventID  string                                 `json:"event_id,omitempty"` // 事件ID,可从订阅事件中提取, 示例值："abcd"
	Faqs     []*AnswerHelpdeskTicketUserQueryReqFAQ `json:"faqs,omitempty"`     // faq结果列表
}

// AnswerHelpdeskTicketUserQueryReqFAQ ...
type AnswerHelpdeskTicketUserQueryReqFAQ struct {
	ID    *string  `json:"id,omitempty"`    // faq服务台内唯一标识, 示例值："12345"
	Score *float64 `json:"score,omitempty"` // faq匹配得分, 示例值：0.9
}

// answerHelpdeskTicketUserQueryResp ...
type answerHelpdeskTicketUserQueryResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *AnswerHelpdeskTicketUserQueryResp `json:"data,omitempty"`
}

// AnswerHelpdeskTicketUserQueryResp ...
type AnswerHelpdeskTicketUserQueryResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskTicketCustomizedField
//
// 该接口用于创建自定义字段
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/create-ticket-customized-field
func (r *HelpdeskService) CreateHelpdeskTicketCustomizedField(ctx context.Context, request *CreateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*CreateHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskTicketCustomizedField",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskTicketCustomizedField mock HelpdeskCreateHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskCreateHelpdeskTicketCustomizedField(f func(ctx context.Context, request *CreateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*CreateHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskCreateHelpdeskTicketCustomizedField un-mock HelpdeskCreateHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskCreateHelpdeskTicketCustomizedField() {
	r.mockHelpdeskCreateHelpdeskTicketCustomizedField = nil
}

// CreateHelpdeskTicketCustomizedFieldReq ...
type CreateHelpdeskTicketCustomizedFieldReq struct {
	HelpdeskID            string                  `json:"helpdesk_id,omitempty"`             // 服务台ID, 示例值："1542164574896126"
	KeyName               string                  `json:"key_name,omitempty"`                // 键名, 示例值："test dropdown"
	DisplayName           string                  `json:"display_name,omitempty"`            // 名称, 示例值："test dropdown"
	Position              string                  `json:"position,omitempty"`                // 字段在列表后台管理列表中的位置, 示例值："3"
	FieldType             string                  `json:"field_type,omitempty"`              // 类型,string - 单行文本,multiline - 多行文本,dropdown - 下拉列表,dropdown_nested - 级联下拉,      , 示例值："dropdown"
	Description           string                  `json:"description,omitempty"`             // 描述, 示例值："下拉示例"
	Visible               bool                    `json:"visible,omitempty"`                 // 是否可见, 示例值：true
	Editable              bool                    `json:"editable,omitempty"`                // 是否可以修改, 示例值：true
	Required              bool                    `json:"required,omitempty"`                // 是否必填, 示例值：false
	DropdownOptions       *HelpdeskDropdownOption `json:"dropdown_options,omitempty"`        // 下拉列表选项
	DropdownAllowMultiple *bool                   `json:"dropdown_allow_multiple,omitempty"` // 是否支持多选，仅在字段类型是dropdown的时候有效, 示例值：true
}

// createHelpdeskTicketCustomizedFieldResp ...
type createHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// CreateHelpdeskTicketCustomizedFieldResp ...
type CreateHelpdeskTicketCustomizedFieldResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskTicketCustomizedField 该接口用于删除工单自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/delete
func (r *HelpdeskService) DeleteHelpdeskTicketCustomizedField(ctx context.Context, request *DeleteHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*DeleteHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskTicketCustomizedField",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskTicketCustomizedField mock HelpdeskDeleteHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskDeleteHelpdeskTicketCustomizedField(f func(ctx context.Context, request *DeleteHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*DeleteHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskDeleteHelpdeskTicketCustomizedField un-mock HelpdeskDeleteHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskTicketCustomizedField() {
	r.mockHelpdeskDeleteHelpdeskTicketCustomizedField = nil
}

// DeleteHelpdeskTicketCustomizedFieldReq ...
type DeleteHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
}

// deleteHelpdeskTicketCustomizedFieldResp ...
type deleteHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// DeleteHelpdeskTicketCustomizedFieldResp ...
type DeleteHelpdeskTicketCustomizedFieldResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketCustomizedField
//
// 该接口用于获取工单自定义字段详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/get-ticket-customized-field
func (r *HelpdeskService) GetHelpdeskTicketCustomizedField(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketCustomizedField",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketCustomizedField mock HelpdeskGetHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskGetHelpdeskTicketCustomizedField(f func(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskGetHelpdeskTicketCustomizedField un-mock HelpdeskGetHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketCustomizedField() {
	r.mockHelpdeskGetHelpdeskTicketCustomizedField = nil
}

// GetHelpdeskTicketCustomizedFieldReq ...
type GetHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
}

// getHelpdeskTicketCustomizedFieldResp ...
type getHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// GetHelpdeskTicketCustomizedFieldResp ...
type GetHelpdeskTicketCustomizedFieldResp struct {
	TicketCustomizedFieldID string                                         `json:"ticket_customized_field_id,omitempty"` // 工单自定义字段ID
	HelpdeskID              string                                         `json:"helpdesk_id,omitempty"`                // 服务台ID
	KeyName                 string                                         `json:"key_name,omitempty"`                   // 键名
	DisplayName             string                                         `json:"display_name,omitempty"`               // 名称
	Position                string                                         `json:"position,omitempty"`                   // 字段在列表后台管理列表中的位置
	FieldType               string                                         `json:"field_type,omitempty"`                 // 类型
	Description             string                                         `json:"description,omitempty"`                // 描述
	Visible                 bool                                           `json:"visible,omitempty"`                    // 是否可见
	Editable                bool                                           `json:"editable,omitempty"`                   // 是否可以修改
	Required                bool                                           `json:"required,omitempty"`                   // 是否必填
	CreatedAt               string                                         `json:"created_at,omitempty"`                 // 创建时间
	UpdatedAt               string                                         `json:"updated_at,omitempty"`                 // 更新时间
	CreatedBy               *GetHelpdeskTicketCustomizedFieldRespCreatedBy `json:"created_by,omitempty"`                 // 创建用户
	UpdatedBy               *GetHelpdeskTicketCustomizedFieldRespUpdatedBy `json:"updated_by,omitempty"`                 // 更新用户
	DropdownAllowMultiple   bool                                           `json:"dropdown_allow_multiple,omitempty"`    // 是否支持多选，仅在字段类型是dropdown的时候有效
}

// GetHelpdeskTicketCustomizedFieldRespCreatedBy ...
type GetHelpdeskTicketCustomizedFieldRespCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// GetHelpdeskTicketCustomizedFieldRespUpdatedBy ...
type GetHelpdeskTicketCustomizedFieldRespUpdatedBy struct {
	ID              string                  `json:"id,omitempty"`               // 用户ID
	AvatarURL       string                  `json:"avatar_url,omitempty"`       // 用户头像url
	Name            string                  `json:"name,omitempty"`             // 用户名
	Email           string                  `json:"email,omitempty"`            // 用户邮箱
	DropdownOptions *HelpdeskDropdownOption `json:"dropdown_options,omitempty"` // 下拉列表选项
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketCustomizedFieldList
//
// 该接口用于获取全部工单自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list-ticket-customized-fields
func (r *HelpdeskService) GetHelpdeskTicketCustomizedFieldList(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFieldList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketCustomizedFieldList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFieldList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketCustomizedFieldList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketCustomizedFieldListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketCustomizedFieldList mock HelpdeskGetHelpdeskTicketCustomizedFieldList method
func (r *Mock) MockHelpdeskGetHelpdeskTicketCustomizedFieldList(f func(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFieldList = f
}

// UnMockHelpdeskGetHelpdeskTicketCustomizedFieldList un-mock HelpdeskGetHelpdeskTicketCustomizedFieldList method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketCustomizedFieldList() {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFieldList = nil
}

// GetHelpdeskTicketCustomizedFieldListReq ...
type GetHelpdeskTicketCustomizedFieldListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6948728206392295444"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10；默认为20, 最大值：`100`
	Visible   *bool   `json:"visible,omitempty"`    // 是否可见, 示例值：true
}

// getHelpdeskTicketCustomizedFieldListResp ...
type getHelpdeskTicketCustomizedFieldListResp struct {
	Code int64                                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                    `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketCustomizedFieldListResp `json:"data,omitempty"`
}

// GetHelpdeskTicketCustomizedFieldListResp ...
type GetHelpdeskTicketCustomizedFieldListResp struct {
	HasMore       bool                                            `json:"has_more,omitempty"`        // 是否还有更多项
	NextPageToken string                                          `json:"next_page_token,omitempty"` // 下一分页标识
	Items         []*GetHelpdeskTicketCustomizedFieldListRespItem `json:"items,omitempty"`           // 工单自定义字段列表
}

// GetHelpdeskTicketCustomizedFieldListRespItem ...
type GetHelpdeskTicketCustomizedFieldListRespItem struct {
	TicketCustomizedFieldID string                                                 `json:"ticket_customized_field_id,omitempty"` // 工单自定义字段ID
	HelpdeskID              string                                                 `json:"helpdesk_id,omitempty"`                // 服务台ID
	KeyName                 string                                                 `json:"key_name,omitempty"`                   // 键名
	DisplayName             string                                                 `json:"display_name,omitempty"`               // 名称
	Position                string                                                 `json:"position,omitempty"`                   // 字段在列表后台管理列表中的位置
	FieldType               string                                                 `json:"field_type,omitempty"`                 // 类型
	Description             string                                                 `json:"description,omitempty"`                // 描述
	Visible                 bool                                                   `json:"visible,omitempty"`                    // 是否可见
	Editable                bool                                                   `json:"editable,omitempty"`                   // 是否可以修改
	Required                bool                                                   `json:"required,omitempty"`                   // 是否必填
	CreatedAt               string                                                 `json:"created_at,omitempty"`                 // 创建时间
	UpdatedAt               string                                                 `json:"updated_at,omitempty"`                 // 更新时间
	CreatedBy               *GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy `json:"created_by,omitempty"`                 // 创建用户
	UpdatedBy               *GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy `json:"updated_by,omitempty"`                 // 更新用户
	DropdownOptions         *HelpdeskDropdownOption                                `json:"dropdown_options,omitempty"`           // 下拉列表选项
	DropdownAllowMultiple   bool                                                   `json:"dropdown_allow_multiple,omitempty"`    // 是否支持多选，仅在字段类型是dropdown的时候有效
}

// GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy ...
type GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy ...
type GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskTicketCustomizedField
//
// 该接口用于更新自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/update-ticket-customized-field
func (r *HelpdeskService) UpdateHelpdeskTicketCustomizedField(ctx context.Context, request *UpdateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskTicketCustomizedField",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskTicketCustomizedField mock HelpdeskUpdateHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskUpdateHelpdeskTicketCustomizedField(f func(ctx context.Context, request *UpdateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskUpdateHelpdeskTicketCustomizedField un-mock HelpdeskUpdateHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskTicketCustomizedField() {
	r.mockHelpdeskUpdateHelpdeskTicketCustomizedField = nil
}

// UpdateHelpdeskTicketCustomizedFieldReq ...
type UpdateHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string                  `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
	DisplayName             *string                 `json:"display_name,omitempty"`              // 名称, 示例值："test dropdown"
	Position                *string                 `json:"position,omitempty"`                  // 字段在列表后台管理列表中的位置, 示例值："3"
	Description             *string                 `json:"description,omitempty"`               // 描述, 示例值："下拉示例"
	Visible                 *bool                   `json:"visible,omitempty"`                   // 是否可见, 示例值：true
	Required                *bool                   `json:"required,omitempty"`                  // 是否必填, 示例值：false
	DropdownOptions         *HelpdeskDropdownOption `json:"dropdown_options,omitempty"`          // 下拉列表选项
}

// updateHelpdeskTicketCustomizedFieldResp ...
type updateHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// UpdateHelpdeskTicketCustomizedFieldResp ...
type UpdateHelpdeskTicketCustomizedFieldResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketCustomizedFields 该接口用于获取服务台自定义字段详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/customized_fields
func (r *HelpdeskService) GetHelpdeskTicketCustomizedFields(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldsReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldsResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFields != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketCustomizedFields mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFields(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketCustomizedFields",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/customized_fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketCustomizedFieldsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketCustomizedFields mock HelpdeskGetHelpdeskTicketCustomizedFields method
func (r *Mock) MockHelpdeskGetHelpdeskTicketCustomizedFields(f func(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldsReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldsResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFields = f
}

// UnMockHelpdeskGetHelpdeskTicketCustomizedFields un-mock HelpdeskGetHelpdeskTicketCustomizedFields method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketCustomizedFields() {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFields = nil
}

// GetHelpdeskTicketCustomizedFieldsReq ...
type GetHelpdeskTicketCustomizedFieldsReq struct {
	VisibleOnly *bool `query:"visible_only" json:"-"` // visible only, 示例值：true
}

// getHelpdeskTicketCustomizedFieldsResp ...
type getHelpdeskTicketCustomizedFieldsResp struct {
	Code int64                                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketCustomizedFieldsResp `json:"data,omitempty"`
}

// GetHelpdeskTicketCustomizedFieldsResp ...
type GetHelpdeskTicketCustomizedFieldsResp struct {
	UserCustomizedFields   []*GetHelpdeskTicketCustomizedFieldsRespUserCustomizedField   `json:"user_customized_fields,omitempty"`   // 用户自定义字段
	TicketCustomizedFields []*GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedField `json:"ticket_customized_fields,omitempty"` // 自定义工单字段
}

// GetHelpdeskTicketCustomizedFieldsRespUserCustomizedField ...
type GetHelpdeskTicketCustomizedFieldsRespUserCustomizedField struct {
	UserCustomizedFieldID string `json:"user_customized_field_id,omitempty"` // 字段ID
	ID                    string `json:"id,omitempty"`                       // 旧字段ID，向后兼容用
	HelpdeskID            string `json:"helpdesk_id,omitempty"`              // 服务台ID
	KeyName               string `json:"key_name,omitempty"`                 // 字段键
	DisplayName           string `json:"display_name,omitempty"`             // 字段展示名称
	Position              string `json:"position,omitempty"`                 // 字段在列表中的展示位置
	FieldType             string `json:"field_type,omitempty"`               // 字段类型
	Description           string `json:"description,omitempty"`              // 字段描述信息
	Visible               bool   `json:"visible,omitempty"`                  // 字段是否可见
	Editable              bool   `json:"editable,omitempty"`                 // 字段是否可编辑
	Required              bool   `json:"required,omitempty"`                 // 字段是否必填
	CreatedAt             string `json:"created_at,omitempty"`               // 字段创建时间
	UpdatedAt             string `json:"updated_at,omitempty"`               // 字段修改时间
}

// GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedField ...
type GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedField struct {
	TicketCustomizedFieldID string                                                               `json:"ticket_customized_field_id,omitempty"` // 工单自定义字段ID
	HelpdeskID              string                                                               `json:"helpdesk_id,omitempty"`                // 服务台ID
	KeyName                 string                                                               `json:"key_name,omitempty"`                   // 键名
	DisplayName             string                                                               `json:"display_name,omitempty"`               // 名称
	Position                string                                                               `json:"position,omitempty"`                   // 字段在列表后台管理列表中的位置
	FieldType               string                                                               `json:"field_type,omitempty"`                 // 类型,string - 单行文本,multiline - 多行文本,dropdown - 下拉列表,dropdown_nested - 级联下拉
	Description             string                                                               `json:"description,omitempty"`                // 描述
	Visible                 bool                                                                 `json:"visible,omitempty"`                    // 是否可见
	Editable                bool                                                                 `json:"editable,omitempty"`                   // 是否可以修改
	Required                bool                                                                 `json:"required,omitempty"`                   // 是否必填
	CreatedAt               string                                                               `json:"created_at,omitempty"`                 // 创建时间
	UpdatedAt               string                                                               `json:"updated_at,omitempty"`                 // 更新时间
	CreatedBy               *GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedFieldCreatedBy `json:"created_by,omitempty"`                 // 创建用户
	UpdatedBy               *GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedFieldUpdatedBy `json:"updated_by,omitempty"`                 // 更新用户
	DropdownAllowMultiple   bool                                                                 `json:"dropdown_allow_multiple,omitempty"`    // 是否支持多选，仅在字段类型是dropdown的时候有效
}

// GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedFieldCreatedBy ...
type GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedFieldCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedFieldUpdatedBy ...
type GetHelpdeskTicketCustomizedFieldsRespTicketCustomizedFieldUpdatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicket 该接口用于获取单个服务台工单详情。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get
func (r *HelpdeskService) GetHelpdeskTicket(ctx context.Context, request *GetHelpdeskTicketReq, options ...MethodOptionFunc) (*GetHelpdeskTicketResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicket mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicket",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicket mock HelpdeskGetHelpdeskTicket method
func (r *Mock) MockHelpdeskGetHelpdeskTicket(f func(ctx context.Context, request *GetHelpdeskTicketReq, options ...MethodOptionFunc) (*GetHelpdeskTicketResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicket = f
}

// UnMockHelpdeskGetHelpdeskTicket un-mock HelpdeskGetHelpdeskTicket method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicket() {
	r.mockHelpdeskGetHelpdeskTicket = nil
}

// GetHelpdeskTicketReq ...
type GetHelpdeskTicketReq struct {
	TicketID string `path:"ticket_id" json:"-"` // ticket id, 示例值："123456"
}

// getHelpdeskTicketResp ...
type getHelpdeskTicketResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketResp `json:"data,omitempty"`
}

// GetHelpdeskTicketResp ...
type GetHelpdeskTicketResp struct {
	Ticket *GetHelpdeskTicketRespTicket `json:"ticket,omitempty"` // 工单详情
}

// GetHelpdeskTicketRespTicket ...
type GetHelpdeskTicketRespTicket struct {
	TicketID                   string                                        `json:"ticket_id,omitempty"`                     // 工单ID,[可以从工单列表里面取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list),[也可以订阅工单创建事件获取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/events/created)
	HelpdeskID                 string                                        `json:"helpdesk_id,omitempty"`                   // 服务台ID
	Guest                      *GetHelpdeskTicketRespTicketGuest             `json:"guest,omitempty"`                         // 工单创建用户
	Comments                   *GetHelpdeskTicketRespTicketComments          `json:"comments,omitempty"`                      // 备注
	TicketType                 int64                                         `json:"ticket_type,omitempty"`                   // 工单阶段：1. 机器人 2. 人工
	Status                     int64                                         `json:"status,omitempty"`                        // 工单状态，1：已创建 2: 处理中 3: 排队中 4：待定 5：待用户响应 50: 被机器人关闭 51: 被客服关闭 52: 用户自己关闭
	Score                      int64                                         `json:"score,omitempty"`                         // 工单评分，1：不满意，2:一般，3:满意
	CreatedAt                  int64                                         `json:"created_at,omitempty"`                    // 工单创建时间
	UpdatedAt                  int64                                         `json:"updated_at,omitempty"`                    // 工单更新时间，没有值时为-1
	ClosedAt                   int64                                         `json:"closed_at,omitempty"`                     // 工单结束时间
	DissatisfactionReason      []string                                      `json:"dissatisfaction_reason,omitempty"`        // 不满意原因
	Agents                     []*GetHelpdeskTicketRespTicketAgent           `json:"agents,omitempty"`                        // 工单客服
	Channel                    int64                                         `json:"channel,omitempty"`                       // 工单渠道，描述：,9：Open API 2：二维码 14：分享 13：搜索 其他数字：其他渠道
	Solve                      int64                                         `json:"solve,omitempty"`                         // 工单是否解决 1:没解决 2:已解决
	ClosedBy                   *GetHelpdeskTicketRespTicketClosedBy          `json:"closed_by,omitempty"`                     // 关单用户ID
	Collaborators              []*GetHelpdeskTicketRespTicketCollaborator    `json:"collaborators,omitempty"`                 // 工单协作者
	CustomizedFields           []*GetHelpdeskTicketRespTicketCustomizedField `json:"customized_fields,omitempty"`             // 自定义字段列表，没有值时不设置  ,下拉菜单的value对应工单字段里面的children.display_name,[获取全部工单自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list-ticket-customized-fields)
	AgentServiceDuration       float64                                       `json:"agent_service_duration,omitempty"`        // 客服服务时长，客服最后一次回复时间距离客服进入时间间隔，单位分钟
	AgentFirstResponseDuration int64                                         `json:"agent_first_response_duration,omitempty"` // 客服首次回复时间距离客服进入时间的间隔(秒)
	BotServiceDuration         int64                                         `json:"bot_service_duration,omitempty"`          // 机器人服务时间：客服进入时间距离工单创建时间的间隔，单位秒
	AgentResolutionTime        int64                                         `json:"agent_resolution_time,omitempty"`         // 客服解决时长，关单时间距离客服进入时间的间隔，单位秒
	ActualProcessingTime       int64                                         `json:"actual_processing_time,omitempty"`        // 工单实际处理时间：从客服进入到关单，单位秒
	AgentEntryTime             int64                                         `json:"agent_entry_time,omitempty"`              // 客服进入时间，单位毫秒
	AgentFirstResponseTime     int64                                         `json:"agent_first_response_time,omitempty"`     // 客服首次回复时间，单位毫秒
	AgentLastResponseTime      int64                                         `json:"agent_last_response_time,omitempty"`      // 客服最后回复时间，单位毫秒
}

// GetHelpdeskTicketRespTicketGuest ...
type GetHelpdeskTicketRespTicketGuest struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketComments ...
type GetHelpdeskTicketRespTicketComments struct {
	Content       string `json:"content,omitempty"`         // 备注
	CreatedAt     int64  `json:"created_at,omitempty"`      // 备注时间，单位毫秒
	ID            int64  `json:"id,omitempty"`              // 备注ID
	UserAvatarURL string `json:"user_avatar_url,omitempty"` // 备注人头像
	UserName      string `json:"user_name,omitempty"`       // 备注人姓名
	UserID        int64  `json:"user_id,omitempty"`         // 备注人ID
}

// GetHelpdeskTicketRespTicketAgent ...
type GetHelpdeskTicketRespTicketAgent struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketClosedBy ...
type GetHelpdeskTicketRespTicketClosedBy struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketCollaborator ...
type GetHelpdeskTicketRespTicketCollaborator struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketCustomizedField ...
type GetHelpdeskTicketRespTicketCustomizedField struct {
	ID          string `json:"id,omitempty"`           // 自定义字段ID
	Value       string `json:"value,omitempty"`        // 自定义字段值
	KeyName     string `json:"key_name,omitempty"`     // 键名
	DisplayName string `json:"display_name,omitempty"` // 展示名称
	Position    int64  `json:"position,omitempty"`     // 展示位置
	Required    bool   `json:"required,omitempty"`     // 是否必填
	Editable    bool   `json:"editable,omitempty"`     // 是否可修改
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketList 该接口用于获取全部工单详情。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list
func (r *HelpdeskService) GetHelpdeskTicketList(ctx context.Context, request *GetHelpdeskTicketListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketList mock HelpdeskGetHelpdeskTicketList method
func (r *Mock) MockHelpdeskGetHelpdeskTicketList(f func(ctx context.Context, request *GetHelpdeskTicketListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketList = f
}

// UnMockHelpdeskGetHelpdeskTicketList un-mock HelpdeskGetHelpdeskTicketList method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketList() {
	r.mockHelpdeskGetHelpdeskTicketList = nil
}

// GetHelpdeskTicketListReq ...
type GetHelpdeskTicketListReq struct {
	TicketID        *string  `query:"ticket_id" json:"-"`         // 搜索条件：工单ID, 示例值："123456"
	AgentID         *string  `query:"agent_id" json:"-"`          // 搜索条件: 客服id, 示例值："ou_b5de90429xxx"
	ClosedByID      *string  `query:"closed_by_id" json:"-"`      // 搜索条件: 关单客服id, 示例值："ou_b5de90429xxx"
	Type            *int64   `query:"type" json:"-"`              // 搜索条件: 工单类型 1:bot 2:人工, 示例值：1
	Channel         *int64   `query:"channel" json:"-"`           // 搜索条件: 工单渠道, 示例值：0
	Solved          *int64   `query:"solved" json:"-"`            // 搜索条件: 工单是否解决 1:没解决 2:已解决, 示例值：1
	Score           *int64   `query:"score" json:"-"`             // 搜索条件: 工单评分, 示例值：1
	StatusList      []int64  `query:"status_list" json:"-"`       // 搜索条件: 工单状态列表, 示例值：1
	GuestName       *string  `query:"guest_name" json:"-"`        // 搜索条件: 用户名称, 示例值："abc"
	GuestID         *string  `query:"guest_id" json:"-"`          // 搜索条件: 用户id, 示例值："ou_b5de90429xxx"
	Tags            []string `query:"tags" json:"-"`              // 搜索条件: 用户标签列表, 示例值：备注
	Page            *int64   `query:"page" json:"-"`              // 页数, 从1开始, 默认为1, 示例值：1
	PageSize        *int64   `query:"page_size" json:"-"`         // 当前页大小，最大为200, 默认为20。分页查询最多累计返回一万条数据，超过一万条请更改查询条件，推荐通过时间查询。, 示例值：20
	CreateTimeStart *int64   `query:"create_time_start" json:"-"` // 搜索条件: 工单创建起始时间 ms (也需要填上create_time_end)，相当于>=create_time_start, 示例值：1616920429000
	CreateTimeEnd   *int64   `query:"create_time_end" json:"-"`   // 搜索条件: 工单创建结束时间 ms (也需要填上create_time_start)，相当于<=create_time_end, 示例值：1616920429000
	UpdateTimeStart *int64   `query:"update_time_start" json:"-"` // 搜索条件: 工单修改起始时间 ms (也需要填上update_time_end), 示例值：1616920429000
	UpdateTimeEnd   *int64   `query:"update_time_end" json:"-"`   // 搜索条件: 工单修改结束时间 ms(也需要填上update_time_start), 示例值：1616920429000
}

// getHelpdeskTicketListResp ...
type getHelpdeskTicketListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketListResp `json:"data,omitempty"`
}

// GetHelpdeskTicketListResp ...
type GetHelpdeskTicketListResp struct {
	Total   int64                              `json:"total,omitempty"`   // 工单总数 (单次请求最大为10000条)
	Tickets []*GetHelpdeskTicketListRespTicket `json:"tickets,omitempty"` // 工单
}

// GetHelpdeskTicketListRespTicket ...
type GetHelpdeskTicketListRespTicket struct {
	TicketID                   string                                            `json:"ticket_id,omitempty"`                     // 工单ID,[可以从工单列表里面取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list),[也可以订阅工单创建事件获取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/events/created)
	HelpdeskID                 string                                            `json:"helpdesk_id,omitempty"`                   // 服务台ID
	Guest                      *GetHelpdeskTicketListRespTicketGuest             `json:"guest,omitempty"`                         // 工单创建用户
	Comments                   *GetHelpdeskTicketListRespTicketComments          `json:"comments,omitempty"`                      // 备注
	TicketType                 int64                                             `json:"ticket_type,omitempty"`                   // 工单阶段：1. 机器人 2. 人工
	Status                     int64                                             `json:"status,omitempty"`                        // 工单状态，1：已创建 2: 处理中 3: 排队中 4：待定 5：待用户响应 50: 被机器人关闭 51: 被客服关闭 52: 用户自己关闭
	Score                      int64                                             `json:"score,omitempty"`                         // 工单评分，1：不满意，2:一般，3:满意
	CreatedAt                  int64                                             `json:"created_at,omitempty"`                    // 工单创建时间
	UpdatedAt                  int64                                             `json:"updated_at,omitempty"`                    // 工单更新时间，没有值时为-1
	ClosedAt                   int64                                             `json:"closed_at,omitempty"`                     // 工单结束时间
	DissatisfactionReason      []string                                          `json:"dissatisfaction_reason,omitempty"`        // 不满意原因
	Agents                     []*GetHelpdeskTicketListRespTicketAgent           `json:"agents,omitempty"`                        // 工单客服
	Channel                    int64                                             `json:"channel,omitempty"`                       // 工单渠道，描述：,9：Open API 2：二维码 14：分享 13：搜索 其他数字：其他渠道
	Solve                      int64                                             `json:"solve,omitempty"`                         // 工单是否解决 1:没解决 2:已解决
	ClosedBy                   *GetHelpdeskTicketListRespTicketClosedBy          `json:"closed_by,omitempty"`                     // 关单用户ID
	Collaborators              []*GetHelpdeskTicketListRespTicketCollaborator    `json:"collaborators,omitempty"`                 // 工单协作者
	CustomizedFields           []*GetHelpdeskTicketListRespTicketCustomizedField `json:"customized_fields,omitempty"`             // 自定义字段列表，没有值时不设置  ,下拉菜单的value对应工单字段里面的children.display_name,[获取全部工单自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list-ticket-customized-fields)
	AgentServiceDuration       float64                                           `json:"agent_service_duration,omitempty"`        // 客服服务时长，客服最后一次回复时间距离客服进入时间间隔，单位分钟
	AgentFirstResponseDuration int64                                             `json:"agent_first_response_duration,omitempty"` // 客服首次回复时间距离客服进入时间的间隔(秒)
	BotServiceDuration         int64                                             `json:"bot_service_duration,omitempty"`          // 机器人服务时间：客服进入时间距离工单创建时间的间隔，单位秒
	AgentResolutionTime        int64                                             `json:"agent_resolution_time,omitempty"`         // 客服解决时长，关单时间距离客服进入时间的间隔，单位秒
	ActualProcessingTime       int64                                             `json:"actual_processing_time,omitempty"`        // 工单实际处理时间：从客服进入到关单，单位秒
	AgentEntryTime             int64                                             `json:"agent_entry_time,omitempty"`              // 客服进入时间，单位毫秒
	AgentFirstResponseTime     int64                                             `json:"agent_first_response_time,omitempty"`     // 客服首次回复时间，单位毫秒
	AgentLastResponseTime      int64                                             `json:"agent_last_response_time,omitempty"`      // 客服最后回复时间，单位毫秒
}

// GetHelpdeskTicketListRespTicketGuest ...
type GetHelpdeskTicketListRespTicketGuest struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketComments ...
type GetHelpdeskTicketListRespTicketComments struct {
	Content       string `json:"content,omitempty"`         // 备注
	CreatedAt     int64  `json:"created_at,omitempty"`      // 备注时间，单位毫秒
	ID            int64  `json:"id,omitempty"`              // 备注ID
	UserAvatarURL string `json:"user_avatar_url,omitempty"` // 备注人头像
	UserName      string `json:"user_name,omitempty"`       // 备注人姓名
	UserID        int64  `json:"user_id,omitempty"`         // 备注人ID
}

// GetHelpdeskTicketListRespTicketAgent ...
type GetHelpdeskTicketListRespTicketAgent struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketClosedBy ...
type GetHelpdeskTicketListRespTicketClosedBy struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketCollaborator ...
type GetHelpdeskTicketListRespTicketCollaborator struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketCustomizedField ...
type GetHelpdeskTicketListRespTicketCustomizedField struct {
	ID          string `json:"id,omitempty"`           // 自定义字段ID
	Value       string `json:"value,omitempty"`        // 自定义字段值
	KeyName     string `json:"key_name,omitempty"`     // 键名
	DisplayName string `json:"display_name,omitempty"` // 展示名称
	Position    int64  `json:"position,omitempty"`     // 展示位置
	Required    bool   `json:"required,omitempty"`     // 是否必填
	Editable    bool   `json:"editable,omitempty"`     // 是否可修改
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadHelpdeskTicketImage 该接口用于获取服务台工单消息图象。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/ticket_image
func (r *HelpdeskService) DownloadHelpdeskTicketImage(ctx context.Context, request *DownloadHelpdeskTicketImageReq, options ...MethodOptionFunc) (*DownloadHelpdeskTicketImageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDownloadHelpdeskTicketImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DownloadHelpdeskTicketImage mock enable")
		return r.cli.mock.mockHelpdeskDownloadHelpdeskTicketImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "DownloadHelpdeskTicketImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(downloadHelpdeskTicketImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDownloadHelpdeskTicketImage mock HelpdeskDownloadHelpdeskTicketImage method
func (r *Mock) MockHelpdeskDownloadHelpdeskTicketImage(f func(ctx context.Context, request *DownloadHelpdeskTicketImageReq, options ...MethodOptionFunc) (*DownloadHelpdeskTicketImageResp, *Response, error)) {
	r.mockHelpdeskDownloadHelpdeskTicketImage = f
}

// UnMockHelpdeskDownloadHelpdeskTicketImage un-mock HelpdeskDownloadHelpdeskTicketImage method
func (r *Mock) UnMockHelpdeskDownloadHelpdeskTicketImage() {
	r.mockHelpdeskDownloadHelpdeskTicketImage = nil
}

// DownloadHelpdeskTicketImageReq ...
type DownloadHelpdeskTicketImageReq struct {
	TicketID string `query:"ticket_id" json:"-"` // 工单ID, 示例值："12345"
	MsgID    string `query:"msg_id" json:"-"`    // 消息ID,[查询消息ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list), 示例值："12345"
	Index    *int64 `query:"index" json:"-"`     // index，当消息类型为post时，需指定图片index，index从0开始。当消息类型为img时，无需index, 示例值：0
}

// downloadHelpdeskTicketImageResp ...
type downloadHelpdeskTicketImageResp struct {
	IsFile bool                             `json:"is_file,omitempty"`
	Code   int64                            `json:"code,omitempty"`
	Msg    string                           `json:"msg,omitempty"`
	Data   *DownloadHelpdeskTicketImageResp `json:"data,omitempty"`
}

func (r *downloadHelpdeskTicketImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadHelpdeskTicketImageResp{}
	}
	r.Data.File = file
}

// DownloadHelpdeskTicketImageResp ...
type DownloadHelpdeskTicketImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketMessageList 该接口用于获取服务台工单消息详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list
func (r *HelpdeskService) GetHelpdeskTicketMessageList(ctx context.Context, request *GetHelpdeskTicketMessageListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketMessageListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketMessageList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketMessageList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketMessageList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketMessageList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketMessageListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketMessageList mock HelpdeskGetHelpdeskTicketMessageList method
func (r *Mock) MockHelpdeskGetHelpdeskTicketMessageList(f func(ctx context.Context, request *GetHelpdeskTicketMessageListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketMessageListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketMessageList = f
}

// UnMockHelpdeskGetHelpdeskTicketMessageList un-mock HelpdeskGetHelpdeskTicketMessageList method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketMessageList() {
	r.mockHelpdeskGetHelpdeskTicketMessageList = nil
}

// GetHelpdeskTicketMessageListReq ...
type GetHelpdeskTicketMessageListReq struct {
	TimeStart *int64 `query:"time_start" json:"-"` // 起始时间, 示例值：1617960686000
	TimeEnd   *int64 `query:"time_end" json:"-"`   // 结束时间, 示例值：1617960687000
	Page      *int64 `query:"page" json:"-"`       // 页数ID, 示例值：1
	PageSize  *int64 `query:"page_size" json:"-"`  // 消息数量，最大200，默认20, 示例值：10
	TicketID  string `path:"ticket_id" json:"-"`   // 工单ID, 示例值："6948728206392295444"
}

// getHelpdeskTicketMessageListResp ...
type getHelpdeskTicketMessageListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketMessageListResp `json:"data,omitempty"`
}

// GetHelpdeskTicketMessageListResp ...
type GetHelpdeskTicketMessageListResp struct {
	Messages []*GetHelpdeskTicketMessageListRespMessage `json:"messages,omitempty"` // 工单消息列表
	Total    int64                                      `json:"total,omitempty"`    // 消息总数
}

// GetHelpdeskTicketMessageListRespMessage ...
type GetHelpdeskTicketMessageListRespMessage struct {
	ID          string  `json:"id,omitempty"`           // 工单消息ID
	MessageID   string  `json:"message_id,omitempty"`   // chat消息ID
	MessageType MsgType `json:"message_type,omitempty"` // 消息类型；text：纯文本；post：富文本
	CreatedAt   int64   `json:"created_at,omitempty"`   // 创建时间
	Content     string  `json:"content,omitempty"`      // 内容
	UserName    string  `json:"user_name,omitempty"`    // 用户名
	AvatarURL   string  `json:"avatar_url,omitempty"`   // 用户图片url
	UserID      string  `json:"user_id,omitempty"`      // 用户open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendHelpdeskTicketMessage 该接口用于工单发送消息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/create
func (r *HelpdeskService) SendHelpdeskTicketMessage(ctx context.Context, request *SendHelpdeskTicketMessageReq, options ...MethodOptionFunc) (*SendHelpdeskTicketMessageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSendHelpdeskTicketMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendHelpdeskTicketMessage mock enable")
		return r.cli.mock.mockHelpdeskSendHelpdeskTicketMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SendHelpdeskTicketMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(sendHelpdeskTicketMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSendHelpdeskTicketMessage mock HelpdeskSendHelpdeskTicketMessage method
func (r *Mock) MockHelpdeskSendHelpdeskTicketMessage(f func(ctx context.Context, request *SendHelpdeskTicketMessageReq, options ...MethodOptionFunc) (*SendHelpdeskTicketMessageResp, *Response, error)) {
	r.mockHelpdeskSendHelpdeskTicketMessage = f
}

// UnMockHelpdeskSendHelpdeskTicketMessage un-mock HelpdeskSendHelpdeskTicketMessage method
func (r *Mock) UnMockHelpdeskSendHelpdeskTicketMessage() {
	r.mockHelpdeskSendHelpdeskTicketMessage = nil
}

// SendHelpdeskTicketMessageReq ...
type SendHelpdeskTicketMessageReq struct {
	TicketID string  `path:"ticket_id" json:"-"` // 工单ID, 示例值："6948728206392295444"
	MsgType  MsgType `json:"msg_type,omitempty"` // 消息类型；text：纯文本；post：富文本, 示例值："post"
	Content  string  `json:"content,omitempty"`  // - 纯文本，参考[发送文本消息](https://open.feishu.cn/document/ukTMukTMukTM/uUjNz4SN2MjL1YzM)中的content；, 富文本，参考[发送富文本消息](https://open.feishu.cn/document/ukTMukTMukTM/uMDMxEjLzATMx4yMwETM)中的content, 示例值："{,    "msg_type": "post",,    "content": {,        "post": {,            "zh_cn": {,                "title": "this is title",,                "content": [,                    [,                        {,                            "tag": "text",,                            "un_escape": true,,                            "text": "第一行&nbsp;:",                        },,                        {,                            "tag": "a",,                            "text": "超链接",,                            "href": "http://www.feishu.cn",                        },                    ],,                    [,                        {,                            "tag": "text",,                            "text": "第二行 :",                        },,                        {,                            "tag": "text",,                            "text": "文本测试",                        },                    ],                ],            },        },    },}"
}

// sendHelpdeskTicketMessageResp ...
type sendHelpdeskTicketMessageResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *SendHelpdeskTicketMessageResp `json:"data,omitempty"`
}

// SendHelpdeskTicketMessageResp ...
type SendHelpdeskTicketMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // chat消息open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskTicket 该接口用于更新服务台工单详情。只会更新数据，不会触发相关操作。如修改工单状态到关单，不会关闭聊天页面。仅支持自建应用。要更新的工单字段必须至少输入一项。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/update
func (r *HelpdeskService) UpdateHelpdeskTicket(ctx context.Context, request *UpdateHelpdeskTicketReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskTicket mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskTicket",
		Method:              "PUT",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskTicket mock HelpdeskUpdateHelpdeskTicket method
func (r *Mock) MockHelpdeskUpdateHelpdeskTicket(f func(ctx context.Context, request *UpdateHelpdeskTicketReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskTicket = f
}

// UnMockHelpdeskUpdateHelpdeskTicket un-mock HelpdeskUpdateHelpdeskTicket method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskTicket() {
	r.mockHelpdeskUpdateHelpdeskTicket = nil
}

// UpdateHelpdeskTicketReq ...
type UpdateHelpdeskTicketReq struct {
	TicketID         string                                    `path:"ticket_id" json:"-"`          // 工单ID, 示例值："6945345902185807891"
	Status           *int64                                    `json:"status,omitempty"`            // new status, 1: 已创建, 2: 处理中, 3: 排队中, 5: 待定, 50: 机器人关闭工单, 51: 关闭工单, 示例值：1
	TagNames         []string                                  `json:"tag_names,omitempty"`         // 新标签名
	Comment          *string                                   `json:"comment,omitempty"`           // 新评论, 示例值："good"
	CustomizedFields []*UpdateHelpdeskTicketReqCustomizedField `json:"customized_fields,omitempty"` // 自定义字段
	TicketType       *int64                                    `json:"ticket_type,omitempty"`       // ticket stage, 示例值：1
	Solved           *int64                                    `json:"solved,omitempty"`            // 工单是否解决，1: 未解决, 2: 已解决, 示例值：1
	Channel          *int64                                    `json:"channel,omitempty"`           // 工单来源渠道ID, 示例值：1
}

// UpdateHelpdeskTicketReqCustomizedField ...
type UpdateHelpdeskTicketReqCustomizedField struct {
	ID      *string `json:"id,omitempty"`       // 自定义字段ID, 示例值："123"
	Value   *string `json:"value,omitempty"`    // 自定义字段值, 示例值："value"
	KeyName *string `json:"key_name,omitempty"` // 键名, 示例值："key"
}

// updateHelpdeskTicketResp ...
type updateHelpdeskTicketResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskTicketResp `json:"data,omitempty"`
}

// UpdateHelpdeskTicketResp ...
type UpdateHelpdeskTicketResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHireApplication 根据人才 ID 和职位 ID 创建投递
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/create
func (r *HireService) CreateHireApplication(ctx context.Context, request *CreateHireApplicationReq, options ...MethodOptionFunc) (*CreateHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireCreateHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#CreateHireApplication mock enable")
		return r.cli.mock.mockHireCreateHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "CreateHireApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireCreateHireApplication mock HireCreateHireApplication method
func (r *Mock) MockHireCreateHireApplication(f func(ctx context.Context, request *CreateHireApplicationReq, options ...MethodOptionFunc) (*CreateHireApplicationResp, *Response, error)) {
	r.mockHireCreateHireApplication = f
}

// UnMockHireCreateHireApplication un-mock HireCreateHireApplication method
func (r *Mock) UnMockHireCreateHireApplication() {
	r.mockHireCreateHireApplication = nil
}

// CreateHireApplicationReq ...
type CreateHireApplicationReq struct {
	TalentID                         string   `json:"talent_id,omitempty"`                            // 人才ID, 示例值："12312312312"
	JobID                            string   `json:"job_id,omitempty"`                               // 职位ID, 示例值："12312312312"
	ApplicationPreferredCityCodeList []string `json:"application_preferred_city_code_list,omitempty"` // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取, 示例值：["CT_1"]
}

// createHireApplicationResp ...
type createHireApplicationResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateHireApplicationResp `json:"data,omitempty"`
}

// CreateHireApplicationResp ...
type CreateHireApplicationResp struct {
	ID string `json:"id,omitempty"` // 投递ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireApplication 根据投递 ID 获取单个投递信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/get
func (r *HireService) GetHireApplication(ctx context.Context, request *GetHireApplicationReq, options ...MethodOptionFunc) (*GetHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplication mock enable")
		return r.cli.mock.mockHireGetHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireApplication mock HireGetHireApplication method
func (r *Mock) MockHireGetHireApplication(f func(ctx context.Context, request *GetHireApplicationReq, options ...MethodOptionFunc) (*GetHireApplicationResp, *Response, error)) {
	r.mockHireGetHireApplication = f
}

// UnMockHireGetHireApplication un-mock HireGetHireApplication method
func (r *Mock) UnMockHireGetHireApplication() {
	r.mockHireGetHireApplication = nil
}

// GetHireApplicationReq ...
type GetHireApplicationReq struct {
	ApplicationID string `path:"application_id" json:"-"` // 投递 ID, 示例值："6949805467799537964"
}

// getHireApplicationResp ...
type getHireApplicationResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationResp `json:"data,omitempty"`
}

// GetHireApplicationResp ...
type GetHireApplicationResp struct {
	Application *GetHireApplicationRespApplication `json:"application,omitempty"` // 投递数据
}

// GetHireApplicationRespApplication ...
type GetHireApplicationRespApplication struct {
	ID                           string                                                       `json:"id,omitempty"`                              // 投递id
	JobID                        string                                                       `json:"job_id,omitempty"`                          // 投递的职位 ID
	TalentID                     string                                                       `json:"talent_id,omitempty"`                       // 候选人 ID
	ResumeResourceID             string                                                       `json:"resume_resource_id,omitempty"`              // 简历来源 ID
	Stage                        *GetHireApplicationRespApplicationStage                      `json:"stage,omitempty"`                           // 投递处于的阶段
	ActiveStatus                 int64                                                        `json:"active_status,omitempty"`                   // 活跃状态, 可选值有: `1`：活跃, `2`：非活跃，即为「已终止」, `3`：全部
	DeliveryType                 int64                                                        `json:"delivery_type,omitempty"`                   // 投递方式, 可选值有: `1`：HR寻访, `2`：候选人主动投递
	ResumeSourceInfo             *GetHireApplicationRespApplicationResumeSourceInfo           `json:"resume_source_info,omitempty"`              // 投递来源信息
	WebsiteResumeSource          *GetHireApplicationRespApplicationWebsiteResumeSource        `json:"website_resume_source,omitempty"`           // 官网投递来源
	TalentAttachmentResumeID     string                                                       `json:"talent_attachment_resume_id,omitempty"`     // 简历附件 ID
	CreateTime                   string                                                       `json:"create_time,omitempty"`                     // 创建时间
	ModifyTime                   string                                                       `json:"modify_time,omitempty"`                     // 修改时间
	StageTimeList                []*GetHireApplicationRespApplicationStageTime                `json:"stage_time_list,omitempty"`                 // 阶段变更时间列表
	TerminationType              int64                                                        `json:"termination_type,omitempty"`                // 终止原因的类型, 可选值有: `1`：我们拒绝了候选人, `22`：候选人拒绝了我们, `27`：其他
	TerminationReasonList        []string                                                     `json:"termination_reason_list,omitempty"`         // 终止的具体原因的id列表
	TerminationReasonNote        string                                                       `json:"termination_reason_note,omitempty"`         // 终止备注
	ApplicationPreferredCityList []*GetHireApplicationRespApplicationApplicationPreferredCity `json:"application_preferred_city_list,omitempty"` // 意向投递城市列表
}

// GetHireApplicationRespApplicationStage ...
type GetHireApplicationRespApplicationStage struct {
	ID     string `json:"id,omitempty"`      // 阶段 ID
	ZhName string `json:"zh_name,omitempty"` // 阶段中文名字
	EnName string `json:"en_name,omitempty"` // 英文名
	Type   int64  `json:"type,omitempty"`    // 阶段类型, 可选值有: `1`：筛选型, `2`：评估型, `3`：笔试型, `4`：面试型, `5`：Offer型, `6`：待入职, `7`：已入职, `8`：其它类型, `255`：系统默认
}

// GetHireApplicationRespApplicationResumeSourceInfo ...
type GetHireApplicationRespApplicationResumeSourceInfo struct {
	ID               string                                                 `json:"id,omitempty"`                 // 投递来源 ID
	Name             *GetHireApplicationRespApplicationResumeSourceInfoName `json:"name,omitempty"`               // 投递来源名称
	ResumeSourceType int64                                                  `json:"resume_source_type,omitempty"` // 投递来源类型, 可选值有: `10000`：内推, `10001`：猎头, `10002`：内部来源, `10003`：第三方招聘网站, `10004`：社交媒体, `10005`：线下来源, `10006`：其他, `10007`：外部推荐
}

// GetHireApplicationRespApplicationResumeSourceInfoName ...
type GetHireApplicationRespApplicationResumeSourceInfoName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireApplicationRespApplicationWebsiteResumeSource ...
type GetHireApplicationRespApplicationWebsiteResumeSource struct {
	WebsiteID   string                                                           `json:"website_id,omitempty"`   // 官网站点 ID
	WebsiteName *GetHireApplicationRespApplicationWebsiteResumeSourceWebsiteName `json:"website_name,omitempty"` // 官网站点名称
	Channel     *GetHireApplicationRespApplicationWebsiteResumeSourceChannel     `json:"channel,omitempty"`      // 推广渠道来源
}

// GetHireApplicationRespApplicationWebsiteResumeSourceWebsiteName ...
type GetHireApplicationRespApplicationWebsiteResumeSourceWebsiteName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireApplicationRespApplicationWebsiteResumeSourceChannel ...
type GetHireApplicationRespApplicationWebsiteResumeSourceChannel struct {
	ChannelID   string                                                                  `json:"channel_id,omitempty"`   // 官网推广渠道 ID
	ChannelName *GetHireApplicationRespApplicationWebsiteResumeSourceChannelChannelName `json:"channel_name,omitempty"` // 官网推广渠道名称
}

// GetHireApplicationRespApplicationWebsiteResumeSourceChannelChannelName ...
type GetHireApplicationRespApplicationWebsiteResumeSourceChannelChannelName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireApplicationRespApplicationStageTime ...
type GetHireApplicationRespApplicationStageTime struct {
	StageID   string `json:"stage_id,omitempty"`   // 阶段 ID
	EnterTime string `json:"enter_time,omitempty"` // 最近一次进入该阶段的时间
	ExitTime  string `json:"exit_time,omitempty"`  // 最后一次离开时间，如当前在该阶段，则为空
}

// GetHireApplicationRespApplicationApplicationPreferredCity ...
type GetHireApplicationRespApplicationApplicationPreferredCity struct {
	Code string                                                         `json:"code,omitempty"` // 编码
	Name *GetHireApplicationRespApplicationApplicationPreferredCityName `json:"name,omitempty"` // 名称
}

// GetHireApplicationRespApplicationApplicationPreferredCityName ...
type GetHireApplicationRespApplicationApplicationPreferredCityName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireApplicationInterviewList 根据投递 ID 获取面试记录列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application-interview/list
//
// Deprecated
func (r *HireService) GetHireApplicationInterviewList(ctx context.Context, request *GetHireApplicationInterviewListReq, options ...MethodOptionFunc) (*GetHireApplicationInterviewListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplicationInterviewList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplicationInterviewList mock enable")
		return r.cli.mock.mockHireGetHireApplicationInterviewList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplicationInterviewList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/interviews",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationInterviewListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireApplicationInterviewList mock HireGetHireApplicationInterviewList method
func (r *Mock) MockHireGetHireApplicationInterviewList(f func(ctx context.Context, request *GetHireApplicationInterviewListReq, options ...MethodOptionFunc) (*GetHireApplicationInterviewListResp, *Response, error)) {
	r.mockHireGetHireApplicationInterviewList = f
}

// UnMockHireGetHireApplicationInterviewList un-mock HireGetHireApplicationInterviewList method
func (r *Mock) UnMockHireGetHireApplicationInterviewList() {
	r.mockHireGetHireApplicationInterviewList = nil
}

// GetHireApplicationInterviewListReq ...
type GetHireApplicationInterviewListReq struct {
	PageSize      int64   `query:"page_size" json:"-"`     // 分页大小, 示例值：10
	PageToken     *string `query:"page_token" json:"-"`    // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xx"
	UserIDType    *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApplicationID string  `path:"application_id" json:"-"` // 投递ID, 示例值："6949805467799537964"
}

// getHireApplicationInterviewListResp ...
type getHireApplicationInterviewListResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationInterviewListResp `json:"data,omitempty"`
}

// GetHireApplicationInterviewListResp ...
type GetHireApplicationInterviewListResp struct {
	PageToken string                                     `json:"page_token,omitempty"` // 分页标志
	HasMore   bool                                       `json:"has_more,omitempty"`   // 是否有更多
	Items     []*GetHireApplicationInterviewListRespItem `json:"items,omitempty"`      // 面试列表
}

// GetHireApplicationInterviewListRespItem ...
type GetHireApplicationInterviewListRespItem struct {
	ID                  string                                                    `json:"id,omitempty"`                    // 面试id
	BeginTime           int64                                                     `json:"begin_time,omitempty"`            // 面试开始时间（ms）
	EndTime             int64                                                     `json:"end_time,omitempty"`              // 面试结束时间（ms）
	Round               int64                                                     `json:"round,omitempty"`                 // 面试轮次（从0开始计数）
	StageID             string                                                    `json:"stage_id,omitempty"`              // 面试关联的投递阶段
	InterviewRecordList []*GetHireApplicationInterviewListRespItemInterviewRecord `json:"interview_record_list,omitempty"` // 面试官记录列表
}

// GetHireApplicationInterviewListRespItemInterviewRecord ...
type GetHireApplicationInterviewListRespItemInterviewRecord struct {
	ID             string                                                                `json:"id,omitempty"`               // 面试记录id
	UserID         string                                                                `json:"user_id,omitempty"`          // 面试官用户id
	Content        string                                                                `json:"content,omitempty"`          // 面试评价
	MinJobLevelID  string                                                                `json:"min_job_level_id,omitempty"` // 建议定级下限的职级id
	MaxJobLevelID  string                                                                `json:"max_job_level_id,omitempty"` // 建议定级上限的职级id
	CommitStatus   int64                                                                 `json:"commit_status,omitempty"`    // 提交状态, 可选值有: `1`：已提交, `2`：未提交
	Conclusion     int64                                                                 `json:"conclusion,omitempty"`       // 面试结论, 可选值有: `1`：通过, `2`：未通过, `3`：未开始, `4`：未提交, `5`：未到场
	InterviewScore *GetHireApplicationInterviewListRespItemInterviewRecordInterviewScore `json:"interview_score,omitempty"`  // 面试评分
}

// GetHireApplicationInterviewListRespItemInterviewRecordInterviewScore ...
type GetHireApplicationInterviewListRespItemInterviewRecordInterviewScore struct {
	ID            string `json:"id,omitempty"`             // 面试评分id
	Level         int64  `json:"level,omitempty"`          // 分数级别
	ZhName        string `json:"zh_name,omitempty"`        // 中文名称
	ZhDescription string `json:"zh_description,omitempty"` // 中文描述
	EnName        string `json:"en_name,omitempty"`        // 英文名称
	EnDescription string `json:"en_description,omitempty"` // 英文描述
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireApplicationList 根据限定条件获取投递列表信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/list
func (r *HireService) GetHireApplicationList(ctx context.Context, request *GetHireApplicationListReq, options ...MethodOptionFunc) (*GetHireApplicationListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireApplicationList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireApplicationList mock enable")
		return r.cli.mock.mockHireGetHireApplicationList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireApplicationList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireApplicationListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireApplicationList mock HireGetHireApplicationList method
func (r *Mock) MockHireGetHireApplicationList(f func(ctx context.Context, request *GetHireApplicationListReq, options ...MethodOptionFunc) (*GetHireApplicationListResp, *Response, error)) {
	r.mockHireGetHireApplicationList = f
}

// UnMockHireGetHireApplicationList un-mock HireGetHireApplicationList method
func (r *Mock) UnMockHireGetHireApplicationList() {
	r.mockHireGetHireApplicationList = nil
}

// GetHireApplicationListReq ...
type GetHireApplicationListReq struct {
	ProcessID       *string `query:"process_id" json:"-"`        // 按流程过滤，招聘流程 ID，枚举值通过接口「获取招聘流程信息」接口获取, 示例值："6960663240925956554"
	StageID         *string `query:"stage_id" json:"-"`          // 按招聘阶段过滤，招聘阶段 ID，枚举值通过「获取招聘流程信息」接口获取, 示例值："614218419274131"
	TalentID        *string `query:"talent_id" json:"-"`         // 按人才过滤, 示例值："6891560630172518670"
	ActiveStatus    *string `query:"active_status" json:"-"`     // 按活跃状态筛选 1=活跃投递, 2=非活跃投递, 3=全部, 示例值："1"
	JobID           *string `query:"job_id" json:"-"`            // 职位 ID, 示例值："7334134355464633"
	PageToken       *string `query:"page_token" json:"-"`        // 查询游标, 由上一页结果返回, 第一页不传, 示例值："1"
	PageSize        *int64  `query:"page_size" json:"-"`         // 每页限制, 每页最大不超过100, 示例值：100
	UpdateStartTime *string `query:"update_start_time" json:"-"` // 最早更新时间，毫秒级时间戳, 示例值："1618500278663"
	UpdateEndTime   *string `query:"update_end_time" json:"-"`   // 最晚更新时间，毫秒级时间戳, 示例值："1618500278663"
}

// getHireApplicationListResp ...
type getHireApplicationListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetHireApplicationListResp `json:"data,omitempty"`
}

// GetHireApplicationListResp ...
type GetHireApplicationListResp struct {
	Items     []string `json:"items,omitempty"`      // 投递数据列表
	PageToken string   `json:"page_token,omitempty"` // 游标, 翻下一页数据时使用
	HasMore   bool     `json:"has_more,omitempty"`   // 是否还有下一页数据
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// TerminateHireApplication 根据投递 ID 修改投递状态为「已终止」
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/terminate
func (r *HireService) TerminateHireApplication(ctx context.Context, request *TerminateHireApplicationReq, options ...MethodOptionFunc) (*TerminateHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireTerminateHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#TerminateHireApplication mock enable")
		return r.cli.mock.mockHireTerminateHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "TerminateHireApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/terminate",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(terminateHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireTerminateHireApplication mock HireTerminateHireApplication method
func (r *Mock) MockHireTerminateHireApplication(f func(ctx context.Context, request *TerminateHireApplicationReq, options ...MethodOptionFunc) (*TerminateHireApplicationResp, *Response, error)) {
	r.mockHireTerminateHireApplication = f
}

// UnMockHireTerminateHireApplication un-mock HireTerminateHireApplication method
func (r *Mock) UnMockHireTerminateHireApplication() {
	r.mockHireTerminateHireApplication = nil
}

// TerminateHireApplicationReq ...
type TerminateHireApplicationReq struct {
	ApplicationID         string   `path:"application_id" json:"-"`           // 投递ID, 示例值："12312312312"
	TerminationType       int64    `json:"termination_type,omitempty"`        // 终止原因的类型, 示例值：1, 可选值有: `1`：我们拒绝了候选人, `22`：候选人拒绝了我们, `27`：其他
	TerminationReasonList []string `json:"termination_reason_list,omitempty"` // 终止的具体原因的id列表, 示例值：["6891560630172518670"]
	TerminationReasonNote *string  `json:"termination_reason_note,omitempty"` // 终止备注, 示例值："不符合期望"
}

// terminateHireApplicationResp ...
type terminateHireApplicationResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *TerminateHireApplicationResp `json:"data,omitempty"`
}

// TerminateHireApplicationResp ...
type TerminateHireApplicationResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireAttachment 获取招聘系统中附件的元信息，比如文件名、创建时间、文件url等
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/get
func (r *HireService) GetHireAttachment(ctx context.Context, request *GetHireAttachmentReq, options ...MethodOptionFunc) (*GetHireAttachmentResp, *Response, error) {
	if r.cli.mock.mockHireGetHireAttachment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireAttachment mock enable")
		return r.cli.mock.mockHireGetHireAttachment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireAttachment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/attachments/:attachment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireAttachmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireAttachment mock HireGetHireAttachment method
func (r *Mock) MockHireGetHireAttachment(f func(ctx context.Context, request *GetHireAttachmentReq, options ...MethodOptionFunc) (*GetHireAttachmentResp, *Response, error)) {
	r.mockHireGetHireAttachment = f
}

// UnMockHireGetHireAttachment un-mock HireGetHireAttachment method
func (r *Mock) UnMockHireGetHireAttachment() {
	r.mockHireGetHireAttachment = nil
}

// GetHireAttachmentReq ...
type GetHireAttachmentReq struct {
	AttachmentID string `path:"attachment_id" json:"-"` // 附件id, 示例值："6435242341238"
}

// getHireAttachmentResp ...
type getHireAttachmentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHireAttachmentResp `json:"data,omitempty"`
}

// GetHireAttachmentResp ...
type GetHireAttachmentResp struct {
	Attachment *GetHireAttachmentRespAttachment `json:"attachment,omitempty"` // 附件信息
}

// GetHireAttachmentRespAttachment ...
type GetHireAttachmentRespAttachment struct {
	ID         string `json:"id,omitempty"`          // 附件id
	URL        string `json:"url,omitempty"`         // 附件的url
	Name       string `json:"name,omitempty"`        // 附件文件名
	Mime       string `json:"mime,omitempty"`        // 媒体类型/MIME
	CreateTime int64  `json:"create_time,omitempty"` // 附件创建时间（单位ms）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireAttachmentPreview 根据附件 ID 获取附件预览信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/attachment/preview
func (r *HireService) GetHireAttachmentPreview(ctx context.Context, request *GetHireAttachmentPreviewReq, options ...MethodOptionFunc) (*GetHireAttachmentPreviewResp, *Response, error) {
	if r.cli.mock.mockHireGetHireAttachmentPreview != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireAttachmentPreview mock enable")
		return r.cli.mock.mockHireGetHireAttachmentPreview(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireAttachmentPreview",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/attachments/:attachment_id/preview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireAttachmentPreviewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireAttachmentPreview mock HireGetHireAttachmentPreview method
func (r *Mock) MockHireGetHireAttachmentPreview(f func(ctx context.Context, request *GetHireAttachmentPreviewReq, options ...MethodOptionFunc) (*GetHireAttachmentPreviewResp, *Response, error)) {
	r.mockHireGetHireAttachmentPreview = f
}

// UnMockHireGetHireAttachmentPreview un-mock HireGetHireAttachmentPreview method
func (r *Mock) UnMockHireGetHireAttachmentPreview() {
	r.mockHireGetHireAttachmentPreview = nil
}

// GetHireAttachmentPreviewReq ...
type GetHireAttachmentPreviewReq struct {
	AttachmentID string `path:"attachment_id" json:"-"` // 附件id, 示例值："11111"
}

// getHireAttachmentPreviewResp ...
type getHireAttachmentPreviewResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetHireAttachmentPreviewResp `json:"data,omitempty"`
}

// GetHireAttachmentPreviewResp ...
type GetHireAttachmentPreviewResp struct {
	URL string `json:"url,omitempty"` // 预览链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireEmployee 通过员工 ID 获取入职信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get
func (r *HireService) GetHireEmployee(ctx context.Context, request *GetHireEmployeeReq, options ...MethodOptionFunc) (*GetHireEmployeeResp, *Response, error) {
	if r.cli.mock.mockHireGetHireEmployee != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireEmployee mock enable")
		return r.cli.mock.mockHireGetHireEmployee(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireEmployee",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/:employee_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireEmployeeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireEmployee mock HireGetHireEmployee method
func (r *Mock) MockHireGetHireEmployee(f func(ctx context.Context, request *GetHireEmployeeReq, options ...MethodOptionFunc) (*GetHireEmployeeResp, *Response, error)) {
	r.mockHireGetHireEmployee = f
}

// UnMockHireGetHireEmployee un-mock HireGetHireEmployee method
func (r *Mock) UnMockHireGetHireEmployee() {
	r.mockHireGetHireEmployee = nil
}

// GetHireEmployeeReq ...
type GetHireEmployeeReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	EmployeeID string  `path:"employee_id" json:"-"`   // 员工ID, 示例值："123"
}

// getHireEmployeeResp ...
type getHireEmployeeResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetHireEmployeeResp `json:"data,omitempty"`
}

// GetHireEmployeeResp ...
type GetHireEmployeeResp struct {
	Employee *GetHireEmployeeRespEmployee `json:"employee,omitempty"` // 员工信息
}

// GetHireEmployeeRespEmployee ...
type GetHireEmployeeRespEmployee struct {
	ID                     string       `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string       `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64        `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64        `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64        `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64        `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64        `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64        `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string       `json:"overboard_note,omitempty"`           // 离职原因
	OnboardCityCode        string       `json:"onboard_city_code,omitempty"`        // 办公地点
	Department             string       `json:"department,omitempty"`               // 入职部门
	Leader                 string       `json:"leader,omitempty"`                   // 直属上级
	Sequence               string       `json:"sequence,omitempty"`                 // 序列
	Level                  string       `json:"level,omitempty"`                    // 职级
	EmployeeType           EmployeeType `json:"employee_type,omitempty"`            // 员工类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireEmployeeByApplication 通过投递 ID 获取入职信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/get_by_application
func (r *HireService) GetHireEmployeeByApplication(ctx context.Context, request *GetHireEmployeeByApplicationReq, options ...MethodOptionFunc) (*GetHireEmployeeByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireEmployeeByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireEmployeeByApplication mock enable")
		return r.cli.mock.mockHireGetHireEmployeeByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireEmployeeByApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/get_by_application",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireEmployeeByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireEmployeeByApplication mock HireGetHireEmployeeByApplication method
func (r *Mock) MockHireGetHireEmployeeByApplication(f func(ctx context.Context, request *GetHireEmployeeByApplicationReq, options ...MethodOptionFunc) (*GetHireEmployeeByApplicationResp, *Response, error)) {
	r.mockHireGetHireEmployeeByApplication = f
}

// UnMockHireGetHireEmployeeByApplication un-mock HireGetHireEmployeeByApplication method
func (r *Mock) UnMockHireGetHireEmployeeByApplication() {
	r.mockHireGetHireEmployeeByApplication = nil
}

// GetHireEmployeeByApplicationReq ...
type GetHireEmployeeByApplicationReq struct {
	ApplicationID string  `query:"application_id" json:"-"` // 投递ID, 示例值："123"
	UserIDType    *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getHireEmployeeByApplicationResp ...
type getHireEmployeeByApplicationResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHireEmployeeByApplicationResp `json:"data,omitempty"`
}

// GetHireEmployeeByApplicationResp ...
type GetHireEmployeeByApplicationResp struct {
	Employee *GetHireEmployeeByApplicationRespEmployee `json:"employee,omitempty"` // 员工信息
}

// GetHireEmployeeByApplicationRespEmployee ...
type GetHireEmployeeByApplicationRespEmployee struct {
	ID                     string       `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string       `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64        `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64        `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64        `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64        `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64        `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64        `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string       `json:"overboard_note,omitempty"`           // 离职原因
	OnboardCityCode        string       `json:"onboard_city_code,omitempty"`        // 办公地点
	Department             string       `json:"department,omitempty"`               // 入职部门
	Leader                 string       `json:"leader,omitempty"`                   // 直属上级
	Sequence               string       `json:"sequence,omitempty"`                 // 序列
	Level                  string       `json:"level,omitempty"`                    // 职级
	EmployeeType           EmployeeType `json:"employee_type,omitempty"`            // 员工类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHireEmployee 根据员工 ID 更新员工转正、离职状态
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/employee/patch
func (r *HireService) UpdateHireEmployee(ctx context.Context, request *UpdateHireEmployeeReq, options ...MethodOptionFunc) (*UpdateHireEmployeeResp, *Response, error) {
	if r.cli.mock.mockHireUpdateHireEmployee != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#UpdateHireEmployee mock enable")
		return r.cli.mock.mockHireUpdateHireEmployee(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "UpdateHireEmployee",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/employees/:employee_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateHireEmployeeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireUpdateHireEmployee mock HireUpdateHireEmployee method
func (r *Mock) MockHireUpdateHireEmployee(f func(ctx context.Context, request *UpdateHireEmployeeReq, options ...MethodOptionFunc) (*UpdateHireEmployeeResp, *Response, error)) {
	r.mockHireUpdateHireEmployee = f
}

// UnMockHireUpdateHireEmployee un-mock HireUpdateHireEmployee method
func (r *Mock) UnMockHireUpdateHireEmployee() {
	r.mockHireUpdateHireEmployee = nil
}

// UpdateHireEmployeeReq ...
type UpdateHireEmployeeReq struct {
	UserIDType     *IDType                              `query:"user_id_type" json:"-"`    // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	EmployeeID     string                               `path:"employee_id" json:"-"`      // 员工ID, 示例值："123"
	Operation      int64                                `json:"operation,omitempty"`       // 修改状态操作, 示例值：1, 可选值有: `1`：转正, `2`：离职
	ConversionInfo *UpdateHireEmployeeReqConversionInfo `json:"conversion_info,omitempty"` // 转正信息
	OverboardInfo  *UpdateHireEmployeeReqOverboardInfo  `json:"overboard_info,omitempty"`  // 离职信息
}

// UpdateHireEmployeeReqConversionInfo ...
type UpdateHireEmployeeReqConversionInfo struct {
	ActualConversionTime *int64 `json:"actual_conversion_time,omitempty"` // 实际转正日期, 示例值：1637596800000
}

// UpdateHireEmployeeReqOverboardInfo ...
type UpdateHireEmployeeReqOverboardInfo struct {
	ActualOverboardTime *int64  `json:"actual_overboard_time,omitempty"` // 实际离职日期, 示例值：1637596800000
	OverboardNote       *string `json:"overboard_note,omitempty"`        // 离职原因, 示例值："职业发展考虑"
}

// updateHireEmployeeResp ...
type updateHireEmployeeResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHireEmployeeResp `json:"data,omitempty"`
}

// UpdateHireEmployeeResp ...
type UpdateHireEmployeeResp struct {
	Employee *UpdateHireEmployeeRespEmployee `json:"employee,omitempty"` // 员工信息
}

// UpdateHireEmployeeRespEmployee ...
type UpdateHireEmployeeRespEmployee struct {
	ID                     string       `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string       `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64        `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64        `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64        `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64        `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64        `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64        `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string       `json:"overboard_note,omitempty"`           // 离职原因
	OnboardCityCode        string       `json:"onboard_city_code,omitempty"`        // 办公地点
	Department             string       `json:"department,omitempty"`               // 入职部门
	Leader                 string       `json:"leader,omitempty"`                   // 直属上级
	Sequence               string       `json:"sequence,omitempty"`                 // 序列
	Level                  string       `json:"level,omitempty"`                    // 职级
	EmployeeType           EmployeeType `json:"employee_type,omitempty"`            // 员工类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireJob 根据职位 ID 获取职位信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job/get
func (r *HireService) GetHireJob(ctx context.Context, request *GetHireJobReq, options ...MethodOptionFunc) (*GetHireJobResp, *Response, error) {
	if r.cli.mock.mockHireGetHireJob != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireJob mock enable")
		return r.cli.mock.mockHireGetHireJob(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireJob",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/jobs/:job_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireJobResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireJob mock HireGetHireJob method
func (r *Mock) MockHireGetHireJob(f func(ctx context.Context, request *GetHireJobReq, options ...MethodOptionFunc) (*GetHireJobResp, *Response, error)) {
	r.mockHireGetHireJob = f
}

// UnMockHireGetHireJob un-mock HireGetHireJob method
func (r *Mock) UnMockHireGetHireJob() {
	r.mockHireGetHireJob = nil
}

// GetHireJobReq ...
type GetHireJobReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	JobID      int64   `path:"job_id" json:"-"`        // 职位 ID，请求Path中, 示例值：6001
}

// getHireJobResp ...
type getHireJobResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *GetHireJobResp `json:"data,omitempty"`
}

// GetHireJobResp ...
type GetHireJobResp struct {
	Job *GetHireJobRespJob `json:"job,omitempty"` // 职位数据
}

// GetHireJobRespJob ...
type GetHireJobRespJob struct {
	ID                 string                             `json:"id,omitempty"`                   // 职位 ID
	Title              string                             `json:"title,omitempty"`                // 职位名称
	Description        string                             `json:"description,omitempty"`          // 职位描述
	Code               string                             `json:"code,omitempty"`                 // 职位编号
	Requirement        string                             `json:"requirement,omitempty"`          // 职位要求
	RecruitmentType    *GetHireJobRespJobRecruitmentType  `json:"recruitment_type,omitempty"`     // 雇佣类型
	Department         *GetHireJobRespJobDepartment       `json:"department,omitempty"`           // 部门
	City               *GetHireJobRespJobCity             `json:"city,omitempty"`                 // 工作地点
	MinJobLevel        *GetHireJobRespJobMinJobLevel      `json:"min_job_level,omitempty"`        // 最低职级
	MaxJobLevel        *GetHireJobRespJobMaxJobLevel      `json:"max_job_level,omitempty"`        // 最高职级
	HighlightList      []*GetHireJobRespJobHighlight      `json:"highlight_list,omitempty"`       // 职位亮点
	JobCategory        *GetHireJobRespJobJobCategory      `json:"job_category,omitempty"`         // 职位序列
	JobType            *GetHireJobRespJobJobType          `json:"job_type,omitempty"`             // 职位类别
	ActiveStatus       int64                              `json:"active_status,omitempty"`        // 启用状态, 可选值有: `1`：启用, `2`：未启用
	CreateUserID       string                             `json:"create_user_id,omitempty"`       // 创建人ID，若为空则为系统或其他对接系统创建
	CreateTime         int64                              `json:"create_time,omitempty"`          // 创建时间
	UpdateTime         int64                              `json:"update_time,omitempty"`          // 更新时间
	ProcessType        int64                              `json:"process_type,omitempty"`         // 招聘流程类型, 可选值有: `1`：社招流程, `2`：校招流程
	ProcessID          string                             `json:"process_id,omitempty"`           // 招聘流程 ID
	ProcessName        string                             `json:"process_name,omitempty"`         // 招聘流程中文名称
	ProcessEnName      string                             `json:"process_en_name,omitempty"`      // 招聘流程英文名称
	CustomizedDataList []*GetHireJobRespJobCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段列表
	JobFunction        *GetHireJobRespJobJobFunction      `json:"job_function,omitempty"`         // 职能分类
	Subject            *GetHireJobRespJobSubject          `json:"subject,omitempty"`              // 职位项目
	HeadCount          int64                              `json:"head_count,omitempty"`           // 招聘数量
	Experience         int64                              `json:"experience,omitempty"`           // 工作年限, 可选值有: `1`：不限, `2`：应届毕业生, `3`：1年以下, `4`：1-3年, `5`：3-5年, `6`：5-7年, `7`：7-10年, `8`：10年以上
	ExpiryTime         int64                              `json:"expiry_time,omitempty"`          // 到期日期
	MinSalary          int64                              `json:"min_salary,omitempty"`           // 最低薪资，单位:k
	MaxSalary          int64                              `json:"max_salary,omitempty"`           // 最高薪资，单位:k
	RequiredDegree     int64                              `json:"required_degree,omitempty"`      // 学历要求, 可选值有: `1`：小学及以上, `2`：初中及以上, `3`：专职及以上, `4`：高中及以上, `5`：大专及以上, `6`：本科及以上, `7`：硕士及以上, `8`：博士及以上, `20`：不限
	CityList           []*GetHireJobRespJobCity           `json:"city_list,omitempty"`            // 工作地点列表
}

// GetHireJobRespJobRecruitmentType ...
type GetHireJobRespJobRecruitmentType struct {
	ID           string `json:"id,omitempty"`            // 雇佣类型 ID
	ZhName       string `json:"zh_name,omitempty"`       // 雇佣类型中文名称
	EnName       string `json:"en_name,omitempty"`       // 雇佣类型英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 雇佣类型启用状态, 可选值有: `1`：启用, `2`：未启用
}

// GetHireJobRespJobDepartment ...
type GetHireJobRespJobDepartment struct {
	ID     string `json:"id,omitempty"`      // 部门 ID
	ZhName string `json:"zh_name,omitempty"` // 部门中文名称
	EnName string `json:"en_name,omitempty"` // 部门英文名称
}

// GetHireJobRespJobCity ...
type GetHireJobRespJobCity struct {
	Code string                     `json:"code,omitempty"` // 编码
	Name *GetHireJobRespJobCityName `json:"name,omitempty"` // 名称
}

// GetHireJobRespJobMinJobLevel ...
type GetHireJobRespJobMinJobLevel struct {
	ID           string `json:"id,omitempty"`            // 职级 ID
	ZhName       string `json:"zh_name,omitempty"`       // 职级中文名称
	EnName       string `json:"en_name,omitempty"`       // 职级英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 职级启用状态, 可选值有: `1`：启用, `2`：未启用
}

// GetHireJobRespJobMaxJobLevel ...
type GetHireJobRespJobMaxJobLevel struct {
	ID           string `json:"id,omitempty"`            // 职级 ID
	ZhName       string `json:"zh_name,omitempty"`       // 职级中文名称
	EnName       string `json:"en_name,omitempty"`       // 职级英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 职级启用状态, 可选值有: `1`：启用, `2`：未启用
}

// GetHireJobRespJobHighlight ...
type GetHireJobRespJobHighlight struct {
	ID     string `json:"id,omitempty"`      // 职位亮点 ID
	ZhName string `json:"zh_name,omitempty"` // 职位亮点中文名称
	EnName string `json:"en_name,omitempty"` // 职位亮点英文名称
}

// GetHireJobRespJobJobCategory ...
type GetHireJobRespJobJobCategory struct {
	ID           string `json:"id,omitempty"`            // 职位序列 ID
	ZhName       string `json:"zh_name,omitempty"`       // 职位序列中文名称
	EnName       string `json:"en_name,omitempty"`       // 职位序列英文名称
	ActiveStatus int64  `json:"active_status,omitempty"` // 职位序列启用状态, 可选值有: `1`：启用, `2`：未启用
}

// GetHireJobRespJobJobType ...
type GetHireJobRespJobJobType struct {
	ID     string `json:"id,omitempty"`      // 职位类别 ID
	ZhName string `json:"zh_name,omitempty"` // 职位类别中文名称
	EnName string `json:"en_name,omitempty"` // 职位类别英文名称
}

// GetHireJobRespJobCustomizedData ...
type GetHireJobRespJobCustomizedData struct {
	ObjectID   string                                `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireJobRespJobCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                 `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireJobRespJobCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireJobRespJobCustomizedDataName ...
type GetHireJobRespJobCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireJobRespJobCustomizedDataValue ...
type GetHireJobRespJobCustomizedDataValue struct {
	Content    string                                         `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireJobRespJobCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireJobRespJobCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireJobRespJobCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                         `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	Number     string                                         `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireJobRespJobCustomizedDataValueOption ...
type GetHireJobRespJobCustomizedDataValueOption struct {
	Key  string                                          `json:"key,omitempty"`  // 选项 ID
	Name *GetHireJobRespJobCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireJobRespJobCustomizedDataValueOptionName ...
type GetHireJobRespJobCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireJobRespJobCustomizedDataValueTimeRange ...
type GetHireJobRespJobCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间
}

// GetHireJobRespJobJobFunction ...
type GetHireJobRespJobJobFunction struct {
	ID   string                            `json:"id,omitempty"`   // ID
	Name *GetHireJobRespJobJobFunctionName `json:"name,omitempty"` // 名称
}

// GetHireJobRespJobJobFunctionName ...
type GetHireJobRespJobJobFunctionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireJobRespJobSubject ...
type GetHireJobRespJobSubject struct {
	ID   string                        `json:"id,omitempty"`   // ID
	Name *GetHireJobRespJobSubjectName `json:"name,omitempty"` // 名称
}

// GetHireJobRespJobSubjectName ...
type GetHireJobRespJobSubjectName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireJobRespJobCityName ...
type GetHireJobRespJobCityName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireJobManager 根据职位 ID 获取职位上的招聘人员信息，如招聘负责人、用人经理
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job-manager/get
func (r *HireService) GetHireJobManager(ctx context.Context, request *GetHireJobManagerReq, options ...MethodOptionFunc) (*GetHireJobManagerResp, *Response, error) {
	if r.cli.mock.mockHireGetHireJobManager != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireJobManager mock enable")
		return r.cli.mock.mockHireGetHireJobManager(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireJobManager",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/jobs/:job_id/managers/:manager_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireJobManagerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireJobManager mock HireGetHireJobManager method
func (r *Mock) MockHireGetHireJobManager(f func(ctx context.Context, request *GetHireJobManagerReq, options ...MethodOptionFunc) (*GetHireJobManagerResp, *Response, error)) {
	r.mockHireGetHireJobManager = f
}

// UnMockHireGetHireJobManager un-mock HireGetHireJobManager method
func (r *Mock) UnMockHireGetHireJobManager() {
	r.mockHireGetHireJobManager = nil
}

// GetHireJobManagerReq ...
type GetHireJobManagerReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	JobID      string  `path:"job_id" json:"-"`        // 职位ID, 示例值："1618209327096"
	ManagerID  string  `path:"manager_id" json:"-"`    // 人员ID，目前传职位ID, 示例值："1618209327096"
}

// getHireJobManagerResp ...
type getHireJobManagerResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHireJobManagerResp `json:"data,omitempty"`
}

// GetHireJobManagerResp ...
type GetHireJobManagerResp struct {
	Info *GetHireJobManagerRespInfo `json:"info,omitempty"` // 职位负责人
}

// GetHireJobManagerRespInfo ...
type GetHireJobManagerRespInfo struct {
	ID                  string   `json:"id,omitempty"`                     // 职位ID
	RecruiterID         string   `json:"recruiter_id,omitempty"`           // 招聘负责人ID，仅一位，可通过用户相关接口获取用户 id
	HiringManagerIDList []string `json:"hiring_manager_id_list,omitempty"` // 用人经理ID列表
	AssistantIDList     []string `json:"assistant_id_list,omitempty"`      // 协助人ID列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireJobProcessList 获取全部招聘流程信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/job_process/list
func (r *HireService) GetHireJobProcessList(ctx context.Context, request *GetHireJobProcessListReq, options ...MethodOptionFunc) (*GetHireJobProcessListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireJobProcessList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireJobProcessList mock enable")
		return r.cli.mock.mockHireGetHireJobProcessList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireJobProcessList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/job_processes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireJobProcessListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireJobProcessList mock HireGetHireJobProcessList method
func (r *Mock) MockHireGetHireJobProcessList(f func(ctx context.Context, request *GetHireJobProcessListReq, options ...MethodOptionFunc) (*GetHireJobProcessListResp, *Response, error)) {
	r.mockHireGetHireJobProcessList = f
}

// UnMockHireGetHireJobProcessList un-mock HireGetHireJobProcessList method
func (r *Mock) UnMockHireGetHireJobProcessList() {
	r.mockHireGetHireJobProcessList = nil
}

// GetHireJobProcessListReq ...
type GetHireJobProcessListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 不能超过 100, 示例值：10
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1"
}

// getHireJobProcessListResp ...
type getHireJobProcessListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHireJobProcessListResp `json:"data,omitempty"`
}

// GetHireJobProcessListResp ...
type GetHireJobProcessListResp struct {
	HasMore   bool                             `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                           `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetHireJobProcessListRespItem `json:"items,omitempty"`      // 列表
}

// GetHireJobProcessListRespItem ...
type GetHireJobProcessListRespItem struct {
	ID        string                                `json:"id,omitempty"`         // ID
	ZhName    string                                `json:"zh_name,omitempty"`    // 中文名称
	EnName    string                                `json:"en_name,omitempty"`    // 英文名称
	Type      int64                                 `json:"type,omitempty"`       // 类型 1=社招流程, 2=校招流程,, 可选值有: `1`：社招流程, `2`：校招流程
	StageList []*GetHireJobProcessListRespItemStage `json:"stage_list,omitempty"` // 阶段列表, 内部按用户设置顺序排列
}

// GetHireJobProcessListRespItemStage ...
type GetHireJobProcessListRespItemStage struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
	Type   int64  `json:"type,omitempty"`    // 1=筛选型, 2=评估型, 3=笔试型, 4=面试型, 5=Offer型, 6=待入职, 7=已入职, 8=其它类型, 255=系统默认，后端模型中并没有该字段，仅用于前端显示,, 可选值有: `1`：筛选型, `2`：评估型, `3`：笔试型, `4`：面试型, `5`：Offer型, `6`：待入职, `7`：已入职, `8`：其它类型, `255`：系统默认
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHireNote 创建备注信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/create
func (r *HireService) CreateHireNote(ctx context.Context, request *CreateHireNoteReq, options ...MethodOptionFunc) (*CreateHireNoteResp, *Response, error) {
	if r.cli.mock.mockHireCreateHireNote != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#CreateHireNote mock enable")
		return r.cli.mock.mockHireCreateHireNote(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "CreateHireNote",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createHireNoteResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireCreateHireNote mock HireCreateHireNote method
func (r *Mock) MockHireCreateHireNote(f func(ctx context.Context, request *CreateHireNoteReq, options ...MethodOptionFunc) (*CreateHireNoteResp, *Response, error)) {
	r.mockHireCreateHireNote = f
}

// UnMockHireCreateHireNote un-mock HireCreateHireNote method
func (r *Mock) UnMockHireCreateHireNote() {
	r.mockHireCreateHireNote = nil
}

// CreateHireNoteReq ...
type CreateHireNoteReq struct {
	UserIDType    *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TalentID      string  `json:"talent_id,omitempty"`      // 人才ID, 示例值："6916472453069883661"
	ApplicationID *string `json:"application_id,omitempty"` // 投递ID, 示例值："6891565253964859661"
	CreatorID     *string `json:"creator_id,omitempty"`     // 创建人ID, 示例值："ou_f476cb099ac9227c9bae09ce46112579"
	Content       string  `json:"content,omitempty"`        // 内容, 示例值："测试"
	Privacy       *int64  `json:"privacy,omitempty"`        // 备注私密属性（默认为公开）, 示例值：1, 可选值有: `1`：私密, `2`：公开
}

// createHireNoteResp ...
type createHireNoteResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *CreateHireNoteResp `json:"data,omitempty"`
}

// CreateHireNoteResp ...
type CreateHireNoteResp struct {
	Note *CreateHireNoteRespNote `json:"note,omitempty"` // 备注信息
}

// CreateHireNoteRespNote ...
type CreateHireNoteRespNote struct {
	ID            string `json:"id,omitempty"`             // 备注ID
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireNote 根据备注 ID 获取备注信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/get
func (r *HireService) GetHireNote(ctx context.Context, request *GetHireNoteReq, options ...MethodOptionFunc) (*GetHireNoteResp, *Response, error) {
	if r.cli.mock.mockHireGetHireNote != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireNote mock enable")
		return r.cli.mock.mockHireGetHireNote(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireNote",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes/:note_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireNoteResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireNote mock HireGetHireNote method
func (r *Mock) MockHireGetHireNote(f func(ctx context.Context, request *GetHireNoteReq, options ...MethodOptionFunc) (*GetHireNoteResp, *Response, error)) {
	r.mockHireGetHireNote = f
}

// UnMockHireGetHireNote un-mock HireGetHireNote method
func (r *Mock) UnMockHireGetHireNote() {
	r.mockHireGetHireNote = nil
}

// GetHireNoteReq ...
type GetHireNoteReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NoteID     string  `path:"note_id" json:"-"`       // 备注ID, 示例值："6949805467799537964"
}

// getHireNoteResp ...
type getHireNoteResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetHireNoteResp `json:"data,omitempty"`
}

// GetHireNoteResp ...
type GetHireNoteResp struct {
	Note *GetHireNoteRespNote `json:"note,omitempty"` // 备注数据
}

// GetHireNoteRespNote ...
type GetHireNoteRespNote struct {
	ID            string `json:"id,omitempty"`             // 备注ID
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireNoteList 获取备注列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/list
func (r *HireService) GetHireNoteList(ctx context.Context, request *GetHireNoteListReq, options ...MethodOptionFunc) (*GetHireNoteListResp, *Response, error) {
	if r.cli.mock.mockHireGetHireNoteList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireNoteList mock enable")
		return r.cli.mock.mockHireGetHireNoteList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireNoteList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireNoteListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireNoteList mock HireGetHireNoteList method
func (r *Mock) MockHireGetHireNoteList(f func(ctx context.Context, request *GetHireNoteListReq, options ...MethodOptionFunc) (*GetHireNoteListResp, *Response, error)) {
	r.mockHireGetHireNoteList = f
}

// UnMockHireGetHireNoteList un-mock HireGetHireNoteList method
func (r *Mock) UnMockHireGetHireNoteList() {
	r.mockHireGetHireNoteList = nil
}

// GetHireNoteListReq ...
type GetHireNoteListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 每页限制, 每页最大不超过100, 示例值：10
	PageToken  *string `query:"page_token" json:"-"`   // 查询游标, 由上一页结果返回, 第一页不传, 示例值："1"
	TalentID   string  `query:"talent_id" json:"-"`    // 人才ID, 示例值："6916472453069883661"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getHireNoteListResp ...
type getHireNoteListResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetHireNoteListResp `json:"data,omitempty"`
}

// GetHireNoteListResp ...
type GetHireNoteListResp struct {
	Items     []*GetHireNoteListRespItem `json:"items,omitempty"`      // 备注数据列表
	HasMore   bool                       `json:"has_more,omitempty"`   // 是否还有下一页数据
	PageToken string                     `json:"page_token,omitempty"` // 游标, 翻下一页数据时使用
}

// GetHireNoteListRespItem ...
type GetHireNoteListRespItem struct {
	ID            string `json:"id,omitempty"`             // 备注ID
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHireNote 根据备注 ID 更新备注信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/note/patch
func (r *HireService) UpdateHireNote(ctx context.Context, request *UpdateHireNoteReq, options ...MethodOptionFunc) (*UpdateHireNoteResp, *Response, error) {
	if r.cli.mock.mockHireUpdateHireNote != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#UpdateHireNote mock enable")
		return r.cli.mock.mockHireUpdateHireNote(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "UpdateHireNote",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/notes/:note_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateHireNoteResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireUpdateHireNote mock HireUpdateHireNote method
func (r *Mock) MockHireUpdateHireNote(f func(ctx context.Context, request *UpdateHireNoteReq, options ...MethodOptionFunc) (*UpdateHireNoteResp, *Response, error)) {
	r.mockHireUpdateHireNote = f
}

// UnMockHireUpdateHireNote un-mock HireUpdateHireNote method
func (r *Mock) UnMockHireUpdateHireNote() {
	r.mockHireUpdateHireNote = nil
}

// UpdateHireNoteReq ...
type UpdateHireNoteReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NoteID     string  `path:"note_id" json:"-"`       // 备注 ID, 示例值："6960663240925956401"
	Content    string  `json:"content,omitempty"`      // 备注内容, 示例值："111"
}

// updateHireNoteResp ...
type updateHireNoteResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHireNoteResp `json:"data,omitempty"`
}

// UpdateHireNoteResp ...
type UpdateHireNoteResp struct {
	Note *UpdateHireNoteRespNote `json:"note,omitempty"` // 备注数据
}

// UpdateHireNoteRespNote ...
type UpdateHireNoteRespNote struct {
	ID            string `json:"id,omitempty"`             // 备注ID
	TalentID      string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationID string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    int64  `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    int64  `json:"modify_time,omitempty"`    // 更新时间
	CreatorID     string `json:"creator_id,omitempty"`     // 创建人ID
	Content       string `json:"content,omitempty"`        // 内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireOfferByApplication 根据投递 ID 获取 Offer 信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/offer
func (r *HireService) GetHireOfferByApplication(ctx context.Context, request *GetHireOfferByApplicationReq, options ...MethodOptionFunc) (*GetHireOfferByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireOfferByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireOfferByApplication mock enable")
		return r.cli.mock.mockHireGetHireOfferByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireOfferByApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/offer",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireOfferByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireOfferByApplication mock HireGetHireOfferByApplication method
func (r *Mock) MockHireGetHireOfferByApplication(f func(ctx context.Context, request *GetHireOfferByApplicationReq, options ...MethodOptionFunc) (*GetHireOfferByApplicationResp, *Response, error)) {
	r.mockHireGetHireOfferByApplication = f
}

// UnMockHireGetHireOfferByApplication un-mock HireGetHireOfferByApplication method
func (r *Mock) UnMockHireGetHireOfferByApplication() {
	r.mockHireGetHireOfferByApplication = nil
}

// GetHireOfferByApplicationReq ...
type GetHireOfferByApplicationReq struct {
	UserIDType    *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApplicationID string  `path:"application_id" json:"-"` // 投递ID, 示例值："6949805467799537964"
}

// getHireOfferByApplicationResp ...
type getHireOfferByApplicationResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetHireOfferByApplicationResp `json:"data,omitempty"`
}

// GetHireOfferByApplicationResp ...
type GetHireOfferByApplicationResp struct {
	Offer *GetHireOfferByApplicationRespOffer `json:"offer,omitempty"` // Offer数据
}

// GetHireOfferByApplicationRespOffer ...
type GetHireOfferByApplicationRespOffer struct {
	ID            string                                        `json:"id,omitempty"`             // Offer id
	ApplicationID string                                        `json:"application_id,omitempty"` // 投递id
	BasicInfo     *GetHireOfferByApplicationRespOfferBasicInfo  `json:"basic_info,omitempty"`     // 基础信息
	SalaryPlan    *GetHireOfferByApplicationRespOfferSalaryPlan `json:"salary_plan,omitempty"`    // 薪酬计划
	SchemaID      string                                        `json:"schema_id,omitempty"`      // 当前 Offer 使用的 schema
	OfferStatus   int64                                         `json:"offer_status,omitempty"`   // Offer 状态, 可选值有: `0`：所有, `1`：未申请, `2`：审批中, `3`：审批已撤回, `4`：审批通过, `5`：审批不通过, `6`：Offer 已发出, `7`：候选人已接受, `8`：候选人已拒绝, `9`：Offer 已失效
	JobInfo       *GetHireOfferByApplicationRespOfferJobInfo    `json:"job_info,omitempty"`       // 职位信息
}

// GetHireOfferByApplicationRespOfferBasicInfo ...
type GetHireOfferByApplicationRespOfferBasicInfo struct {
	OfferType         int64                                                       `json:"offer_type,omitempty"`          // Offer 类型, 可选值有: `1`：Social, `2`：Campus, `3`：Intern, `4`：InternTransfer
	Remark            string                                                      `json:"remark,omitempty"`              // 备注
	ExpireTime        int64                                                       `json:"expire_time,omitempty"`         // Offer 过期时间
	OwnerUserID       string                                                      `json:"owner_user_id,omitempty"`       // Offer 负责人 ID
	CreatorUserID     string                                                      `json:"creator_user_id,omitempty"`     // Offer 创建人 ID
	EmployeeType      *GetHireOfferByApplicationRespOfferBasicInfoEmployeeType    `json:"employee_type,omitempty"`       // Offer 人员类型
	CreateTime        string                                                      `json:"create_time,omitempty"`         // 创建时间
	LeaderUserID      string                                                      `json:"leader_user_id,omitempty"`      // 直属上级 ID
	OnboardDate       string                                                      `json:"onboard_date,omitempty"`        // 入职日期
	DepartmentID      string                                                      `json:"department_id,omitempty"`       // 入职部门
	ProbationMonth    int64                                                       `json:"probation_month,omitempty"`     // 试用期, 比如试用期6个月
	ContractYear      int64                                                       `json:"contract_year,omitempty"`       // 合同期, 比如3年
	RecruitmentType   *GetHireOfferByApplicationRespOfferBasicInfoRecruitmentType `json:"recruitment_type,omitempty"`    // 雇员类型
	Sequence          *GetHireOfferByApplicationRespOfferBasicInfoSequence        `json:"sequence,omitempty"`            // 序列
	Level             *GetHireOfferByApplicationRespOfferBasicInfoLevel           `json:"level,omitempty"`               // 级别
	OnboardAddress    *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddress  `json:"onboard_address,omitempty"`     // 入职地点
	WorkAddress       *GetHireOfferByApplicationRespOfferBasicInfoWorkAddress     `json:"work_address,omitempty"`        // 工作地点
	CustomizeInfoList []*GetHireOfferByApplicationRespOfferBasicInfoCustomizeInfo `json:"customize_info_list,omitempty"` // 自定义字段信息
}

// GetHireOfferByApplicationRespOfferBasicInfoEmployeeType ...
type GetHireOfferByApplicationRespOfferBasicInfoEmployeeType struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
}

// GetHireOfferByApplicationRespOfferBasicInfoRecruitmentType ...
type GetHireOfferByApplicationRespOfferBasicInfoRecruitmentType struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
}

// GetHireOfferByApplicationRespOfferBasicInfoSequence ...
type GetHireOfferByApplicationRespOfferBasicInfoSequence struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
}

// GetHireOfferByApplicationRespOfferBasicInfoLevel ...
type GetHireOfferByApplicationRespOfferBasicInfoLevel struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
}

// GetHireOfferByApplicationRespOfferBasicInfoOnboardAddress ...
type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddress struct {
	ID       string                                                             `json:"id,omitempty"`       // ID
	ZhName   string                                                             `json:"zh_name,omitempty"`  // 中文名称
	EnName   string                                                             `json:"en_name,omitempty"`  // 英文名称
	District *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressDistrict `json:"district,omitempty"` // 区域信息
	City     *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCity     `json:"city,omitempty"`     // 城市信息
	State    *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressState    `json:"state,omitempty"`    // 省信息
	Country  *GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCountry  `json:"country,omitempty"`  // 国家信息
}

// GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressDistrict ...
type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressDistrict struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型
}

// GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCity ...
type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCity struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

// GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressState ...
type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressState struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

// GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCountry ...
type GetHireOfferByApplicationRespOfferBasicInfoOnboardAddressCountry struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

// GetHireOfferByApplicationRespOfferBasicInfoWorkAddress ...
type GetHireOfferByApplicationRespOfferBasicInfoWorkAddress struct {
	ID       string                                                          `json:"id,omitempty"`       // ID
	ZhName   string                                                          `json:"zh_name,omitempty"`  // 中文名称
	EnName   string                                                          `json:"en_name,omitempty"`  // 英文名称
	District *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressDistrict `json:"district,omitempty"` // 区域信息
	City     *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCity     `json:"city,omitempty"`     // 城市信息
	State    *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressState    `json:"state,omitempty"`    // 省信息
	Country  *GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCountry  `json:"country,omitempty"`  // 国家信息
}

// GetHireOfferByApplicationRespOfferBasicInfoWorkAddressDistrict ...
type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressDistrict struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型
}

// GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCity ...
type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCity struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

// GetHireOfferByApplicationRespOfferBasicInfoWorkAddressState ...
type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressState struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

// GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCountry ...
type GetHireOfferByApplicationRespOfferBasicInfoWorkAddressCountry struct {
	ZhName       string `json:"zh_name,omitempty"`       // 中文名称
	EnName       string `json:"en_name,omitempty"`       // 英文名称
	Code         string `json:"code,omitempty"`          // 编码
	LocationType int64  `json:"location_type,omitempty"` // 地址类型, 可选值有: `1`：COUNTRY, `2`：STATE, `3`：CITY, `4`：DISTRICT, `5`：ADDRESS
}

// GetHireOfferByApplicationRespOfferBasicInfoCustomizeInfo ...
type GetHireOfferByApplicationRespOfferBasicInfoCustomizeInfo struct {
	ObjectID       string `json:"object_id,omitempty"`       // 自定义字段 ID
	CustomizeValue string `json:"customize_value,omitempty"` // 自定义字段 value
}

// GetHireOfferByApplicationRespOfferSalaryPlan ...
type GetHireOfferByApplicationRespOfferSalaryPlan struct {
	Currency                  string                                                       `json:"currency,omitempty"`                    // 币种
	BasicSalary               string                                                       `json:"basic_salary,omitempty"`                // 基本薪资，为JSON 格式，amount 代表基本薪资的金额，peroid 代表基本薪资的周期单位，如："{"amount":"10000","period":2}"
	ProbationSalaryPercentage string                                                       `json:"probation_salary_percentage,omitempty"` // 试用期百分比
	AwardSalaryMultiple       string                                                       `json:"award_salary_multiple,omitempty"`       // 年终奖月数
	OptionShares              string                                                       `json:"option_shares,omitempty"`               // 期权股数
	QuarterlyBonus            string                                                       `json:"quarterly_bonus,omitempty"`             // 季度奖金额
	HalfYearBonus             string                                                       `json:"half_year_bonus,omitempty"`             // 半年奖金额
	TotalAnnualCash           string                                                       `json:"total_annual_cash,omitempty"`           // 年度现金总额(数量，非公式)
	CustomizeInfoList         []*GetHireOfferByApplicationRespOfferSalaryPlanCustomizeInfo `json:"customize_info_list,omitempty"`         // 自定义字段的 value 信息
}

// GetHireOfferByApplicationRespOfferSalaryPlanCustomizeInfo ...
type GetHireOfferByApplicationRespOfferSalaryPlanCustomizeInfo struct {
	ObjectID       string `json:"object_id,omitempty"`       // 自定义字段 ID
	CustomizeValue string `json:"customize_value,omitempty"` // 自定义字段 value
}

// GetHireOfferByApplicationRespOfferJobInfo ...
type GetHireOfferByApplicationRespOfferJobInfo struct {
	JobID   string `json:"job_id,omitempty"`   // Offer 职位 ID
	JobName string `json:"job_name,omitempty"` // Offer 职位名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireOfferSchema 根据 Offer 申请表 ID，获取 Offer 申请表的详细信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/offer_schema/get
//
// Deprecated
func (r *HireService) GetHireOfferSchema(ctx context.Context, request *GetHireOfferSchemaReq, options ...MethodOptionFunc) (*GetHireOfferSchemaResp, *Response, error) {
	if r.cli.mock.mockHireGetHireOfferSchema != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireOfferSchema mock enable")
		return r.cli.mock.mockHireGetHireOfferSchema(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireOfferSchema",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/offer_schemas/:offer_schema_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireOfferSchemaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireOfferSchema mock HireGetHireOfferSchema method
func (r *Mock) MockHireGetHireOfferSchema(f func(ctx context.Context, request *GetHireOfferSchemaReq, options ...MethodOptionFunc) (*GetHireOfferSchemaResp, *Response, error)) {
	r.mockHireGetHireOfferSchema = f
}

// UnMockHireGetHireOfferSchema un-mock HireGetHireOfferSchema method
func (r *Mock) UnMockHireGetHireOfferSchema() {
	r.mockHireGetHireOfferSchema = nil
}

// GetHireOfferSchemaReq ...
type GetHireOfferSchemaReq struct {
	OfferSchemaID string `path:"offer_schema_id" json:"-"` // offer申请表的ID *必需属性, 示例值："1231231231231"
}

// getHireOfferSchemaResp ...
type getHireOfferSchemaResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHireOfferSchemaResp `json:"data,omitempty"`
}

// GetHireOfferSchemaResp ...
type GetHireOfferSchemaResp struct {
	ID         string                          `json:"id,omitempty"`          // offer申请表ID
	Scenario   int64                           `json:"scenario,omitempty"`    // offer申请表使用场景, 可选值有: `1`：Offer审批表
	Version    int64                           `json:"version,omitempty"`     // 申请表版本
	ObjectList []*GetHireOfferSchemaRespObject `json:"object_list,omitempty"` // 字段对象信息
}

// GetHireOfferSchemaRespObject ...
type GetHireOfferSchemaRespObject struct {
	ID           string                                `json:"id,omitempty"`            // 字段ID
	Name         *GetHireOfferSchemaRespObjectName     `json:"name,omitempty"`          // 字段名称
	Type         string                                `json:"type,omitempty"`          // 字段类型, text=单行文本, long_text=多行文本, select=单选, multi_select=多选, date_select=日期, number=数字
	IsCustomized bool                                  `json:"is_customized,omitempty"` // 字段是否为自定义
	OptionList   []*GetHireOfferSchemaRespObjectOption `json:"option_list,omitempty"`   // 单选/多选可选择字段的选项值
}

// GetHireOfferSchemaRespObjectName ...
type GetHireOfferSchemaRespObjectName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文名
	EnUs string `json:"en_us,omitempty"` // 英文名
}

// GetHireOfferSchemaRespObjectOption ...
type GetHireOfferSchemaRespObjectOption struct {
	Name         *GetHireOfferSchemaRespObjectOptionName `json:"name,omitempty"`          // 名字
	Index        int64                                   `json:"index,omitempty"`         // 选项序号
	ActiveStatus int64                                   `json:"active_status,omitempty"` // 选项当前是否启用, 可选值有: `1`：进行中, `2`：已终止
}

// GetHireOfferSchemaRespObjectOptionName ...
type GetHireOfferSchemaRespObjectOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文名
	EnUs string `json:"en_us,omitempty"` // 英文名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireReferralByApplication 根据投递 ID 获取内推信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/referral/get_by_application
func (r *HireService) GetHireReferralByApplication(ctx context.Context, request *GetHireReferralByApplicationReq, options ...MethodOptionFunc) (*GetHireReferralByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireGetHireReferralByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireReferralByApplication mock enable")
		return r.cli.mock.mockHireGetHireReferralByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireReferralByApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/referrals/get_by_application",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireReferralByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireReferralByApplication mock HireGetHireReferralByApplication method
func (r *Mock) MockHireGetHireReferralByApplication(f func(ctx context.Context, request *GetHireReferralByApplicationReq, options ...MethodOptionFunc) (*GetHireReferralByApplicationResp, *Response, error)) {
	r.mockHireGetHireReferralByApplication = f
}

// UnMockHireGetHireReferralByApplication un-mock HireGetHireReferralByApplication method
func (r *Mock) UnMockHireGetHireReferralByApplication() {
	r.mockHireGetHireReferralByApplication = nil
}

// GetHireReferralByApplicationReq ...
type GetHireReferralByApplicationReq struct {
	ApplicationID string  `query:"application_id" json:"-"` // 投递的 ID, 示例值："6134134355464633"
	UserIDType    *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getHireReferralByApplicationResp ...
type getHireReferralByApplicationResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHireReferralByApplicationResp `json:"data,omitempty"`
}

// GetHireReferralByApplicationResp ...
type GetHireReferralByApplicationResp struct {
	Referral *GetHireReferralByApplicationRespReferral `json:"referral,omitempty"` // 内推信息
}

// GetHireReferralByApplicationRespReferral ...
type GetHireReferralByApplicationRespReferral struct {
	ID             string                                                `json:"id,omitempty"`               // 内推的 ID
	ApplicationID  string                                                `json:"application_id,omitempty"`   // 投递 ID
	CreateTime     int64                                                 `json:"create_time,omitempty"`      // 创建时间（ms）
	ReferralUserID string                                                `json:"referral_user_id,omitempty"` // 内推人的 ID
	ReferralUser   *GetHireReferralByApplicationRespReferralReferralUser `json:"referral_user,omitempty"`    // 内推人信息
}

// GetHireReferralByApplicationRespReferralReferralUser ...
type GetHireReferralByApplicationRespReferralReferralUser struct {
	ID   string                                                    `json:"id,omitempty"`   // ID
	Name *GetHireReferralByApplicationRespReferralReferralUserName `json:"name,omitempty"` // 名称
}

// GetHireReferralByApplicationRespReferralReferralUserName ...
type GetHireReferralByApplicationRespReferralReferralUserName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireResumeSource 获取简历来源列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/resume_source/list
func (r *HireService) GetHireResumeSource(ctx context.Context, request *GetHireResumeSourceReq, options ...MethodOptionFunc) (*GetHireResumeSourceResp, *Response, error) {
	if r.cli.mock.mockHireGetHireResumeSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireResumeSource mock enable")
		return r.cli.mock.mockHireGetHireResumeSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireResumeSource",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/resume_sources",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireResumeSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireResumeSource mock HireGetHireResumeSource method
func (r *Mock) MockHireGetHireResumeSource(f func(ctx context.Context, request *GetHireResumeSourceReq, options ...MethodOptionFunc) (*GetHireResumeSourceResp, *Response, error)) {
	r.mockHireGetHireResumeSource = f
}

// UnMockHireGetHireResumeSource un-mock HireGetHireResumeSource method
func (r *Mock) UnMockHireGetHireResumeSource() {
	r.mockHireGetHireResumeSource = nil
}

// GetHireResumeSourceReq ...
type GetHireResumeSourceReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1"
}

// getHireResumeSourceResp ...
type getHireResumeSourceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetHireResumeSourceResp `json:"data,omitempty"`
}

// GetHireResumeSourceResp ...
type GetHireResumeSourceResp struct {
	Items     []*GetHireResumeSourceRespItem `json:"items,omitempty"`      // 数据
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetHireResumeSourceRespItem ...
type GetHireResumeSourceRespItem struct {
	ID               string `json:"id,omitempty"`                 // 来源 ID
	ZhName           string `json:"zh_name,omitempty"`            // 中文名
	EnName           string `json:"en_name,omitempty"`            // 英文名
	ActiveStatus     int64  `json:"active_status,omitempty"`      // 启用状态, 可选值有: `1`：已启用, `2`：已禁用
	ResumeSourceType int64  `json:"resume_source_type,omitempty"` // 来源类型, 可选值有: `10000`：内推, `10001`：猎头, `10002`：内部来源, `10003`：第三方招聘网站, `10004`：社交媒体, `10005`：线下来源, `10006`：其他, `10007`：外部推荐
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHireTalent 根据人才 ID 获取人才信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/talent/get
func (r *HireService) GetHireTalent(ctx context.Context, request *GetHireTalentReq, options ...MethodOptionFunc) (*GetHireTalentResp, *Response, error) {
	if r.cli.mock.mockHireGetHireTalent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#GetHireTalent mock enable")
		return r.cli.mock.mockHireGetHireTalent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "GetHireTalent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/talents/:talent_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getHireTalentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireGetHireTalent mock HireGetHireTalent method
func (r *Mock) MockHireGetHireTalent(f func(ctx context.Context, request *GetHireTalentReq, options ...MethodOptionFunc) (*GetHireTalentResp, *Response, error)) {
	r.mockHireGetHireTalent = f
}

// UnMockHireGetHireTalent un-mock HireGetHireTalent method
func (r *Mock) UnMockHireGetHireTalent() {
	r.mockHireGetHireTalent = nil
}

// GetHireTalentReq ...
type GetHireTalentReq struct {
	TalentID string `path:"talent_id" json:"-"` // 人才ID, 示例值："6891560630172518670"
}

// getHireTalentResp ...
type getHireTalentResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *GetHireTalentResp `json:"data,omitempty"`
}

// GetHireTalentResp ...
type GetHireTalentResp struct {
	Talent *GetHireTalentRespTalent `json:"talent,omitempty"` // 人才信息
}

// GetHireTalentRespTalent ...
type GetHireTalentRespTalent struct {
	ID                        string                                          `json:"id,omitempty"`                          // 人才ID
	IsInAgencyPeriod          bool                                            `json:"is_in_agency_period,omitempty"`         // 是否在猎头保护期, 可选值有: `false`：未在猎头保护期, `true`：在猎头保护期
	BasicInfo                 *GetHireTalentRespTalentBasicInfo               `json:"basic_info,omitempty"`                  // 基础信息
	EducationList             []*GetHireTalentRespTalentEducation             `json:"education_list,omitempty"`              // 教育经历
	CareerList                []*GetHireTalentRespTalentCareer                `json:"career_list,omitempty"`                 // 工作经历
	ProjectList               []*GetHireTalentRespTalentProject               `json:"project_list,omitempty"`                // 项目经历
	WorksList                 []*GetHireTalentRespTalentWorks                 `json:"works_list,omitempty"`                  // 作品
	AwardList                 []*GetHireTalentRespTalentAward                 `json:"award_list,omitempty"`                  // 获奖
	LanguageList              []*GetHireTalentRespTalentLanguage              `json:"language_list,omitempty"`               // 语言能力
	SnsList                   []*GetHireTalentRespTalentSns                   `json:"sns_list,omitempty"`                    // 社交账号
	ResumeSourceList          []*GetHireTalentRespTalentResumeSource          `json:"resume_source_list,omitempty"`          // 简历来源
	InterviewRegistrationList []*GetHireTalentRespTalentInterviewRegistration `json:"interview_registration_list,omitempty"` // 面试登记表
	ResumeAttachmentIDList    []string                                        `json:"resume_attachment_id_list,omitempty"`   // 简历附件id列表（按照简历创建时间降序）
	CustomizedDataList        []*GetHireTalentRespTalentCustomizedData        `json:"customized_data_list,omitempty"`        // 自定义模块
	TopDegree                 int64                                           `json:"top_degree,omitempty"`                  // 最高学历, 可选值有: `1`：小学, `2`：初中, `3`：专职, `4`：高中, `5`：大专, `6`：本科, `7`：硕士, `8`：博士, `9`：其他
}

// GetHireTalentRespTalentBasicInfo ...
type GetHireTalentRespTalentBasicInfo struct {
	Name                 string                                            `json:"name,omitempty"`                  // 名字
	Mobile               string                                            `json:"mobile,omitempty"`                // 手机
	MobileCode           string                                            `json:"mobile_code,omitempty"`           // 手机国家区号
	MobileCountryCode    string                                            `json:"mobile_country_code,omitempty"`   // 手机国家代码
	Email                string                                            `json:"email,omitempty"`                 // 邮箱
	ExperienceYears      int64                                             `json:"experience_years,omitempty"`      // 工作年限
	Age                  int64                                             `json:"age,omitempty"`                   // 年龄
	Nationality          *GetHireTalentRespTalentBasicInfoNationality      `json:"nationality,omitempty"`           // 国籍
	Gender               int64                                             `json:"gender,omitempty"`                // 性别, 可选值有: `1`：男, `2`：女, `3`：其他
	CurrentCity          *GetHireTalentRespTalentBasicInfoCurrentCity      `json:"current_city,omitempty"`          // 所在地点
	HometownCity         *GetHireTalentRespTalentBasicInfoHometownCity     `json:"hometown_city,omitempty"`         // 家乡
	PreferredCityList    []*GetHireTalentRespTalentBasicInfoPreferredCity  `json:"preferred_city_list,omitempty"`   // 意向地点
	IdentificationType   int64                                             `json:"identification_type,omitempty"`   // 证件类型, 可选值有: `1`：中国 - 居民身份证, `2`：护照, `3`：中国 - 港澳居民居住证, `4`：中国 - 台湾居民来往大陆通行证, `5`：其他, `6`：中国 - 港澳居民来往内地通行证, `9`：中国 - 台湾居民居住证
	IdentificationNumber string                                            `json:"identification_number,omitempty"` // 证件号
	Birthday             int64                                             `json:"birthday,omitempty"`              // 生日
	CreatorID            string                                            `json:"creator_id,omitempty"`            // 创建人
	MaritalStatus        int64                                             `json:"marital_status,omitempty"`        // 婚姻状况, 可选值有: `1`：已婚, `2`：未婚
	CurrentHomeAddress   string                                            `json:"current_home_address,omitempty"`  // 家庭住址
	CustomizedDataList   []*GetHireTalentRespTalentBasicInfoCustomizedData `json:"customized_data_list,omitempty"`  // 自定义字段
	ModifyTime           string                                            `json:"modify_time,omitempty"`           // 修改时间
}

// GetHireTalentRespTalentBasicInfoNationality ...
type GetHireTalentRespTalentBasicInfoNationality struct {
	NationalityCode string `json:"nationality_code,omitempty"` // 国家编码
	ZhName          string `json:"zh_name,omitempty"`          // 中文名
	EnName          string `json:"en_name,omitempty"`          // 英文名
}

// GetHireTalentRespTalentBasicInfoCurrentCity ...
type GetHireTalentRespTalentBasicInfoCurrentCity struct {
	CityCode string `json:"city_code,omitempty"` // 城市码
	ZhName   string `json:"zh_name,omitempty"`   // 中文名
	EnName   string `json:"en_name,omitempty"`   // 英文名
}

// GetHireTalentRespTalentBasicInfoHometownCity ...
type GetHireTalentRespTalentBasicInfoHometownCity struct {
	CityCode string `json:"city_code,omitempty"` // 城市码
	ZhName   string `json:"zh_name,omitempty"`   // 中文名
	EnName   string `json:"en_name,omitempty"`   // 英文名
}

// GetHireTalentRespTalentBasicInfoPreferredCity ...
type GetHireTalentRespTalentBasicInfoPreferredCity struct {
	CityCode string `json:"city_code,omitempty"` // 城市码
	ZhName   string `json:"zh_name,omitempty"`   // 中文名
	EnName   string `json:"en_name,omitempty"`   // 英文名
}

// GetHireTalentRespTalentBasicInfoCustomizedData ...
type GetHireTalentRespTalentBasicInfoCustomizedData struct {
	ObjectID   string                                               `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentBasicInfoCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                                `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentBasicInfoCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentBasicInfoCustomizedDataName ...
type GetHireTalentRespTalentBasicInfoCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentBasicInfoCustomizedDataValue ...
type GetHireTalentRespTalentBasicInfoCustomizedDataValue struct {
	Content    string                                                        `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentBasicInfoCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentBasicInfoCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentBasicInfoCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                        `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                        `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentBasicInfoCustomizedDataValueOption ...
type GetHireTalentRespTalentBasicInfoCustomizedDataValueOption struct {
	Key  string                                                         `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentBasicInfoCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentBasicInfoCustomizedDataValueOptionName ...
type GetHireTalentRespTalentBasicInfoCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentBasicInfoCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentBasicInfoCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentEducation ...
type GetHireTalentRespTalentEducation struct {
	ID                 string                                            `json:"id,omitempty"`                   // ID
	Degree             int64                                             `json:"degree,omitempty"`               // 学位, 可选值有: `1`：小学, `2`：初中, `3`：专职, `4`：高中, `5`：大专, `6`：本科, `7`：硕士, `8`：博士, `9`：其他
	School             string                                            `json:"school,omitempty"`               // 学校
	FieldOfStudy       string                                            `json:"field_of_study,omitempty"`       // 专业
	StartTime          string                                            `json:"start_time,omitempty"`           // 开始时间
	EndTime            string                                            `json:"end_time,omitempty"`             // 结束时间
	EducationType      int64                                             `json:"education_type,omitempty"`       // 学历类型, 可选值有: `1`：海外及港台, `2`：统招全日制, `3`：非全日制, `4`：自考, `5`：其他
	AcademicRanking    int64                                             `json:"academic_ranking,omitempty"`     // 成绩排名, 可选值有: `5`：前 5 %, `10`：前 10 %, `20`：前 20 %, `30`：前 30 %, `50`：前 50 %, `-1`：其他
	TagList            []int64                                           `json:"tag_list,omitempty"`             // 教育经历标签, 可选值有: `1`：985学校, `2`：211学校, `3`：一本, `4`：国外院校QS200
	CustomizedDataList []*GetHireTalentRespTalentEducationCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
}

// GetHireTalentRespTalentEducationCustomizedData ...
type GetHireTalentRespTalentEducationCustomizedData struct {
	ObjectID   string                                               `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentEducationCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                                `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentEducationCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentEducationCustomizedDataName ...
type GetHireTalentRespTalentEducationCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentEducationCustomizedDataValue ...
type GetHireTalentRespTalentEducationCustomizedDataValue struct {
	Content    string                                                        `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentEducationCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentEducationCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentEducationCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                        `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                        `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentEducationCustomizedDataValueOption ...
type GetHireTalentRespTalentEducationCustomizedDataValueOption struct {
	Key  string                                                         `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentEducationCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentEducationCustomizedDataValueOptionName ...
type GetHireTalentRespTalentEducationCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentEducationCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentEducationCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentCareer ...
type GetHireTalentRespTalentCareer struct {
	ID                 string                                         `json:"id,omitempty"`                   // ID
	Company            string                                         `json:"company,omitempty"`              // 公司名称
	Title              string                                         `json:"title,omitempty"`                // 职位名称
	Desc               string                                         `json:"desc,omitempty"`                 // 描述
	StartTime          string                                         `json:"start_time,omitempty"`           // 开始时间
	EndTime            string                                         `json:"end_time,omitempty"`             // 结束时间
	CareerType         int64                                          `json:"career_type,omitempty"`          // 经历类型, 可选值有: `1`：实习经历, `2`：工作经历
	TagList            []int64                                        `json:"tag_list,omitempty"`             // 工作经历标签, 可选值有: `5`：百度 阿里 腾讯, `6`：头条, 美团, 滴滴, `7`：其它大厂
	CustomizedDataList []*GetHireTalentRespTalentCareerCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
}

// GetHireTalentRespTalentCareerCustomizedData ...
type GetHireTalentRespTalentCareerCustomizedData struct {
	ObjectID   string                                            `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentCareerCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                             `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentCareerCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentCareerCustomizedDataName ...
type GetHireTalentRespTalentCareerCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentCareerCustomizedDataValue ...
type GetHireTalentRespTalentCareerCustomizedDataValue struct {
	Content    string                                                     `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentCareerCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentCareerCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentCareerCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                     `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                     `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentCareerCustomizedDataValueOption ...
type GetHireTalentRespTalentCareerCustomizedDataValueOption struct {
	Key  string                                                      `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentCareerCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentCareerCustomizedDataValueOptionName ...
type GetHireTalentRespTalentCareerCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentCareerCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentCareerCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentProject ...
type GetHireTalentRespTalentProject struct {
	ID                 string                                          `json:"id,omitempty"`                   // ID
	Name               string                                          `json:"name,omitempty"`                 // 项目名称
	Role               string                                          `json:"role,omitempty"`                 // 项目角色
	Link               string                                          `json:"link,omitempty"`                 // 项目链接
	Desc               string                                          `json:"desc,omitempty"`                 // 描述
	StartTime          string                                          `json:"start_time,omitempty"`           // 开始时间
	EndTime            string                                          `json:"end_time,omitempty"`             // 结束时间
	CustomizedDataList []*GetHireTalentRespTalentProjectCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
}

// GetHireTalentRespTalentProjectCustomizedData ...
type GetHireTalentRespTalentProjectCustomizedData struct {
	ObjectID   string                                             `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentProjectCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                              `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentProjectCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentProjectCustomizedDataName ...
type GetHireTalentRespTalentProjectCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentProjectCustomizedDataValue ...
type GetHireTalentRespTalentProjectCustomizedDataValue struct {
	Content    string                                                      `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentProjectCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentProjectCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentProjectCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                      `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                      `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentProjectCustomizedDataValueOption ...
type GetHireTalentRespTalentProjectCustomizedDataValueOption struct {
	Key  string                                                       `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentProjectCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentProjectCustomizedDataValueOptionName ...
type GetHireTalentRespTalentProjectCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentProjectCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentProjectCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentWorks ...
type GetHireTalentRespTalentWorks struct {
	ID                 string                                        `json:"id,omitempty"`                   // ID
	Link               string                                        `json:"link,omitempty"`                 // 作品链接
	Desc               string                                        `json:"desc,omitempty"`                 // 描述
	Name               string                                        `json:"name,omitempty"`                 // 作品附件名称，若需获取作品附件预览信息可调用「获取附件预览信息」接口
	CustomizedDataList []*GetHireTalentRespTalentWorksCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
}

// GetHireTalentRespTalentWorksCustomizedData ...
type GetHireTalentRespTalentWorksCustomizedData struct {
	ObjectID   string                                           `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentWorksCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                            `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentWorksCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentWorksCustomizedDataName ...
type GetHireTalentRespTalentWorksCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentWorksCustomizedDataValue ...
type GetHireTalentRespTalentWorksCustomizedDataValue struct {
	Content    string                                                    `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentWorksCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentWorksCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentWorksCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                    `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                    `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentWorksCustomizedDataValueOption ...
type GetHireTalentRespTalentWorksCustomizedDataValueOption struct {
	Key  string                                                     `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentWorksCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentWorksCustomizedDataValueOptionName ...
type GetHireTalentRespTalentWorksCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentWorksCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentWorksCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentAward ...
type GetHireTalentRespTalentAward struct {
	ID                 string                                        `json:"id,omitempty"`                   // ID
	Title              string                                        `json:"title,omitempty"`                // 获奖名称
	AwardTime          string                                        `json:"award_time,omitempty"`           // 获奖时间
	Desc               string                                        `json:"desc,omitempty"`                 // 描述
	CustomizedDataList []*GetHireTalentRespTalentAwardCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
}

// GetHireTalentRespTalentAwardCustomizedData ...
type GetHireTalentRespTalentAwardCustomizedData struct {
	ObjectID   string                                           `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentAwardCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                            `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentAwardCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentAwardCustomizedDataName ...
type GetHireTalentRespTalentAwardCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentAwardCustomizedDataValue ...
type GetHireTalentRespTalentAwardCustomizedDataValue struct {
	Content    string                                                    `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentAwardCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentAwardCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentAwardCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                    `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                    `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentAwardCustomizedDataValueOption ...
type GetHireTalentRespTalentAwardCustomizedDataValueOption struct {
	Key  string                                                     `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentAwardCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentAwardCustomizedDataValueOptionName ...
type GetHireTalentRespTalentAwardCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentAwardCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentAwardCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentLanguage ...
type GetHireTalentRespTalentLanguage struct {
	ID                 string                                           `json:"id,omitempty"`                   // ID
	Language           int64                                            `json:"language,omitempty"`             // 语言, 可选值有: `1`：英语, `2`：法语, `3`：日语, `4`：韩语, `5`：德语, `6`：俄语, `7`：西班牙语, `8`：葡萄牙语, `9`：阿拉伯语, `10`：印地语, `11`：印度斯坦语, `12`：孟加拉语, `13`：豪萨语, `14`：旁遮普语, `15`：波斯语, `16`：斯瓦西里语, `17`：泰卢固语, `18`：土耳其语, `19`：意大利语, `20`：爪哇语, `21`：泰米尔语, `22`：马拉地语, `23`：越南语, `24`：普通话, `25`：粤语
	Proficiency        int64                                            `json:"proficiency,omitempty"`          // 精通程度, 可选值有: `1`：入门, `2`：日常会话, `3`：商务会话, `4`：无障碍沟通, `5`：母语
	CustomizedDataList []*GetHireTalentRespTalentLanguageCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
}

// GetHireTalentRespTalentLanguageCustomizedData ...
type GetHireTalentRespTalentLanguageCustomizedData struct {
	ObjectID   string                                              `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentLanguageCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                               `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentLanguageCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentLanguageCustomizedDataName ...
type GetHireTalentRespTalentLanguageCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentLanguageCustomizedDataValue ...
type GetHireTalentRespTalentLanguageCustomizedDataValue struct {
	Content    string                                                       `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentLanguageCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentLanguageCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentLanguageCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                       `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                       `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentLanguageCustomizedDataValueOption ...
type GetHireTalentRespTalentLanguageCustomizedDataValueOption struct {
	Key  string                                                        `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentLanguageCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentLanguageCustomizedDataValueOptionName ...
type GetHireTalentRespTalentLanguageCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentLanguageCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentLanguageCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentSns ...
type GetHireTalentRespTalentSns struct {
	ID                 string                                      `json:"id,omitempty"`                   // ID
	SnsType            int64                                       `json:"sns_type,omitempty"`             // SNS名称, 可选值有: `1`：领英, `2`：脉脉, `3`：微信, `4`：微博, `5`：Github, `6`：知乎, `7`：脸书, `8`：推特, `9`：Whatsapp, `10`：个人网站, `11`：QQ
	Link               string                                      `json:"link,omitempty"`                 // URL/ID
	CustomizedDataList []*GetHireTalentRespTalentSnsCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
}

// GetHireTalentRespTalentSnsCustomizedData ...
type GetHireTalentRespTalentSnsCustomizedData struct {
	ObjectID   string                                         `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentSnsCustomizedDataName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                          `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentSnsCustomizedDataValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentSnsCustomizedDataName ...
type GetHireTalentRespTalentSnsCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentSnsCustomizedDataValue ...
type GetHireTalentRespTalentSnsCustomizedDataValue struct {
	Content    string                                                  `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentSnsCustomizedDataValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentSnsCustomizedDataValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentSnsCustomizedDataValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                  `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                  `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentSnsCustomizedDataValueOption ...
type GetHireTalentRespTalentSnsCustomizedDataValueOption struct {
	Key  string                                                   `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentSnsCustomizedDataValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentSnsCustomizedDataValueOptionName ...
type GetHireTalentRespTalentSnsCustomizedDataValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentSnsCustomizedDataValueTimeRange ...
type GetHireTalentRespTalentSnsCustomizedDataValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// GetHireTalentRespTalentResumeSource ...
type GetHireTalentRespTalentResumeSource struct {
	ID     string `json:"id,omitempty"`      // ID
	ZhName string `json:"zh_name,omitempty"` // 中文名
	EnName string `json:"en_name,omitempty"` // 英文名
}

// GetHireTalentRespTalentInterviewRegistration ...
type GetHireTalentRespTalentInterviewRegistration struct {
	ID               string `json:"id,omitempty"`                // ID
	RegistrationTime int64  `json:"registration_time,omitempty"` // 创建时间
}

// GetHireTalentRespTalentCustomizedData ...
type GetHireTalentRespTalentCustomizedData struct {
	ObjectID   string                                           `json:"object_id,omitempty"`   // 模块 ID
	Name       *GetHireTalentRespTalentCustomizedDataName       `json:"name,omitempty"`        // 模块名称
	ObjectType int64                                            `json:"object_type,omitempty"` // 类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Children   []*GetHireTalentRespTalentCustomizedDataChildren `json:"children,omitempty"`    // 模块下的字段
}

// GetHireTalentRespTalentCustomizedDataName ...
type GetHireTalentRespTalentCustomizedDataName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentCustomizedDataChildren ...
type GetHireTalentRespTalentCustomizedDataChildren struct {
	ObjectID   string                                              `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *GetHireTalentRespTalentCustomizedDataChildrenName  `json:"name,omitempty"`        // 字段名称
	ObjectType int64                                               `json:"object_type,omitempty"` // 字段类型, 可选值有: `1`：单行文本, `2`：多行文本, `3`：单选, `4`：多选, `5`：日期, `6`：月份选择, `7`：年份选择, `8`：时间段, `9`：数字, `10`：默认字段, `11`：模块
	Value      *GetHireTalentRespTalentCustomizedDataChildrenValue `json:"value,omitempty"`       // 自定义字段值
}

// GetHireTalentRespTalentCustomizedDataChildrenName ...
type GetHireTalentRespTalentCustomizedDataChildrenName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentCustomizedDataChildrenValue ...
type GetHireTalentRespTalentCustomizedDataChildrenValue struct {
	Content    string                                                       `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *GetHireTalentRespTalentCustomizedDataChildrenValueOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*GetHireTalentRespTalentCustomizedDataChildrenValueOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *GetHireTalentRespTalentCustomizedDataChildrenValueTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       string                                                       `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number     string                                                       `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

// GetHireTalentRespTalentCustomizedDataChildrenValueOption ...
type GetHireTalentRespTalentCustomizedDataChildrenValueOption struct {
	Key  string                                                        `json:"key,omitempty"`  // 选项 ID
	Name *GetHireTalentRespTalentCustomizedDataChildrenValueOptionName `json:"name,omitempty"` // 选项名称
}

// GetHireTalentRespTalentCustomizedDataChildrenValueOptionName ...
type GetHireTalentRespTalentCustomizedDataChildrenValueOptionName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 中文
	EnUs string `json:"en_us,omitempty"` // 英文
}

// GetHireTalentRespTalentCustomizedDataChildrenValueTimeRange ...
type GetHireTalentRespTalentCustomizedDataChildrenValueTimeRange struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间
	EndTime   string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MakeHireTransferOnboardByApplication 根据投递 ID 操作候选人入职并创建员工，投递须处于「待入职」阶段
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/transfer_onboard
func (r *HireService) MakeHireTransferOnboardByApplication(ctx context.Context, request *MakeHireTransferOnboardByApplicationReq, options ...MethodOptionFunc) (*MakeHireTransferOnboardByApplicationResp, *Response, error) {
	if r.cli.mock.mockHireMakeHireTransferOnboardByApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#MakeHireTransferOnboardByApplication mock enable")
		return r.cli.mock.mockHireMakeHireTransferOnboardByApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "MakeHireTransferOnboardByApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications/:application_id/transfer_onboard",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(makeHireTransferOnboardByApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireMakeHireTransferOnboardByApplication mock HireMakeHireTransferOnboardByApplication method
func (r *Mock) MockHireMakeHireTransferOnboardByApplication(f func(ctx context.Context, request *MakeHireTransferOnboardByApplicationReq, options ...MethodOptionFunc) (*MakeHireTransferOnboardByApplicationResp, *Response, error)) {
	r.mockHireMakeHireTransferOnboardByApplication = f
}

// UnMockHireMakeHireTransferOnboardByApplication un-mock HireMakeHireTransferOnboardByApplication method
func (r *Mock) UnMockHireMakeHireTransferOnboardByApplication() {
	r.mockHireMakeHireTransferOnboardByApplication = nil
}

// MakeHireTransferOnboardByApplicationReq ...
type MakeHireTransferOnboardByApplicationReq struct {
	UserIDType             *IDType       `query:"user_id_type" json:"-"`             // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApplicationID          string        `path:"application_id" json:"-"`            // 投递ID, 示例值："7073372582620416300"
	ActualOnboardTime      *int64        `json:"actual_onboard_time,omitempty"`      // 实际入职时间, 示例值：1616428800000
	ExpectedConversionTime *int64        `json:"expected_conversion_time,omitempty"` // 预期转正时间, 示例值：1616428800000
	JobRequirementID       *string       `json:"job_requirement_id,omitempty"`       // 招聘需求 ID, 示例值："6960663240925956402"
	OperatorID             *string       `json:"operator_id,omitempty"`              // 操作人 UserID, 示例值："ou-xxx"
	OnboardCityCode        *string       `json:"onboard_city_code,omitempty"`        // 候选人办公地点 ID ，枚举可通过接口「获取地址列表」获取，将用于候选人内推奖规则判断, 示例值："CT_2"
	Department             *string       `json:"department,omitempty"`               // 候选人入职部门 ID ，枚举可通过接口「获取部门信息列表」获取，将用于候选人内推奖规则判断, 示例值："6966123381141866028"
	Leader                 *string       `json:"leader,omitempty"`                   // 候选人直属上级 UserID ，将用于候选人内推奖规则判断, 示例值："ou-xxx"
	Sequence               *string       `json:"sequence,omitempty"`                 // 候选人序列 ID ，枚举可通过接口「获取职务分类列表」获取，将用于候选人内推奖规则判断, 示例值："7006234385490345986"
	Level                  *string       `json:"level,omitempty"`                    // 候选人职级 ID ，枚举可通过接口「获取职级列表」获取，将用于候选人内推奖规则判断, 示例值："6937934036379650311"
	EmployeeType           *EmployeeType `json:"employee_type,omitempty"`            // 候选人入职人员类型 ID，可通过接口人力资源管理平台「获取员工类型列表」获取，将用于候选人内推奖规则判断, 示例值："1"
}

// makeHireTransferOnboardByApplicationResp ...
type makeHireTransferOnboardByApplicationResp struct {
	Code int64                                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                    `json:"msg,omitempty"`  // 错误描述
	Data *MakeHireTransferOnboardByApplicationResp `json:"data,omitempty"`
}

// MakeHireTransferOnboardByApplicationResp ...
type MakeHireTransferOnboardByApplicationResp struct {
	Employee *MakeHireTransferOnboardByApplicationRespEmployee `json:"employee,omitempty"` // employee
}

// MakeHireTransferOnboardByApplicationRespEmployee ...
type MakeHireTransferOnboardByApplicationRespEmployee struct {
	ID                     string       `json:"id,omitempty"`                       // 员工ID
	ApplicationID          string       `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          int64        `json:"onboard_status,omitempty"`           // 入职状态, 可选值有: `1`：已入职, `2`：已离职
	ConversionStatus       int64        `json:"conversion_status,omitempty"`        // 转正状态, 可选值有: `1`：未转正, `2`：已转正
	OnboardTime            int64        `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime int64        `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   int64        `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          int64        `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          string       `json:"overboard_note,omitempty"`           // 离职原因
	OnboardCityCode        string       `json:"onboard_city_code,omitempty"`        // 办公地点
	Department             string       `json:"department,omitempty"`               // 入职部门
	Leader                 string       `json:"leader,omitempty"`                   // 直属上级
	Sequence               string       `json:"sequence,omitempty"`                 // 序列
	Level                  string       `json:"level,omitempty"`                    // 职级
	EmployeeType           EmployeeType `json:"employee_type,omitempty"`            // 员工类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CropFaceVerifyImage
//
// 无源人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。
// 无源人脸比对流程，开发者后台通过调用此接口对基准图片做规范校验及处理。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/face/facial-image-cropping
func (r *HumanAuthService) CropFaceVerifyImage(ctx context.Context, request *CropFaceVerifyImageReq, options ...MethodOptionFunc) (*CropFaceVerifyImageResp, *Response, error) {
	if r.cli.mock.mockHumanAuthCropFaceVerifyImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#CropFaceVerifyImage mock enable")
		return r.cli.mock.mockHumanAuthCropFaceVerifyImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "HumanAuth",
		API:                   "CropFaceVerifyImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/face_verify/v1/crop_face_image",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(cropFaceVerifyImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHumanAuthCropFaceVerifyImage mock HumanAuthCropFaceVerifyImage method
func (r *Mock) MockHumanAuthCropFaceVerifyImage(f func(ctx context.Context, request *CropFaceVerifyImageReq, options ...MethodOptionFunc) (*CropFaceVerifyImageResp, *Response, error)) {
	r.mockHumanAuthCropFaceVerifyImage = f
}

// UnMockHumanAuthCropFaceVerifyImage un-mock HumanAuthCropFaceVerifyImage method
func (r *Mock) UnMockHumanAuthCropFaceVerifyImage() {
	r.mockHumanAuthCropFaceVerifyImage = nil
}

// CropFaceVerifyImageReq ...
type CropFaceVerifyImageReq struct {
	RawImage io.Reader `json:"raw_image,omitempty"` // 带有头像的人脸照片文件名称
}

// cropFaceVerifyImageResp ...
type cropFaceVerifyImageResp struct {
	Code int64                    `json:"code,omitempty"` // 返回码，非0为失败
	Msg  string                   `json:"msg,omitempty"`  // 返回信息，返回码的描述
	Data *CropFaceVerifyImageResp `json:"data,omitempty"` // 业务数据
}

// CropFaceVerifyImageResp ...
type CropFaceVerifyImageResp struct {
	FaceImage string `json:"face_image,omitempty"` // BASE64(裁剪后的人脸基准图片)，code为0时返回
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetFaceVerifyAuthResult
//
// 无源人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。
// 无源人脸比对流程，开发者后台通过调用此接口请求飞书后台，对本次活体比对结果做校验。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/face/query-recognition-result
func (r *HumanAuthService) GetFaceVerifyAuthResult(ctx context.Context, request *GetFaceVerifyAuthResultReq, options ...MethodOptionFunc) (*GetFaceVerifyAuthResultResp, *Response, error) {
	if r.cli.mock.mockHumanAuthGetFaceVerifyAuthResult != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#GetFaceVerifyAuthResult mock enable")
		return r.cli.mock.mockHumanAuthGetFaceVerifyAuthResult(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "HumanAuth",
		API:                   "GetFaceVerifyAuthResult",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/face_verify/v1/query_auth_result",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getFaceVerifyAuthResultResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHumanAuthGetFaceVerifyAuthResult mock HumanAuthGetFaceVerifyAuthResult method
func (r *Mock) MockHumanAuthGetFaceVerifyAuthResult(f func(ctx context.Context, request *GetFaceVerifyAuthResultReq, options ...MethodOptionFunc) (*GetFaceVerifyAuthResultResp, *Response, error)) {
	r.mockHumanAuthGetFaceVerifyAuthResult = f
}

// UnMockHumanAuthGetFaceVerifyAuthResult un-mock HumanAuthGetFaceVerifyAuthResult method
func (r *Mock) UnMockHumanAuthGetFaceVerifyAuthResult() {
	r.mockHumanAuthGetFaceVerifyAuthResult = nil
}

// GetFaceVerifyAuthResultReq ...
type GetFaceVerifyAuthResultReq struct {
	ReqOrderNo string  `query:"req_order_no" json:"-"` // 人脸识别单次唯一标识，由`tt.startFaceVerify`接口返回
	OpenID     *string `query:"open_id" json:"-"`      // 用户应用标识, 与employee_id二选其一
	EmployeeID *string `query:"employee_id" json:"-"`  // 用户租户标识, 与open_id二选其一
}

// getFaceVerifyAuthResultResp ...
type getFaceVerifyAuthResultResp struct {
	Code int64                        `json:"code,omitempty"` // 返回码，非0为失败
	Msg  string                       `json:"msg,omitempty"`  // 返回信息，返回码的描述
	Data *GetFaceVerifyAuthResultResp `json:"data,omitempty"` // 业务数据
}

// GetFaceVerifyAuthResultResp ...
type GetFaceVerifyAuthResultResp struct {
	AuthState     int64 `json:"auth_state,omitempty"`     // 认证结果, 0: 认证中, 1: 认证成功, -1: 认证失败
	AuthTimpstamp int64 `json:"auth_timpstamp,omitempty"` // 认证时间，unix 时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadFaceVerifyImage
//
// 无源人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。
// 无源人脸比对流程，开发者后台通过调用此接口将基准图片上传到飞书后台，做检测时的对比使用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/face/upload-facial-reference-image
func (r *HumanAuthService) UploadFaceVerifyImage(ctx context.Context, request *UploadFaceVerifyImageReq, options ...MethodOptionFunc) (*UploadFaceVerifyImageResp, *Response, error) {
	if r.cli.mock.mockHumanAuthUploadFaceVerifyImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#UploadFaceVerifyImage mock enable")
		return r.cli.mock.mockHumanAuthUploadFaceVerifyImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "HumanAuth",
		API:                   "UploadFaceVerifyImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/face_verify/v1/upload_face_image",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadFaceVerifyImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHumanAuthUploadFaceVerifyImage mock HumanAuthUploadFaceVerifyImage method
func (r *Mock) MockHumanAuthUploadFaceVerifyImage(f func(ctx context.Context, request *UploadFaceVerifyImageReq, options ...MethodOptionFunc) (*UploadFaceVerifyImageResp, *Response, error)) {
	r.mockHumanAuthUploadFaceVerifyImage = f
}

// UnMockHumanAuthUploadFaceVerifyImage un-mock HumanAuthUploadFaceVerifyImage method
func (r *Mock) UnMockHumanAuthUploadFaceVerifyImage() {
	r.mockHumanAuthUploadFaceVerifyImage = nil
}

// UploadFaceVerifyImageReq ...
type UploadFaceVerifyImageReq struct {
	OpenID     *string   `query:"open_id" json:"-"`     // 用户应用标识, 与employee_id二选其一
	EmployeeID *string   `query:"employee_id" json:"-"` // 用户租户标识, 与open_id二选其一
	Image      io.Reader `json:"image,omitempty"`       // 带有头像的人脸照片
}

// uploadFaceVerifyImageResp ...
type uploadFaceVerifyImageResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非0为失败
	Msg  string                     `json:"msg,omitempty"`  // 返回信息，返回码的描述
	Data *UploadFaceVerifyImageResp `json:"data,omitempty"` // 业务数据
}

// UploadFaceVerifyImageResp ...
type UploadFaceVerifyImageResp struct {
	FaceUid string `json:"face_uid,omitempty"` // 人脸图片用户Uid，需返回给应用小程序，作为小程序调起人脸识别接口的uid参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateIdentity 该接口用于录入实名认证的身份信息，在唤起有源活体认证前，需要使用该接口进行实名认证。
//
// 实名认证接口会有计费管理，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。
// 仅通过计费申请的应用，才能在[开发者后台](https://open.feishu.cn/app)查找并申请该接口的权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/identity/create
func (r *HumanAuthService) CreateIdentity(ctx context.Context, request *CreateIdentityReq, options ...MethodOptionFunc) (*CreateIdentityResp, *Response, error) {
	if r.cli.mock.mockHumanAuthCreateIdentity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#CreateIdentity mock enable")
		return r.cli.mock.mockHumanAuthCreateIdentity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "HumanAuth",
		API:                   "CreateIdentity",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/human_authentication/v1/identities",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createIdentityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHumanAuthCreateIdentity mock HumanAuthCreateIdentity method
func (r *Mock) MockHumanAuthCreateIdentity(f func(ctx context.Context, request *CreateIdentityReq, options ...MethodOptionFunc) (*CreateIdentityResp, *Response, error)) {
	r.mockHumanAuthCreateIdentity = f
}

// UnMockHumanAuthCreateIdentity un-mock HumanAuthCreateIdentity method
func (r *Mock) UnMockHumanAuthCreateIdentity() {
	r.mockHumanAuthCreateIdentity = nil
}

// CreateIdentityReq ...
type CreateIdentityReq struct {
	UserID       string  `query:"user_id" json:"-"`       // 用户的唯一标识（使用的ID类型见下一参数描述，不同ID类型的区别和获取，参考文档：[如何获得 User ID、Open ID 和 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)）, 示例值: "ou_2eb5483cb377daa5054bc6f86e2089a5"
	UserIDType   *IDType `query:"user_id_type" json:"-"`  // 用户ID类型, 示例值: "open_id", 可选值有: `open_id`：用户的open id, `union_id`：用户的union id, `user_id`：用户的user id, 默认值: `open_id`, 当值为 `user_id`，字段权限要求: 获取用户 user ID
	IdentityName string  `json:"identity_name,omitempty"` // 姓名, 示例值: "张三"
	IdentityCode string  `json:"identity_code,omitempty"` // 身份证号, 示例值: "4xxxxxxxx"
	Mobile       *string `json:"mobile,omitempty"`        // 手机号, 示例值: "13xxxxxxx"
}

// createIdentityResp ...
type createIdentityResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *CreateIdentityResp `json:"data,omitempty"`
}

// CreateIdentityResp ...
type CreateIdentityResp struct {
	VerifyUid string `json:"verify_uid,omitempty"` // 用户绑定实名身份的uid
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetJssdkTicket
//
// 通过在你的网页中引入**飞书网页组件**，可在你的网页中直接使用飞书的功能。
// - 网页组件只适用于自建应用，暂不支持商店应用。
// - 网页组件适用于普通web网页，不建议在小程序webview中调用此组件
// ## 准备工作
// - 在开发者后台[创建一个企业自建应用](https://open.feishu.cn/document/home/introduction-to-custom-app-development/self-built-application-development-process)。
// - 引入组件库。在网页 html 中引入如下代码：
// ```html
// <script src="https://lf1-cdn-tos.bytegoofy.com/goofy/locl/lark/external_js_sdk/h5-js-sdk-1.1.2.js"></script>
// ```
// 若要使用成员卡片组件，SDK需要在`<body>`加载后引入。
// ## 鉴权流程
// ### 1. 获取 access_token
// 不同的 token 代表了组件使用者的身份。user_access_token代表以用户身份鉴权，app_access_token代表以应用身份授权。
// - 成员名片组件仅支持以用户身份(user_access_token)鉴权
// - 云文档组件可以同时支持以用户身份(user_access_token)和应用身份(app_access_token)授权。但是以应用身份授权云文档时，访问量受 80 次/分钟限制，且组件不支持 “编辑”、“评论”、“点赞” 等功能
// :::html
// <md-td>
// 开发者需要通过以下两种方式之一获取 token，再通过接口生成 ticket。
// - 方法一：获取用户身份。通过 [第三方网站免登](https://open.feishu.cn/document/ukTMukTMukTM/uETOwYjLxkDM24SM5AjN)获得 user_access_token
// - 方法二：获取应用身份。通过[服务端API](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/auth-v3/auth/app_access_token_internal)获得 app_access_token
// </md-td>
// :::
// ### 2. 获取 jsapi_ticket
// 为了降低泄漏风险，这一步应当在你的服务端进行。
//
// doc: https://open.feishu.cn/document/uYjL24iN/uUDO3YjL1gzN24SN4cjN
func (r *JssdkService) GetJssdkTicket(ctx context.Context, request *GetJssdkTicketReq, options ...MethodOptionFunc) (*GetJssdkTicketResp, *Response, error) {
	if r.cli.mock.mockJssdkGetJssdkTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Jssdk#GetJssdkTicket mock enable")
		return r.cli.mock.mockJssdkGetJssdkTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Jssdk",
		API:                 "GetJssdkTicket",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/jssdk/ticket/get",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedAppAccessToken:  true,
		NeedUserAccessToken: true,
	}
	resp := new(getJssdkTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockJssdkGetJssdkTicket mock JssdkGetJssdkTicket method
func (r *Mock) MockJssdkGetJssdkTicket(f func(ctx context.Context, request *GetJssdkTicketReq, options ...MethodOptionFunc) (*GetJssdkTicketResp, *Response, error)) {
	r.mockJssdkGetJssdkTicket = f
}

// UnMockJssdkGetJssdkTicket un-mock JssdkGetJssdkTicket method
func (r *Mock) UnMockJssdkGetJssdkTicket() {
	r.mockJssdkGetJssdkTicket = nil
}

// GetJssdkTicketReq ...
type GetJssdkTicketReq struct {
}

// getJssdkTicketResp ...
type getJssdkTicketResp struct {
	Code int64               `json:"code,omitempty"` // `返回码，非 0 表示失败`
	Msg  string              `json:"msg,omitempty"`  // `对返回码的文本描述`
	Data *GetJssdkTicketResp `json:"data,omitempty"` // `返回内容`
}

// GetJssdkTicketResp ...
type GetJssdkTicketResp struct {
	ExpireIn int64  `json:"expire_in,omitempty"` // `jsapi_ticket 的有效时间`
	Ticket   string `json:"ticket,omitempty"`    // `jsapi_ticket`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailGroupAlias 创建邮件组别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/create
func (r *MailService) CreateMailGroupAlias(ctx context.Context, request *CreateMailGroupAliasReq, options ...MethodOptionFunc) (*CreateMailGroupAliasResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroupAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroupAlias mock enable")
		return r.cli.mock.mockMailCreateMailGroupAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroupAlias",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroupAlias mock MailCreateMailGroupAlias method
func (r *Mock) MockMailCreateMailGroupAlias(f func(ctx context.Context, request *CreateMailGroupAliasReq, options ...MethodOptionFunc) (*CreateMailGroupAliasResp, *Response, error)) {
	r.mockMailCreateMailGroupAlias = f
}

// UnMockMailCreateMailGroupAlias un-mock MailCreateMailGroupAlias method
func (r *Mock) UnMockMailCreateMailGroupAlias() {
	r.mockMailCreateMailGroupAlias = nil
}

// CreateMailGroupAliasReq ...
type CreateMailGroupAliasReq struct {
	MailGroupID string  `path:"mailgroup_id" json:"-"` // 邮件组id或邮件组邮箱地址, 示例值："xxxxxx 或者 xxx@xx.xxx"
	EmailAlias  *string `json:"email_alias,omitempty"` // 邮箱别名, 示例值："xxx@xx.xxx"
}

// createMailGroupAliasResp ...
type createMailGroupAliasResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupAliasResp `json:"data,omitempty"`
}

// CreateMailGroupAliasResp ...
type CreateMailGroupAliasResp struct {
	MailGroupAlias *CreateMailGroupAliasRespMailGroupAlias `json:"mailgroup_alias,omitempty"` // 邮件组别名
}

// CreateMailGroupAliasRespMailGroupAlias ...
type CreateMailGroupAliasRespMailGroupAlias struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroupAlias 删除邮件组别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/delete
func (r *MailService) DeleteMailGroupAlias(ctx context.Context, request *DeleteMailGroupAliasReq, options ...MethodOptionFunc) (*DeleteMailGroupAliasResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroupAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupAlias mock enable")
		return r.cli.mock.mockMailDeleteMailGroupAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroupAlias",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases/:alias_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroupAlias mock MailDeleteMailGroupAlias method
func (r *Mock) MockMailDeleteMailGroupAlias(f func(ctx context.Context, request *DeleteMailGroupAliasReq, options ...MethodOptionFunc) (*DeleteMailGroupAliasResp, *Response, error)) {
	r.mockMailDeleteMailGroupAlias = f
}

// UnMockMailDeleteMailGroupAlias un-mock MailDeleteMailGroupAlias method
func (r *Mock) UnMockMailDeleteMailGroupAlias() {
	r.mockMailDeleteMailGroupAlias = nil
}

// DeleteMailGroupAliasReq ...
type DeleteMailGroupAliasReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组id或邮件组邮箱地址, 示例值："xxxxxx 或 test_group@xx.xxx"
	AliasID     string `path:"alias_id" json:"-"`     // 邮件组别名邮箱地址, 示例值："xxx@xx.xxx"
}

// deleteMailGroupAliasResp ...
type deleteMailGroupAliasResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupAliasResp `json:"data,omitempty"`
}

// DeleteMailGroupAliasResp ...
type DeleteMailGroupAliasResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupAliasList 获取邮件组所有别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-alias/list
func (r *MailService) GetMailGroupAliasList(ctx context.Context, request *GetMailGroupAliasListReq, options ...MethodOptionFunc) (*GetMailGroupAliasListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupAliasList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupAliasList mock enable")
		return r.cli.mock.mockMailGetMailGroupAliasList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupAliasList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupAliasListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupAliasList mock MailGetMailGroupAliasList method
func (r *Mock) MockMailGetMailGroupAliasList(f func(ctx context.Context, request *GetMailGroupAliasListReq, options ...MethodOptionFunc) (*GetMailGroupAliasListResp, *Response, error)) {
	r.mockMailGetMailGroupAliasList = f
}

// UnMockMailGetMailGroupAliasList un-mock MailGetMailGroupAliasList method
func (r *Mock) UnMockMailGetMailGroupAliasList() {
	r.mockMailGetMailGroupAliasList = nil
}

// GetMailGroupAliasListReq ...
type GetMailGroupAliasListReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组id或邮件组邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// getMailGroupAliasListResp ...
type getMailGroupAliasListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupAliasListResp `json:"data,omitempty"`
}

// GetMailGroupAliasListResp ...
type GetMailGroupAliasListResp struct {
	Items []*GetMailGroupAliasListRespItem `json:"items,omitempty"` // 邮件组别名
}

// GetMailGroupAliasListRespItem ...
type GetMailGroupAliasListRespItem struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailGroup 创建一个邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/create
func (r *MailService) CreateMailGroup(ctx context.Context, request *CreateMailGroupReq, options ...MethodOptionFunc) (*CreateMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroup mock enable")
		return r.cli.mock.mockMailCreateMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroup mock MailCreateMailGroup method
func (r *Mock) MockMailCreateMailGroup(f func(ctx context.Context, request *CreateMailGroupReq, options ...MethodOptionFunc) (*CreateMailGroupResp, *Response, error)) {
	r.mockMailCreateMailGroup = f
}

// UnMockMailCreateMailGroup un-mock MailCreateMailGroup method
func (r *Mock) UnMockMailCreateMailGroup() {
	r.mockMailCreateMailGroup = nil
}

// CreateMailGroupReq ...
type CreateMailGroupReq struct {
	Email          *string `json:"email,omitempty"`             // 邮件组地址, 示例值："test_mail_group@xxx.xx"
	Name           *string `json:"name,omitempty"`              // 邮件组名称, 示例值："test mail group"
	Description    *string `json:"description,omitempty"`       // 邮件组描述, 示例值："mail group for testing"
	WhoCanSendMail *string `json:"who_can_send_mail,omitempty"` // 谁可发送邮件到此邮件组, 示例值："ALL_INTERNAL_USERS", 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// createMailGroupResp ...
type createMailGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupResp `json:"data,omitempty"`
}

// CreateMailGroupResp ...
type CreateMailGroupResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroup 删除一个邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/delete
func (r *MailService) DeleteMailGroup(ctx context.Context, request *DeleteMailGroupReq, options ...MethodOptionFunc) (*DeleteMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroup mock enable")
		return r.cli.mock.mockMailDeleteMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroup",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroup mock MailDeleteMailGroup method
func (r *Mock) MockMailDeleteMailGroup(f func(ctx context.Context, request *DeleteMailGroupReq, options ...MethodOptionFunc) (*DeleteMailGroupResp, *Response, error)) {
	r.mockMailDeleteMailGroup = f
}

// UnMockMailDeleteMailGroup un-mock MailDeleteMailGroup method
func (r *Mock) UnMockMailDeleteMailGroup() {
	r.mockMailDeleteMailGroup = nil
}

// DeleteMailGroupReq ...
type DeleteMailGroupReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// deleteMailGroupResp ...
type deleteMailGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupResp `json:"data,omitempty"`
}

// DeleteMailGroupResp ...
type DeleteMailGroupResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroup 获取特定邮件组信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/get
func (r *MailService) GetMailGroup(ctx context.Context, request *GetMailGroupReq, options ...MethodOptionFunc) (*GetMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroup mock enable")
		return r.cli.mock.mockMailGetMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroup mock MailGetMailGroup method
func (r *Mock) MockMailGetMailGroup(f func(ctx context.Context, request *GetMailGroupReq, options ...MethodOptionFunc) (*GetMailGroupResp, *Response, error)) {
	r.mockMailGetMailGroup = f
}

// UnMockMailGetMailGroup un-mock MailGetMailGroup method
func (r *Mock) UnMockMailGetMailGroup() {
	r.mockMailGetMailGroup = nil
}

// GetMailGroupReq ...
type GetMailGroupReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// getMailGroupResp ...
type getMailGroupResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupResp `json:"data,omitempty"`
}

// GetMailGroupResp ...
type GetMailGroupResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupList 分页批量获取邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/list
func (r *MailService) GetMailGroupList(ctx context.Context, request *GetMailGroupListReq, options ...MethodOptionFunc) (*GetMailGroupListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupList mock enable")
		return r.cli.mock.mockMailGetMailGroupList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupList mock MailGetMailGroupList method
func (r *Mock) MockMailGetMailGroupList(f func(ctx context.Context, request *GetMailGroupListReq, options ...MethodOptionFunc) (*GetMailGroupListResp, *Response, error)) {
	r.mockMailGetMailGroupList = f
}

// UnMockMailGetMailGroupList un-mock MailGetMailGroupList method
func (r *Mock) UnMockMailGetMailGroupList() {
	r.mockMailGetMailGroupList = nil
}

// GetMailGroupListReq ...
type GetMailGroupListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`200`
}

// getMailGroupListResp ...
type getMailGroupListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupListResp `json:"data,omitempty"`
}

// GetMailGroupListResp ...
type GetMailGroupListResp struct {
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetMailGroupListRespItem `json:"items,omitempty"`      // 邮件组列表
}

// GetMailGroupListRespItem ...
type GetMailGroupListRespItem struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailGroupMember 向邮件组添加单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/create
func (r *MailService) CreateMailGroupMember(ctx context.Context, request *CreateMailGroupMemberReq, options ...MethodOptionFunc) (*CreateMailGroupMemberResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroupMember mock enable")
		return r.cli.mock.mockMailCreateMailGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroupMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroupMember mock MailCreateMailGroupMember method
func (r *Mock) MockMailCreateMailGroupMember(f func(ctx context.Context, request *CreateMailGroupMemberReq, options ...MethodOptionFunc) (*CreateMailGroupMemberResp, *Response, error)) {
	r.mockMailCreateMailGroupMember = f
}

// UnMockMailCreateMailGroupMember un-mock MailCreateMailGroupMember method
func (r *Mock) UnMockMailCreateMailGroupMember() {
	r.mockMailCreateMailGroupMember = nil
}

// CreateMailGroupMemberReq ...
type CreateMailGroupMemberReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	Email            *string           `json:"email,omitempty"`              // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）, 示例值："test_memeber@xxx.xx"
	UserID           *string           `json:"user_id,omitempty"`            // 租户内用户的唯一标识（当成员类型是USER时有值）, 示例值："xxxxxxxxxx"
	DepartmentID     *string           `json:"department_id,omitempty"`      // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）, 示例值："xxxxxxxxxx"
	Type             *MailUserType     `json:"type,omitempty"`               // 成员类型, 示例值："USER", 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// createMailGroupMemberResp ...
type createMailGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupMemberResp `json:"data,omitempty"`
}

// CreateMailGroupMemberResp ...
type CreateMailGroupMemberResp struct {
	MemberID     string       `json:"member_id,omitempty"`     // 邮件组内成员唯一标识
	Email        string       `json:"email,omitempty"`         // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）
	UserID       string       `json:"user_id,omitempty"`       // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID string       `json:"department_id,omitempty"` // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type         MailUserType `json:"type,omitempty"`          // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroupMember 删除邮件组单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/delete
func (r *MailService) DeleteMailGroupMember(ctx context.Context, request *DeleteMailGroupMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupMemberResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupMember mock enable")
		return r.cli.mock.mockMailDeleteMailGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroupMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroupMember mock MailDeleteMailGroupMember method
func (r *Mock) MockMailDeleteMailGroupMember(f func(ctx context.Context, request *DeleteMailGroupMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupMemberResp, *Response, error)) {
	r.mockMailDeleteMailGroupMember = f
}

// UnMockMailDeleteMailGroupMember un-mock MailDeleteMailGroupMember method
func (r *Mock) UnMockMailDeleteMailGroupMember() {
	r.mockMailDeleteMailGroupMember = nil
}

// DeleteMailGroupMemberReq ...
type DeleteMailGroupMemberReq struct {
	MailGroupID string `path:"mailgroup_id" json:"-"` // The unique ID or email address of a mail group, 示例值："xxxxxxxxxxxxxxx or test_mail_group@xxx.xx"
	MemberID    string `path:"member_id" json:"-"`    // The unique ID of a member in this mail group, 示例值："xxxxxxxxxxxxxxx"
}

// deleteMailGroupMemberResp ...
type deleteMailGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupMemberResp `json:"data,omitempty"`
}

// DeleteMailGroupMemberResp ...
type DeleteMailGroupMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupMember 获取邮件组单个成员信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/get
func (r *MailService) GetMailGroupMember(ctx context.Context, request *GetMailGroupMemberReq, options ...MethodOptionFunc) (*GetMailGroupMemberResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupMember mock enable")
		return r.cli.mock.mockMailGetMailGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupMember mock MailGetMailGroupMember method
func (r *Mock) MockMailGetMailGroupMember(f func(ctx context.Context, request *GetMailGroupMemberReq, options ...MethodOptionFunc) (*GetMailGroupMemberResp, *Response, error)) {
	r.mockMailGetMailGroupMember = f
}

// UnMockMailGetMailGroupMember un-mock MailGetMailGroupMember method
func (r *Mock) UnMockMailGetMailGroupMember() {
	r.mockMailGetMailGroupMember = nil
}

// GetMailGroupMemberReq ...
type GetMailGroupMemberReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	MemberID         string            `path:"member_id" json:"-"`           // 邮件组内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// getMailGroupMemberResp ...
type getMailGroupMemberResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupMemberResp `json:"data,omitempty"`
}

// GetMailGroupMemberResp ...
type GetMailGroupMemberResp struct {
	MemberID     string       `json:"member_id,omitempty"`     // 邮件组内成员唯一标识
	Email        string       `json:"email,omitempty"`         // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）
	UserID       string       `json:"user_id,omitempty"`       // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID string       `json:"department_id,omitempty"` // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type         MailUserType `json:"type,omitempty"`          // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupMemberList 分页批量获取邮件组成员列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-member/list
func (r *MailService) GetMailGroupMemberList(ctx context.Context, request *GetMailGroupMemberListReq, options ...MethodOptionFunc) (*GetMailGroupMemberListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupMemberList mock enable")
		return r.cli.mock.mockMailGetMailGroupMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupMemberList mock MailGetMailGroupMemberList method
func (r *Mock) MockMailGetMailGroupMemberList(f func(ctx context.Context, request *GetMailGroupMemberListReq, options ...MethodOptionFunc) (*GetMailGroupMemberListResp, *Response, error)) {
	r.mockMailGetMailGroupMemberList = f
}

// UnMockMailGetMailGroupMemberList un-mock MailGetMailGroupMemberList method
func (r *Mock) UnMockMailGetMailGroupMemberList() {
	r.mockMailGetMailGroupMemberList = nil
}

// GetMailGroupMemberListReq ...
type GetMailGroupMemberListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`200`
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // The unique ID or email address of a mail group, 示例值："xxxxxxxxxxxxxxx or test_mail_group@xxx.xx"
}

// getMailGroupMemberListResp ...
type getMailGroupMemberListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupMemberListResp `json:"data,omitempty"`
}

// GetMailGroupMemberListResp ...
type GetMailGroupMemberListResp struct {
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                            `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetMailGroupMemberListRespItem `json:"items,omitempty"`      // 邮件组成员列表
}

// GetMailGroupMemberListRespItem ...
type GetMailGroupMemberListRespItem struct {
	MemberID     string       `json:"member_id,omitempty"`     // 邮件组内成员唯一标识
	Email        string       `json:"email,omitempty"`         // 成员邮箱地址（当成员类型是EXTERNAL_USER/MAIL_GROUP/OTHER_MEMBER时有值）
	UserID       string       `json:"user_id,omitempty"`       // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID string       `json:"department_id,omitempty"` // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type         MailUserType `json:"type,omitempty"`          // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门, `COMPANY`：全员, `EXTERNAL_USER`：外部用户, `MAIL_GROUP`：邮件组, `OTHER_MEMBER`：内部成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMailGroupPatch 更新邮件组部分字段，没有填写的字段不会被更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/patch
func (r *MailService) UpdateMailGroupPatch(ctx context.Context, request *UpdateMailGroupPatchReq, options ...MethodOptionFunc) (*UpdateMailGroupPatchResp, *Response, error) {
	if r.cli.mock.mockMailUpdateMailGroupPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdateMailGroupPatch mock enable")
		return r.cli.mock.mockMailUpdateMailGroupPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdateMailGroupPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMailGroupPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdateMailGroupPatch mock MailUpdateMailGroupPatch method
func (r *Mock) MockMailUpdateMailGroupPatch(f func(ctx context.Context, request *UpdateMailGroupPatchReq, options ...MethodOptionFunc) (*UpdateMailGroupPatchResp, *Response, error)) {
	r.mockMailUpdateMailGroupPatch = f
}

// UnMockMailUpdateMailGroupPatch un-mock MailUpdateMailGroupPatch method
func (r *Mock) UnMockMailUpdateMailGroupPatch() {
	r.mockMailUpdateMailGroupPatch = nil
}

// UpdateMailGroupPatchReq ...
type UpdateMailGroupPatchReq struct {
	MailGroupID    string  `path:"mailgroup_id" json:"-"`       // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	Name           *string `json:"name,omitempty"`              // 邮件组名称, 示例值："test mail group"
	Description    *string `json:"description,omitempty"`       // 邮件组描述, 示例值："mail group for testing"
	WhoCanSendMail *string `json:"who_can_send_mail,omitempty"` // 谁可发送邮件到此邮件组, 示例值："ALL_INTERNAL_USERS", 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// updateMailGroupPatchResp ...
type updateMailGroupPatchResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateMailGroupPatchResp `json:"data,omitempty"`
}

// UpdateMailGroupPatchResp ...
type UpdateMailGroupPatchResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailGroupPermissionMember 向邮件组添加单个自定义权限成员，添加后该成员可发送邮件到该邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/create
func (r *MailService) CreateMailGroupPermissionMember(ctx context.Context, request *CreateMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*CreateMailGroupPermissionMemberResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailGroupPermissionMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailGroupPermissionMember mock enable")
		return r.cli.mock.mockMailCreateMailGroupPermissionMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailGroupPermissionMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailGroupPermissionMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailGroupPermissionMember mock MailCreateMailGroupPermissionMember method
func (r *Mock) MockMailCreateMailGroupPermissionMember(f func(ctx context.Context, request *CreateMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*CreateMailGroupPermissionMemberResp, *Response, error)) {
	r.mockMailCreateMailGroupPermissionMember = f
}

// UnMockMailCreateMailGroupPermissionMember un-mock MailCreateMailGroupPermissionMember method
func (r *Mock) UnMockMailCreateMailGroupPermissionMember() {
	r.mockMailCreateMailGroupPermissionMember = nil
}

// CreateMailGroupPermissionMemberReq ...
type CreateMailGroupPermissionMemberReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："xxx", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	UserID           *string           `json:"user_id,omitempty"`            // 租户内用户的唯一标识（当成员类型是USER时有值）, 示例值："xxxxxxxxxx"
	DepartmentID     *string           `json:"department_id,omitempty"`      // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）, 示例值："xxxxxxxxxx"
	Type             *MailUserType     `json:"type,omitempty"`               // 成员类型, 示例值："USER", 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// createMailGroupPermissionMemberResp ...
type createMailGroupPermissionMemberResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailGroupPermissionMemberResp `json:"data,omitempty"`
}

// CreateMailGroupPermissionMemberResp ...
type CreateMailGroupPermissionMemberResp struct {
	PermissionMemberID string       `json:"permission_member_id,omitempty"` // 权限组内成员唯一标识
	UserID             string       `json:"user_id,omitempty"`              // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID       string       `json:"department_id,omitempty"`        // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type               MailUserType `json:"type,omitempty"`                 // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailGroupPermissionMember 从自定义成员中删除单个成员，删除后该成员无法发送邮件到该邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/delete
func (r *MailService) DeleteMailGroupPermissionMember(ctx context.Context, request *DeleteMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupPermissionMemberResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroupPermissionMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupPermissionMember mock enable")
		return r.cli.mock.mockMailDeleteMailGroupPermissionMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailGroupPermissionMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupPermissionMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailGroupPermissionMember mock MailDeleteMailGroupPermissionMember method
func (r *Mock) MockMailDeleteMailGroupPermissionMember(f func(ctx context.Context, request *DeleteMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupPermissionMemberResp, *Response, error)) {
	r.mockMailDeleteMailGroupPermissionMember = f
}

// UnMockMailDeleteMailGroupPermissionMember un-mock MailDeleteMailGroupPermissionMember method
func (r *Mock) UnMockMailDeleteMailGroupPermissionMember() {
	r.mockMailDeleteMailGroupPermissionMember = nil
}

// DeleteMailGroupPermissionMemberReq ...
type DeleteMailGroupPermissionMemberReq struct {
	MailGroupID        string `path:"mailgroup_id" json:"-"`         // The unique ID or email address of a mail group, 示例值："xxxxxxxxxxxxxxx or test_mail_group@xxx.xx"
	PermissionMemberID string `path:"permission_member_id" json:"-"` // The unique ID of a member in this permission group, 示例值："xxxxxxxxxxxxxxx"
}

// deleteMailGroupPermissionMemberResp ...
type deleteMailGroupPermissionMemberResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupPermissionMemberResp `json:"data,omitempty"`
}

// DeleteMailGroupPermissionMemberResp ...
type DeleteMailGroupPermissionMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupPermissionMember 获取邮件组单个权限成员信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/get
func (r *MailService) GetMailGroupPermissionMember(ctx context.Context, request *GetMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupPermissionMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupPermissionMember mock enable")
		return r.cli.mock.mockMailGetMailGroupPermissionMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupPermissionMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupPermissionMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupPermissionMember mock MailGetMailGroupPermissionMember method
func (r *Mock) MockMailGetMailGroupPermissionMember(f func(ctx context.Context, request *GetMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberResp, *Response, error)) {
	r.mockMailGetMailGroupPermissionMember = f
}

// UnMockMailGetMailGroupPermissionMember un-mock MailGetMailGroupPermissionMember method
func (r *Mock) UnMockMailGetMailGroupPermissionMember() {
	r.mockMailGetMailGroupPermissionMember = nil
}

// GetMailGroupPermissionMemberReq ...
type GetMailGroupPermissionMemberReq struct {
	UserIDType         *IDType           `query:"user_id_type" json:"-"`        // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType `query:"department_id_type" json:"-"`  // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	MailGroupID        string            `path:"mailgroup_id" json:"-"`         // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	PermissionMemberID string            `path:"permission_member_id" json:"-"` // 权限组内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// getMailGroupPermissionMemberResp ...
type getMailGroupPermissionMemberResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupPermissionMemberResp `json:"data,omitempty"`
}

// GetMailGroupPermissionMemberResp ...
type GetMailGroupPermissionMemberResp struct {
	PermissionMemberID string       `json:"permission_member_id,omitempty"` // 权限组内成员唯一标识
	UserID             string       `json:"user_id,omitempty"`              // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID       string       `json:"department_id,omitempty"`        // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type               MailUserType `json:"type,omitempty"`                 // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailGroupPermissionMemberList 分页批量获取邮件组权限成员列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/list
func (r *MailService) GetMailGroupPermissionMemberList(ctx context.Context, request *GetMailGroupPermissionMemberListReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailGroupPermissionMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailGroupPermissionMemberList mock enable")
		return r.cli.mock.mockMailGetMailGroupPermissionMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailGroupPermissionMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailGroupPermissionMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailGroupPermissionMemberList mock MailGetMailGroupPermissionMemberList method
func (r *Mock) MockMailGetMailGroupPermissionMemberList(f func(ctx context.Context, request *GetMailGroupPermissionMemberListReq, options ...MethodOptionFunc) (*GetMailGroupPermissionMemberListResp, *Response, error)) {
	r.mockMailGetMailGroupPermissionMemberList = f
}

// UnMockMailGetMailGroupPermissionMemberList un-mock MailGetMailGroupPermissionMemberList method
func (r *Mock) UnMockMailGetMailGroupPermissionMemberList() {
	r.mockMailGetMailGroupPermissionMemberList = nil
}

// GetMailGroupPermissionMemberListReq ...
type GetMailGroupPermissionMemberListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`200`
	MailGroupID      string            `path:"mailgroup_id" json:"-"`        // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
}

// getMailGroupPermissionMemberListResp ...
type getMailGroupPermissionMemberListResp struct {
	Code int64                                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                `json:"msg,omitempty"`  // 错误描述
	Data *GetMailGroupPermissionMemberListResp `json:"data,omitempty"`
}

// GetMailGroupPermissionMemberListResp ...
type GetMailGroupPermissionMemberListResp struct {
	HasMore   bool                                        `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetMailGroupPermissionMemberListRespItem `json:"items,omitempty"`      // 邮件组权限成员列表
}

// GetMailGroupPermissionMemberListRespItem ...
type GetMailGroupPermissionMemberListRespItem struct {
	PermissionMemberID string       `json:"permission_member_id,omitempty"` // 权限组内成员唯一标识
	UserID             string       `json:"user_id,omitempty"`              // 租户内用户的唯一标识（当成员类型是USER时有值）
	DepartmentID       string       `json:"department_id,omitempty"`        // 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
	Type               MailUserType `json:"type,omitempty"`                 // 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMailGroup 更新邮件组所有信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup/update
func (r *MailService) UpdateMailGroup(ctx context.Context, request *UpdateMailGroupReq, options ...MethodOptionFunc) (*UpdateMailGroupResp, *Response, error) {
	if r.cli.mock.mockMailUpdateMailGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdateMailGroup mock enable")
		return r.cli.mock.mockMailUpdateMailGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdateMailGroup",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/mailgroups/:mailgroup_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMailGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdateMailGroup mock MailUpdateMailGroup method
func (r *Mock) MockMailUpdateMailGroup(f func(ctx context.Context, request *UpdateMailGroupReq, options ...MethodOptionFunc) (*UpdateMailGroupResp, *Response, error)) {
	r.mockMailUpdateMailGroup = f
}

// UnMockMailUpdateMailGroup un-mock MailUpdateMailGroup method
func (r *Mock) UnMockMailUpdateMailGroup() {
	r.mockMailUpdateMailGroup = nil
}

// UpdateMailGroupReq ...
type UpdateMailGroupReq struct {
	MailGroupID    string  `path:"mailgroup_id" json:"-"`       // 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"
	Name           *string `json:"name,omitempty"`              // 邮件组名称, 示例值："test mail group"
	Description    *string `json:"description,omitempty"`       // 邮件组描述, 示例值："mail group for testing"
	WhoCanSendMail *string `json:"who_can_send_mail,omitempty"` // 谁可发送邮件到此邮件组, 示例值："ALL_INTERNAL_USERS", 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// updateMailGroupResp ...
type updateMailGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UpdateMailGroupResp `json:"data,omitempty"`
}

// UpdateMailGroupResp ...
type UpdateMailGroupResp struct {
	MailGroupID             string `json:"mailgroup_id,omitempty"`               // 邮件组ID
	Email                   string `json:"email,omitempty"`                      // 邮件组地址
	Name                    string `json:"name,omitempty"`                       // 邮件组名称
	Description             string `json:"description,omitempty"`                // 邮件组描述
	DirectMembersCount      string `json:"direct_members_count,omitempty"`       // 邮件组成员数量
	IncludeExternalMember   bool   `json:"include_external_member,omitempty"`    // 是否包含外部成员
	IncludeAllCompanyMember bool   `json:"include_all_company_member,omitempty"` // 是否是全员邮件组
	WhoCanSendMail          string `json:"who_can_send_mail,omitempty"`          // 谁可发送邮件到此邮件组, 可选值有: `ANYONE`：任何人, `ALL_INTERNAL_USERS`：仅组织内部成员, `ALL_GROUP_MEMBERS`：仅邮件组成员, `CUSTOM_MEMBERS`：自定义成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailPublicMailboxAlias 创建公共邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/create
func (r *MailService) CreateMailPublicMailboxAlias(ctx context.Context, request *CreateMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailPublicMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailPublicMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailPublicMailboxAlias mock enable")
		return r.cli.mock.mockMailCreateMailPublicMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailPublicMailboxAlias",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailPublicMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailPublicMailboxAlias mock MailCreateMailPublicMailboxAlias method
func (r *Mock) MockMailCreateMailPublicMailboxAlias(f func(ctx context.Context, request *CreateMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailPublicMailboxAliasResp, *Response, error)) {
	r.mockMailCreateMailPublicMailboxAlias = f
}

// UnMockMailCreateMailPublicMailboxAlias un-mock MailCreateMailPublicMailboxAlias method
func (r *Mock) UnMockMailCreateMailPublicMailboxAlias() {
	r.mockMailCreateMailPublicMailboxAlias = nil
}

// CreateMailPublicMailboxAliasReq ...
type CreateMailPublicMailboxAliasReq struct {
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱id或公共邮箱地址, 示例值："xxxxxx 或 xxx@xx.xxx"
	EmailAlias      *string `json:"email_alias,omitempty"`      // 邮箱别名, 示例值："xxx@xx.xxx"
}

// createMailPublicMailboxAliasResp ...
type createMailPublicMailboxAliasResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailPublicMailboxAliasResp `json:"data,omitempty"`
}

// CreateMailPublicMailboxAliasResp ...
type CreateMailPublicMailboxAliasResp struct {
	PublicMailboxAlias *CreateMailPublicMailboxAliasRespPublicMailboxAlias `json:"public_mailbox_alias,omitempty"` // 公共邮箱别名
}

// CreateMailPublicMailboxAliasRespPublicMailboxAlias ...
type CreateMailPublicMailboxAliasRespPublicMailboxAlias struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailPublicMailboxAlias 删除公共邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/delete
func (r *MailService) DeleteMailPublicMailboxAlias(ctx context.Context, request *DeleteMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailPublicMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailPublicMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailPublicMailboxAlias mock enable")
		return r.cli.mock.mockMailDeleteMailPublicMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailPublicMailboxAlias",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases/:alias_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailPublicMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailPublicMailboxAlias mock MailDeleteMailPublicMailboxAlias method
func (r *Mock) MockMailDeleteMailPublicMailboxAlias(f func(ctx context.Context, request *DeleteMailPublicMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailPublicMailboxAliasResp, *Response, error)) {
	r.mockMailDeleteMailPublicMailboxAlias = f
}

// UnMockMailDeleteMailPublicMailboxAlias un-mock MailDeleteMailPublicMailboxAlias method
func (r *Mock) UnMockMailDeleteMailPublicMailboxAlias() {
	r.mockMailDeleteMailPublicMailboxAlias = nil
}

// DeleteMailPublicMailboxAliasReq ...
type DeleteMailPublicMailboxAliasReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱id或公共邮箱地址, 示例值："xxxxxx 或 xxx@xx.xxx"
	AliasID         string `path:"alias_id" json:"-"`          // 公共邮箱别名, 示例值："xxx@xx.xxx"
}

// deleteMailPublicMailboxAliasResp ...
type deleteMailPublicMailboxAliasResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailPublicMailboxAliasResp `json:"data,omitempty"`
}

// DeleteMailPublicMailboxAliasResp ...
type DeleteMailPublicMailboxAliasResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailPublicMailboxAliasList 获取所有公共邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-alias/list
func (r *MailService) GetMailPublicMailboxAliasList(ctx context.Context, request *GetMailPublicMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailPublicMailboxAliasListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailPublicMailboxAliasList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailPublicMailboxAliasList mock enable")
		return r.cli.mock.mockMailGetMailPublicMailboxAliasList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailPublicMailboxAliasList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailPublicMailboxAliasListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailPublicMailboxAliasList mock MailGetMailPublicMailboxAliasList method
func (r *Mock) MockMailGetMailPublicMailboxAliasList(f func(ctx context.Context, request *GetMailPublicMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailPublicMailboxAliasListResp, *Response, error)) {
	r.mockMailGetMailPublicMailboxAliasList = f
}

// UnMockMailGetMailPublicMailboxAliasList un-mock MailGetMailPublicMailboxAliasList method
func (r *Mock) UnMockMailGetMailPublicMailboxAliasList() {
	r.mockMailGetMailPublicMailboxAliasList = nil
}

// GetMailPublicMailboxAliasListReq ...
type GetMailPublicMailboxAliasListReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱id或公共邮箱邮件地址, 示例值："xxxxxx 或 xxx@xx.xxx"
}

// getMailPublicMailboxAliasListResp ...
type getMailPublicMailboxAliasListResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *GetMailPublicMailboxAliasListResp `json:"data,omitempty"`
}

// GetMailPublicMailboxAliasListResp ...
type GetMailPublicMailboxAliasListResp struct {
	Items []*GetMailPublicMailboxAliasListRespItem `json:"items,omitempty"` // 公共邮箱别名
}

// GetMailPublicMailboxAliasListRespItem ...
type GetMailPublicMailboxAliasListRespItem struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreatePublicMailbox 创建一个公共邮箱
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/create
func (r *MailService) CreatePublicMailbox(ctx context.Context, request *CreatePublicMailboxReq, options ...MethodOptionFunc) (*CreatePublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailCreatePublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreatePublicMailbox mock enable")
		return r.cli.mock.mockMailCreatePublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreatePublicMailbox",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createPublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreatePublicMailbox mock MailCreatePublicMailbox method
func (r *Mock) MockMailCreatePublicMailbox(f func(ctx context.Context, request *CreatePublicMailboxReq, options ...MethodOptionFunc) (*CreatePublicMailboxResp, *Response, error)) {
	r.mockMailCreatePublicMailbox = f
}

// UnMockMailCreatePublicMailbox un-mock MailCreatePublicMailbox method
func (r *Mock) UnMockMailCreatePublicMailbox() {
	r.mockMailCreatePublicMailbox = nil
}

// CreatePublicMailboxReq ...
type CreatePublicMailboxReq struct {
	Email *string `json:"email,omitempty"` // 公共邮箱地址, 示例值："test_public_mailbox@xxx.xx"
	Name  *string `json:"name,omitempty"`  // 公共邮箱名称, 示例值："test public mailbox"
}

// createPublicMailboxResp ...
type createPublicMailboxResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *CreatePublicMailboxResp `json:"data,omitempty"`
}

// CreatePublicMailboxResp ...
type CreatePublicMailboxResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeletePublicMailbox 该接口会永久删除公共邮箱地址。可用于释放邮箱回收站的公共邮箱地址，一旦删除，该邮箱地址将无法恢复。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/delete
func (r *MailService) DeletePublicMailbox(ctx context.Context, request *DeletePublicMailboxReq, options ...MethodOptionFunc) (*DeletePublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailDeletePublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeletePublicMailbox mock enable")
		return r.cli.mock.mockMailDeletePublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeletePublicMailbox",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deletePublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeletePublicMailbox mock MailDeletePublicMailbox method
func (r *Mock) MockMailDeletePublicMailbox(f func(ctx context.Context, request *DeletePublicMailboxReq, options ...MethodOptionFunc) (*DeletePublicMailboxResp, *Response, error)) {
	r.mockMailDeletePublicMailbox = f
}

// UnMockMailDeletePublicMailbox un-mock MailDeletePublicMailbox method
func (r *Mock) UnMockMailDeletePublicMailbox() {
	r.mockMailDeletePublicMailbox = nil
}

// DeletePublicMailboxReq ...
type DeletePublicMailboxReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 要释放的公共邮箱地址, 示例值："xxxxxx@abc.com"
}

// deletePublicMailboxResp ...
type deletePublicMailboxResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *DeletePublicMailboxResp `json:"data,omitempty"`
}

// DeletePublicMailboxResp ...
type DeletePublicMailboxResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailbox 获取公共邮箱信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/get
func (r *MailService) GetPublicMailbox(ctx context.Context, request *GetPublicMailboxReq, options ...MethodOptionFunc) (*GetPublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailbox mock enable")
		return r.cli.mock.mockMailGetPublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailbox",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailbox mock MailGetPublicMailbox method
func (r *Mock) MockMailGetPublicMailbox(f func(ctx context.Context, request *GetPublicMailboxReq, options ...MethodOptionFunc) (*GetPublicMailboxResp, *Response, error)) {
	r.mockMailGetPublicMailbox = f
}

// UnMockMailGetPublicMailbox un-mock MailGetPublicMailbox method
func (r *Mock) UnMockMailGetPublicMailbox() {
	r.mockMailGetPublicMailbox = nil
}

// GetPublicMailboxReq ...
type GetPublicMailboxReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
}

// getPublicMailboxResp ...
type getPublicMailboxResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxResp `json:"data,omitempty"`
}

// GetPublicMailboxResp ...
type GetPublicMailboxResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailboxList 分页批量获取公共邮箱列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/list
func (r *MailService) GetPublicMailboxList(ctx context.Context, request *GetPublicMailboxListReq, options ...MethodOptionFunc) (*GetPublicMailboxListResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailboxList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailboxList mock enable")
		return r.cli.mock.mockMailGetPublicMailboxList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailboxList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailboxList mock MailGetPublicMailboxList method
func (r *Mock) MockMailGetPublicMailboxList(f func(ctx context.Context, request *GetPublicMailboxListReq, options ...MethodOptionFunc) (*GetPublicMailboxListResp, *Response, error)) {
	r.mockMailGetPublicMailboxList = f
}

// UnMockMailGetPublicMailboxList un-mock MailGetPublicMailboxList method
func (r *Mock) UnMockMailGetPublicMailboxList() {
	r.mockMailGetPublicMailboxList = nil
}

// GetPublicMailboxListReq ...
type GetPublicMailboxListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`200`
}

// getPublicMailboxListResp ...
type getPublicMailboxListResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxListResp `json:"data,omitempty"`
}

// GetPublicMailboxListResp ...
type GetPublicMailboxListResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetPublicMailboxListRespItem `json:"items,omitempty"`      // 公共邮箱列表
}

// GetPublicMailboxListRespItem ...
type GetPublicMailboxListRespItem struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ClearPublicMailboxMember 删除公共邮箱所有成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/clear
func (r *MailService) ClearPublicMailboxMember(ctx context.Context, request *ClearPublicMailboxMemberReq, options ...MethodOptionFunc) (*ClearPublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailClearPublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#ClearPublicMailboxMember mock enable")
		return r.cli.mock.mockMailClearPublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "ClearPublicMailboxMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/clear",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(clearPublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailClearPublicMailboxMember mock MailClearPublicMailboxMember method
func (r *Mock) MockMailClearPublicMailboxMember(f func(ctx context.Context, request *ClearPublicMailboxMemberReq, options ...MethodOptionFunc) (*ClearPublicMailboxMemberResp, *Response, error)) {
	r.mockMailClearPublicMailboxMember = f
}

// UnMockMailClearPublicMailboxMember un-mock MailClearPublicMailboxMember method
func (r *Mock) UnMockMailClearPublicMailboxMember() {
	r.mockMailClearPublicMailboxMember = nil
}

// ClearPublicMailboxMemberReq ...
type ClearPublicMailboxMemberReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
}

// clearPublicMailboxMemberResp ...
type clearPublicMailboxMemberResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *ClearPublicMailboxMemberResp `json:"data,omitempty"`
}

// ClearPublicMailboxMemberResp ...
type ClearPublicMailboxMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreatePublicMailboxMember 向公共邮箱添加单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/create
func (r *MailService) CreatePublicMailboxMember(ctx context.Context, request *CreatePublicMailboxMemberReq, options ...MethodOptionFunc) (*CreatePublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailCreatePublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreatePublicMailboxMember mock enable")
		return r.cli.mock.mockMailCreatePublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreatePublicMailboxMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createPublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreatePublicMailboxMember mock MailCreatePublicMailboxMember method
func (r *Mock) MockMailCreatePublicMailboxMember(f func(ctx context.Context, request *CreatePublicMailboxMemberReq, options ...MethodOptionFunc) (*CreatePublicMailboxMemberResp, *Response, error)) {
	r.mockMailCreatePublicMailboxMember = f
}

// UnMockMailCreatePublicMailboxMember un-mock MailCreatePublicMailboxMember method
func (r *Mock) UnMockMailCreatePublicMailboxMember() {
	r.mockMailCreatePublicMailboxMember = nil
}

// CreatePublicMailboxMemberReq ...
type CreatePublicMailboxMemberReq struct {
	UserIDType      *IDType       `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PublicMailboxID string        `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	UserID          *string       `json:"user_id,omitempty"`          // 租户内用户的唯一标识（当成员类型是USER时有值）, 示例值："xxxxxxxxxx"
	Type            *MailUserType `json:"type,omitempty"`             // 成员类型, 示例值："USER", 可选值有: `USER`：内部用户
}

// createPublicMailboxMemberResp ...
type createPublicMailboxMemberResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *CreatePublicMailboxMemberResp `json:"data,omitempty"`
}

// CreatePublicMailboxMemberResp ...
type CreatePublicMailboxMemberResp struct {
	MemberID string       `json:"member_id,omitempty"` // 公共邮箱内成员唯一标识
	UserID   string       `json:"user_id,omitempty"`   // 租户内用户的唯一标识（当成员类型是USER时有值）
	Type     MailUserType `json:"type,omitempty"`      // 成员类型, 可选值有: `USER`：内部用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeletePublicMailboxMember 删除公共邮箱单个成员
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/delete
func (r *MailService) DeletePublicMailboxMember(ctx context.Context, request *DeletePublicMailboxMemberReq, options ...MethodOptionFunc) (*DeletePublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailDeletePublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeletePublicMailboxMember mock enable")
		return r.cli.mock.mockMailDeletePublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeletePublicMailboxMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deletePublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeletePublicMailboxMember mock MailDeletePublicMailboxMember method
func (r *Mock) MockMailDeletePublicMailboxMember(f func(ctx context.Context, request *DeletePublicMailboxMemberReq, options ...MethodOptionFunc) (*DeletePublicMailboxMemberResp, *Response, error)) {
	r.mockMailDeletePublicMailboxMember = f
}

// UnMockMailDeletePublicMailboxMember un-mock MailDeletePublicMailboxMember method
func (r *Mock) UnMockMailDeletePublicMailboxMember() {
	r.mockMailDeletePublicMailboxMember = nil
}

// DeletePublicMailboxMemberReq ...
type DeletePublicMailboxMemberReq struct {
	PublicMailboxID string `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	MemberID        string `path:"member_id" json:"-"`         // 公共邮箱内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// deletePublicMailboxMemberResp ...
type deletePublicMailboxMemberResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *DeletePublicMailboxMemberResp `json:"data,omitempty"`
}

// DeletePublicMailboxMemberResp ...
type DeletePublicMailboxMemberResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailboxMember 获取公共邮箱单个成员信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/get
func (r *MailService) GetPublicMailboxMember(ctx context.Context, request *GetPublicMailboxMemberReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailboxMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailboxMember mock enable")
		return r.cli.mock.mockMailGetPublicMailboxMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailboxMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailboxMember mock MailGetPublicMailboxMember method
func (r *Mock) MockMailGetPublicMailboxMember(f func(ctx context.Context, request *GetPublicMailboxMemberReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberResp, *Response, error)) {
	r.mockMailGetPublicMailboxMember = f
}

// UnMockMailGetPublicMailboxMember un-mock MailGetPublicMailboxMember method
func (r *Mock) UnMockMailGetPublicMailboxMember() {
	r.mockMailGetPublicMailboxMember = nil
}

// GetPublicMailboxMemberReq ...
type GetPublicMailboxMemberReq struct {
	UserIDType      *IDType `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	MemberID        string  `path:"member_id" json:"-"`         // 公共邮箱内成员唯一标识, 示例值："xxxxxxxxxxxxxxx"
}

// getPublicMailboxMemberResp ...
type getPublicMailboxMemberResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxMemberResp `json:"data,omitempty"`
}

// GetPublicMailboxMemberResp ...
type GetPublicMailboxMemberResp struct {
	MemberID string       `json:"member_id,omitempty"` // 公共邮箱内成员唯一标识
	UserID   string       `json:"user_id,omitempty"`   // 租户内用户的唯一标识（当成员类型是USER时有值）
	Type     MailUserType `json:"type,omitempty"`      // 成员类型, 可选值有: `USER`：内部用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPublicMailboxMemberList 分页批量获取公共邮箱成员列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox-member/list
func (r *MailService) GetPublicMailboxMemberList(ctx context.Context, request *GetPublicMailboxMemberListReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberListResp, *Response, error) {
	if r.cli.mock.mockMailGetPublicMailboxMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetPublicMailboxMemberList mock enable")
		return r.cli.mock.mockMailGetPublicMailboxMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetPublicMailboxMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPublicMailboxMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetPublicMailboxMemberList mock MailGetPublicMailboxMemberList method
func (r *Mock) MockMailGetPublicMailboxMemberList(f func(ctx context.Context, request *GetPublicMailboxMemberListReq, options ...MethodOptionFunc) (*GetPublicMailboxMemberListResp, *Response, error)) {
	r.mockMailGetPublicMailboxMemberList = f
}

// UnMockMailGetPublicMailboxMemberList un-mock MailGetPublicMailboxMemberList method
func (r *Mock) UnMockMailGetPublicMailboxMemberList() {
	r.mockMailGetPublicMailboxMemberList = nil
}

// GetPublicMailboxMemberListReq ...
type GetPublicMailboxMemberListReq struct {
	UserIDType      *IDType `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken       *string `query:"page_token" json:"-"`       // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize        *int64  `query:"page_size" json:"-"`        // 分页大小, 示例值：10, 最大值：`200`
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // The unique ID or email address of a public mailbox, 示例值："xxxxxxxxxxxxxxx or test_public_mailbox@xxx.xx"
}

// getPublicMailboxMemberListResp ...
type getPublicMailboxMemberListResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetPublicMailboxMemberListResp `json:"data,omitempty"`
}

// GetPublicMailboxMemberListResp ...
type GetPublicMailboxMemberListResp struct {
	HasMore   bool                                  `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetPublicMailboxMemberListRespItem `json:"items,omitempty"`      // 公共邮箱成员列表
}

// GetPublicMailboxMemberListRespItem ...
type GetPublicMailboxMemberListRespItem struct {
	MemberID string       `json:"member_id,omitempty"` // 公共邮箱内成员唯一标识
	UserID   string       `json:"user_id,omitempty"`   // 租户内用户的唯一标识（当成员类型是USER时有值）
	Type     MailUserType `json:"type,omitempty"`      // 成员类型, 可选值有: `USER`：内部用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdatePublicMailboxPatch 更新公共邮箱部分字段，没有填写的字段不会被更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/patch
func (r *MailService) UpdatePublicMailboxPatch(ctx context.Context, request *UpdatePublicMailboxPatchReq, options ...MethodOptionFunc) (*UpdatePublicMailboxPatchResp, *Response, error) {
	if r.cli.mock.mockMailUpdatePublicMailboxPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdatePublicMailboxPatch mock enable")
		return r.cli.mock.mockMailUpdatePublicMailboxPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdatePublicMailboxPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updatePublicMailboxPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdatePublicMailboxPatch mock MailUpdatePublicMailboxPatch method
func (r *Mock) MockMailUpdatePublicMailboxPatch(f func(ctx context.Context, request *UpdatePublicMailboxPatchReq, options ...MethodOptionFunc) (*UpdatePublicMailboxPatchResp, *Response, error)) {
	r.mockMailUpdatePublicMailboxPatch = f
}

// UnMockMailUpdatePublicMailboxPatch un-mock MailUpdatePublicMailboxPatch method
func (r *Mock) UnMockMailUpdatePublicMailboxPatch() {
	r.mockMailUpdatePublicMailboxPatch = nil
}

// UpdatePublicMailboxPatchReq ...
type UpdatePublicMailboxPatchReq struct {
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	Name            *string `json:"name,omitempty"`             // 公共邮箱名称, 示例值："test public mailbox"
}

// updatePublicMailboxPatchResp ...
type updatePublicMailboxPatchResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UpdatePublicMailboxPatchResp `json:"data,omitempty"`
}

// UpdatePublicMailboxPatchResp ...
type UpdatePublicMailboxPatchResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdatePublicMailbox 更新公共邮箱所有信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/update
func (r *MailService) UpdatePublicMailbox(ctx context.Context, request *UpdatePublicMailboxReq, options ...MethodOptionFunc) (*UpdatePublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailUpdatePublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#UpdatePublicMailbox mock enable")
		return r.cli.mock.mockMailUpdatePublicMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "UpdatePublicMailbox",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/public_mailboxes/:public_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updatePublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailUpdatePublicMailbox mock MailUpdatePublicMailbox method
func (r *Mock) MockMailUpdatePublicMailbox(f func(ctx context.Context, request *UpdatePublicMailboxReq, options ...MethodOptionFunc) (*UpdatePublicMailboxResp, *Response, error)) {
	r.mockMailUpdatePublicMailbox = f
}

// UnMockMailUpdatePublicMailbox un-mock MailUpdatePublicMailbox method
func (r *Mock) UnMockMailUpdatePublicMailbox() {
	r.mockMailUpdatePublicMailbox = nil
}

// UpdatePublicMailboxReq ...
type UpdatePublicMailboxReq struct {
	PublicMailboxID string  `path:"public_mailbox_id" json:"-"` // 公共邮箱唯一标识或公共邮箱地址, 示例值："xxxxxxxxxxxxxxx 或 test_public_mailbox@xxx.xx"
	Name            *string `json:"name,omitempty"`             // 公共邮箱名称, 示例值："test public mailbox"
}

// updatePublicMailboxResp ...
type updatePublicMailboxResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdatePublicMailboxResp `json:"data,omitempty"`
}

// UpdatePublicMailboxResp ...
type UpdatePublicMailboxResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailUser 使用邮箱状态查询接口，可以输入邮箱地址，查询出该邮箱地址对应的类型以及状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user/query
func (r *MailService) GetMailUser(ctx context.Context, request *GetMailUserReq, options ...MethodOptionFunc) (*GetMailUserResp, *Response, error) {
	if r.cli.mock.mockMailGetMailUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailUser mock enable")
		return r.cli.mock.mockMailGetMailUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailUser",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/users/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailUser mock MailGetMailUser method
func (r *Mock) MockMailGetMailUser(f func(ctx context.Context, request *GetMailUserReq, options ...MethodOptionFunc) (*GetMailUserResp, *Response, error)) {
	r.mockMailGetMailUser = f
}

// UnMockMailGetMailUser un-mock MailGetMailUser method
func (r *Mock) UnMockMailGetMailUser() {
	r.mockMailGetMailUser = nil
}

// GetMailUserReq ...
type GetMailUserReq struct {
	EmailList []string `json:"email_list,omitempty"` // 需要查询的邮箱地址列表, 示例值：["aaa@lark.com","bbb@lark.com"]
}

// getMailUserResp ...
type getMailUserResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetMailUserResp `json:"data,omitempty"`
}

// GetMailUserResp ...
type GetMailUserResp struct {
	UserList []*GetMailUserRespUser `json:"user_list,omitempty"` // 邮箱地址以及其对应的类型类型和状态
}

// GetMailUserRespUser ...
type GetMailUserRespUser struct {
	Email  string `json:"email,omitempty"`  // 邮箱地址
	Status int64  `json:"status,omitempty"` // 邮箱地址状态, 可选值有: `1`：邮箱地址格式错误, `2`：邮箱地址域名不存在, `3`：邮箱地址不存在, `4`：启用, `5`：已删除（邮箱回收站中）, `6`：禁用
	Type   int64  `json:"type,omitempty"`   // 邮箱地址类型, 可选值有: `1`：成员邮箱, `2`：成员邮箱别名, `3`：公共邮箱, `4`：公共邮箱别名, `5`：邮件组, `6`：邮件组别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMailUserMailboxAlias 创建用户邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/create
func (r *MailService) CreateMailUserMailboxAlias(ctx context.Context, request *CreateMailUserMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailUserMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailCreateMailUserMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreateMailUserMailboxAlias mock enable")
		return r.cli.mock.mockMailCreateMailUserMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "CreateMailUserMailboxAlias",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMailUserMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailCreateMailUserMailboxAlias mock MailCreateMailUserMailboxAlias method
func (r *Mock) MockMailCreateMailUserMailboxAlias(f func(ctx context.Context, request *CreateMailUserMailboxAliasReq, options ...MethodOptionFunc) (*CreateMailUserMailboxAliasResp, *Response, error)) {
	r.mockMailCreateMailUserMailboxAlias = f
}

// UnMockMailCreateMailUserMailboxAlias un-mock MailCreateMailUserMailboxAlias method
func (r *Mock) UnMockMailCreateMailUserMailboxAlias() {
	r.mockMailCreateMailUserMailboxAlias = nil
}

// CreateMailUserMailboxAliasReq ...
type CreateMailUserMailboxAliasReq struct {
	UserMailboxID string  `path:"user_mailbox_id" json:"-"` // 用户邮箱地址, 示例值："user@xxx.xx"
	EmailAlias    *string `json:"email_alias,omitempty"`    // 邮箱别名, 示例值："xxx@xx.xxx"
}

// createMailUserMailboxAliasResp ...
type createMailUserMailboxAliasResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateMailUserMailboxAliasResp `json:"data,omitempty"`
}

// CreateMailUserMailboxAliasResp ...
type CreateMailUserMailboxAliasResp struct {
	UserMailboxAlias *CreateMailUserMailboxAliasRespUserMailboxAlias `json:"user_mailbox_alias,omitempty"` // 用户邮箱别名
}

// CreateMailUserMailboxAliasRespUserMailboxAlias ...
type CreateMailUserMailboxAliasRespUserMailboxAlias struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailUserMailboxAlias 删除用户邮箱别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/delete
func (r *MailService) DeleteMailUserMailboxAlias(ctx context.Context, request *DeleteMailUserMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxAliasResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailUserMailboxAlias != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailUserMailboxAlias mock enable")
		return r.cli.mock.mockMailDeleteMailUserMailboxAlias(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailUserMailboxAlias",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases/:alias_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailUserMailboxAliasResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailUserMailboxAlias mock MailDeleteMailUserMailboxAlias method
func (r *Mock) MockMailDeleteMailUserMailboxAlias(f func(ctx context.Context, request *DeleteMailUserMailboxAliasReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxAliasResp, *Response, error)) {
	r.mockMailDeleteMailUserMailboxAlias = f
}

// UnMockMailDeleteMailUserMailboxAlias un-mock MailDeleteMailUserMailboxAlias method
func (r *Mock) UnMockMailDeleteMailUserMailboxAlias() {
	r.mockMailDeleteMailUserMailboxAlias = nil
}

// DeleteMailUserMailboxAliasReq ...
type DeleteMailUserMailboxAliasReq struct {
	UserMailboxID string `path:"user_mailbox_id" json:"-"` // 用户邮箱地址, 示例值："user@xxx.xx"
	AliasID       string `path:"alias_id" json:"-"`        // 别名邮箱地址, 示例值："user_alias@xxx.xx"
}

// deleteMailUserMailboxAliasResp ...
type deleteMailUserMailboxAliasResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailUserMailboxAliasResp `json:"data,omitempty"`
}

// DeleteMailUserMailboxAliasResp ...
type DeleteMailUserMailboxAliasResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMailUserMailboxAliasList 获取用户邮箱所有别名
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox-alias/list
func (r *MailService) GetMailUserMailboxAliasList(ctx context.Context, request *GetMailUserMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailUserMailboxAliasListResp, *Response, error) {
	if r.cli.mock.mockMailGetMailUserMailboxAliasList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#GetMailUserMailboxAliasList mock enable")
		return r.cli.mock.mockMailGetMailUserMailboxAliasList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "GetMailUserMailboxAliasList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id/aliases",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMailUserMailboxAliasListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailGetMailUserMailboxAliasList mock MailGetMailUserMailboxAliasList method
func (r *Mock) MockMailGetMailUserMailboxAliasList(f func(ctx context.Context, request *GetMailUserMailboxAliasListReq, options ...MethodOptionFunc) (*GetMailUserMailboxAliasListResp, *Response, error)) {
	r.mockMailGetMailUserMailboxAliasList = f
}

// UnMockMailGetMailUserMailboxAliasList un-mock MailGetMailUserMailboxAliasList method
func (r *Mock) UnMockMailGetMailUserMailboxAliasList() {
	r.mockMailGetMailUserMailboxAliasList = nil
}

// GetMailUserMailboxAliasListReq ...
type GetMailUserMailboxAliasListReq struct {
	PageToken     *string `query:"page_token" json:"-"`     // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
	PageSize      *int64  `query:"page_size" json:"-"`      // 分页大小, 示例值：10, 最大值：`20`
	UserMailboxID string  `path:"user_mailbox_id" json:"-"` // 用户邮箱地址, 示例值："user@xxx.xx"
}

// getMailUserMailboxAliasListResp ...
type getMailUserMailboxAliasListResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetMailUserMailboxAliasListResp `json:"data,omitempty"`
}

// GetMailUserMailboxAliasListResp ...
type GetMailUserMailboxAliasListResp struct {
	Items []*GetMailUserMailboxAliasListRespItem `json:"items,omitempty"` // 用户邮箱别名
}

// GetMailUserMailboxAliasListRespItem ...
type GetMailUserMailboxAliasListRespItem struct {
	PrimaryEmail string `json:"primary_email,omitempty"` // 主邮箱地址
	EmailAlias   string `json:"email_alias,omitempty"`   // 邮箱别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMailUserMailbox 该接口会永久删除用户邮箱地址。可用于删除位于邮箱回收站中的用户邮箱地址，一旦删除，将无法恢复。该接口支持邮件的转移，可以将被释放邮箱的邮件转移到另外一个可以使用的邮箱中。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/user_mailbox/delete
func (r *MailService) DeleteMailUserMailbox(ctx context.Context, request *DeleteMailUserMailboxReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailUserMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailUserMailbox mock enable")
		return r.cli.mock.mockMailDeleteMailUserMailbox(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Mail",
		API:                   "DeleteMailUserMailbox",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/mail/v1/user_mailboxes/:user_mailbox_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailUserMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMailDeleteMailUserMailbox mock MailDeleteMailUserMailbox method
func (r *Mock) MockMailDeleteMailUserMailbox(f func(ctx context.Context, request *DeleteMailUserMailboxReq, options ...MethodOptionFunc) (*DeleteMailUserMailboxResp, *Response, error)) {
	r.mockMailDeleteMailUserMailbox = f
}

// UnMockMailDeleteMailUserMailbox un-mock MailDeleteMailUserMailbox method
func (r *Mock) UnMockMailDeleteMailUserMailbox() {
	r.mockMailDeleteMailUserMailbox = nil
}

// DeleteMailUserMailboxReq ...
type DeleteMailUserMailboxReq struct {
	TransferMailbox *string `query:"transfer_mailbox" json:"-"` // 用于接受转移的邮箱地址, 示例值："888888@abc.com"
	UserMailboxID   string  `path:"user_mailbox_id" json:"-"`   // 要释放的邮箱地址, 示例值："111111@abc.com"
}

// deleteMailUserMailboxResp ...
type deleteMailUserMailboxResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailUserMailboxResp `json:"data,omitempty"`
}

// DeleteMailUserMailboxResp ...
type DeleteMailUserMailboxResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomBuilding 该接口用于获取指定建筑物的详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukzNyUjL5cjM14SO3ITN
func (r *MeetingRoomService) BatchGetMeetingRoomBuilding(ctx context.Context, request *BatchGetMeetingRoomBuildingReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomBuilding",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomBuilding mock MeetingRoomBatchGetMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomBuilding(f func(ctx context.Context, request *BatchGetMeetingRoomBuildingReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomBuilding = f
}

// UnMockMeetingRoomBatchGetMeetingRoomBuilding un-mock MeetingRoomBatchGetMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomBuilding() {
	r.mockMeetingRoomBatchGetMeetingRoomBuilding = nil
}

// BatchGetMeetingRoomBuildingReq ...
type BatchGetMeetingRoomBuildingReq struct {
	BuildingIDs []string `query:"building_ids" json:"-"` // 用于查询指定建筑物的 ID
	Fields      *string  `query:"fields" json:"-"`       // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段
}

// batchGetMeetingRoomBuildingResp ...
type batchGetMeetingRoomBuildingResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomBuildingResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomBuildingResp ...
type BatchGetMeetingRoomBuildingResp struct {
	Buildings []*BatchGetMeetingRoomBuildingRespBuilding `json:"buildings,omitempty"` // 建筑列表
}

// BatchGetMeetingRoomBuildingRespBuilding ...
type BatchGetMeetingRoomBuildingRespBuilding struct {
	BuildingID  string   `json:"building_id,omitempty"` // 建筑物 ID
	Description string   `json:"description,omitempty"` // 建筑物的相关描述
	Floors      []string `json:"floors,omitempty"`      // 属于当前建筑物的所有楼层列表
	Name        string   `json:"name,omitempty"`        // 建筑物名称
	CountryID   string   `json:"country_id,omitempty"`  // 所属国家 ID
	DistrictID  string   `json:"district_id,omitempty"` // 所属城市 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomBuildingID 该接口用于根据租户自定义建筑 ID 查询建筑 ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQzMxYjL0MTM24CNzEjN
func (r *MeetingRoomService) BatchGetMeetingRoomBuildingID(ctx context.Context, request *BatchGetMeetingRoomBuildingIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingIDResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuildingID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomBuildingID mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuildingID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomBuildingID",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomBuildingIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomBuildingID mock MeetingRoomBatchGetMeetingRoomBuildingID method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomBuildingID(f func(ctx context.Context, request *BatchGetMeetingRoomBuildingIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingIDResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomBuildingID = f
}

// UnMockMeetingRoomBatchGetMeetingRoomBuildingID un-mock MeetingRoomBatchGetMeetingRoomBuildingID method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomBuildingID() {
	r.mockMeetingRoomBatchGetMeetingRoomBuildingID = nil
}

// BatchGetMeetingRoomBuildingIDReq ...
type BatchGetMeetingRoomBuildingIDReq struct {
	CustomBuildingIDs string `query:"custom_building_ids" json:"-"` // 用于查询指定建筑物的租户自定义建筑ID
}

// batchGetMeetingRoomBuildingIDResp ...
type batchGetMeetingRoomBuildingIDResp struct {
	Code int64                              `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomBuildingIDResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomBuildingIDResp ...
type BatchGetMeetingRoomBuildingIDResp struct {
	Buildings []*BatchGetMeetingRoomBuildingIDRespBuilding `json:"buildings,omitempty"` // 建筑列表
}

// BatchGetMeetingRoomBuildingIDRespBuilding ...
type BatchGetMeetingRoomBuildingIDRespBuilding struct {
	BuildingID       string `json:"building_id,omitempty"`        // 建筑物ID
	CustomBuildingID string `json:"custom_building_id,omitempty"` // 租户自定义建筑物ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMeetingRoomBuilding 该接口对应管理后台的添加建筑，添加楼层的功能，可用于创建建筑物和建筑物的楼层信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNwYjLwUDM24CM1AjN
func (r *MeetingRoomService) CreateMeetingRoomBuilding(ctx context.Context, request *CreateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*CreateMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomCreateMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomCreateMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "CreateMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomCreateMeetingRoomBuilding mock MeetingRoomCreateMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomCreateMeetingRoomBuilding(f func(ctx context.Context, request *CreateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*CreateMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomCreateMeetingRoomBuilding = f
}

// UnMockMeetingRoomCreateMeetingRoomBuilding un-mock MeetingRoomCreateMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomCreateMeetingRoomBuilding() {
	r.mockMeetingRoomCreateMeetingRoomBuilding = nil
}

// CreateMeetingRoomBuildingReq ...
type CreateMeetingRoomBuildingReq struct {
	Name             string   `json:"name,omitempty"`               // 建筑名称
	Floors           []string `json:"floors,omitempty"`             // 楼层列表
	CountryID        string   `json:"country_id,omitempty"`         // 国家/地区ID
	DistrictID       string   `json:"district_id,omitempty"`        // 城市ID
	CustomBuildingID *string  `json:"custom_building_id,omitempty"` // 租户自定义建筑ID
}

// createMeetingRoomBuildingResp ...
type createMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *CreateMeetingRoomBuildingResp `json:"data,omitempty"` // 返回业务信息
}

// CreateMeetingRoomBuildingResp ...
type CreateMeetingRoomBuildingResp struct {
	BuildingID string `json:"building_id,omitempty"` // 成功创建的建筑ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMeetingRoomBuilding 该接口用于删除建筑物（办公大楼）。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzMxYjLzMTM24yMzEjN
func (r *MeetingRoomService) DeleteMeetingRoomBuilding(ctx context.Context, request *DeleteMeetingRoomBuildingReq, options ...MethodOptionFunc) (*DeleteMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomDeleteMeetingRoomBuilding mock MeetingRoomDeleteMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomDeleteMeetingRoomBuilding(f func(ctx context.Context, request *DeleteMeetingRoomBuildingReq, options ...MethodOptionFunc) (*DeleteMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomBuilding = f
}

// UnMockMeetingRoomDeleteMeetingRoomBuilding un-mock MeetingRoomDeleteMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomBuilding() {
	r.mockMeetingRoomDeleteMeetingRoomBuilding = nil
}

// DeleteMeetingRoomBuildingReq ...
type DeleteMeetingRoomBuildingReq struct {
	BuildingID string `json:"building_id,omitempty"` // 要删除的建筑ID
}

// deleteMeetingRoomBuildingResp ...
type deleteMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomBuildingResp `json:"data,omitempty"`
}

// DeleteMeetingRoomBuildingResp ...
type DeleteMeetingRoomBuildingResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomBuildingList 该接口用于获取本企业下的建筑物（办公大楼）。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugzNyUjL4cjM14CO3ITN
func (r *MeetingRoomService) GetMeetingRoomBuildingList(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomBuildingList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomBuildingList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomBuildingListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomBuildingList mock MeetingRoomGetMeetingRoomBuildingList method
func (r *Mock) MockMeetingRoomGetMeetingRoomBuildingList(f func(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomBuildingList = f
}

// UnMockMeetingRoomGetMeetingRoomBuildingList un-mock MeetingRoomGetMeetingRoomBuildingList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomBuildingList() {
	r.mockMeetingRoomGetMeetingRoomBuildingList = nil
}

// GetMeetingRoomBuildingListReq ...
type GetMeetingRoomBuildingListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 请求期望返回的建筑物数量，不足则返回全部，该值默认为 10，最大为 100
	PageToken *string `query:"page_token" json:"-"` // 用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素
	OrderBy   *string `query:"order_by" json:"-"`   // 提供用于对名称进行升序/降序排序的方式查询，可选项有："name-asc,name-desc"，传入其他字符串不做处理，默认无序
	Fields    *string `query:"fields" json:"-"`     // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段
}

// getMeetingRoomBuildingListResp ...
type getMeetingRoomBuildingListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomBuildingListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomBuildingListResp ...
type GetMeetingRoomBuildingListResp struct {
	PageToken string                                    `json:"page_token,omitempty"` // 分页标记，存在下一页时返回
	HasMore   bool                                      `json:"has_more,omitempty"`   // 存在下一页时，该值为 true，否则为 false
	Buildings []*GetMeetingRoomBuildingListRespBuilding `json:"buildings,omitempty"`  // 建筑列表
}

// GetMeetingRoomBuildingListRespBuilding ...
type GetMeetingRoomBuildingListRespBuilding struct {
	BuildingID  string   `json:"building_id,omitempty"` // 建筑物 ID
	Description string   `json:"description,omitempty"` // 建筑物的相关描述
	Floors      []string `json:"floors,omitempty"`      // 属于当前建筑物的所有楼层列表
	Name        string   `json:"name,omitempty"`        // 建筑物名称
	CountryID   string   `json:"country_id,omitempty"`  // 所属国家 ID
	DistrictID  string   `json:"district_id,omitempty"` // 所属城市 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMeetingRoomBuilding 该接口用于编辑建筑信息，添加楼层，删除楼层，编辑楼层信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETNwYjLxUDM24SM1AjN
func (r *MeetingRoomService) UpdateMeetingRoomBuilding(ctx context.Context, request *UpdateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*UpdateMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomUpdateMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#UpdateMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomUpdateMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "UpdateMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomUpdateMeetingRoomBuilding mock MeetingRoomUpdateMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomUpdateMeetingRoomBuilding(f func(ctx context.Context, request *UpdateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*UpdateMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomUpdateMeetingRoomBuilding = f
}

// UnMockMeetingRoomUpdateMeetingRoomBuilding un-mock MeetingRoomUpdateMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomUpdateMeetingRoomBuilding() {
	r.mockMeetingRoomUpdateMeetingRoomBuilding = nil
}

// UpdateMeetingRoomBuildingReq ...
type UpdateMeetingRoomBuildingReq struct {
	BuildingID       string   `json:"building_id,omitempty"`        // 要更新的建筑ID
	Name             *string  `json:"name,omitempty"`               // 建筑名称
	Floors           []string `json:"floors,omitempty"`             // 楼层列表
	CountryID        *string  `json:"country_id,omitempty"`         // 国家/地区ID
	DistrictID       *string  `json:"district_id,omitempty"`        // 城市ID
	CustomBuildingID *string  `json:"custom_building_id,omitempty"` // 租户自定义建筑ID
}

// updateMeetingRoomBuildingResp ...
type updateMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *UpdateMeetingRoomBuildingResp `json:"data,omitempty"`
}

// UpdateMeetingRoomBuildingResp ...
type UpdateMeetingRoomBuildingResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomCountryList 新建建筑时需要标明所处国家/地区，该接口用于获得系统预先提供的可供选择的国家 /地区列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTNwYjL0UDM24CN1AjN
func (r *MeetingRoomService) GetMeetingRoomCountryList(ctx context.Context, request *GetMeetingRoomCountryListReq, options ...MethodOptionFunc) (*GetMeetingRoomCountryListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomCountryList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomCountryList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomCountryList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomCountryList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/country/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomCountryListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomCountryList mock MeetingRoomGetMeetingRoomCountryList method
func (r *Mock) MockMeetingRoomGetMeetingRoomCountryList(f func(ctx context.Context, request *GetMeetingRoomCountryListReq, options ...MethodOptionFunc) (*GetMeetingRoomCountryListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomCountryList = f
}

// UnMockMeetingRoomGetMeetingRoomCountryList un-mock MeetingRoomGetMeetingRoomCountryList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomCountryList() {
	r.mockMeetingRoomGetMeetingRoomCountryList = nil
}

// GetMeetingRoomCountryListReq ...
type GetMeetingRoomCountryListReq struct {
}

// getMeetingRoomCountryListResp ...
type getMeetingRoomCountryListResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomCountryListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomCountryListResp ...
type GetMeetingRoomCountryListResp struct {
	Countries *GetMeetingRoomCountryListRespCountries `json:"countries,omitempty"` // 国家地区列表
}

// GetMeetingRoomCountryListRespCountries ...
type GetMeetingRoomCountryListRespCountries struct {
	CountryID string `json:"country_id,omitempty"` // 国家地区ID
	Name      string `json:"name,omitempty"`       // 国家地区名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomCustomization
//
// 该接口用于获取会议室个性化配置。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM5UjLyITO14iMykTN/query-meeting-room-customization-setting
func (r *MeetingRoomService) GetMeetingRoomCustomization(ctx context.Context, request *GetMeetingRoomCustomizationReq, options ...MethodOptionFunc) (*GetMeetingRoomCustomizationResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomCustomization != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomCustomization mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomCustomization(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomCustomization",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/customization",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomCustomizationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomCustomization mock MeetingRoomGetMeetingRoomCustomization method
func (r *Mock) MockMeetingRoomGetMeetingRoomCustomization(f func(ctx context.Context, request *GetMeetingRoomCustomizationReq, options ...MethodOptionFunc) (*GetMeetingRoomCustomizationResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomCustomization = f
}

// UnMockMeetingRoomGetMeetingRoomCustomization un-mock MeetingRoomGetMeetingRoomCustomization method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomCustomization() {
	r.mockMeetingRoomGetMeetingRoomCustomization = nil
}

// GetMeetingRoomCustomizationReq ...
type GetMeetingRoomCustomizationReq struct {
	RoomIDs []string `json:"room_ids,omitempty"` // 要获取的会议室ID列表
}

// getMeetingRoomCustomizationResp ...
type getMeetingRoomCustomizationResp struct {
	Code int64                            `json:"code,omitempty"`
	Msg  string                           `json:"msg,omitempty"`
	Data *GetMeetingRoomCustomizationResp `json:"data,omitempty"`
}

// GetMeetingRoomCustomizationResp ...
type GetMeetingRoomCustomizationResp struct {
	ErrorRoomIDs          *GetMeetingRoomCustomizationRespErrorRoomIDs          `json:"error_room_ids,omitempty"`           // 返回错误的入参
	RoomIDToCustomization *GetMeetingRoomCustomizationRespRoomIDToCustomization `json:"room_id_to_customization,omitempty"` // 会议室ID-个性化配置的映射
}

// GetMeetingRoomCustomizationRespErrorRoomIDs ...
type GetMeetingRoomCustomizationRespErrorRoomIDs struct {
	BuildingID *GetMeetingRoomCustomizationRespErrorRoomIDBuildingID `json:"building_id,omitempty"` // 建筑id
}

// GetMeetingRoomCustomizationRespErrorRoomIDBuildingID ...
type GetMeetingRoomCustomizationRespErrorRoomIDBuildingID struct {
	RoomID   string `json:"room_id,omitempty"`   // 会议室id
	ErrorMsg string `json:"error_msg,omitempty"` // 错误信息
}

// GetMeetingRoomCustomizationRespRoomIDToCustomization ...
type GetMeetingRoomCustomizationRespRoomIDToCustomization struct {
	RoomID *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID `json:"room_id,omitempty"` // 会议室ID
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID struct {
	ContactIDs        []int64                                                                      `json:"contact_ids,omitempty"`        // 准备会议室个性化的相关配置的人员ID列表
	CustomizationData *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData `json:"customization_data,omitempty"` // 个性化配置数据
	PreparationTime   int64                                                                        `json:"preparation_time,omitempty"`   // 准备时间
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData struct {
	Conditions        *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions `json:"conditions,omitempty"`         // 问卷的显示条件，当条件满足时，该问卷才会出现让用户进行选择
	CustomizationType int64                                                                                  `json:"customization_type,omitempty"` // 问卷的类型，1表示单选，2表示多选，3表示填空
	IndexKey          string                                                                                 `json:"index_key,omitempty"`          // 每个问卷的独立id
	InputContent      string                                                                                 `json:"input_content,omitempty"`      // 当type类型为填空时，该参数需要填入
	IsRequired        bool                                                                                   `json:"is_required,omitempty"`        // 当type类型为填空时，该参数需要填入
	Label             string                                                                                 `json:"label,omitempty"`              // 每个问卷的问题
	Options           *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions    `json:"options,omitempty"`            // 每个问卷的选项
	PlaceHolder       string                                                                                 `json:"place_holder,omitempty"`       // 填空题在未填写时的填充文案
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions struct {
	CustomKey  string   `json:"custom_key,omitempty"`  // 该custom_key对应的index_key选中后，问卷才会显示
	OptionKeys []string `json:"option_keys,omitempty"` // 所有的option都被选中后，问卷才会显示
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions struct {
	IsOthers       bool   `json:"is_others,omitempty"`        // 是否是其他选项
	IsSelected     bool   `json:"is_selected,omitempty"`      // 该选项是否勾选
	OptionImageURL string `json:"option_image_url,omitempty"` // 选项的图片
	OptionKey      string `json:"option_key,omitempty"`       // 每个选项的唯一id
	OptionLabel    string `json:"option_label,omitempty"`     // 每个问卷的选项
	OthersContent  string `json:"others_content,omitempty"`   // 其他选项的输入内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomDistrictList 新建建筑时需要选择所处国家/地区，该接口用于获得系统预先提供的可供选择的城市列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTNwYjL1UDM24SN1AjN
func (r *MeetingRoomService) GetMeetingRoomDistrictList(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomDistrictList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomDistrictList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/district/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomDistrictListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomDistrictList mock MeetingRoomGetMeetingRoomDistrictList method
func (r *Mock) MockMeetingRoomGetMeetingRoomDistrictList(f func(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomDistrictList = f
}

// UnMockMeetingRoomGetMeetingRoomDistrictList un-mock MeetingRoomGetMeetingRoomDistrictList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomDistrictList() {
	r.mockMeetingRoomGetMeetingRoomDistrictList = nil
}

// GetMeetingRoomDistrictListReq ...
type GetMeetingRoomDistrictListReq struct {
	CountryID int64 `query:"country_id" json:"-"` // 国家地区ID
}

// getMeetingRoomDistrictListResp ...
type getMeetingRoomDistrictListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomDistrictListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomDistrictListResp ...
type GetMeetingRoomDistrictListResp struct {
	Districts []*GetMeetingRoomDistrictListRespDistrict `json:"districts,omitempty"` // 城市列表
}

// GetMeetingRoomDistrictListRespDistrict ...
type GetMeetingRoomDistrictListRespDistrict struct {
	DistrictID string `json:"district_id,omitempty"` // 城市ID
	Name       string `json:"name,omitempty"`        // 城市名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomFreebusy 该接口用于获取指定会议室的忙闲日程实例列表。非重复日程只有唯一实例；重复日程可能存在多个实例，依据重复规则和时间范围扩展。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIDOyUjLygjM14iM4ITN
func (r *MeetingRoomService) BatchGetMeetingRoomFreebusy(ctx context.Context, request *BatchGetMeetingRoomFreebusyReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomFreebusyResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomFreebusy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomFreebusy mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomFreebusy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomFreebusy",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/freebusy/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomFreebusyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomFreebusy mock MeetingRoomBatchGetMeetingRoomFreebusy method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomFreebusy(f func(ctx context.Context, request *BatchGetMeetingRoomFreebusyReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomFreebusyResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomFreebusy = f
}

// UnMockMeetingRoomBatchGetMeetingRoomFreebusy un-mock MeetingRoomBatchGetMeetingRoomFreebusy method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomFreebusy() {
	r.mockMeetingRoomBatchGetMeetingRoomFreebusy = nil
}

// BatchGetMeetingRoomFreebusyReq ...
type BatchGetMeetingRoomFreebusyReq struct {
	RoomIDs []string `query:"room_ids" json:"-"` // 用于查询指定会议室的 ID
	TimeMin string   `query:"time_min" json:"-"` // 查询会议室忙闲的起始时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
	TimeMax string   `query:"time_max" json:"-"` // 查询会议室忙闲的结束时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
}

// batchGetMeetingRoomFreebusyResp ...
type batchGetMeetingRoomFreebusyResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomFreebusyResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomFreebusyResp ...
type BatchGetMeetingRoomFreebusyResp struct {
	TimeMin  string                                   `json:"time_min,omitempty"`  // 查询会议室忙闲的起始时间，与请求参数完全相同
	TimeMax  string                                   `json:"time_max,omitempty"`  // 查询会议室忙闲的结束时间，与请求参数完全相同
	FreeBusy *BatchGetMeetingRoomFreebusyRespFreeBusy `json:"free_busy,omitempty"` // 会议室忙闲列表
}

// BatchGetMeetingRoomFreebusyRespFreeBusy ...
type BatchGetMeetingRoomFreebusyRespFreeBusy struct {
	RoomID *BatchGetMeetingRoomFreebusyRespFreeBusyRoomID `json:"room_id,omitempty"` // 与请求合法参数相同，表示之后是对应会议室的忙闲状态
}

// BatchGetMeetingRoomFreebusyRespFreeBusyRoomID ...
type BatchGetMeetingRoomFreebusyRespFreeBusyRoomID struct {
	StartTime     string                                                      `json:"start_time,omitempty"`     // 忙碌起始时间
	EndTime       string                                                      `json:"end_time,omitempty"`       // 忙碌结束时间
	Uid           string                                                      `json:"uid,omitempty"`            // 日程 ID
	OriginalTime  int64                                                       `json:"original_time,omitempty"`  // 日程实例的原始时间, 非重复日程以及重复性日程的原日程为0，重复性日程的例外日程为非0
	OrganizerInfo *BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo `json:"organizer_info,omitempty"` // 组织者信息, 私密日程不返回该信息
}

// BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo ...
type BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo struct {
	Name   string `json:"name,omitempty"`    // 组织者姓名
	OpenID string `json:"open_id,omitempty"` // 组织者 open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ReplyMeetingRoomInstance 该接口用于回复会议室日程实例，包括未签到释放和提前结束释放。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzN4UjL2cDO14iN3gTN
func (r *MeetingRoomService) ReplyMeetingRoomInstance(ctx context.Context, request *ReplyMeetingRoomInstanceReq, options ...MethodOptionFunc) (*ReplyMeetingRoomInstanceResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomReplyMeetingRoomInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#ReplyMeetingRoomInstance mock enable")
		return r.cli.mock.mockMeetingRoomReplyMeetingRoomInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "ReplyMeetingRoomInstance",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/instance/reply",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(replyMeetingRoomInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomReplyMeetingRoomInstance mock MeetingRoomReplyMeetingRoomInstance method
func (r *Mock) MockMeetingRoomReplyMeetingRoomInstance(f func(ctx context.Context, request *ReplyMeetingRoomInstanceReq, options ...MethodOptionFunc) (*ReplyMeetingRoomInstanceResp, *Response, error)) {
	r.mockMeetingRoomReplyMeetingRoomInstance = f
}

// UnMockMeetingRoomReplyMeetingRoomInstance un-mock MeetingRoomReplyMeetingRoomInstance method
func (r *Mock) UnMockMeetingRoomReplyMeetingRoomInstance() {
	r.mockMeetingRoomReplyMeetingRoomInstance = nil
}

// ReplyMeetingRoomInstanceReq ...
type ReplyMeetingRoomInstanceReq struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室的 ID
	Uid          string `json:"uid,omitempty"`           // 会议室的日程 ID
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。重复日程若为0则表示回复其所有实例，否则表示回复单个实例。
	Status       string `json:"status,omitempty"`        // 回复状态，NOT_CHECK_IN 表示未签到，ENDED_BEFORE_DUE 表示提前结束，ACCEPTED_BY_ADMIN 表示被管理员置为接受，DECLINED_BY_ADMIN 表示被管理员置为拒绝
}

// replyMeetingRoomInstanceResp ...
type replyMeetingRoomInstanceResp struct {
	Code int64                         `json:"code,omitempty"` // 返回码，非 0 表示失败。105003表示 original_time 非法，此时可能是重复日程的整个开始时间被修改，建议应用重新查询会议室日程实例列表，获取最新的 original_time。
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *ReplyMeetingRoomInstanceResp `json:"data,omitempty"`
}

// ReplyMeetingRoomInstanceResp ...
type ReplyMeetingRoomInstanceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomRoom 该接口用于获取指定会议室的详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEDOyUjLxgjM14SM4ITN
func (r *MeetingRoomService) BatchGetMeetingRoomRoom(ctx context.Context, request *BatchGetMeetingRoomRoomReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomRoom",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomRoom mock MeetingRoomBatchGetMeetingRoomRoom method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomRoom(f func(ctx context.Context, request *BatchGetMeetingRoomRoomReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomRoom = f
}

// UnMockMeetingRoomBatchGetMeetingRoomRoom un-mock MeetingRoomBatchGetMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomRoom() {
	r.mockMeetingRoomBatchGetMeetingRoomRoom = nil
}

// BatchGetMeetingRoomRoomReq ...
type BatchGetMeetingRoomRoomReq struct {
	RoomIDs []string `query:"room_ids" json:"-"` // 用于查询指定会议室的 ID
	Fields  *string  `query:"fields" json:"-"`   // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段
}

// batchGetMeetingRoomRoomResp ...
type batchGetMeetingRoomRoomResp struct {
	Code int64                        `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomRoomResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomRoomResp ...
type BatchGetMeetingRoomRoomResp struct {
	Rooms []*BatchGetMeetingRoomRoomRespRoom `json:"rooms,omitempty"` // 会议室列表
}

// BatchGetMeetingRoomRoomRespRoom ...
type BatchGetMeetingRoomRoomRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室 ID
	BuildingID   string `json:"building_id,omitempty"`   // 会议室所属建筑物 ID
	BuildingName string `json:"building_name,omitempty"` // 会议室所属建筑物名称
	Capacity     int64  `json:"capacity,omitempty"`      // 会议室能容纳的人数
	Description  string `json:"description,omitempty"`   // 会议室的相关描述
	DisplayID    string `json:"display_id,omitempty"`    // 会议室的展示 ID
	FloorName    string `json:"floor_name,omitempty"`    // 会议室所在楼层名称
	IsDisabled   bool   `json:"is_disabled,omitempty"`   // 会议室是否不可用，若会议室不可用，则该值为 true，否则为 false
	Name         string `json:"name,omitempty"`          // 会议室名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomRoomID 该接口用于根据租户自定义会议室ID查询会议室ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzMxYjL2MTM24iNzEjN
func (r *MeetingRoomService) BatchGetMeetingRoomRoomID(ctx context.Context, request *BatchGetMeetingRoomRoomIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomIDResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoomID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomRoomID mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoomID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomRoomID",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomRoomIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomRoomID mock MeetingRoomBatchGetMeetingRoomRoomID method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomRoomID(f func(ctx context.Context, request *BatchGetMeetingRoomRoomIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomIDResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomRoomID = f
}

// UnMockMeetingRoomBatchGetMeetingRoomRoomID un-mock MeetingRoomBatchGetMeetingRoomRoomID method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomRoomID() {
	r.mockMeetingRoomBatchGetMeetingRoomRoomID = nil
}

// BatchGetMeetingRoomRoomIDReq ...
type BatchGetMeetingRoomRoomIDReq struct {
	CustomRoomIDs string `query:"custom_room_ids" json:"-"` // 用于查询指定会议室的租户自定义会议室ID
}

// batchGetMeetingRoomRoomIDResp ...
type batchGetMeetingRoomRoomIDResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomRoomIDResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomRoomIDResp ...
type BatchGetMeetingRoomRoomIDResp struct {
	Rooms []*BatchGetMeetingRoomRoomIDRespRoom `json:"rooms,omitempty"` // 会议室列表
}

// BatchGetMeetingRoomRoomIDRespRoom ...
type BatchGetMeetingRoomRoomIDRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`        // 会议室 ID
	CustomRoomID string `json:"custom_room_id,omitempty"` // 租户自定义会议室 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMeetingRoomRoom 该接口用于创建会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITNwYjLyUDM24iM1AjN
func (r *MeetingRoomService) CreateMeetingRoomRoom(ctx context.Context, request *CreateMeetingRoomRoomReq, options ...MethodOptionFunc) (*CreateMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomCreateMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomCreateMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "CreateMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomCreateMeetingRoomRoom mock MeetingRoomCreateMeetingRoomRoom method
func (r *Mock) MockMeetingRoomCreateMeetingRoomRoom(f func(ctx context.Context, request *CreateMeetingRoomRoomReq, options ...MethodOptionFunc) (*CreateMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomCreateMeetingRoomRoom = f
}

// UnMockMeetingRoomCreateMeetingRoomRoom un-mock MeetingRoomCreateMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomCreateMeetingRoomRoom() {
	r.mockMeetingRoomCreateMeetingRoomRoom = nil
}

// CreateMeetingRoomRoomReq ...
type CreateMeetingRoomRoomReq struct {
	BuildingID   string  `json:"building_id,omitempty"`    // 会议室所在的建筑ID
	Floor        string  `json:"floor,omitempty"`          // 会议室所在的建筑楼层
	Name         string  `json:"name,omitempty"`           // 会议室名称
	Capacity     int64   `json:"capacity,omitempty"`       // 容量
	IsDisabled   bool    `json:"is_disabled,omitempty"`    // 是否禁用
	CustomRoomID *string `json:"custom_room_id,omitempty"` // 租户自定义会议室ID
}

// createMeetingRoomRoomResp ...
type createMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *CreateMeetingRoomRoomResp `json:"data,omitempty"` // 返回业务信息
}

// CreateMeetingRoomRoomResp ...
type CreateMeetingRoomRoomResp struct {
	RoomID string `json:"room_id,omitempty"` // 成功创建的会议室ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMeetingRoomRoom 该接口用于删除会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUzMxYjL1MTM24SNzEjN
func (r *MeetingRoomService) DeleteMeetingRoomRoom(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomDeleteMeetingRoomRoom mock MeetingRoomDeleteMeetingRoomRoom method
func (r *Mock) MockMeetingRoomDeleteMeetingRoomRoom(f func(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomRoom = f
}

// UnMockMeetingRoomDeleteMeetingRoomRoom un-mock MeetingRoomDeleteMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomRoom() {
	r.mockMeetingRoomDeleteMeetingRoomRoom = nil
}

// DeleteMeetingRoomRoomReq ...
type DeleteMeetingRoomRoomReq struct {
	RoomID string `json:"room_id,omitempty"` // 要删除的会议室ID
}

// deleteMeetingRoomRoomResp ...
type deleteMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomRoomResp `json:"data,omitempty"`
}

// DeleteMeetingRoomRoomResp ...
type DeleteMeetingRoomRoomResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomRoomList 该接口用于获取指定建筑下的会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADOyUjLwgjM14CM4ITN
func (r *MeetingRoomService) GetMeetingRoomRoomList(ctx context.Context, request *GetMeetingRoomRoomListReq, options ...MethodOptionFunc) (*GetMeetingRoomRoomListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomRoomList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomRoomList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomRoomList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomRoomList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomRoomListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomRoomList mock MeetingRoomGetMeetingRoomRoomList method
func (r *Mock) MockMeetingRoomGetMeetingRoomRoomList(f func(ctx context.Context, request *GetMeetingRoomRoomListReq, options ...MethodOptionFunc) (*GetMeetingRoomRoomListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomRoomList = f
}

// UnMockMeetingRoomGetMeetingRoomRoomList un-mock MeetingRoomGetMeetingRoomRoomList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomRoomList() {
	r.mockMeetingRoomGetMeetingRoomRoomList = nil
}

// GetMeetingRoomRoomListReq ...
type GetMeetingRoomRoomListReq struct {
	BuildingID string  `query:"building_id" json:"-"` // 被查询的建筑物 ID
	PageSize   *int64  `query:"page_size" json:"-"`   // 请求期望返回的会议室数量，不足则返回全部，该值默认为 100，最大为 1000
	PageToken  *string `query:"page_token" json:"-"`  // 用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素
	OrderBy    *string `query:"order_by" json:"-"`    // 提供用于对名称/楼层进行升序/降序排序的方式查询，可选项有："name-asc,name-desc,floor_name-asc,floor_name-desc"，传入其他字符串不做处理，默认无序
	Fields     *string `query:"fields" json:"-"`      // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段
}

// getMeetingRoomRoomListResp ...
type getMeetingRoomRoomListResp struct {
	Code int64                       `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomRoomListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomRoomListResp ...
type GetMeetingRoomRoomListResp struct {
	PageToken string                            `json:"page_token,omitempty"` // 分页标记，存在下一页时返回
	HasMore   bool                              `json:"has_more,omitempty"`   // 存在下一页时，该值为 true，否则为 false
	Rooms     []*GetMeetingRoomRoomListRespRoom `json:"rooms,omitempty"`      // 会议室列表
}

// GetMeetingRoomRoomListRespRoom ...
type GetMeetingRoomRoomListRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室 ID
	BuildingID   string `json:"building_id,omitempty"`   // 会议室所属建筑物 ID
	BuildingName string `json:"building_name,omitempty"` // 会议室所属建筑物名称
	Capacity     int64  `json:"capacity,omitempty"`      // 会议室能容纳的人数
	Description  string `json:"description,omitempty"`   // 会议室的相关描述
	DisplayID    string `json:"display_id,omitempty"`    // 会议室的展示 ID
	FloorName    string `json:"floor_name,omitempty"`    // 会议室所在楼层名称
	IsDisabled   bool   `json:"is_disabled,omitempty"`   // 会议室是否不可用，若会议室不可用，则该值为 true，否则为 false
	Name         string `json:"name,omitempty"`          // 会议室名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMeetingRoomRoom 该接口用于更新会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTNwYjLzUDM24yM1AjN
func (r *MeetingRoomService) UpdateMeetingRoomRoom(ctx context.Context, request *UpdateMeetingRoomRoomReq, options ...MethodOptionFunc) (*UpdateMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomUpdateMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#UpdateMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomUpdateMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "UpdateMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomUpdateMeetingRoomRoom mock MeetingRoomUpdateMeetingRoomRoom method
func (r *Mock) MockMeetingRoomUpdateMeetingRoomRoom(f func(ctx context.Context, request *UpdateMeetingRoomRoomReq, options ...MethodOptionFunc) (*UpdateMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomUpdateMeetingRoomRoom = f
}

// UnMockMeetingRoomUpdateMeetingRoomRoom un-mock MeetingRoomUpdateMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomUpdateMeetingRoomRoom() {
	r.mockMeetingRoomUpdateMeetingRoomRoom = nil
}

// UpdateMeetingRoomRoomReq ...
type UpdateMeetingRoomRoomReq struct {
	RoomID       string  `json:"room_id,omitempty"`        // 要更新的会议室ID
	Name         *string `json:"name,omitempty"`           // 会议室名称
	Capacity     *int64  `json:"capacity,omitempty"`       // 容量
	CustomRoomID *string `json:"custom_room_id,omitempty"` // 租户自定义会议室ID
}

// updateMeetingRoomRoomResp ...
type updateMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *UpdateMeetingRoomRoomResp `json:"data,omitempty"`
}

// UpdateMeetingRoomRoomResp ...
type UpdateMeetingRoomRoomResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomSummary 通过日程的Uid和Original time，查询会议室日程主题。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM5UjLyITO14iMykTN/
func (r *MeetingRoomService) BatchGetMeetingRoomSummary(ctx context.Context, request *BatchGetMeetingRoomSummaryReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomSummaryResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomSummary != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomSummary mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomSummary(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomSummary",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/summary/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomSummaryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomSummary mock MeetingRoomBatchGetMeetingRoomSummary method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomSummary(f func(ctx context.Context, request *BatchGetMeetingRoomSummaryReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomSummaryResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomSummary = f
}

// UnMockMeetingRoomBatchGetMeetingRoomSummary un-mock MeetingRoomBatchGetMeetingRoomSummary method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomSummary() {
	r.mockMeetingRoomBatchGetMeetingRoomSummary = nil
}

// BatchGetMeetingRoomSummaryReq ...
type BatchGetMeetingRoomSummaryReq struct {
	EventUids *BatchGetMeetingRoomSummaryReqEventUid `json:"EventUids,omitempty"` // 需要查询的日程Uid和Original time
}

// BatchGetMeetingRoomSummaryReqEventUid ...
type BatchGetMeetingRoomSummaryReqEventUid struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。若为0则表示回复其重复日程的名字（不包含重复日程中的单个例外），否则表示回复单个实例。
}

// batchGetMeetingRoomSummaryResp ...
type batchGetMeetingRoomSummaryResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomSummaryResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomSummaryResp ...
type BatchGetMeetingRoomSummaryResp struct {
	EventInfos     *BatchGetMeetingRoomSummaryRespEventInfo     `json:"EventInfos,omitempty"`     // 成功查询到的日程信息
	ErrorEventUids *BatchGetMeetingRoomSummaryRespErrorEventUid `json:"ErrorEventUids,omitempty"` // 没有查询到的日程
}

// BatchGetMeetingRoomSummaryRespEventInfo ...
type BatchGetMeetingRoomSummaryRespEventInfo struct {
	Uid          string                                        `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64                                         `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。重复日程若为0则表示回复其所有实例，否则表示回复单个实例。
	Summary      string                                        `json:"summary,omitempty"`       // 日程主题
	Vchat        *BatchGetMeetingRoomSummaryRespEventInfoVchat `json:"vchat,omitempty"`         // 视频会议信息
}

// BatchGetMeetingRoomSummaryRespEventInfoVchat ...
type BatchGetMeetingRoomSummaryRespEventInfoVchat struct {
	VCType      string `json:"vc_type,omitempty"`     // 视屏会议类型 <br> **可选值有**<br> - `vc`：飞书视频会议，取该类型时，其他字段无效。<br> - `third_party`：第三方链接视频会议，取该类型时，icon_type、description、meeting_url字段生效。 `no_meeting`：无视频会议，取该类型时，其他字段无效。<br>- `lark_live`：飞书直播，内部类型，飞书客户端使用，API不支持创建，只读。<br>- `unknown`：未知类型，做兼容使用，飞书客户端使用，API不支持创建，只读。
	IconType    string `json:"icon_type,omitempty"`   // 第三方视频会议icon类型；可以为空，为空展示默认icon。<br> **可选值有：** <br>- `vc`：飞书视频会议icon<br>- `live`：直播视频会议icon <br>-  `default`：默认icon
	Description string `json:"description,omitempty"` // 第三方视频会议文案，可以为空，为空展示默认文案
	MeetingURL  string `json:"meeting_url,omitempty"` // 视频会议URL
}

// BatchGetMeetingRoomSummaryRespErrorEventUid ...
type BatchGetMeetingRoomSummaryRespErrorEventUid struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。若为0则表示回复其重复日程的名字（不包含重复日程中的单个例外），否则表示回复单个实例。
	ErrorMsg     string `json:"error_msg,omitempty"`     // 错误信息
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchDeleteMessage 批量撤回消息
//
// 注意事项：
// - 只能撤回通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口产生的消息，单条消息的撤回请使用[撤回消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete)接口
// - 路径参数**batch_message_id**为[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口返回值中的**message_id**字段，用于标识一次批量发送消息请求，格式为：**bm-xxx**
// - 一次调用涉及大量消息，所以为异步接口，会有一定延迟。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/delete
func (r *MessageService) BatchDeleteMessage(ctx context.Context, request *BatchDeleteMessageReq, options ...MethodOptionFunc) (*BatchDeleteMessageResp, *Response, error) {
	if r.cli.mock.mockMessageBatchDeleteMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#BatchDeleteMessage mock enable")
		return r.cli.mock.mockMessageBatchDeleteMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "BatchDeleteMessage",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/batch_messages/:batch_message_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchDeleteMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageBatchDeleteMessage mock MessageBatchDeleteMessage method
func (r *Mock) MockMessageBatchDeleteMessage(f func(ctx context.Context, request *BatchDeleteMessageReq, options ...MethodOptionFunc) (*BatchDeleteMessageResp, *Response, error)) {
	r.mockMessageBatchDeleteMessage = f
}

// UnMockMessageBatchDeleteMessage un-mock MessageBatchDeleteMessage method
func (r *Mock) UnMockMessageBatchDeleteMessage() {
	r.mockMessageBatchDeleteMessage = nil
}

// BatchDeleteMessageReq ...
type BatchDeleteMessageReq struct {
	BatchMessageID string `path:"batch_message_id" json:"-"` // 待撤回的批量消息的ID, 示例值："bm-dc13264520392913993dd051dba21dcf"
}

// batchDeleteMessageResp ...
type batchDeleteMessageResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *BatchDeleteMessageResp `json:"data,omitempty"`
}

// BatchDeleteMessageResp ...
type BatchDeleteMessageResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchSendOldRawMessage
//
// 给多个用户或者多个部门发送消息。
// **注意事项：**
// - 调用该接口需要注意
// - 应用需要启用机器人能力
// - 必须拥有**获取与发送单聊、群组消息**权限，或者**以应用的身份发消息**权限（历史版本）
// - 应用需要拥有批量发送消息权限
// - 给用户发送需要拥有 **给多个用户批量发消息** 权限
// - 给部门发送需要拥有 **给一个或多个部门的成员批量发消息** 权限
// - 应用需要拥有对所发送用户或部门的可见性
// - 通过该接口发送的消息 **不支持更新以及回复等操作**
// - 只能发送给用户，无法发送给群组
// - 异步接口，会有一定延迟，每个应用待发送的消息按顺序处理，请合理安排批量发送范围和顺序。发送消息给单个用户的场景请使用[发送消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create)接口
// - 单个应用每天通过该接口发送的总消息条数不超过50万
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM
func (r *MessageService) BatchSendOldRawMessage(ctx context.Context, request *BatchSendOldRawMessageReq, options ...MethodOptionFunc) (*BatchSendOldRawMessageResp, *Response, error) {
	if r.cli.mock.mockMessageBatchSendOldRawMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#BatchSendOldRawMessage mock enable")
		return r.cli.mock.mockMessageBatchSendOldRawMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "BatchSendOldRawMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/message/v4/batch_send/",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchSendOldRawMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageBatchSendOldRawMessage mock MessageBatchSendOldRawMessage method
func (r *Mock) MockMessageBatchSendOldRawMessage(f func(ctx context.Context, request *BatchSendOldRawMessageReq, options ...MethodOptionFunc) (*BatchSendOldRawMessageResp, *Response, error)) {
	r.mockMessageBatchSendOldRawMessage = f
}

// UnMockMessageBatchSendOldRawMessage un-mock MessageBatchSendOldRawMessage method
func (r *Mock) UnMockMessageBatchSendOldRawMessage() {
	r.mockMessageBatchSendOldRawMessage = nil
}

// BatchSendOldRawMessageReq ...
type BatchSendOldRawMessageReq struct {
	MsgType       MsgType     `json:"msg_type,omitempty"`       // 消息类型，支持多种消息类型，详见下表。
	Content       interface{} `json:"content,omitempty"`        // 消息内容，支持除卡片消息外的多种消息内容，详见下表。
	Card          interface{} `json:"card,omitempty"`           // 卡片消息内容，注意card和content必须二选一
	DepartmentIDs []string    `json:"department_ids,omitempty"` // 支持[自定义部门ID](https://open.feishu.cn/document/ukTMukTMukTM/uYTM5UjL2ETO14iNxkTN/terminology#3c3e6267)，和open_department_id，列表长度小于等于 200  <br><br>**注**：部门下的所有子部门包含的成员也会收到消息<br>**示例值：**["3dceba33a33226","d502aaa9514059", "od-5b91c9affb665451a16b90b4be367efa"]
	OpenIDs       []string    `json:"open_ids,omitempty"`       // 用户 open_id 列表，长度小于等于 200 <br><br>**示例值：**["ou_18eac85d35a26f989317ad4f02e8bbbb","ou_461cf042d9eedaa60d445f26dc747d5e"]
	UserIDs       []string    `json:"user_ids,omitempty"`       // 用户 user_id 列表，长度小于等于 200 （对应 V3 接口的 employee_ids ）<br><br>**示例值：**["7cdcc7c2","ca51d83b"]
	UnionIDs      []string    `json:"union_ids,omitempty"`      // 用户 union_ids 列表，长度小于等于 200 <br><br>**示例值：**["on_cad4860e7af114fb4ff6c5d496d1dd76","on_gdcq860e7af114fb4ff6c5d496dabcet"]
}

// batchSendOldRawMessageResp ...
type batchSendOldRawMessageResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *BatchSendOldRawMessageResp `json:"data,omitempty"` // -
}

// BatchSendOldRawMessageResp ...
type BatchSendOldRawMessageResp struct {
	MessageID            string   `json:"message_id,omitempty"`             // 消息 ID
	InvalidDepartmentIDs []string `json:"invalid_department_ids,omitempty"` // 不合法的部门 ID 列表
	InvalidOpenIDs       []string `json:"invalid_open_ids,omitempty"`       // 不合法的 open_id 列表
	InvalidUserIDs       []string `json:"invalid_user_ids,omitempty"`       // 不合法的 user_id 列表（对应V3接口的invalid_employee_ids）
	InvalidUnionIDs      []string `json:"invalid_union_ids,omitempty"`      // 不合法的 union_id 列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMessage 机器人撤回机器人自己发送的消息或群主撤回群内消息。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)  ，撤回消息时机器人仍需要在会话内
// - 机器人可以撤回单聊和群组内，自己发送 且 发送时间不超过1天(24小时)的消息
// - 若机器人要撤回群内他人发送的消息，则机器人必须是该群的群主 或者 得到群主的授权，且消息发送时间不超过1天（24小时）
// - 无法撤回通过「批量发送消息接口」发送的消息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete
func (r *MessageService) DeleteMessage(ctx context.Context, request *DeleteMessageReq, options ...MethodOptionFunc) (*DeleteMessageResp, *Response, error) {
	if r.cli.mock.mockMessageDeleteMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#DeleteMessage mock enable")
		return r.cli.mock.mockMessageDeleteMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "DeleteMessage",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageDeleteMessage mock MessageDeleteMessage method
func (r *Mock) MockMessageDeleteMessage(f func(ctx context.Context, request *DeleteMessageReq, options ...MethodOptionFunc) (*DeleteMessageResp, *Response, error)) {
	r.mockMessageDeleteMessage = f
}

// UnMockMessageDeleteMessage un-mock MessageDeleteMessage method
func (r *Mock) UnMockMessageDeleteMessage() {
	r.mockMessageDeleteMessage = nil
}

// DeleteMessageReq ...
type DeleteMessageReq struct {
	MessageID string `path:"message_id" json:"-"` // 待撤回的消息的ID, 示例值："om_dc13264520392913993dd051dba21dcf"
}

// deleteMessageResp ...
type deleteMessageResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMessageResp `json:"data,omitempty"`
}

// DeleteMessageResp ...
type DeleteMessageResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteEphemeralMessage
//
// 在群会话中删除指定用户可见的临时消息卡片<br>
// 临时卡片消息可以通过该接口进行显式删除，临时卡片消息删除后将不会在该设备上留下任何痕迹。
// **权限说明** ：需要启用机器人能力；需要机器人在会话群里
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITOyYjLykjM24iM5IjN
func (r *MessageService) DeleteEphemeralMessage(ctx context.Context, request *DeleteEphemeralMessageReq, options ...MethodOptionFunc) (*DeleteEphemeralMessageResp, *Response, error) {
	if r.cli.mock.mockMessageDeleteEphemeralMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#DeleteEphemeralMessage mock enable")
		return r.cli.mock.mockMessageDeleteEphemeralMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "DeleteEphemeralMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/ephemeral/v1/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteEphemeralMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageDeleteEphemeralMessage mock MessageDeleteEphemeralMessage method
func (r *Mock) MockMessageDeleteEphemeralMessage(f func(ctx context.Context, request *DeleteEphemeralMessageReq, options ...MethodOptionFunc) (*DeleteEphemeralMessageResp, *Response, error)) {
	r.mockMessageDeleteEphemeralMessage = f
}

// UnMockMessageDeleteEphemeralMessage un-mock MessageDeleteEphemeralMessage method
func (r *Mock) UnMockMessageDeleteEphemeralMessage() {
	r.mockMessageDeleteEphemeralMessage = nil
}

// DeleteEphemeralMessageReq ...
type DeleteEphemeralMessageReq struct {
	MessageID string `json:"message_id,omitempty"` // 临时消息ID
}

// deleteEphemeralMessageResp ...
type deleteEphemeralMessageResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *DeleteEphemeralMessageResp `json:"data,omitempty"`
}

// DeleteEphemeralMessageResp ...
type DeleteEphemeralMessageResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMessage 通过 message_id 查询消息内容
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 机器人必须在群组中
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/get
func (r *MessageService) GetMessage(ctx context.Context, request *GetMessageReq, options ...MethodOptionFunc) (*GetMessageResp, *Response, error) {
	if r.cli.mock.mockMessageGetMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#GetMessage mock enable")
		return r.cli.mock.mockMessageGetMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "GetMessage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetMessage mock MessageGetMessage method
func (r *Mock) MockMessageGetMessage(f func(ctx context.Context, request *GetMessageReq, options ...MethodOptionFunc) (*GetMessageResp, *Response, error)) {
	r.mockMessageGetMessage = f
}

// UnMockMessageGetMessage un-mock MessageGetMessage method
func (r *Mock) UnMockMessageGetMessage() {
	r.mockMessageGetMessage = nil
}

// GetMessageReq ...
type GetMessageReq struct {
	MessageID string `path:"message_id" json:"-"` // 待获取消息内容的消息的ID, 示例值："om_dc13264520392913993dd051dba21dcf"
}

// getMessageResp ...
type getMessageResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *GetMessageResp `json:"data,omitempty"`
}

// GetMessageResp ...
type GetMessageResp struct {
	Items []*GetMessageRespItem `json:"items,omitempty"` // -
}

// GetMessageRespItem ...
type GetMessageRespItem struct {
	MessageID      string       `json:"message_id,omitempty"`       // 消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	RootID         string       `json:"root_id,omitempty"`          // 根消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	ParentID       string       `json:"parent_id,omitempty"`        // 父消息的id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	MsgType        MsgType      `json:"msg_type,omitempty"`         // 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)
	CreateTime     string       `json:"create_time,omitempty"`      // 消息生成的时间戳（毫秒）
	UpdateTime     string       `json:"update_time,omitempty"`      // 消息更新的时间戳（毫秒）
	Deleted        bool         `json:"deleted,omitempty"`          // 消息是否被撤回
	Updated        bool         `json:"updated,omitempty"`          // 消息是否被更新
	ChatID         string       `json:"chat_id,omitempty"`          // 所属的群
	Sender         *Sender      `json:"sender,omitempty"`           // 发送者，可以是用户或应用
	Body           *MessageBody `json:"body,omitempty"`             // 消息内容
	Mentions       []*Mention   `json:"mentions,omitempty"`         // 被@的用户或机器人的id列表
	UpperMessageID string       `json:"upper_message_id,omitempty"` // 合并转发消息中，上一层级的消息id message_id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBatchSentMessageProgress 查询批量消息整体进度
//
// 注意事项:
// * 该接口是[查询批量消息推送和阅读人数](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/read_user)接口的加强版
// * 该接口返回的数据为查询时刻的快照数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/get_progress
func (r *MessageService) GetBatchSentMessageProgress(ctx context.Context, request *GetBatchSentMessageProgressReq, options ...MethodOptionFunc) (*GetBatchSentMessageProgressResp, *Response, error) {
	if r.cli.mock.mockMessageGetBatchSentMessageProgress != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#GetBatchSentMessageProgress mock enable")
		return r.cli.mock.mockMessageGetBatchSentMessageProgress(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "GetBatchSentMessageProgress",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/batch_messages/:batch_message_id/get_progress",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getBatchSentMessageProgressResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetBatchSentMessageProgress mock MessageGetBatchSentMessageProgress method
func (r *Mock) MockMessageGetBatchSentMessageProgress(f func(ctx context.Context, request *GetBatchSentMessageProgressReq, options ...MethodOptionFunc) (*GetBatchSentMessageProgressResp, *Response, error)) {
	r.mockMessageGetBatchSentMessageProgress = f
}

// UnMockMessageGetBatchSentMessageProgress un-mock MessageGetBatchSentMessageProgress method
func (r *Mock) UnMockMessageGetBatchSentMessageProgress() {
	r.mockMessageGetBatchSentMessageProgress = nil
}

// GetBatchSentMessageProgressReq ...
type GetBatchSentMessageProgressReq struct {
	BatchMessageID string `path:"batch_message_id" json:"-"` // 待查询的批量消息的ID, 示例值："bm-0b3d5d1b2df7c6d5dbd1abe2c91e2217"
}

// getBatchSentMessageProgressResp ...
type getBatchSentMessageProgressResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetBatchSentMessageProgressResp `json:"data,omitempty"`
}

// GetBatchSentMessageProgressResp ...
type GetBatchSentMessageProgressResp struct {
	BatchMessageSendProgress   []*GetBatchSentMessageProgressRespBatchMessageSendProgres   `json:"batch_message_send_progress,omitempty"`   // 消息发送进度
	BatchMessageRecallProgress []*GetBatchSentMessageProgressRespBatchMessageRecallProgres `json:"batch_message_recall_progress,omitempty"` // 消息撤回进度
}

// GetBatchSentMessageProgressRespBatchMessageSendProgres ...
type GetBatchSentMessageProgressRespBatchMessageSendProgres struct {
	ValidUserIDsCount   int64 `json:"valid_user_ids_count,omitempty"`   // 批量请求中有效的userid数量(包含机器人不可见用户),* 注： ,当valid_user_ids_count为0有两种情况：,1. 批量任务还没有开始被调度（请等待一会再调用该接口）,2. 批量发送消息时传入的所有openIDs、employeID、departmentiIDs都不包含有效的用户
	SuccessUserIDsCount int64 `json:"success_user_ids_count,omitempty"` // 已经成功给用户发送成功的消息数量,* 注：最终success_user_ids_count不一定等于valid_user_ids_count, 因为valid_user_ids_count包含了对机器人不可见的用户
	ReadUserIDsCount    int64 `json:"read_user_ids_count,omitempty"`    // 已读信息用户数量
}

// GetBatchSentMessageProgressRespBatchMessageRecallProgres ...
type GetBatchSentMessageProgressRespBatchMessageRecallProgres struct {
	Recall      bool  `json:"recall,omitempty"`       // 该条批量消息是否被执行过撤回操作
	RecallCount int64 `json:"recall_count,omitempty"` // 已经成功撤回的消息数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBatchSentMessageReadUser 查询批量消息推送和阅读人数
//
// 注意事项：
// - 只能查询通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口产生的消息
// - 该接口返回的数据为查询时刻的快照数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/read_user
func (r *MessageService) GetBatchSentMessageReadUser(ctx context.Context, request *GetBatchSentMessageReadUserReq, options ...MethodOptionFunc) (*GetBatchSentMessageReadUserResp, *Response, error) {
	if r.cli.mock.mockMessageGetBatchSentMessageReadUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#GetBatchSentMessageReadUser mock enable")
		return r.cli.mock.mockMessageGetBatchSentMessageReadUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "GetBatchSentMessageReadUser",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/batch_messages/:batch_message_id/read_user",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getBatchSentMessageReadUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetBatchSentMessageReadUser mock MessageGetBatchSentMessageReadUser method
func (r *Mock) MockMessageGetBatchSentMessageReadUser(f func(ctx context.Context, request *GetBatchSentMessageReadUserReq, options ...MethodOptionFunc) (*GetBatchSentMessageReadUserResp, *Response, error)) {
	r.mockMessageGetBatchSentMessageReadUser = f
}

// UnMockMessageGetBatchSentMessageReadUser un-mock MessageGetBatchSentMessageReadUser method
func (r *Mock) UnMockMessageGetBatchSentMessageReadUser() {
	r.mockMessageGetBatchSentMessageReadUser = nil
}

// GetBatchSentMessageReadUserReq ...
type GetBatchSentMessageReadUserReq struct {
	BatchMessageID string `path:"batch_message_id" json:"-"` // 待查询的批量消息的ID, 示例值："bm_dc13264520392913993dd051dba21dcf"
}

// getBatchSentMessageReadUserResp ...
type getBatchSentMessageReadUserResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetBatchSentMessageReadUserResp `json:"data,omitempty"`
}

// GetBatchSentMessageReadUserResp ...
type GetBatchSentMessageReadUserResp struct {
	ReadUser *GetBatchSentMessageReadUserRespReadUser `json:"read_user,omitempty"` // 批量发送消息的用户阅读情况
}

// GetBatchSentMessageReadUserRespReadUser ...
type GetBatchSentMessageReadUserRespReadUser struct {
	ReadCount  string `json:"read_count,omitempty"`  // 已读的人数
	TotalCount string `json:"total_count,omitempty"` // 推送的总人数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMessageFile 获取消息中的资源文件，包括音频，视频，图片和文件，**暂不支持表情包资源下载**。当前仅支持 100M 以内的资源文件的下载。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 机器人和消息需要在同一会话中
// - 请求的 file_key 和 message_id 需要匹配
// - 暂不支持获取合并转发消息中的子消息的资源文件
// - 获取群组消息时，应用必须拥有 获取群组中所有的消息 权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-resource/get
func (r *MessageService) GetMessageFile(ctx context.Context, request *GetMessageFileReq, options ...MethodOptionFunc) (*GetMessageFileResp, *Response, error) {
	if r.cli.mock.mockMessageGetMessageFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#GetMessageFile mock enable")
		return r.cli.mock.mockMessageGetMessageFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "GetMessageFile",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/resources/:file_key",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMessageFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetMessageFile mock MessageGetMessageFile method
func (r *Mock) MockMessageGetMessageFile(f func(ctx context.Context, request *GetMessageFileReq, options ...MethodOptionFunc) (*GetMessageFileResp, *Response, error)) {
	r.mockMessageGetMessageFile = f
}

// UnMockMessageGetMessageFile un-mock MessageGetMessageFile method
func (r *Mock) UnMockMessageGetMessageFile() {
	r.mockMessageGetMessageFile = nil
}

// GetMessageFileReq ...
type GetMessageFileReq struct {
	Type      string `query:"type" json:"-"`      // 资源类型，可选"image, file“； image对应消息中的 图片，富文本消息中的图片。  file对应消息中的 文件、音频、视频、（表情包除外）, 示例值："image"
	MessageID string `path:"message_id" json:"-"` // 待查询资源对应的消息ID, 示例值："om_dc13264520392913993dd051dba21dcf"
	FileKey   string `path:"file_key" json:"-"`   // 待查询资源的key, 示例值："file_456a92d6-c6ea-4de4-ac3f-7afcf44ac78g"
}

// getMessageFileResp ...
type getMessageFileResp struct {
	IsFile bool                `json:"is_file,omitempty"`
	Code   int64               `json:"code,omitempty"`
	Msg    string              `json:"msg,omitempty"`
	Data   *GetMessageFileResp `json:"data,omitempty"`
}

func (r *getMessageFileResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetMessageFileResp{}
	}
	r.Data.File = file
}

// GetMessageFileResp ...
type GetMessageFileResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMessageReadUserList 查询消息的已读信息。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能查询机器人自己发送，且发送时间不超过7天的消息
// - 查询消息已读信息时机器人仍需要在会话内
// - 本接口不支持查询批量消息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/read_users
func (r *MessageService) GetMessageReadUserList(ctx context.Context, request *GetMessageReadUserListReq, options ...MethodOptionFunc) (*GetMessageReadUserListResp, *Response, error) {
	if r.cli.mock.mockMessageGetMessageReadUserList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#GetMessageReadUserList mock enable")
		return r.cli.mock.mockMessageGetMessageReadUserList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "GetMessageReadUserList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/read_users",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMessageReadUserListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetMessageReadUserList mock MessageGetMessageReadUserList method
func (r *Mock) MockMessageGetMessageReadUserList(f func(ctx context.Context, request *GetMessageReadUserListReq, options ...MethodOptionFunc) (*GetMessageReadUserListResp, *Response, error)) {
	r.mockMessageGetMessageReadUserList = f
}

// UnMockMessageGetMessageReadUserList un-mock MessageGetMessageReadUserList method
func (r *Mock) UnMockMessageGetMessageReadUserList() {
	r.mockMessageGetMessageReadUserList = nil
}

// GetMessageReadUserListReq ...
type GetMessageReadUserListReq struct {
	UserIDType IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageSize   *int64  `query:"page_size" json:"-"`    // 此次调用中使用的分页的大小, 示例值：20, 取值范围：`1` ～ `100`
	PageToken  *string `query:"page_token" json:"-"`   // 下一页分页的token, 示例值："GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ=="
	MessageID  string  `path:"message_id" json:"-"`    // 待查询的消息的ID，请注意不支持查询批量消息, 示例值："om_dc13264520392913993dd051dba21dcf"
}

// getMessageReadUserListResp ...
type getMessageReadUserListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetMessageReadUserListResp `json:"data,omitempty"`
}

// GetMessageReadUserListResp ...
type GetMessageReadUserListResp struct {
	Items     []*GetMessageReadUserListRespItem `json:"items,omitempty"`      // -
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有下一页
	PageToken string                            `json:"page_token,omitempty"` // 下一页分页的token
}

// GetMessageReadUserListRespItem ...
type GetMessageReadUserListRespItem struct {
	UserIDType IDType `json:"user_id_type,omitempty"` // 用户id类型
	UserID     string `json:"user_id,omitempty"`      // 用户id
	Timestamp  string `json:"timestamp,omitempty"`    // 阅读时间
	TenantKey  string `json:"tenant_key,omitempty"`   // tenant key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMessageList 获取会话（包括单聊、群组）的历史消息（聊天记录）。
//
// 接口级别权限默认只能获取单聊消息，如果需要获取群组消息，应用还必须拥有 ***获取群组中所有消息*** 权限
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 获取消息时，机器人必须在群组中
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/list
func (r *MessageService) GetMessageList(ctx context.Context, request *GetMessageListReq, options ...MethodOptionFunc) (*GetMessageListResp, *Response, error) {
	if r.cli.mock.mockMessageGetMessageList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#GetMessageList mock enable")
		return r.cli.mock.mockMessageGetMessageList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "GetMessageList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMessageListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetMessageList mock MessageGetMessageList method
func (r *Mock) MockMessageGetMessageList(f func(ctx context.Context, request *GetMessageListReq, options ...MethodOptionFunc) (*GetMessageListResp, *Response, error)) {
	r.mockMessageGetMessageList = f
}

// UnMockMessageGetMessageList un-mock MessageGetMessageList method
func (r *Mock) UnMockMessageGetMessageList() {
	r.mockMessageGetMessageList = nil
}

// GetMessageListReq ...
type GetMessageListReq struct {
	ContainerIDType ContainerIDType `query:"container_id_type" json:"-"` // 容器类型 ，目前可选值仅有"chat", 示例值："chat"
	ContainerID     string          `query:"container_id" json:"-"`      // 容器的id，即chat的id, 示例值："oc_234jsi43d3ssi993d43545f"
	StartTime       *string         `query:"start_time" json:"-"`        // 历史信息的起始时间（秒级时间戳）, 示例值："1609296809"
	EndTime         *string         `query:"end_time" json:"-"`          // 历史信息的结束时间（秒级时间戳）, 示例值："1608594809"
	PageToken       *string         `query:"page_token" json:"-"`        // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："GxmvlNRvP0NdQZpa7yIqf_Lv_QuBwTQ8tXkX7w-irAghVD_TvuYd1aoJ1LQph86O-XImC4X9j9FhUPhXQDvtrQ=="
	PageSize        *int64          `query:"page_size" json:"-"`         // 分页大小, 示例值：10, 最大值：`50`
}

// getMessageListResp ...
type getMessageListResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetMessageListResp `json:"data,omitempty"`
}

// GetMessageListResp ...
type GetMessageListResp struct {
	HasMore   bool                      `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                    `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetMessageListRespItem `json:"items,omitempty"`      // message[]
}

// GetMessageListRespItem ...
type GetMessageListRespItem struct {
	MessageID      string       `json:"message_id,omitempty"`       // 消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	RootID         string       `json:"root_id,omitempty"`          // 根消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	ParentID       string       `json:"parent_id,omitempty"`        // 父消息的id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	MsgType        MsgType      `json:"msg_type,omitempty"`         // 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)
	CreateTime     string       `json:"create_time,omitempty"`      // 消息生成的时间戳（毫秒）
	UpdateTime     string       `json:"update_time,omitempty"`      // 消息更新的时间戳（毫秒）
	Deleted        bool         `json:"deleted,omitempty"`          // 消息是否被撤回
	Updated        bool         `json:"updated,omitempty"`          // 消息是否被更新
	ChatID         string       `json:"chat_id,omitempty"`          // 所属的群
	Sender         *Sender      `json:"sender,omitempty"`           // 发送者，可以是用户或应用
	Body           *MessageBody `json:"body,omitempty"`             // 消息内容
	Mentions       []*Mention   `json:"mentions,omitempty"`         // 被@的用户或机器人的id列表
	UpperMessageID string       `json:"upper_message_id,omitempty"` // 合并转发消息中，上一层级的消息id message_id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMessageReaction 给指定消息添加指定类型的表情回复（reaction即表情回复，本说明文档统一用“reaction”代称）。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 待添加reaction的消息要真实存在，不能被撤回
// - 给消息添加reaction，需要reaction的发送方（机器人或者用户）在消息所在的会话内
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/create
func (r *MessageService) CreateMessageReaction(ctx context.Context, request *CreateMessageReactionReq, options ...MethodOptionFunc) (*CreateMessageReactionResp, *Response, error) {
	if r.cli.mock.mockMessageCreateMessageReaction != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#CreateMessageReaction mock enable")
		return r.cli.mock.mockMessageCreateMessageReaction(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "CreateMessageReaction",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/reactions",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createMessageReactionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageCreateMessageReaction mock MessageCreateMessageReaction method
func (r *Mock) MockMessageCreateMessageReaction(f func(ctx context.Context, request *CreateMessageReactionReq, options ...MethodOptionFunc) (*CreateMessageReactionResp, *Response, error)) {
	r.mockMessageCreateMessageReaction = f
}

// UnMockMessageCreateMessageReaction un-mock MessageCreateMessageReaction method
func (r *Mock) UnMockMessageCreateMessageReaction() {
	r.mockMessageCreateMessageReaction = nil
}

// CreateMessageReactionReq ...
type CreateMessageReactionReq struct {
	MessageID    string                                `path:"message_id" json:"-"`     // 待添加reaction的消息ID, 示例值："om_a8f2294b************a1a38afaac9d"
	ReactionType *CreateMessageReactionReqReactionType `json:"reaction_type,omitempty"` // reaction资源类型
}

// CreateMessageReactionReqReactionType ...
type CreateMessageReactionReqReactionType struct {
	EmojiType string `json:"emoji_type,omitempty"` // emoji类型 [emoji类型列举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/emojis-introduce), 示例值："SMILE"
}

// createMessageReactionResp ...
type createMessageReactionResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateMessageReactionResp `json:"data,omitempty"`
}

// CreateMessageReactionResp ...
type CreateMessageReactionResp struct {
	ReactionID   string                                 `json:"reaction_id,omitempty"`   // reaction资源ID
	Operator     *CreateMessageReactionRespOperator     `json:"operator,omitempty"`      // 添加reaction的操作人
	ActionTime   string                                 `json:"action_time,omitempty"`   // reaction动作的的unix timestamp(单位:ms)
	ReactionType *CreateMessageReactionRespReactionType `json:"reaction_type,omitempty"` // reaction资源类型
}

// CreateMessageReactionRespOperator ...
type CreateMessageReactionRespOperator struct {
	OperatorID   string `json:"operator_id,omitempty"`   // 操作人ID
	OperatorType string `json:"operator_type,omitempty"` // 操作人身份，用户或应用, 可选值有: `app`："app", `user`："user"
}

// CreateMessageReactionRespReactionType ...
type CreateMessageReactionRespReactionType struct {
	EmojiType string `json:"emoji_type,omitempty"` // emoji类型 [emoji类型列举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/emojis-introduce)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMessageReaction 删除指定消息的表情回复（reaction即表情回复，本说明文档统一用“reaction”代称）。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能删除真实存在的reaction，并且删除reaction请求的操作者必须是reaction的原始添加者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/delete
func (r *MessageService) DeleteMessageReaction(ctx context.Context, request *DeleteMessageReactionReq, options ...MethodOptionFunc) (*DeleteMessageReactionResp, *Response, error) {
	if r.cli.mock.mockMessageDeleteMessageReaction != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#DeleteMessageReaction mock enable")
		return r.cli.mock.mockMessageDeleteMessageReaction(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "DeleteMessageReaction",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/reactions/:reaction_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteMessageReactionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageDeleteMessageReaction mock MessageDeleteMessageReaction method
func (r *Mock) MockMessageDeleteMessageReaction(f func(ctx context.Context, request *DeleteMessageReactionReq, options ...MethodOptionFunc) (*DeleteMessageReactionResp, *Response, error)) {
	r.mockMessageDeleteMessageReaction = f
}

// UnMockMessageDeleteMessageReaction un-mock MessageDeleteMessageReaction method
func (r *Mock) UnMockMessageDeleteMessageReaction() {
	r.mockMessageDeleteMessageReaction = nil
}

// DeleteMessageReactionReq ...
type DeleteMessageReactionReq struct {
	MessageID  string `path:"message_id" json:"-"`  // 待删除reaction的消息ID, 示例值："om_8964d1b4*********2b31383276113"
	ReactionID string `path:"reaction_id" json:"-"` // 待删除reaction的资源id, 示例值："ZCaCIjUBVVWSrm5L-3ZTw*************sNa8dHVplEzzSfJVUVLMLcS_"
}

// deleteMessageReactionResp ...
type deleteMessageReactionResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMessageReactionResp `json:"data,omitempty"`
}

// DeleteMessageReactionResp ...
type DeleteMessageReactionResp struct {
	ReactionID   string                                 `json:"reaction_id,omitempty"`   // reaction资源ID
	Operator     *DeleteMessageReactionRespOperator     `json:"operator,omitempty"`      // 添加reaction的操作人
	ActionTime   string                                 `json:"action_time,omitempty"`   // reaction动作的的unix timestamp(单位:ms)
	ReactionType *DeleteMessageReactionRespReactionType `json:"reaction_type,omitempty"` // reaction资源类型
}

// DeleteMessageReactionRespOperator ...
type DeleteMessageReactionRespOperator struct {
	OperatorID   string `json:"operator_id,omitempty"`   // 操作人ID
	OperatorType string `json:"operator_type,omitempty"` // 操作人身份，用户或应用, 可选值有: `app`："app", `user`："user"
}

// DeleteMessageReactionRespReactionType ...
type DeleteMessageReactionRespReactionType struct {
	EmojiType string `json:"emoji_type,omitempty"` // emoji类型 [emoji类型列举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/emojis-introduce)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMessageReactionList 获取指定消息的特定类型表情回复列表（reaction即表情回复，本说明文档统一用“reaction”代称）。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 待获取reaction信息的消息要真实存在，不能被撤回
// - 获取消息的reaction，需要request的授权主体（机器人或者用户）在消息所在的会话内
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/list
func (r *MessageService) GetMessageReactionList(ctx context.Context, request *GetMessageReactionListReq, options ...MethodOptionFunc) (*GetMessageReactionListResp, *Response, error) {
	if r.cli.mock.mockMessageGetMessageReactionList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#GetMessageReactionList mock enable")
		return r.cli.mock.mockMessageGetMessageReactionList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "GetMessageReactionList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/reactions",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getMessageReactionListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageGetMessageReactionList mock MessageGetMessageReactionList method
func (r *Mock) MockMessageGetMessageReactionList(f func(ctx context.Context, request *GetMessageReactionListReq, options ...MethodOptionFunc) (*GetMessageReactionListResp, *Response, error)) {
	r.mockMessageGetMessageReactionList = f
}

// UnMockMessageGetMessageReactionList un-mock MessageGetMessageReactionList method
func (r *Mock) UnMockMessageGetMessageReactionList() {
	r.mockMessageGetMessageReactionList = nil
}

// GetMessageReactionListReq ...
type GetMessageReactionListReq struct {
	ReactionType *string `query:"reaction_type" json:"-"` // 待查询消息reaction的类型[emoji类型列举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/emojis-introduce)。, 不传入该参数，表示拉取所有类型reaction, 示例值："LAUGH"
	PageToken    *string `query:"page_token" json:"-"`    // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："YhljsPiGfUgnVAg9urvRFd-BvSqRL20wMZNAWfa9xXkud6UKCybPuUgQ1vM26dj6"
	PageSize     *int64  `query:"page_size" json:"-"`     // 分页大小, 示例值：10, 最大值：`50`
	UserIDType   *IDType `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MessageID    string  `path:"message_id" json:"-"`     // 待获取reaction的消息ID, 示例值："om_8964d1b4*********2b31383276113"
}

// getMessageReactionListResp ...
type getMessageReactionListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetMessageReactionListResp `json:"data,omitempty"`
}

// GetMessageReactionListResp ...
type GetMessageReactionListResp struct {
	Items     []*GetMessageReactionListRespItem `json:"items,omitempty"`      // 查询指定reaction_type返回的reaction列表
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                            `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetMessageReactionListRespItem ...
type GetMessageReactionListRespItem struct {
	ReactionID   string                                      `json:"reaction_id,omitempty"`   // reaction资源ID
	Operator     *GetMessageReactionListRespItemOperator     `json:"operator,omitempty"`      // 添加reaction的操作人
	ActionTime   string                                      `json:"action_time,omitempty"`   // reaction动作的的unix timestamp(单位:ms)
	ReactionType *GetMessageReactionListRespItemReactionType `json:"reaction_type,omitempty"` // reaction资源类型
}

// GetMessageReactionListRespItemOperator ...
type GetMessageReactionListRespItemOperator struct {
	OperatorID   string `json:"operator_id,omitempty"`   // 操作人ID
	OperatorType string `json:"operator_type,omitempty"` // 操作人身份，用户或应用, 可选值有: `app`："app", `user`："user"
}

// GetMessageReactionListRespItemReactionType ...
type GetMessageReactionListRespItemReactionType struct {
	EmojiType string `json:"emoji_type,omitempty"` // emoji类型 [emoji类型列举](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message-reaction/emojis-introduce)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ReplyRawMessage 回复指定消息，支持文本、富文本、卡片、群名片、个人名片、图片、视频、文件等多种消息类型。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 回复私聊消息，需要机器人对用户有可用性
// - 回复群组消息，需要机器人在群中
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/reply
func (r *MessageService) ReplyRawMessage(ctx context.Context, request *ReplyRawMessageReq, options ...MethodOptionFunc) (*ReplyRawMessageResp, *Response, error) {
	if r.cli.mock.mockMessageReplyRawMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#ReplyRawMessage mock enable")
		return r.cli.mock.mockMessageReplyRawMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "ReplyRawMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/reply",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(replyRawMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageReplyRawMessage mock MessageReplyRawMessage method
func (r *Mock) MockMessageReplyRawMessage(f func(ctx context.Context, request *ReplyRawMessageReq, options ...MethodOptionFunc) (*ReplyRawMessageResp, *Response, error)) {
	r.mockMessageReplyRawMessage = f
}

// UnMockMessageReplyRawMessage un-mock MessageReplyRawMessage method
func (r *Mock) UnMockMessageReplyRawMessage() {
	r.mockMessageReplyRawMessage = nil
}

// ReplyRawMessageReq ...
type ReplyRawMessageReq struct {
	MessageID string  `path:"message_id" json:"-"` // 待回复的消息的ID, 示例值："om_dc13264520392913993dd051dba21dcf"
	Content   string  `json:"content,omitempty"`   // 消息内容 json 格式，格式说明参考: [发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json), 示例值："{\"text\":\"<at user_id=\\\"ou_155184d1e73cbfb8973e5a9e698e74f2\\\">Tom</at> test content\"}"
	MsgType   MsgType `json:"msg_type,omitempty"`  // 消息类型，包括：text、post、image、file、audio、media、sticker、interactive、share_card、share_user, 示例值："text"
}

// replyRawMessageResp ...
type replyRawMessageResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *ReplyRawMessageResp `json:"data,omitempty"`
}

// ReplyRawMessageResp ...
type ReplyRawMessageResp struct {
	MessageID      string       `json:"message_id,omitempty"`       // 消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	RootID         string       `json:"root_id,omitempty"`          // 根消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	ParentID       string       `json:"parent_id,omitempty"`        // 父消息的id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	MsgType        MsgType      `json:"msg_type,omitempty"`         // 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)
	CreateTime     string       `json:"create_time,omitempty"`      // 消息生成的时间戳（毫秒）
	UpdateTime     string       `json:"update_time,omitempty"`      // 消息更新的时间戳（毫秒）
	Deleted        bool         `json:"deleted,omitempty"`          // 消息是否被撤回
	Updated        bool         `json:"updated,omitempty"`          // 消息是否被更新
	ChatID         string       `json:"chat_id,omitempty"`          // 所属的群
	Sender         *Sender      `json:"sender,omitempty"`           // 发送者，可以是用户或应用
	Body           *MessageBody `json:"body,omitempty"`             // 消息内容
	Mentions       []*Mention   `json:"mentions,omitempty"`         // 被@的用户或机器人的id列表
	UpperMessageID string       `json:"upper_message_id,omitempty"` // 合并转发消息中，上一层级的消息id message_id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendRawMessage 给指定用户或者会话发送消息，支持文本、富文本、可交互的[消息卡片](https://open.feishu.cn/document/ukTMukTMukTM/uczM3QjL3MzN04yNzcDN)、群名片、个人名片、图片、视频、音频、文件、表情包。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 给用户发送消息，需要机器人对用户有[可用性](https://open.feishu.cn/document/home/introduction-to-scope-and-authorization/availability)
// - 给群组发送消息，需要机器人在群中
// - 该接口不支持给部门成员发消息，请使用 [批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)
// - 文本消息请求体最大不能超过150KB
// - 卡片及富文本消息请求体最大不能超过30KB
// - 消息卡片的 `update_multi`（是否为共享卡片）字段在卡片内容的`config`结构体中设置。详细参考文档[配置卡片属性](https://open.feishu.cn/document/ukTMukTMukTM/uAjNwUjLwYDM14CM2ATN)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/create
func (r *MessageService) SendRawMessage(ctx context.Context, request *SendRawMessageReq, options ...MethodOptionFunc) (*SendRawMessageResp, *Response, error) {
	if r.cli.mock.mockMessageSendRawMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#SendRawMessage mock enable")
		return r.cli.mock.mockMessageSendRawMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "SendRawMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(sendRawMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageSendRawMessage mock MessageSendRawMessage method
func (r *Mock) MockMessageSendRawMessage(f func(ctx context.Context, request *SendRawMessageReq, options ...MethodOptionFunc) (*SendRawMessageResp, *Response, error)) {
	r.mockMessageSendRawMessage = f
}

// UnMockMessageSendRawMessage un-mock MessageSendRawMessage method
func (r *Mock) UnMockMessageSendRawMessage() {
	r.mockMessageSendRawMessage = nil
}

// SendRawMessageReq ...
type SendRawMessageReq struct {
	ReceiveIDType IDType  `query:"receive_id_type" json:"-"` // 消息接收者id类型 open_id/user_id/union_id/email/chat_id, 示例值："open_id", 可选值有: `open_id`：以open_id来识别用户([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), `user_id`：以user_id来识别用户。需要有获取用户 userID的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), `union_id`：以union_id来识别用户([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), `email`：以email来识别用户。是用户的真实邮箱, `chat_id`：以chat_id来识别群聊。群ID说明请参考：[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	ReceiveID     string  `json:"receive_id,omitempty"`      // 依据receive_id_type的值，填写对应的消息接收者id, 示例值："ou_7d8a6e6df7621556ce0d21922b676706ccs"
	Content       string  `json:"content,omitempty"`         // 消息内容，json结构序列化后的字符串。不同msg_type对应不同内容。消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，具体格式说明参考：[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json), 示例值："{\"text\":\"<at user_id=\\\"ou_155184d1e73cbfb8973e5a9e698e74f2\\\">Tom</at> test content\"}"
	MsgType       MsgType `json:"msg_type,omitempty"`        // 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json), 示例值："text"
}

// sendRawMessageResp ...
type sendRawMessageResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *SendRawMessageResp `json:"data,omitempty"`
}

// SendRawMessageResp ...
type SendRawMessageResp struct {
	MessageID      string       `json:"message_id,omitempty"`       // 消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	RootID         string       `json:"root_id,omitempty"`          // 根消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	ParentID       string       `json:"parent_id,omitempty"`        // 父消息的id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
	MsgType        MsgType      `json:"msg_type,omitempty"`         // 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)
	CreateTime     string       `json:"create_time,omitempty"`      // 消息生成的时间戳（毫秒）
	UpdateTime     string       `json:"update_time,omitempty"`      // 消息更新的时间戳（毫秒）
	Deleted        bool         `json:"deleted,omitempty"`          // 消息是否被撤回
	Updated        bool         `json:"updated,omitempty"`          // 消息是否被更新
	ChatID         string       `json:"chat_id,omitempty"`          // 所属的群
	Sender         *Sender      `json:"sender,omitempty"`           // 发送者，可以是用户或应用
	Body           *MessageBody `json:"body,omitempty"`             // 消息内容
	Mentions       []*Mention   `json:"mentions,omitempty"`         // 被@的用户或机器人的id列表
	UpperMessageID string       `json:"upper_message_id,omitempty"` // 合并转发消息中，上一层级的消息id message_id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendEphemeralMessage
//
// 用于机器人在群会话中发送仅指定用户可见的消息卡片。<br>
// ## 使用场景
// 临时消息卡片多用于群聊中用户与机器人交互的中间态。例如在群聊中用户需要使用待办事项类bot创建一条提醒，bot 发送了可设置提醒日期和提醒内容的一张可交互的消息卡片，此卡片在没有设置为临时卡片的情况下为群内全员可见，即群内可看见该用户与 bot 交互的过程。而设置为临时卡片后，交互过程仅该用户可见，群内其他成员只会看到最终设置完成的提醒卡片。
// <br><br>通过临时消息卡片，可以减少消息对群聊中不相关用户的打扰，有效降低群消息的噪声。
// 需要启用机器人能力；需要机器人在会话群里。
// -  仅触发临时卡片的用户自己可见。
// - 不支持转发。
// - 只能在群聊使用。
// - 仅在用户处于在线状态的飞书客户端上可见。
// - 临时消息卡片的[呈现能力](https://open.feishu.cn/document/ukTMukTMukTM/uEjNwUjLxYDM14SM2ATN)、[交互能力](https://open.feishu.cn/document/ukTMukTMukTM/uYjNwUjL2YDM14iN2ATN)与消息卡片一致。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETOyYjLxkjM24SM5IjN
func (r *MessageService) SendEphemeralMessage(ctx context.Context, request *SendEphemeralMessageReq, options ...MethodOptionFunc) (*SendEphemeralMessageResp, *Response, error) {
	if r.cli.mock.mockMessageSendEphemeralMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#SendEphemeralMessage mock enable")
		return r.cli.mock.mockMessageSendEphemeralMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "SendEphemeralMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/ephemeral/v1/send",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(sendEphemeralMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageSendEphemeralMessage mock MessageSendEphemeralMessage method
func (r *Mock) MockMessageSendEphemeralMessage(f func(ctx context.Context, request *SendEphemeralMessageReq, options ...MethodOptionFunc) (*SendEphemeralMessageResp, *Response, error)) {
	r.mockMessageSendEphemeralMessage = f
}

// UnMockMessageSendEphemeralMessage un-mock MessageSendEphemeralMessage method
func (r *Mock) UnMockMessageSendEphemeralMessage() {
	r.mockMessageSendEphemeralMessage = nil
}

// SendEphemeralMessageReq ...
type SendEphemeralMessageReq struct {
	ChatID  string              `json:"chat_id,omitempty"`  // 发送临时消息的群ID可通过事件推送获取
	OpenID  string              `json:"open_id,omitempty"`  // 指定发送临时消息卡片的用户，其他人将无法看到临时消息卡片，只需要填 open_id、email、user_id（id介绍详见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)） 中的一个即可。服务端依次读取字段的顺序为 **open_id** > **user_id** > **email**
	UserID  string              `json:"user_id,omitempty"`  // 指定发送临时消息卡片的用户，其他人将无法看到临时消息卡片，只需要填 open_id、email、user_id（id介绍详见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)） 中的一个即可。服务端依次读取字段的顺序为 **open_id** > **user_id** > **email**
	Email   string              `json:"email,omitempty"`    // 指定发送临时消息卡片的用户，其他人将无法看到临时消息卡片，只需要填 open_id、email、user_id（id介绍详见[用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)） 中的一个即可。服务端依次读取字段的顺序为 **open_id** > **user_id** > **email**
	MsgType MsgType             `json:"msg_type,omitempty"` // 消息的类型，此处固定填 "interactive"
	Card    *MessageContentCard `json:"card,omitempty"`     // 消息卡片的描述内容，具体参考 [基础结构](https://open.feishu.cn/document/ukTMukTMukTM/uEjNwUjLxYDM14SM2ATN)
}

// sendEphemeralMessageResp ...
type sendEphemeralMessageResp struct {
	Code int64                     `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 返回码描述
	Data *SendEphemeralMessageResp `json:"data,omitempty"` // -
}

// SendEphemeralMessageResp ...
type SendEphemeralMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // 消息 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendRawMessageOld
//
// 给指定用户或者会话发送文本消息，其中会话包括私聊会话和群会话。
// 需要启用机器人能力；私聊会话时机器人需要拥有对用户的可见性，群会话需要机器人在群里
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUjNz4SN2MjL1YzM
func (r *MessageService) SendRawMessageOld(ctx context.Context, request *SendRawMessageOldReq, options ...MethodOptionFunc) (*SendRawMessageOldResp, *Response, error) {
	if r.cli.mock.mockMessageSendRawMessageOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#SendRawMessageOld mock enable")
		return r.cli.mock.mockMessageSendRawMessageOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "SendRawMessageOld",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/message/v4/send/",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(sendRawMessageOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageSendRawMessageOld mock MessageSendRawMessageOld method
func (r *Mock) MockMessageSendRawMessageOld(f func(ctx context.Context, request *SendRawMessageOldReq, options ...MethodOptionFunc) (*SendRawMessageOldResp, *Response, error)) {
	r.mockMessageSendRawMessageOld = f
}

// UnMockMessageSendRawMessageOld un-mock MessageSendRawMessageOld method
func (r *Mock) UnMockMessageSendRawMessageOld() {
	r.mockMessageSendRawMessageOld = nil
}

// SendRawMessageOldReq ...
type SendRawMessageOldReq struct {
	ChatID  string                       `json:"chat_id,omitempty"`  // 给用户发私聊消息，只需要填 open_id、email、user_id 中的一个即可，向群里发消息使用群的 chat_id。服务端依次读取字段的顺序为 chat_id > open_id > user_id > email   ( user_id 对应V3接口的 employee_id , chat_id 对应V3的 open_chat_id )
	OpenID  string                       `json:"open_id,omitempty"`  // 给用户发私聊消息，只需要填 open_id、email、user_id 中的一个即可，向群里发消息使用群的 chat_id。服务端依次读取字段的顺序为 chat_id > open_id > user_id > email   ( user_id 对应V3接口的 employee_id , chat_id 对应V3的 open_chat_id )
	UserID  string                       `json:"user_id,omitempty"`  // 给用户发私聊消息，只需要填 open_id、email、user_id 中的一个即可，向群里发消息使用群的 chat_id。服务端依次读取字段的顺序为 chat_id > open_id > user_id > email   ( user_id 对应V3接口的 employee_id , chat_id 对应V3的 open_chat_id )
	Email   string                       `json:"email,omitempty"`    // 给用户发私聊消息，只需要填 open_id、email、user_id 中的一个即可，向群里发消息使用群的 chat_id。服务端依次读取字段的顺序为 chat_id > open_id > user_id > email   ( user_id 对应V3接口的 employee_id , chat_id 对应V3的 open_chat_id )
	RootID  *string                      `json:"root_id,omitempty"`  // 如果需要回复某条消息，填对应消息的消息 ID
	MsgType MsgType                      `json:"msg_type,omitempty"` // 消息类型，此处固定填 "text"
	Content *SendRawMessageOldReqContent `json:"content,omitempty"`  // 消息内容
}

// SendRawMessageOldReqContent ...
type SendRawMessageOldReqContent struct {
	Text     string                 `json:"text,omitempty"`      // 文本消息内容，文本消息中可以 at 个人或全体成员<br>at 全体成员：<at user_id="all">  </at> <br> at 个人：<at user_id="ou_xxxxxxx"></at>，user_id 为用户 user_id或者open_id
	ImageKey string                 `json:"image_key,omitempty"` //  image_key 可以通过图片上传接口获得
	Post     *MessageContentPostAll `json:"post,omitempty"`      // 富文本消息
}

// sendRawMessageOldResp ...
type sendRawMessageOldResp struct {
	Code int64                  `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 返回码描述
	Data *SendRawMessageOldResp `json:"data,omitempty"` // -
}

// SendRawMessageOldResp ...
type SendRawMessageOldResp struct {
	MessageID string `json:"message_id,omitempty"` // 消息 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendUrgentAppMessage 对指定消息进行应用内加急。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能加急机器人自己发送的消息
// - 加急时机器人仍需要在会话内
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_app
func (r *MessageService) SendUrgentAppMessage(ctx context.Context, request *SendUrgentAppMessageReq, options ...MethodOptionFunc) (*SendUrgentAppMessageResp, *Response, error) {
	if r.cli.mock.mockMessageSendUrgentAppMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#SendUrgentAppMessage mock enable")
		return r.cli.mock.mockMessageSendUrgentAppMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "SendUrgentAppMessage",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/urgent_app",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(sendUrgentAppMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageSendUrgentAppMessage mock MessageSendUrgentAppMessage method
func (r *Mock) MockMessageSendUrgentAppMessage(f func(ctx context.Context, request *SendUrgentAppMessageReq, options ...MethodOptionFunc) (*SendUrgentAppMessageResp, *Response, error)) {
	r.mockMessageSendUrgentAppMessage = f
}

// UnMockMessageSendUrgentAppMessage un-mock MessageSendUrgentAppMessage method
func (r *Mock) UnMockMessageSendUrgentAppMessage() {
	r.mockMessageSendUrgentAppMessage = nil
}

// SendUrgentAppMessageReq ...
type SendUrgentAppMessageReq struct {
	UserIDType IDType   `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MessageID  string   `path:"message_id" json:"-"`    // 待加急的消息ID。注意不支持批量消息ID（bm_xxx）, 示例值："om_dc13264520392913993dd051dba21dcf"
	UserIDList []string `json:"user_id_list,omitempty"` // 目标用户的ID。列表不可为空。, 示例值：["ou_6yf8af6bgb9100449565764t3382b168"]
}

// sendUrgentAppMessageResp ...
type sendUrgentAppMessageResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *SendUrgentAppMessageResp `json:"data,omitempty"`
}

// SendUrgentAppMessageResp ...
type SendUrgentAppMessageResp struct {
	InvalidUserIDList []string `json:"invalid_user_id_list,omitempty"` // 无效的用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendUrgentPhoneMessage 对指定消息进行应用内加急与电话加急
//
// 特别说明：
// - 通过接口产生的电话加急将消耗企业的加急额度，请慎重调用。
// - 通过租户管理后台-费用中心-短信/电话加急 可以查看当前额度。
// - 默认接口限流为50 QPS，请谨慎调用。
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能加急机器人自己发送的消息
// - 加急时机器人仍需要在会话内
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_phone
func (r *MessageService) SendUrgentPhoneMessage(ctx context.Context, request *SendUrgentPhoneMessageReq, options ...MethodOptionFunc) (*SendUrgentPhoneMessageResp, *Response, error) {
	if r.cli.mock.mockMessageSendUrgentPhoneMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#SendUrgentPhoneMessage mock enable")
		return r.cli.mock.mockMessageSendUrgentPhoneMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "SendUrgentPhoneMessage",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/urgent_phone",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(sendUrgentPhoneMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageSendUrgentPhoneMessage mock MessageSendUrgentPhoneMessage method
func (r *Mock) MockMessageSendUrgentPhoneMessage(f func(ctx context.Context, request *SendUrgentPhoneMessageReq, options ...MethodOptionFunc) (*SendUrgentPhoneMessageResp, *Response, error)) {
	r.mockMessageSendUrgentPhoneMessage = f
}

// UnMockMessageSendUrgentPhoneMessage un-mock MessageSendUrgentPhoneMessage method
func (r *Mock) UnMockMessageSendUrgentPhoneMessage() {
	r.mockMessageSendUrgentPhoneMessage = nil
}

// SendUrgentPhoneMessageReq ...
type SendUrgentPhoneMessageReq struct {
	UserIDType IDType   `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MessageID  string   `path:"message_id" json:"-"`    // 待加急的消息的ID。注意不支持批量消息ID（bm_xxx）, 示例值："om_dc13264520392913993dd051dba21dcf"
	UserIDList []string `json:"user_id_list,omitempty"` // 目标用户的ID。列表不可为空。, 示例值：["ou_6yf8af6bgb9100449565764t3382b168"]
}

// sendUrgentPhoneMessageResp ...
type sendUrgentPhoneMessageResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *SendUrgentPhoneMessageResp `json:"data,omitempty"`
}

// SendUrgentPhoneMessageResp ...
type SendUrgentPhoneMessageResp struct {
	InvalidUserIDList []string `json:"invalid_user_id_list,omitempty"` // 无效的用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendUrgentSmsMessage 对指定消息进行应用内加急与短信加急。
//
// 特别说明：
// - 通过接口产生的短信加急将消耗企业的加急额度，请慎重调用。
// - 通过租户管理后台-费用中心-短信/电话加急 可以查看当前额度。
// - 默认接口限流为50 QPS，请谨慎调用。
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能加急机器人自己发送的消息
// - 加急时机器人仍需要在会话内
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/urgent_sms
func (r *MessageService) SendUrgentSmsMessage(ctx context.Context, request *SendUrgentSmsMessageReq, options ...MethodOptionFunc) (*SendUrgentSmsMessageResp, *Response, error) {
	if r.cli.mock.mockMessageSendUrgentSmsMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#SendUrgentSmsMessage mock enable")
		return r.cli.mock.mockMessageSendUrgentSmsMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "SendUrgentSmsMessage",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id/urgent_sms",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(sendUrgentSmsMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageSendUrgentSmsMessage mock MessageSendUrgentSmsMessage method
func (r *Mock) MockMessageSendUrgentSmsMessage(f func(ctx context.Context, request *SendUrgentSmsMessageReq, options ...MethodOptionFunc) (*SendUrgentSmsMessageResp, *Response, error)) {
	r.mockMessageSendUrgentSmsMessage = f
}

// UnMockMessageSendUrgentSmsMessage un-mock MessageSendUrgentSmsMessage method
func (r *Mock) UnMockMessageSendUrgentSmsMessage() {
	r.mockMessageSendUrgentSmsMessage = nil
}

// SendUrgentSmsMessageReq ...
type SendUrgentSmsMessageReq struct {
	UserIDType IDType   `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MessageID  string   `path:"message_id" json:"-"`    // 待加急的消息ID。注意不支持批量消息ID(bm_xxx), 示例值："om_dc13264520392913993dd051dba21dcf"
	UserIDList []string `json:"user_id_list,omitempty"` // 目标用户的ID。列表不可为空。, 示例值：["ou_6yf8af6bgb9100449565764t3382b168"]
}

// sendUrgentSmsMessageResp ...
type sendUrgentSmsMessageResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *SendUrgentSmsMessageResp `json:"data,omitempty"`
}

// SendUrgentSmsMessageResp ...
type SendUrgentSmsMessageResp struct {
	InvalidUserIDList []string `json:"invalid_user_id_list,omitempty"` // 无效的用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMessage 更新应用已发送的消息卡片内容。
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 当前仅支持更新 **卡片消息**
// - **不支持更新批量消息**
// - 只支持对所有人都更新的[「共享卡片」](ukTMukTMukTM/uAjNwUjLwYDM14CM2ATN)，也即需要在卡片的`config`属性中，显式声明`"update_multi":true`。<br>如果你只想更新特定人的消息卡片，必须要用户在卡片操作交互后触发，开发文档参考[「独享卡片」](https://open.feishu.cn/document/ukTMukTMukTM/uYjNwUjL2YDM14iN2ATN#49904b71)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/patch
func (r *MessageService) UpdateMessage(ctx context.Context, request *UpdateMessageReq, options ...MethodOptionFunc) (*UpdateMessageResp, *Response, error) {
	if r.cli.mock.mockMessageUpdateMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#UpdateMessage mock enable")
		return r.cli.mock.mockMessageUpdateMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "UpdateMessage",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/messages/:message_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageUpdateMessage mock MessageUpdateMessage method
func (r *Mock) MockMessageUpdateMessage(f func(ctx context.Context, request *UpdateMessageReq, options ...MethodOptionFunc) (*UpdateMessageResp, *Response, error)) {
	r.mockMessageUpdateMessage = f
}

// UnMockMessageUpdateMessage un-mock MessageUpdateMessage method
func (r *Mock) UnMockMessageUpdateMessage() {
	r.mockMessageUpdateMessage = nil
}

// UpdateMessageReq ...
type UpdateMessageReq struct {
	MessageID string `path:"message_id" json:"-"` // 待更新的消息的ID, 示例值："om_dc13264520392913993dd051dba21dcf"
	Content   string `json:"content,omitempty"`   // 消息内容 json 格式，[发送消息 content 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)，参考文档中的卡片格式, 示例值："参考链接"
}

// updateMessageResp ...
type updateMessageResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *UpdateMessageResp `json:"data,omitempty"`
}

// UpdateMessageResp ...
type UpdateMessageResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMessageDelay
//
// 用于用户交互完成后延后更新消息卡片
// ### 使用场景
// 1. 用户点击卡片后业务方需要处理较长时间，无法在3s内及时返回需要展示的卡片内容
// 2. 指定只更新一部分收到这张卡片成员（同一个`message_id`）看到的卡片内容
// - 需要用户主动交互触发，不支持无条件更新
// - 延迟更新使用的token有效期为30分钟，超时则无法更新卡片
// - 调用延迟更新接口需要晚于同步返回，否则会出现不可预测行为<br>服务端处理时，可先立即 return 空串，再在30分钟内调用延迟更新接口更新卡片
// - 只能更新用户交互对应卡片，不允许更新其他卡片
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMDO1YjLzgTN24yM4UjN
func (r *MessageService) UpdateMessageDelay(ctx context.Context, request *UpdateMessageDelayReq, options ...MethodOptionFunc) (*UpdateMessageDelayResp, *Response, error) {
	if r.cli.mock.mockMessageUpdateMessageDelay != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#UpdateMessageDelay mock enable")
		return r.cli.mock.mockMessageUpdateMessageDelay(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "UpdateMessageDelay",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/interactive/v1/card/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMessageDelayResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageUpdateMessageDelay mock MessageUpdateMessageDelay method
func (r *Mock) MockMessageUpdateMessageDelay(f func(ctx context.Context, request *UpdateMessageDelayReq, options ...MethodOptionFunc) (*UpdateMessageDelayResp, *Response, error)) {
	r.mockMessageUpdateMessageDelay = f
}

// UnMockMessageUpdateMessageDelay un-mock MessageUpdateMessageDelay method
func (r *Mock) UnMockMessageUpdateMessageDelay() {
	r.mockMessageUpdateMessageDelay = nil
}

// UpdateMessageDelayReq ...
type UpdateMessageDelayReq struct {
	Token string                     `json:"token,omitempty"` // 用于更新卡片的token，不是tenant_access_token（可通过[卡片交互返回内容](https://open.feishu.cn/document/ukTMukTMukTM/uEzNwUjLxcDM14SM3ATN)获取）
	Card  *UpdateMessageDelayReqCard `json:"card,omitempty"`  // 消息卡片的描述内容，具体参考[卡片结构](https://open.feishu.cn/document/ukTMukTMukTM/uEjNwUjLxYDM14SM2ATN)
}

// UpdateMessageDelayReqCard ...
type UpdateMessageDelayReqCard struct {
	Card    interface{} `json:"card,omitempty"`     // 消息卡片内容
	OpenIDs []string    `json:"open_ids,omitempty"` // 指定需要更新的用户，共享卡片默认更新所有人卡片，无需填写该字段
}

func (r UpdateMessageDelayReqCard) MarshalJSON() ([]byte, error) {
	bs, err := json.Marshal(r.Card)
	if err != nil {
		return nil, err
	}
	m := map[string]interface{}{}
	if err = json.Unmarshal(bs, &m); err != nil {
		return nil, err
	}
	m["open_ids"] = r.OpenIDs
	return json.Marshal(m)
}

// UpdateMessageDelayReqCardCard ...
type UpdateMessageDelayReqCardCard struct {
}

// updateMessageDelayResp ...
type updateMessageDelayResp struct {
	Code int64                   `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 返回码描述
	Data *UpdateMessageDelayResp `json:"data,omitempty"`
}

// UpdateMessageDelayResp ...
type UpdateMessageDelayResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetOKR - 当前仅支持「飞书OKR 企业版」客户使用本接口。[了解更多](https://okr.feishu.cn/price)
//
// 使用tenant_access_token需要额外申请权限以应用身份访问OKR信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/okr/batch_get
func (r *OKRService) BatchGetOKR(ctx context.Context, request *BatchGetOKRReq, options ...MethodOptionFunc) (*BatchGetOKRResp, *Response, error) {
	if r.cli.mock.mockOKRBatchGetOKR != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] OKR#BatchGetOKR mock enable")
		return r.cli.mock.mockOKRBatchGetOKR(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "OKR",
		API:                   "BatchGetOKR",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/okr/v1/okrs/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchGetOKRResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockOKRBatchGetOKR mock OKRBatchGetOKR method
func (r *Mock) MockOKRBatchGetOKR(f func(ctx context.Context, request *BatchGetOKRReq, options ...MethodOptionFunc) (*BatchGetOKRResp, *Response, error)) {
	r.mockOKRBatchGetOKR = f
}

// UnMockOKRBatchGetOKR un-mock OKRBatchGetOKR method
func (r *Mock) UnMockOKRBatchGetOKR() {
	r.mockOKRBatchGetOKR = nil
}

// BatchGetOKRReq ...
type BatchGetOKRReq struct {
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	OKRIDs     []string `query:"okr_ids" json:"-"`      // OKR ID 列表，最多10个, 示例值：7043693679567028244, 最大长度：`10`
	Lang       *string  `query:"lang" json:"-"`         // 请求OKR的语言版本（比如@的人名），lang=en_us/zh_cn，请求 Query中, 示例值："zh_cn", 默认值: `zh_cn`
}

// batchGetOKRResp ...
type batchGetOKRResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetOKRResp `json:"data,omitempty"`
}

// BatchGetOKRResp ...
type BatchGetOKRResp struct {
	OKRList []*BatchGetOKRRespOKR `json:"okr_list,omitempty"` // OKR 列表
}

// BatchGetOKRRespOKR ...
type BatchGetOKRRespOKR struct {
	ID            string                         `json:"id,omitempty"`             // id
	Permission    int64                          `json:"permission,omitempty"`     // OKR的访问权限, 可选值有: `0`：此时OKR只返回id, `1`：返回OKR的其他具体字段
	PeriodID      string                         `json:"period_id,omitempty"`      // period_id
	Name          string                         `json:"name,omitempty"`           // 名称
	ObjectiveList []*BatchGetOKRRespOKRObjective `json:"objective_list,omitempty"` // Objective列表
	ConfirmStatus int64                          `json:"confirm_status,omitempty"` // OKR确认状态, 可选值有: `0`：未填写 OKR, `1`：已填写未发起确认, `2`：已发起待上级确认, `3`：上级未通过, `4`：上级已通过
}

// BatchGetOKRRespOKRObjective ...
type BatchGetOKRRespOKRObjective struct {
	ID                                 string                                          `json:"id,omitempty"`                                      // Objective ID
	Permission                         int64                                           `json:"permission,omitempty"`                              // 权限, 可选值有: `0`：此时OKR只返回id, `1`：返回OKR的其他具体字段
	Content                            string                                          `json:"content,omitempty"`                                 // Objective 内容
	ProgressReport                     string                                          `json:"progress_report,omitempty"`                         // Objective 进度记录内容
	Score                              int64                                           `json:"score,omitempty"`                                   // Objective 分数（0 - 100）
	Weight                             float64                                         `json:"weight,omitempty"`                                  // Objective的权重（0 - 100）
	ProgressRate                       *BatchGetOKRRespOKRObjectiveProgressRate        `json:"progress_rate,omitempty"`                           // Objective进度
	KrList                             []*BatchGetOKRRespOKRObjectiveKr                `json:"kr_list,omitempty"`                                 // Objective KeyResult 列表
	AlignedObjectiveList               []*BatchGetOKRRespOKRObjectiveAlignedObjective  `json:"aligned_objective_list,omitempty"`                  // 对齐到该Objective的Objective列表
	AligningObjectiveList              []*BatchGetOKRRespOKRObjectiveAligningObjective `json:"aligning_objective_list,omitempty"`                 // 该Objective对齐到的Objective列表
	ProgressRecordList                 []*BatchGetOKRRespOKRObjectiveProgressRecord    `json:"progress_record_list,omitempty"`                    // 该Objective的进度列表
	ProgressRatePercentLastUpdatedTime string                                          `json:"progress_rate_percent_last_updated_time,omitempty"` // 最后一次进度百分比更新时间 毫秒
	ProgressRateStatusLastUpdatedTime  string                                          `json:"progress_rate_status_last_updated_time,omitempty"`  // 最后一次状态更新时间 毫秒
	ProgressRecordLastUpdatedTime      string                                          `json:"progress_record_last_updated_time,omitempty"`       // 最后一次在侧边栏新增或者编辑进展的时间 毫秒
	ProgressReportLastUpdatedTime      string                                          `json:"progress_report_last_updated_time,omitempty"`       // 最后一次编辑进展记录/备注的时间 毫秒
	ScoreLastUpdatedTime               string                                          `json:"score_last_updated_time,omitempty"`                 // 最后一次打分更新时间 毫秒
	Deadline                           string                                          `json:"deadline,omitempty"`                                // 截止时间 毫秒
	MentionedUserList                  []*BatchGetOKRRespOKRObjectiveMentionedUser     `json:"mentioned_user_list,omitempty"`                     // 该Objective提到的人员列表
}

// BatchGetOKRRespOKRObjectiveProgressRate ...
type BatchGetOKRRespOKRObjectiveProgressRate struct {
	Percent int64  `json:"percent,omitempty"` // Objective 进度百分比 >= 0
	Status  string `json:"status,omitempty"`  // Objective 进度状态, 可选值有: `-1`：未更新, `0`：正常, `1`：有风险, `2`：已延期
}

// BatchGetOKRRespOKRObjectiveKr ...
type BatchGetOKRRespOKRObjectiveKr struct {
	ID                                 string                                         `json:"id,omitempty"`                                      // Key Result ID
	Content                            string                                         `json:"content,omitempty"`                                 // KeyResult 内容
	Score                              int64                                          `json:"score,omitempty"`                                   // KeyResult打分（0 - 100）
	Weight                             int64                                          `json:"weight,omitempty"`                                  // KeyResult权重（0 - 100）（废弃）
	KrWeight                           float64                                        `json:"kr_weight,omitempty"`                               // KeyResult的权重（0 - 100）
	ProgressRate                       *BatchGetOKRRespOKRObjectiveKrProgressRate     `json:"progress_rate,omitempty"`                           // KR进度
	ProgressRecordList                 []*BatchGetOKRRespOKRObjectiveKrProgressRecord `json:"progress_record_list,omitempty"`                    // 该KR的进度列表
	ProgressRatePercentLastUpdatedTime string                                         `json:"progress_rate_percent_last_updated_time,omitempty"` // 最后一次进度百分比更新时间 毫秒
	ProgressRateStatusLastUpdatedTime  string                                         `json:"progress_rate_status_last_updated_time,omitempty"`  // 最后一次状态更新时间 毫秒
	ProgressRecordLastUpdatedTime      string                                         `json:"progress_record_last_updated_time,omitempty"`       // 最后一次在侧边栏新增或者编辑进展的时间 毫秒
	ProgressReportLastUpdatedTime      string                                         `json:"progress_report_last_updated_time,omitempty"`       // 最后一次编辑进展记录/备注的时间 毫秒
	ScoreLastUpdatedTime               string                                         `json:"score_last_updated_time,omitempty"`                 // 最后一次打分更新时间 毫秒
	Deadline                           string                                         `json:"deadline,omitempty"`                                // 截止时间 毫秒
	MentionedUserList                  []*BatchGetOKRRespOKRObjectiveKrMentionedUser  `json:"mentioned_user_list,omitempty"`                     // 该Objective提到的人员列表
}

// BatchGetOKRRespOKRObjectiveKrProgressRate ...
type BatchGetOKRRespOKRObjectiveKrProgressRate struct {
	Percent int64  `json:"percent,omitempty"` // Objective 进度百分比 >= 0
	Status  string `json:"status,omitempty"`  // Objective 进度状态, 可选值有: `-1`：未更新, `0`：正常, `1`：有风险, `2`：已延期
}

// BatchGetOKRRespOKRObjectiveKrProgressRecord ...
type BatchGetOKRRespOKRObjectiveKrProgressRecord struct {
	ID string `json:"id,omitempty"` // OKR 进展记录ID
}

// BatchGetOKRRespOKRObjectiveKrMentionedUser ...
type BatchGetOKRRespOKRObjectiveKrMentionedUser struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// BatchGetOKRRespOKRObjectiveAlignedObjective ...
type BatchGetOKRRespOKRObjectiveAlignedObjective struct {
	ID    string                                            `json:"id,omitempty"`     // Objective的ID
	OKRID string                                            `json:"okr_id,omitempty"` // OKR的ID
	Owner *BatchGetOKRRespOKRObjectiveAlignedObjectiveOwner `json:"owner,omitempty"`  // 该Objective的Owner
}

// BatchGetOKRRespOKRObjectiveAlignedObjectiveOwner ...
type BatchGetOKRRespOKRObjectiveAlignedObjectiveOwner struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// BatchGetOKRRespOKRObjectiveAligningObjective ...
type BatchGetOKRRespOKRObjectiveAligningObjective struct {
	ID    string                                             `json:"id,omitempty"`     // Objective的ID
	OKRID string                                             `json:"okr_id,omitempty"` // OKR的ID
	Owner *BatchGetOKRRespOKRObjectiveAligningObjectiveOwner `json:"owner,omitempty"`  // 该Objective的Owner
}

// BatchGetOKRRespOKRObjectiveAligningObjectiveOwner ...
type BatchGetOKRRespOKRObjectiveAligningObjectiveOwner struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// BatchGetOKRRespOKRObjectiveProgressRecord ...
type BatchGetOKRRespOKRObjectiveProgressRecord struct {
	ID string `json:"id,omitempty"` // OKR 进展记录ID
}

// BatchGetOKRRespOKRObjectiveMentionedUser ...
type BatchGetOKRRespOKRObjectiveMentionedUser struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetOKRPeriodList - 当前仅支持「飞书OKR 企业版」客户使用本接口。[了解更多](https://okr.feishu.cn/price)
//
// 使用tenant_access_token需要额外申请权限以应用身份访问OKR信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/period/list
func (r *OKRService) GetOKRPeriodList(ctx context.Context, request *GetOKRPeriodListReq, options ...MethodOptionFunc) (*GetOKRPeriodListResp, *Response, error) {
	if r.cli.mock.mockOKRGetOKRPeriodList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] OKR#GetOKRPeriodList mock enable")
		return r.cli.mock.mockOKRGetOKRPeriodList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "OKR",
		API:                   "GetOKRPeriodList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/okr/v1/periods",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getOKRPeriodListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockOKRGetOKRPeriodList mock OKRGetOKRPeriodList method
func (r *Mock) MockOKRGetOKRPeriodList(f func(ctx context.Context, request *GetOKRPeriodListReq, options ...MethodOptionFunc) (*GetOKRPeriodListResp, *Response, error)) {
	r.mockOKRGetOKRPeriodList = f
}

// UnMockOKRGetOKRPeriodList un-mock OKRGetOKRPeriodList method
func (r *Mock) UnMockOKRGetOKRPeriodList() {
	r.mockOKRGetOKRPeriodList = nil
}

// GetOKRPeriodListReq ...
type GetOKRPeriodListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标志page_token, 示例值："xaasdasdax"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小，默认10, 示例值：10, 默认值: `10`
}

// getOKRPeriodListResp ...
type getOKRPeriodListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetOKRPeriodListResp `json:"data,omitempty"`
}

// GetOKRPeriodListResp ...
type GetOKRPeriodListResp struct {
	PageToken string                      `json:"page_token,omitempty"` // 分页标志
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否有更多
	Items     []*GetOKRPeriodListRespItem `json:"items,omitempty"`      // 数据项
}

// GetOKRPeriodListRespItem ...
type GetOKRPeriodListRespItem struct {
	ID     string `json:"id,omitempty"`      // id
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
	Status int64  `json:"status,omitempty"`  // 启用状态, 可选值有: `0`：正常状态, `1`：暂不处理, `2`：标记失效, `3`：隐藏周期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserOKRList - 当前仅支持「飞书OKR 企业版」客户使用本接口。[了解更多](https://okr.feishu.cn/price)
//
// 使用tenant_access_token需要额外申请权限以应用身份访问OKR信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/user-okr/list
func (r *OKRService) GetUserOKRList(ctx context.Context, request *GetUserOKRListReq, options ...MethodOptionFunc) (*GetUserOKRListResp, *Response, error) {
	if r.cli.mock.mockOKRGetUserOKRList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] OKR#GetUserOKRList mock enable")
		return r.cli.mock.mockOKRGetUserOKRList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "OKR",
		API:                   "GetUserOKRList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/okr/v1/users/:user_id/okrs",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserOKRListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockOKRGetUserOKRList mock OKRGetUserOKRList method
func (r *Mock) MockOKRGetUserOKRList(f func(ctx context.Context, request *GetUserOKRListReq, options ...MethodOptionFunc) (*GetUserOKRListResp, *Response, error)) {
	r.mockOKRGetUserOKRList = f
}

// UnMockOKRGetUserOKRList un-mock OKRGetUserOKRList method
func (r *Mock) UnMockOKRGetUserOKRList() {
	r.mockOKRGetUserOKRList = nil
}

// GetUserOKRListReq ...
type GetUserOKRListReq struct {
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, `people_admin_id`：以people_admin_id来识别用户, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Offset     string   `query:"offset" json:"-"`       // 请求列表的偏移，offset>=0, 示例值："0"
	Limit      string   `query:"limit" json:"-"`        // 列表长度，0-10, 示例值："5"
	Lang       *string  `query:"lang" json:"-"`         // 请求OKR的语言版本（比如@的人名），lang=en_us/zh_cn, 示例值："zh_cn", 默认值: `zh_cn`
	PeriodIDs  []string `query:"period_ids" json:"-"`   // period_id列表，最多10个, 示例值：["6951461264858777132"], 最大长度：`10`
	UserID     string   `path:"user_id" json:"-"`       // 目标用户id, 示例值："ou-asdasdasdasdasd"
}

// getUserOKRListResp ...
type getUserOKRListResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetUserOKRListResp `json:"data,omitempty"`
}

// GetUserOKRListResp ...
type GetUserOKRListResp struct {
	Total   int64                    `json:"total,omitempty"`    // OKR周期总数
	OKRList []*GetUserOKRListRespOKR `json:"okr_list,omitempty"` // OKR 列表
}

// GetUserOKRListRespOKR ...
type GetUserOKRListRespOKR struct {
	ID            string                            `json:"id,omitempty"`             // id
	Permission    int64                             `json:"permission,omitempty"`     // OKR的访问权限, 可选值有: `0`：此时OKR只返回id, `1`：返回OKR的其他具体字段
	PeriodID      string                            `json:"period_id,omitempty"`      // period_id
	Name          string                            `json:"name,omitempty"`           // 名称
	ObjectiveList []*GetUserOKRListRespOKRObjective `json:"objective_list,omitempty"` // Objective列表
	ConfirmStatus int64                             `json:"confirm_status,omitempty"` // OKR确认状态, 可选值有: `0`：未填写 OKR, `1`：已填写未发起确认, `2`：已发起待上级确认, `3`：上级未通过, `4`：上级已通过
}

// GetUserOKRListRespOKRObjective ...
type GetUserOKRListRespOKRObjective struct {
	ID                                 string                                             `json:"id,omitempty"`                                      // Objective ID
	Permission                         int64                                              `json:"permission,omitempty"`                              // 权限, 可选值有: `0`：此时OKR只返回id, `1`：返回OKR的其他具体字段
	Content                            string                                             `json:"content,omitempty"`                                 // Objective 内容
	ProgressReport                     string                                             `json:"progress_report,omitempty"`                         // Objective 进度记录内容
	Score                              int64                                              `json:"score,omitempty"`                                   // Objective 分数（0 - 100）
	Weight                             float64                                            `json:"weight,omitempty"`                                  // Objective的权重（0 - 100）
	ProgressRate                       *GetUserOKRListRespOKRObjectiveProgressRate        `json:"progress_rate,omitempty"`                           // Objective进度
	KrList                             []*GetUserOKRListRespOKRObjectiveKr                `json:"kr_list,omitempty"`                                 // Objective KeyResult 列表
	AlignedObjectiveList               []*GetUserOKRListRespOKRObjectiveAlignedObjective  `json:"aligned_objective_list,omitempty"`                  // 对齐到该Objective的Objective列表
	AligningObjectiveList              []*GetUserOKRListRespOKRObjectiveAligningObjective `json:"aligning_objective_list,omitempty"`                 // 该Objective对齐到的Objective列表
	ProgressRecordList                 []*GetUserOKRListRespOKRObjectiveProgressRecord    `json:"progress_record_list,omitempty"`                    // 该Objective的进度列表
	ProgressRatePercentLastUpdatedTime string                                             `json:"progress_rate_percent_last_updated_time,omitempty"` // 最后一次进度百分比更新时间 毫秒
	ProgressRateStatusLastUpdatedTime  string                                             `json:"progress_rate_status_last_updated_time,omitempty"`  // 最后一次状态更新时间 毫秒
	ProgressRecordLastUpdatedTime      string                                             `json:"progress_record_last_updated_time,omitempty"`       // 最后一次在侧边栏新增或者编辑进展的时间 毫秒
	ProgressReportLastUpdatedTime      string                                             `json:"progress_report_last_updated_time,omitempty"`       // 最后一次编辑进展记录/备注的时间 毫秒
	ScoreLastUpdatedTime               string                                             `json:"score_last_updated_time,omitempty"`                 // 最后一次打分更新时间 毫秒
	Deadline                           string                                             `json:"deadline,omitempty"`                                // 截止时间 毫秒
	MentionedUserList                  []*GetUserOKRListRespOKRObjectiveMentionedUser     `json:"mentioned_user_list,omitempty"`                     // 该Objective提到的人员列表
}

// GetUserOKRListRespOKRObjectiveProgressRate ...
type GetUserOKRListRespOKRObjectiveProgressRate struct {
	Percent int64  `json:"percent,omitempty"` // Objective 进度百分比 >= 0
	Status  string `json:"status,omitempty"`  // Objective 进度状态, 可选值有: `-1`：未更新, `0`：正常, `1`：有风险, `2`：已延期
}

// GetUserOKRListRespOKRObjectiveKr ...
type GetUserOKRListRespOKRObjectiveKr struct {
	ID                                 string                                            `json:"id,omitempty"`                                      // Key Result ID
	Content                            string                                            `json:"content,omitempty"`                                 // KeyResult 内容
	Score                              int64                                             `json:"score,omitempty"`                                   // KeyResult打分（0 - 100）
	Weight                             int64                                             `json:"weight,omitempty"`                                  // KeyResult权重（0 - 100）（废弃）
	KrWeight                           float64                                           `json:"kr_weight,omitempty"`                               // KeyResult的权重（0 - 100）
	ProgressRate                       *GetUserOKRListRespOKRObjectiveKrProgressRate     `json:"progress_rate,omitempty"`                           // KR进度
	ProgressRecordList                 []*GetUserOKRListRespOKRObjectiveKrProgressRecord `json:"progress_record_list,omitempty"`                    // 该KR的进度列表
	ProgressRatePercentLastUpdatedTime string                                            `json:"progress_rate_percent_last_updated_time,omitempty"` // 最后一次进度百分比更新时间 毫秒
	ProgressRateStatusLastUpdatedTime  string                                            `json:"progress_rate_status_last_updated_time,omitempty"`  // 最后一次状态更新时间 毫秒
	ProgressRecordLastUpdatedTime      string                                            `json:"progress_record_last_updated_time,omitempty"`       // 最后一次在侧边栏新增或者编辑进展的时间 毫秒
	ProgressReportLastUpdatedTime      string                                            `json:"progress_report_last_updated_time,omitempty"`       // 最后一次编辑进展记录/备注的时间 毫秒
	ScoreLastUpdatedTime               string                                            `json:"score_last_updated_time,omitempty"`                 // 最后一次打分更新时间 毫秒
	Deadline                           string                                            `json:"deadline,omitempty"`                                // 截止时间 毫秒
	MentionedUserList                  []*GetUserOKRListRespOKRObjectiveKrMentionedUser  `json:"mentioned_user_list,omitempty"`                     // 该Objective提到的人员列表
}

// GetUserOKRListRespOKRObjectiveKrProgressRate ...
type GetUserOKRListRespOKRObjectiveKrProgressRate struct {
	Percent int64  `json:"percent,omitempty"` // Objective 进度百分比 >= 0
	Status  string `json:"status,omitempty"`  // Objective 进度状态, 可选值有: `-1`：未更新, `0`：正常, `1`：有风险, `2`：已延期
}

// GetUserOKRListRespOKRObjectiveKrProgressRecord ...
type GetUserOKRListRespOKRObjectiveKrProgressRecord struct {
	ID string `json:"id,omitempty"` // OKR 进展记录ID
}

// GetUserOKRListRespOKRObjectiveKrMentionedUser ...
type GetUserOKRListRespOKRObjectiveKrMentionedUser struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// GetUserOKRListRespOKRObjectiveAlignedObjective ...
type GetUserOKRListRespOKRObjectiveAlignedObjective struct {
	ID    string                                               `json:"id,omitempty"`     // Objective的ID
	OKRID string                                               `json:"okr_id,omitempty"` // OKR的ID
	Owner *GetUserOKRListRespOKRObjectiveAlignedObjectiveOwner `json:"owner,omitempty"`  // 该Objective的Owner
}

// GetUserOKRListRespOKRObjectiveAlignedObjectiveOwner ...
type GetUserOKRListRespOKRObjectiveAlignedObjectiveOwner struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// GetUserOKRListRespOKRObjectiveAligningObjective ...
type GetUserOKRListRespOKRObjectiveAligningObjective struct {
	ID    string                                                `json:"id,omitempty"`     // Objective的ID
	OKRID string                                                `json:"okr_id,omitempty"` // OKR的ID
	Owner *GetUserOKRListRespOKRObjectiveAligningObjectiveOwner `json:"owner,omitempty"`  // 该Objective的Owner
}

// GetUserOKRListRespOKRObjectiveAligningObjectiveOwner ...
type GetUserOKRListRespOKRObjectiveAligningObjectiveOwner struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// GetUserOKRListRespOKRObjectiveProgressRecord ...
type GetUserOKRListRespOKRObjectiveProgressRecord struct {
	ID string `json:"id,omitempty"` // OKR 进展记录ID
}

// GetUserOKRListRespOKRObjectiveMentionedUser ...
type GetUserOKRListRespOKRObjectiveMentionedUser struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
	UserID string `json:"user_id,omitempty"` // 用户的 user_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetPassportSession 该接口用于查询用户的登录信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/passport-v1/session/query
func (r *PassportService) GetPassportSession(ctx context.Context, request *GetPassportSessionReq, options ...MethodOptionFunc) (*GetPassportSessionResp, *Response, error) {
	if r.cli.mock.mockPassportGetPassportSession != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Passport#GetPassportSession mock enable")
		return r.cli.mock.mockPassportGetPassportSession(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Passport",
		API:                   "GetPassportSession",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/passport/v1/sessions/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPassportSessionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockPassportGetPassportSession mock PassportGetPassportSession method
func (r *Mock) MockPassportGetPassportSession(f func(ctx context.Context, request *GetPassportSessionReq, options ...MethodOptionFunc) (*GetPassportSessionResp, *Response, error)) {
	r.mockPassportGetPassportSession = f
}

// UnMockPassportGetPassportSession un-mock PassportGetPassportSession method
func (r *Mock) UnMockPassportGetPassportSession() {
	r.mockPassportGetPassportSession = nil
}

// GetPassportSessionReq ...
type GetPassportSessionReq struct {
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserIDs    []string `json:"user_ids,omitempty"`     // 用户 ID, 示例值：["47f621ff"], 最大长度：`100`
}

// getPassportSessionResp ...
type getPassportSessionResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetPassportSessionResp `json:"data,omitempty"`
}

// GetPassportSessionResp ...
type GetPassportSessionResp struct {
	MaskSessions []*GetPassportSessionRespMaskSession `json:"mask_sessions,omitempty"` // 用户登录信息
}

// GetPassportSessionRespMaskSession ...
type GetPassportSessionRespMaskSession struct {
	CreateTime   string `json:"create_time,omitempty"`   // 创建时间
	TerminalType int64  `json:"terminal_type,omitempty"` // 客户端类型, 可选值有: `0`：未知, `1`：个人电脑, `2`：浏览器, `3`：安卓手机, `4`：Apple手机, `5`：服务端
	UserID       string `json:"user_id,omitempty"`       // 用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSearchDataSource 创建一个数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/create
func (r *SearchService) CreateSearchDataSource(ctx context.Context, request *CreateSearchDataSourceReq, options ...MethodOptionFunc) (*CreateSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchCreateSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#CreateSearchDataSource mock enable")
		return r.cli.mock.mockSearchCreateSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "CreateSearchDataSource",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchCreateSearchDataSource mock SearchCreateSearchDataSource method
func (r *Mock) MockSearchCreateSearchDataSource(f func(ctx context.Context, request *CreateSearchDataSourceReq, options ...MethodOptionFunc) (*CreateSearchDataSourceResp, *Response, error)) {
	r.mockSearchCreateSearchDataSource = f
}

// UnMockSearchCreateSearchDataSource un-mock SearchCreateSearchDataSource method
func (r *Mock) UnMockSearchCreateSearchDataSource() {
	r.mockSearchCreateSearchDataSource = nil
}

// CreateSearchDataSourceReq ...
type CreateSearchDataSourceReq struct {
	Name        string  `json:"name,omitempty"`        // data_source的展示名称, 示例值："客服工单"
	State       *int64  `json:"state,omitempty"`       // 数据源状态，0-未上线，1-已上线, 示例值：0, 可选值有: `0`：未上线, `1`：已上线
	Description *string `json:"description,omitempty"` // 对于数据源的描述, 示例值："搜索客服工单数据"
}

// createSearchDataSourceResp ...
type createSearchDataSourceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateSearchDataSourceResp `json:"data,omitempty"`
}

// CreateSearchDataSourceResp ...
type CreateSearchDataSourceResp struct {
	DataSource *CreateSearchDataSourceRespDataSource `json:"data_source,omitempty"` // 数据源实例
}

// CreateSearchDataSourceRespDataSource ...
type CreateSearchDataSourceRespDataSource struct {
	ID            string `json:"id,omitempty"`              // 数据源的唯一标识
	Name          string `json:"name,omitempty"`            // data_source的展示名称
	State         int64  `json:"state,omitempty"`           // 数据源状态，0-未上线，1-已上线, 可选值有: `0`：未上线, `1`：已上线
	Description   string `json:"description,omitempty"`     // 对于数据源的描述
	CreateTime    string `json:"create_time,omitempty"`     // 创建时间，使用Unix时间戳，单位为“秒”
	UpdateTime    string `json:"update_time,omitempty"`     // 更新时间，使用Unix时间戳，单位为“秒”
	IsExceedQuota bool   `json:"is_exceed_quota,omitempty"` // 是否超限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSearchDataSource 删除一个已存在的数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/delete
func (r *SearchService) DeleteSearchDataSource(ctx context.Context, request *DeleteSearchDataSourceReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchDeleteSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#DeleteSearchDataSource mock enable")
		return r.cli.mock.mockSearchDeleteSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "DeleteSearchDataSource",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchDeleteSearchDataSource mock SearchDeleteSearchDataSource method
func (r *Mock) MockSearchDeleteSearchDataSource(f func(ctx context.Context, request *DeleteSearchDataSourceReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceResp, *Response, error)) {
	r.mockSearchDeleteSearchDataSource = f
}

// UnMockSearchDeleteSearchDataSource un-mock SearchDeleteSearchDataSource method
func (r *Mock) UnMockSearchDeleteSearchDataSource() {
	r.mockSearchDeleteSearchDataSource = nil
}

// DeleteSearchDataSourceReq ...
type DeleteSearchDataSourceReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的唯一标识, 示例值："6953903108179099667"
}

// deleteSearchDataSourceResp ...
type deleteSearchDataSourceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSearchDataSourceResp `json:"data,omitempty"`
}

// DeleteSearchDataSourceResp ...
type DeleteSearchDataSourceResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSearchDataSource 获取已经创建的数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/get
func (r *SearchService) GetSearchDataSource(ctx context.Context, request *GetSearchDataSourceReq, options ...MethodOptionFunc) (*GetSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchGetSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#GetSearchDataSource mock enable")
		return r.cli.mock.mockSearchGetSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "GetSearchDataSource",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchGetSearchDataSource mock SearchGetSearchDataSource method
func (r *Mock) MockSearchGetSearchDataSource(f func(ctx context.Context, request *GetSearchDataSourceReq, options ...MethodOptionFunc) (*GetSearchDataSourceResp, *Response, error)) {
	r.mockSearchGetSearchDataSource = f
}

// UnMockSearchGetSearchDataSource un-mock SearchGetSearchDataSource method
func (r *Mock) UnMockSearchGetSearchDataSource() {
	r.mockSearchGetSearchDataSource = nil
}

// GetSearchDataSourceReq ...
type GetSearchDataSourceReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的唯一标识, 示例值："service_ticket"
}

// getSearchDataSourceResp ...
type getSearchDataSourceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetSearchDataSourceResp `json:"data,omitempty"`
}

// GetSearchDataSourceResp ...
type GetSearchDataSourceResp struct {
	DataSource *GetSearchDataSourceRespDataSource `json:"data_source,omitempty"` // 数据源实例
}

// GetSearchDataSourceRespDataSource ...
type GetSearchDataSourceRespDataSource struct {
	ID            string `json:"id,omitempty"`              // 数据源的唯一标识
	Name          string `json:"name,omitempty"`            // data_source的展示名称
	State         int64  `json:"state,omitempty"`           // 数据源状态，0-未上线，1-已上线, 可选值有: `0`：未上线, `1`：已上线
	Description   string `json:"description,omitempty"`     // 对于数据源的描述
	CreateTime    string `json:"create_time,omitempty"`     // 创建时间，使用Unix时间戳，单位为“秒”
	UpdateTime    string `json:"update_time,omitempty"`     // 更新时间，使用Unix时间戳，单位为“秒”
	IsExceedQuota bool   `json:"is_exceed_quota,omitempty"` // 是否超限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSearchDataSourceItem 索引一条数据记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/create
func (r *SearchService) CreateSearchDataSourceItem(ctx context.Context, request *CreateSearchDataSourceItemReq, options ...MethodOptionFunc) (*CreateSearchDataSourceItemResp, *Response, error) {
	if r.cli.mock.mockSearchCreateSearchDataSourceItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#CreateSearchDataSourceItem mock enable")
		return r.cli.mock.mockSearchCreateSearchDataSourceItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "CreateSearchDataSourceItem",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id/items",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createSearchDataSourceItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchCreateSearchDataSourceItem mock SearchCreateSearchDataSourceItem method
func (r *Mock) MockSearchCreateSearchDataSourceItem(f func(ctx context.Context, request *CreateSearchDataSourceItemReq, options ...MethodOptionFunc) (*CreateSearchDataSourceItemResp, *Response, error)) {
	r.mockSearchCreateSearchDataSourceItem = f
}

// UnMockSearchCreateSearchDataSourceItem un-mock SearchCreateSearchDataSourceItem method
func (r *Mock) UnMockSearchCreateSearchDataSourceItem() {
	r.mockSearchCreateSearchDataSourceItem = nil
}

// CreateSearchDataSourceItemReq ...
type CreateSearchDataSourceItemReq struct {
	DataSourceID   string                                 `path:"data_source_id" json:"-"`   // 数据源的ID, 示例值："service_ticket"
	ID             string                                 `json:"id,omitempty"`              // item 在 datasource 中的唯一标识, 示例值："01010111"
	ACL            []*CreateSearchDataSourceItemReqACL    `json:"acl,omitempty"`             // item 的访问权限控制
	Metadata       *CreateSearchDataSourceItemReqMetadata `json:"metadata,omitempty"`        // item 的元信息
	StructuredData string                                 `json:"structured_data,omitempty"` // 结构化数据（以 json 字符串传递），这些字段是搜索结果的展示字段（title字段无须在此另外指定）；目前支持的key为：, summary：搜索结果的摘要；, icon_url：搜索结果的icon地址；, footer：搜索结果的脚注, 示例值："{\"key\":\"value\"}"
	Content        *CreateSearchDataSourceItemReqContent  `json:"content,omitempty"`         // 非结构化数据，如文档文本，飞书搜索会用来做召回
}

// CreateSearchDataSourceItemReqACL ...
type CreateSearchDataSourceItemReqACL struct {
	Access *string `json:"access,omitempty"` // 权限类型，优先级：Deny > Allow。默认为全员不可见，即 deny。, 示例值："allow", 可选值有: `allow`：允许访问, `deny`：禁止访问
	Value  *string `json:"value,omitempty"`  // 设置的权限值，例如 userID 、groupID，依赖 type 描述。,**注**：在 type 为 user 且 access 为 allow 时，可填 "everyone" 来表示该数据项对全员可见。, 示例值："6629468020840333501"
	Type   *string `json:"type,omitempty"`   // 权限值类型, 示例值："user", 可选值有: `user`：访问权限控制中指定用户可以访问或拒绝访问该条数据, `group`：访问权限控制中指定用户组可以访问或拒绝访问该条数据
}

// CreateSearchDataSourceItemReqMetadata ...
type CreateSearchDataSourceItemReqMetadata struct {
	Title      string `json:"title,omitempty"`       // 该条数据记录对应的标题, 示例值："工单：无法创建文章"
	SourceURL  string `json:"source_url,omitempty"`  // 该条数据记录对应的跳转url, 示例值："http://www.abc.com.cn"
	CreateTime *int64 `json:"create_time,omitempty"` // 数据项的创建时间。Unix 时间，单位为秒, 示例值：1618831236
	UpdateTime *int64 `json:"update_time,omitempty"` // 数据项的更新时间。Unix 时间，单位为秒, 示例值：1618831236
}

// CreateSearchDataSourceItemReqContent ...
type CreateSearchDataSourceItemReqContent struct {
	Format      *string `json:"format,omitempty"`       // 内容的格式, 示例值："html", 可选值有: `html`：html格式, `plaintext`：纯文本格式
	ContentData *string `json:"content_data,omitempty"` // 全文数据, 示例值："这是一个很长的文本"
}

// createSearchDataSourceItemResp ...
type createSearchDataSourceItemResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateSearchDataSourceItemResp `json:"data,omitempty"`
}

// CreateSearchDataSourceItemResp ...
type CreateSearchDataSourceItemResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSearchDataSourceItem 删除数据记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/delete
func (r *SearchService) DeleteSearchDataSourceItem(ctx context.Context, request *DeleteSearchDataSourceItemReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceItemResp, *Response, error) {
	if r.cli.mock.mockSearchDeleteSearchDataSourceItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#DeleteSearchDataSourceItem mock enable")
		return r.cli.mock.mockSearchDeleteSearchDataSourceItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "DeleteSearchDataSourceItem",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id/items/:item_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteSearchDataSourceItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchDeleteSearchDataSourceItem mock SearchDeleteSearchDataSourceItem method
func (r *Mock) MockSearchDeleteSearchDataSourceItem(f func(ctx context.Context, request *DeleteSearchDataSourceItemReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceItemResp, *Response, error)) {
	r.mockSearchDeleteSearchDataSourceItem = f
}

// UnMockSearchDeleteSearchDataSourceItem un-mock SearchDeleteSearchDataSourceItem method
func (r *Mock) UnMockSearchDeleteSearchDataSourceItem() {
	r.mockSearchDeleteSearchDataSourceItem = nil
}

// DeleteSearchDataSourceItemReq ...
type DeleteSearchDataSourceItemReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的ID, 示例值："service_ticket"
	ItemID       string `path:"item_id" json:"-"`        // 数据记录的ID, 示例值："01010111"
}

// deleteSearchDataSourceItemResp ...
type deleteSearchDataSourceItemResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSearchDataSourceItemResp `json:"data,omitempty"`
}

// DeleteSearchDataSourceItemResp ...
type DeleteSearchDataSourceItemResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSearchDataSourceItem 获取单个数据记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/get
func (r *SearchService) GetSearchDataSourceItem(ctx context.Context, request *GetSearchDataSourceItemReq, options ...MethodOptionFunc) (*GetSearchDataSourceItemResp, *Response, error) {
	if r.cli.mock.mockSearchGetSearchDataSourceItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#GetSearchDataSourceItem mock enable")
		return r.cli.mock.mockSearchGetSearchDataSourceItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "GetSearchDataSourceItem",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id/items/:item_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getSearchDataSourceItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchGetSearchDataSourceItem mock SearchGetSearchDataSourceItem method
func (r *Mock) MockSearchGetSearchDataSourceItem(f func(ctx context.Context, request *GetSearchDataSourceItemReq, options ...MethodOptionFunc) (*GetSearchDataSourceItemResp, *Response, error)) {
	r.mockSearchGetSearchDataSourceItem = f
}

// UnMockSearchGetSearchDataSourceItem un-mock SearchGetSearchDataSourceItem method
func (r *Mock) UnMockSearchGetSearchDataSourceItem() {
	r.mockSearchGetSearchDataSourceItem = nil
}

// GetSearchDataSourceItemReq ...
type GetSearchDataSourceItemReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的id, 示例值："service_ticket"
	ItemID       string `path:"item_id" json:"-"`        // 数据记录的唯一标识, 示例值："01010111"
}

// getSearchDataSourceItemResp ...
type getSearchDataSourceItemResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetSearchDataSourceItemResp `json:"data,omitempty"`
}

// GetSearchDataSourceItemResp ...
type GetSearchDataSourceItemResp struct {
	Item *GetSearchDataSourceItemRespItem `json:"item,omitempty"` // 数据项实例
}

// GetSearchDataSourceItemRespItem ...
type GetSearchDataSourceItemRespItem struct {
	ID             string                                   `json:"id,omitempty"`              // item 在 datasource 中的唯一标识
	ACL            []*GetSearchDataSourceItemRespItemACL    `json:"acl,omitempty"`             // item 的访问权限控制
	Metadata       *GetSearchDataSourceItemRespItemMetadata `json:"metadata,omitempty"`        // item 的元信息
	StructuredData string                                   `json:"structured_data,omitempty"` // 结构化数据（以 json 字符串传递），这些字段是搜索结果的展示字段（title字段无须在此另外指定）；目前支持的key为：, summary：搜索结果的摘要；, icon_url：搜索结果的icon地址；, footer：搜索结果的脚注
	Content        *GetSearchDataSourceItemRespItemContent  `json:"content,omitempty"`         // 非结构化数据，如文档文本，飞书搜索会用来做召回
}

// GetSearchDataSourceItemRespItemACL ...
type GetSearchDataSourceItemRespItemACL struct {
	Access string `json:"access,omitempty"` // 权限类型，优先级：Deny > Allow。默认为全员不可见，即 deny。, 可选值有: `allow`：允许访问, `deny`：禁止访问
	Value  string `json:"value,omitempty"`  // 设置的权限值，例如 userID 、groupID，依赖 type 描述。,**注**：在 type 为 user 且 access 为 allow 时，可填 "everyone" 来表示该数据项对全员可见。
	Type   string `json:"type,omitempty"`   // 权限值类型, 可选值有: `user`：访问权限控制中指定用户可以访问或拒绝访问该条数据, `group`：访问权限控制中指定用户组可以访问或拒绝访问该条数据
}

// GetSearchDataSourceItemRespItemMetadata ...
type GetSearchDataSourceItemRespItemMetadata struct {
	Title      string `json:"title,omitempty"`       // 该条数据记录对应的标题
	SourceURL  string `json:"source_url,omitempty"`  // 该条数据记录对应的跳转url
	CreateTime int64  `json:"create_time,omitempty"` // 数据项的创建时间。Unix 时间，单位为秒
	UpdateTime int64  `json:"update_time,omitempty"` // 数据项的更新时间。Unix 时间，单位为秒
}

// GetSearchDataSourceItemRespItemContent ...
type GetSearchDataSourceItemRespItemContent struct {
	Format      string `json:"format,omitempty"`       // 内容的格式, 可选值有: `html`：html格式, `plaintext`：纯文本格式
	ContentData string `json:"content_data,omitempty"` // 全文数据
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSearchDataSourceList 获取创建的所有数据源信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/list
func (r *SearchService) GetSearchDataSourceList(ctx context.Context, request *GetSearchDataSourceListReq, options ...MethodOptionFunc) (*GetSearchDataSourceListResp, *Response, error) {
	if r.cli.mock.mockSearchGetSearchDataSourceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#GetSearchDataSourceList mock enable")
		return r.cli.mock.mockSearchGetSearchDataSourceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "GetSearchDataSourceList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getSearchDataSourceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchGetSearchDataSourceList mock SearchGetSearchDataSourceList method
func (r *Mock) MockSearchGetSearchDataSourceList(f func(ctx context.Context, request *GetSearchDataSourceListReq, options ...MethodOptionFunc) (*GetSearchDataSourceListResp, *Response, error)) {
	r.mockSearchGetSearchDataSourceList = f
}

// UnMockSearchGetSearchDataSourceList un-mock SearchGetSearchDataSourceList method
func (r *Mock) UnMockSearchGetSearchDataSourceList() {
	r.mockSearchGetSearchDataSourceList = nil
}

// GetSearchDataSourceListReq ...
type GetSearchDataSourceListReq struct {
	View      *int64  `query:"view" json:"-"`       // 回包数据格式，0-全量数据；1-摘要数据。,**注**：摘要数据仅包含"id"，"name"，"state"。, 示例值：0, 可选值有: `0`：全量数据, `1`：摘要数据
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："PxZFma9OIRhdBlT/dOYNiu2Ro8F2WAhcby7OhOijfljZ"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
}

// getSearchDataSourceListResp ...
type getSearchDataSourceListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetSearchDataSourceListResp `json:"data,omitempty"`
}

// GetSearchDataSourceListResp ...
type GetSearchDataSourceListResp struct {
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetSearchDataSourceListRespItem `json:"items,omitempty"`      // 数据源中的数据记录
}

// GetSearchDataSourceListRespItem ...
type GetSearchDataSourceListRespItem struct {
	ID            string `json:"id,omitempty"`              // 数据源的唯一标识
	Name          string `json:"name,omitempty"`            // data_source的展示名称
	State         int64  `json:"state,omitempty"`           // 数据源状态，0-未上线，1-已上线, 可选值有: `0`：未上线, `1`：已上线
	Description   string `json:"description,omitempty"`     // 对于数据源的描述
	CreateTime    string `json:"create_time,omitempty"`     // 创建时间，使用Unix时间戳，单位为“秒”
	UpdateTime    string `json:"update_time,omitempty"`     // 更新时间，使用Unix时间戳，单位为“秒”
	IsExceedQuota bool   `json:"is_exceed_quota,omitempty"` // 是否超限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSearchDataSource 更新一个已经存在的数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/patch
func (r *SearchService) UpdateSearchDataSource(ctx context.Context, request *UpdateSearchDataSourceReq, options ...MethodOptionFunc) (*UpdateSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchUpdateSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#UpdateSearchDataSource mock enable")
		return r.cli.mock.mockSearchUpdateSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "UpdateSearchDataSource",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchUpdateSearchDataSource mock SearchUpdateSearchDataSource method
func (r *Mock) MockSearchUpdateSearchDataSource(f func(ctx context.Context, request *UpdateSearchDataSourceReq, options ...MethodOptionFunc) (*UpdateSearchDataSourceResp, *Response, error)) {
	r.mockSearchUpdateSearchDataSource = f
}

// UnMockSearchUpdateSearchDataSource un-mock SearchUpdateSearchDataSource method
func (r *Mock) UnMockSearchUpdateSearchDataSource() {
	r.mockSearchUpdateSearchDataSource = nil
}

// UpdateSearchDataSourceReq ...
type UpdateSearchDataSourceReq struct {
	DataSourceID string  `path:"data_source_id" json:"-"` // 数据源的唯一标识, 示例值："service_ticket"
	Name         *string `json:"name,omitempty"`          // 数据源的展示名称, 示例值："客服工单"
	State        *int64  `json:"state,omitempty"`         // 数据源状态，0-未上线，1-已上线, 示例值：0, 可选值有: `0`：未上线, `1`：已上线
	Description  *string `json:"description,omitempty"`   // 对于数据源的描述, 示例值："搜索客服工单"
}

// updateSearchDataSourceResp ...
type updateSearchDataSourceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSearchDataSourceResp `json:"data,omitempty"`
}

// UpdateSearchDataSourceResp ...
type UpdateSearchDataSourceResp struct {
	DataSource *UpdateSearchDataSourceRespDataSource `json:"data_source,omitempty"` // 数据源
}

// UpdateSearchDataSourceRespDataSource ...
type UpdateSearchDataSourceRespDataSource struct {
	ID            string `json:"id,omitempty"`              // 数据源的唯一标识
	Name          string `json:"name,omitempty"`            // data_source的展示名称
	State         int64  `json:"state,omitempty"`           // 数据源状态，0-未上线，1-已上线, 可选值有: `0`：未上线, `1`：已上线
	Description   string `json:"description,omitempty"`     // 对于数据源的描述
	CreateTime    string `json:"create_time,omitempty"`     // 创建时间，使用Unix时间戳，单位为“秒”
	UpdateTime    string `json:"update_time,omitempty"`     // 更新时间，使用Unix时间戳，单位为“秒”
	IsExceedQuota bool   `json:"is_exceed_quota,omitempty"` // 是否超限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskCollaborator 该接口用于新增任务执行者，一个任务最多添加50个执行者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/create
func (r *TaskService) CreateTaskCollaborator(ctx context.Context, request *CreateTaskCollaboratorReq, options ...MethodOptionFunc) (*CreateTaskCollaboratorResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskCollaborator != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskCollaborator mock enable")
		return r.cli.mock.mockTaskCreateTaskCollaborator(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskCollaborator",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/collaborators",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskCollaboratorResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskCreateTaskCollaborator mock TaskCreateTaskCollaborator method
func (r *Mock) MockTaskCreateTaskCollaborator(f func(ctx context.Context, request *CreateTaskCollaboratorReq, options ...MethodOptionFunc) (*CreateTaskCollaboratorResp, *Response, error)) {
	r.mockTaskCreateTaskCollaborator = f
}

// UnMockTaskCreateTaskCollaborator un-mock TaskCreateTaskCollaborator method
func (r *Mock) UnMockTaskCreateTaskCollaborator() {
	r.mockTaskCreateTaskCollaborator = nil
}

// CreateTaskCollaboratorReq ...
type CreateTaskCollaboratorReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	ID         string  `json:"id,omitempty"`           // 任务协作者的 ID, 示例值："ou_99e1a581b36ecc4862cbfbce473f1234"
}

// createTaskCollaboratorResp ...
type createTaskCollaboratorResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskCollaboratorResp `json:"data,omitempty"`
}

// CreateTaskCollaboratorResp ...
type CreateTaskCollaboratorResp struct {
	Collaborator *CreateTaskCollaboratorRespCollaborator `json:"collaborator,omitempty"` // 返回创建成功后的任务协作者
}

// CreateTaskCollaboratorRespCollaborator ...
type CreateTaskCollaboratorRespCollaborator struct {
	ID string `json:"id,omitempty"` // 任务协作者的 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTaskCollaborator 该接口用于删除任务执行者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/delete
func (r *TaskService) DeleteTaskCollaborator(ctx context.Context, request *DeleteTaskCollaboratorReq, options ...MethodOptionFunc) (*DeleteTaskCollaboratorResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskCollaborator != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskCollaborator mock enable")
		return r.cli.mock.mockTaskDeleteTaskCollaborator(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskCollaborator",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/collaborators/:collaborator_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskCollaboratorResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskDeleteTaskCollaborator mock TaskDeleteTaskCollaborator method
func (r *Mock) MockTaskDeleteTaskCollaborator(f func(ctx context.Context, request *DeleteTaskCollaboratorReq, options ...MethodOptionFunc) (*DeleteTaskCollaboratorResp, *Response, error)) {
	r.mockTaskDeleteTaskCollaborator = f
}

// UnMockTaskDeleteTaskCollaborator un-mock TaskDeleteTaskCollaborator method
func (r *Mock) UnMockTaskDeleteTaskCollaborator() {
	r.mockTaskDeleteTaskCollaborator = nil
}

// DeleteTaskCollaboratorReq ...
type DeleteTaskCollaboratorReq struct {
	TaskID         string `path:"task_id" json:"-"`         // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CollaboratorID string `path:"collaborator_id" json:"-"` // 任务协作者 ID（Open ID）, 示例值："ou_99e1a581b36ecc4862cbfbce123f346a"
}

// deleteTaskCollaboratorResp ...
type deleteTaskCollaboratorResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskCollaboratorResp `json:"data,omitempty"`
}

// DeleteTaskCollaboratorResp ...
type DeleteTaskCollaboratorResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskCollaboratorList 该接口用于查询任务执行者列表，支持分页，最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/list
func (r *TaskService) GetTaskCollaboratorList(ctx context.Context, request *GetTaskCollaboratorListReq, options ...MethodOptionFunc) (*GetTaskCollaboratorListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskCollaboratorList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskCollaboratorList mock enable")
		return r.cli.mock.mockTaskGetTaskCollaboratorList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskCollaboratorList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/collaborators",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskCollaboratorListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskCollaboratorList mock TaskGetTaskCollaboratorList method
func (r *Mock) MockTaskGetTaskCollaboratorList(f func(ctx context.Context, request *GetTaskCollaboratorListReq, options ...MethodOptionFunc) (*GetTaskCollaboratorListResp, *Response, error)) {
	r.mockTaskGetTaskCollaboratorList = f
}

// UnMockTaskGetTaskCollaboratorList un-mock TaskGetTaskCollaboratorList method
func (r *Mock) UnMockTaskGetTaskCollaboratorList() {
	r.mockTaskGetTaskCollaboratorList = nil
}

// GetTaskCollaboratorListReq ...
type GetTaskCollaboratorListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：50, 最大值：`50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："「上次返回的page_token」"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："0d38e26e-190a-49e9-93a2-35067763ed1f"
}

// getTaskCollaboratorListResp ...
type getTaskCollaboratorListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskCollaboratorListResp `json:"data,omitempty"`
}

// GetTaskCollaboratorListResp ...
type GetTaskCollaboratorListResp struct {
	Items     []*GetTaskCollaboratorListRespItem `json:"items,omitempty"`      // 返回的协作者列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskCollaboratorListRespItem ...
type GetTaskCollaboratorListRespItem struct {
	ID string `json:"id,omitempty"` // 任务协作者的 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskComment 该接口用于创建和回复任务的评论。当parent_id字段为0时，为创建评论；当parent_id不为0时，为回复某条评论
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/create
func (r *TaskService) CreateTaskComment(ctx context.Context, request *CreateTaskCommentReq, options ...MethodOptionFunc) (*CreateTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskComment mock enable")
		return r.cli.mock.mockTaskCreateTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskComment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskCreateTaskComment mock TaskCreateTaskComment method
func (r *Mock) MockTaskCreateTaskComment(f func(ctx context.Context, request *CreateTaskCommentReq, options ...MethodOptionFunc) (*CreateTaskCommentResp, *Response, error)) {
	r.mockTaskCreateTaskComment = f
}

// UnMockTaskCreateTaskComment un-mock TaskCreateTaskComment method
func (r *Mock) UnMockTaskCreateTaskComment() {
	r.mockTaskCreateTaskComment = nil
}

// CreateTaskCommentReq ...
type CreateTaskCommentReq struct {
	TaskID   string  `path:"task_id" json:"-"`    // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	Content  *string `json:"content,omitempty"`   // 评论内容, 示例值："举杯邀明月，对影成三人", 长度范围：`0` ～ `65536` 字符
	ParentID *string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复, 示例值："6937231762296684564"
	ID       *string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号, 示例值："6937231762296684564"
}

// createTaskCommentResp ...
type createTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskCommentResp `json:"data,omitempty"`
}

// CreateTaskCommentResp ...
type CreateTaskCommentResp struct {
	Comment *CreateTaskCommentRespComment `json:"comment,omitempty"` // 返回创建好的任务评论
}

// CreateTaskCommentRespComment ...
type CreateTaskCommentRespComment struct {
	Content  string `json:"content,omitempty"`   // 评论内容
	ParentID string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复
	ID       string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTaskComment 该接口用于通过评论ID删除评论
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/delete
func (r *TaskService) DeleteTaskComment(ctx context.Context, request *DeleteTaskCommentReq, options ...MethodOptionFunc) (*DeleteTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskComment mock enable")
		return r.cli.mock.mockTaskDeleteTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskComment",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskDeleteTaskComment mock TaskDeleteTaskComment method
func (r *Mock) MockTaskDeleteTaskComment(f func(ctx context.Context, request *DeleteTaskCommentReq, options ...MethodOptionFunc) (*DeleteTaskCommentResp, *Response, error)) {
	r.mockTaskDeleteTaskComment = f
}

// UnMockTaskDeleteTaskComment un-mock TaskDeleteTaskComment method
func (r *Mock) UnMockTaskDeleteTaskComment() {
	r.mockTaskDeleteTaskComment = nil
}

// DeleteTaskCommentReq ...
type DeleteTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论ID, 示例值："6937231762296684564"
}

// deleteTaskCommentResp ...
type deleteTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskCommentResp `json:"data,omitempty"`
}

// DeleteTaskCommentResp ...
type DeleteTaskCommentResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskComment 该接口用于通过评论ID获取评论详情
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/get
func (r *TaskService) GetTaskComment(ctx context.Context, request *GetTaskCommentReq, options ...MethodOptionFunc) (*GetTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskComment mock enable")
		return r.cli.mock.mockTaskGetTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskComment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskComment mock TaskGetTaskComment method
func (r *Mock) MockTaskGetTaskComment(f func(ctx context.Context, request *GetTaskCommentReq, options ...MethodOptionFunc) (*GetTaskCommentResp, *Response, error)) {
	r.mockTaskGetTaskComment = f
}

// UnMockTaskGetTaskComment un-mock TaskGetTaskComment method
func (r *Mock) UnMockTaskGetTaskComment() {
	r.mockTaskGetTaskComment = nil
}

// GetTaskCommentReq ...
type GetTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论ID, 示例值："6937231762296684564"
}

// getTaskCommentResp ...
type getTaskCommentResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskCommentResp `json:"data,omitempty"`
}

// GetTaskCommentResp ...
type GetTaskCommentResp struct {
	Comment *GetTaskCommentRespComment `json:"comment,omitempty"` // 返回新的任务评论详情
}

// GetTaskCommentRespComment ...
type GetTaskCommentRespComment struct {
	Content  string `json:"content,omitempty"`   // 评论内容
	ParentID string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复
	ID       string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateTaskComment 该接口用于更新评论内容
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-comment/update
func (r *TaskService) UpdateTaskComment(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTaskComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UpdateTaskComment mock enable")
		return r.cli.mock.mockTaskUpdateTaskComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTaskComment",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateTaskCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskUpdateTaskComment mock TaskUpdateTaskComment method
func (r *Mock) MockTaskUpdateTaskComment(f func(ctx context.Context, request *UpdateTaskCommentReq, options ...MethodOptionFunc) (*UpdateTaskCommentResp, *Response, error)) {
	r.mockTaskUpdateTaskComment = f
}

// UnMockTaskUpdateTaskComment un-mock TaskUpdateTaskComment method
func (r *Mock) UnMockTaskUpdateTaskComment() {
	r.mockTaskUpdateTaskComment = nil
}

// UpdateTaskCommentReq ...
type UpdateTaskCommentReq struct {
	TaskID    string `path:"task_id" json:"-"`    // 任务ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	CommentID string `path:"comment_id" json:"-"` // 评论 ID, 示例值："6937231762296684564"
	Content   string `json:"content,omitempty"`   // 新的评论内容, 示例值："飞流直下三千尺，疑是银河落九天"
}

// updateTaskCommentResp ...
type updateTaskCommentResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateTaskCommentResp `json:"data,omitempty"`
}

// UpdateTaskCommentResp ...
type UpdateTaskCommentResp struct {
	Comment *UpdateTaskCommentRespComment `json:"comment,omitempty"` // 返回修改后的任务评论详情
}

// UpdateTaskCommentRespComment ...
type UpdateTaskCommentRespComment struct {
	Content  string `json:"content,omitempty"`   // 评论内容
	ParentID string `json:"parent_id,omitempty"` // 评论的父ID，创建评论时若不为空则为某条评论的回复，若不为空则不是回复
	ID       string `json:"id,omitempty"`        // 评论ID，由飞书服务器发号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskFollower 该接口用于创建任务关注者，一个任务最多添加50个关注者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/create
func (r *TaskService) CreateTaskFollower(ctx context.Context, request *CreateTaskFollowerReq, options ...MethodOptionFunc) (*CreateTaskFollowerResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskFollower != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskFollower mock enable")
		return r.cli.mock.mockTaskCreateTaskFollower(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskFollower",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/followers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskFollowerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskCreateTaskFollower mock TaskCreateTaskFollower method
func (r *Mock) MockTaskCreateTaskFollower(f func(ctx context.Context, request *CreateTaskFollowerReq, options ...MethodOptionFunc) (*CreateTaskFollowerResp, *Response, error)) {
	r.mockTaskCreateTaskFollower = f
}

// UnMockTaskCreateTaskFollower un-mock TaskCreateTaskFollower method
func (r *Mock) UnMockTaskCreateTaskFollower() {
	r.mockTaskCreateTaskFollower = nil
}

// CreateTaskFollowerReq ...
type CreateTaskFollowerReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	ID         string  `json:"id,omitempty"`           // 任务关注者 ID, 示例值："ou_99e1a581b36ecc4862cbfbce473f3123"
}

// createTaskFollowerResp ...
type createTaskFollowerResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskFollowerResp `json:"data,omitempty"`
}

// CreateTaskFollowerResp ...
type CreateTaskFollowerResp struct {
	Follower *CreateTaskFollowerRespFollower `json:"follower,omitempty"` // 创建后的任务关注者
}

// CreateTaskFollowerRespFollower ...
type CreateTaskFollowerRespFollower struct {
	ID string `json:"id,omitempty"` // 任务关注者 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTaskFollower 该接口用于删除任务关注者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/delete
func (r *TaskService) DeleteTaskFollower(ctx context.Context, request *DeleteTaskFollowerReq, options ...MethodOptionFunc) (*DeleteTaskFollowerResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskFollower != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskFollower mock enable")
		return r.cli.mock.mockTaskDeleteTaskFollower(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskFollower",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/followers/:follower_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskFollowerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskDeleteTaskFollower mock TaskDeleteTaskFollower method
func (r *Mock) MockTaskDeleteTaskFollower(f func(ctx context.Context, request *DeleteTaskFollowerReq, options ...MethodOptionFunc) (*DeleteTaskFollowerResp, *Response, error)) {
	r.mockTaskDeleteTaskFollower = f
}

// UnMockTaskDeleteTaskFollower un-mock TaskDeleteTaskFollower method
func (r *Mock) UnMockTaskDeleteTaskFollower() {
	r.mockTaskDeleteTaskFollower = nil
}

// DeleteTaskFollowerReq ...
type DeleteTaskFollowerReq struct {
	TaskID     string `path:"task_id" json:"-"`     // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	FollowerID string `path:"follower_id" json:"-"` // 任务关注者 ID（Open ID）, 示例值："ou_87e1a581b36ecc4862cbfbce473f346a"
}

// deleteTaskFollowerResp ...
type deleteTaskFollowerResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskFollowerResp `json:"data,omitempty"`
}

// DeleteTaskFollowerResp ...
type DeleteTaskFollowerResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskFollowerList 该接口用于查询任务关注者列表，支持分页，最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-follower/list
func (r *TaskService) GetTaskFollowerList(ctx context.Context, request *GetTaskFollowerListReq, options ...MethodOptionFunc) (*GetTaskFollowerListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskFollowerList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskFollowerList mock enable")
		return r.cli.mock.mockTaskGetTaskFollowerList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskFollowerList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/followers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskFollowerListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskFollowerList mock TaskGetTaskFollowerList method
func (r *Mock) MockTaskGetTaskFollowerList(f func(ctx context.Context, request *GetTaskFollowerListReq, options ...MethodOptionFunc) (*GetTaskFollowerListResp, *Response, error)) {
	r.mockTaskGetTaskFollowerList = f
}

// UnMockTaskGetTaskFollowerList un-mock TaskGetTaskFollowerList method
func (r *Mock) UnMockTaskGetTaskFollowerList() {
	r.mockTaskGetTaskFollowerList = nil
}

// GetTaskFollowerListReq ...
type GetTaskFollowerListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："「上次返回的page_token」"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："0d38e26e-190a-49e9-93a2-35067763ed1f"
}

// getTaskFollowerListResp ...
type getTaskFollowerListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskFollowerListResp `json:"data,omitempty"`
}

// GetTaskFollowerListResp ...
type GetTaskFollowerListResp struct {
	Items     []*GetTaskFollowerListRespItem `json:"items,omitempty"`      // 返回的关注者列表
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskFollowerListRespItem ...
type GetTaskFollowerListRespItem struct {
	ID string `json:"id,omitempty"` // 任务关注者 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskReminder 该接口用于创建任务的提醒时间。提醒时间在截止时间基础上做偏移，但是偏移后的结果不能早于当前时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/create
func (r *TaskService) CreateTaskReminder(ctx context.Context, request *CreateTaskReminderReq, options ...MethodOptionFunc) (*CreateTaskReminderResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskReminder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskReminder mock enable")
		return r.cli.mock.mockTaskCreateTaskReminder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskReminder",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/reminders",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskReminderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskCreateTaskReminder mock TaskCreateTaskReminder method
func (r *Mock) MockTaskCreateTaskReminder(f func(ctx context.Context, request *CreateTaskReminderReq, options ...MethodOptionFunc) (*CreateTaskReminderResp, *Response, error)) {
	r.mockTaskCreateTaskReminder = f
}

// UnMockTaskCreateTaskReminder un-mock TaskCreateTaskReminder method
func (r *Mock) UnMockTaskCreateTaskReminder() {
	r.mockTaskCreateTaskReminder = nil
}

// CreateTaskReminderReq ...
type CreateTaskReminderReq struct {
	TaskID             string `path:"task_id" json:"-"`               // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	RelativeFireMinute int64  `json:"relative_fire_minute,omitempty"` // 相对于截止时间的提醒时间（如提前 30 分钟，截止时间后 30 分钟，则为 -30）, 示例值：30
}

// createTaskReminderResp ...
type createTaskReminderResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskReminderResp `json:"data,omitempty"`
}

// CreateTaskReminderResp ...
type CreateTaskReminderResp struct {
	Reminder *CreateTaskReminderRespReminder `json:"reminder,omitempty"` // 返回创建成功的提醒时间
}

// CreateTaskReminderRespReminder ...
type CreateTaskReminderRespReminder struct {
	ID                 string `json:"id,omitempty"`                   // 提醒时间设置的 ID（在删除时候需要使用这个）
	RelativeFireMinute int64  `json:"relative_fire_minute,omitempty"` // 相对于截止时间的提醒时间（如提前 30 分钟，截止时间后 30 分钟，则为 -30）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTaskReminder 删除提醒时间，返回结果状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/delete
func (r *TaskService) DeleteTaskReminder(ctx context.Context, request *DeleteTaskReminderReq, options ...MethodOptionFunc) (*DeleteTaskReminderResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTaskReminder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTaskReminder mock enable")
		return r.cli.mock.mockTaskDeleteTaskReminder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTaskReminder",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/reminders/:reminder_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskReminderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskDeleteTaskReminder mock TaskDeleteTaskReminder method
func (r *Mock) MockTaskDeleteTaskReminder(f func(ctx context.Context, request *DeleteTaskReminderReq, options ...MethodOptionFunc) (*DeleteTaskReminderResp, *Response, error)) {
	r.mockTaskDeleteTaskReminder = f
}

// UnMockTaskDeleteTaskReminder un-mock TaskDeleteTaskReminder method
func (r *Mock) UnMockTaskDeleteTaskReminder() {
	r.mockTaskDeleteTaskReminder = nil
}

// DeleteTaskReminderReq ...
type DeleteTaskReminderReq struct {
	TaskID     string `path:"task_id" json:"-"`     // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	ReminderID string `path:"reminder_id" json:"-"` // 任务提醒时间设置的 ID（即 reminder.id）, 示例值："1"
}

// deleteTaskReminderResp ...
type deleteTaskReminderResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskReminderResp `json:"data,omitempty"`
}

// DeleteTaskReminderResp ...
type DeleteTaskReminderResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskReminderList 返回提醒时间列表，支持分页，最大值为50
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-reminder/list
func (r *TaskService) GetTaskReminderList(ctx context.Context, request *GetTaskReminderListReq, options ...MethodOptionFunc) (*GetTaskReminderListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskReminderList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskReminderList mock enable")
		return r.cli.mock.mockTaskGetTaskReminderList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskReminderList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/reminders",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTaskReminderListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskReminderList mock TaskGetTaskReminderList method
func (r *Mock) MockTaskGetTaskReminderList(f func(ctx context.Context, request *GetTaskReminderListReq, options ...MethodOptionFunc) (*GetTaskReminderListResp, *Response, error)) {
	r.mockTaskGetTaskReminderList = f
}

// UnMockTaskGetTaskReminderList un-mock TaskGetTaskReminderList method
func (r *Mock) UnMockTaskGetTaskReminderList() {
	r.mockTaskGetTaskReminderList = nil
}

// GetTaskReminderListReq ...
type GetTaskReminderListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：50, 最大值：`50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："「填写上次返回的page_token」"
	TaskID    string  `path:"task_id" json:"-"`     // 任务 ID, 示例值："0d38e26e-190a-49e9-93a2-35067763ed1f"
}

// getTaskReminderListResp ...
type getTaskReminderListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskReminderListResp `json:"data,omitempty"`
}

// GetTaskReminderListResp ...
type GetTaskReminderListResp struct {
	Items     []*GetTaskReminderListRespItem `json:"items,omitempty"`      // 返回提醒时间设置列表
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskReminderListRespItem ...
type GetTaskReminderListRespItem struct {
	ID                 string `json:"id,omitempty"`                   // 提醒时间设置的 ID（在删除时候需要使用这个）
	RelativeFireMinute int64  `json:"relative_fire_minute,omitempty"` // 相对于截止时间的提醒时间（如提前 30 分钟，截止时间后 30 分钟，则为 -30）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CompleteTask 该接口用于将任务状态修改为”已完成“
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/complete
func (r *TaskService) CompleteTask(ctx context.Context, request *CompleteTaskReq, options ...MethodOptionFunc) (*CompleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskCompleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CompleteTask mock enable")
		return r.cli.mock.mockTaskCompleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CompleteTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/complete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(completeTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskCompleteTask mock TaskCompleteTask method
func (r *Mock) MockTaskCompleteTask(f func(ctx context.Context, request *CompleteTaskReq, options ...MethodOptionFunc) (*CompleteTaskResp, *Response, error)) {
	r.mockTaskCompleteTask = f
}

// UnMockTaskCompleteTask un-mock TaskCompleteTask method
func (r *Mock) UnMockTaskCompleteTask() {
	r.mockTaskCompleteTask = nil
}

// CompleteTaskReq ...
type CompleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："bb54ab99-d360-434f-bcaa-a4cc4c05840e"
}

// completeTaskResp ...
type completeTaskResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *CompleteTaskResp `json:"data,omitempty"`
}

// CompleteTaskResp ...
type CompleteTaskResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTask 该接口可以创建一个任务（基本信息），如果需要绑定协作者等需要调用别的资源管理接口。其中查询字段 user_id_type 是用于控制返回体中 creator_id 的类型，不传时默认返回 open_id。当使用 tenant_access_token 调用接口时不支持 user_id_type 为 user_id。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/create
func (r *TaskService) CreateTask(ctx context.Context, request *CreateTaskReq, options ...MethodOptionFunc) (*CreateTaskResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTask mock enable")
		return r.cli.mock.mockTaskCreateTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskCreateTask mock TaskCreateTask method
func (r *Mock) MockTaskCreateTask(f func(ctx context.Context, request *CreateTaskReq, options ...MethodOptionFunc) (*CreateTaskResp, *Response, error)) {
	r.mockTaskCreateTask = f
}

// UnMockTaskCreateTask un-mock TaskCreateTask method
func (r *Mock) UnMockTaskCreateTask() {
	r.mockTaskCreateTask = nil
}

// CreateTaskReq ...
type CreateTaskReq struct {
	UserIDType  *IDType              `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Summary     string               `json:"summary,omitempty"`      // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务, 示例值："每天喝八杯水，保持身心愉悦", 长度范围：`1` ～ `256` 字符
	Description *string              `json:"description,omitempty"`  // 任务备注, 示例值："多吃水果，多运动，健康生活，快乐工作。", 长度范围：`0` ～ `65536` 字符
	Extra       *string              `json:"extra,omitempty"`        // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定, 示例值："dGVzdA==", 长度范围：`0` ～ `65536` 字符
	Due         *CreateTaskReqDue    `json:"due,omitempty"`          // 任务的截止时间设置
	Origin      *CreateTaskReqOrigin `json:"origin,omitempty"`       // 任务关联的第三方平台来源信息
	CanEdit     *bool                `json:"can_edit,omitempty"`     // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息,（即将废弃）, 示例值：true, 默认值: `false`
	Custom      *string              `json:"custom,omitempty"`       // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递, 示例值："{\"custom_complete\":{\"android\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}", 长度范围：`0` ～ `65536` 字符
}

// CreateTaskReqDue ...
type CreateTaskReqDue struct {
	Time     *string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）, 示例值："1623124318"
	Timezone *string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai, 示例值："Asia/Shanghai", 默认值: `Asia/Shanghai`
	IsAllDay *bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）, 示例值：false, 默认值: `false`
}

// CreateTaskReqOrigin ...
type CreateTaskReqOrigin struct {
	PlatformI18nName string                   `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn, 示例值："{\"zh_cn\": \"IT 工作台\", \"en_us\": \"IT Workspace\"}", 长度范围：`0` ～ `1024` 字符
	Href             *CreateTaskReqOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

// CreateTaskReqOriginHref ...
type CreateTaskReqOriginHref struct {
	URL   *string `json:"url,omitempty"`   // 具体链接地址, 示例值："https://support.feishu.com/internal/foo-bar", 长度范围：`0` ～ `1024` 字符
	Title *string `json:"title,omitempty"` // 链接对应的标题, 示例值："反馈一个问题，需要协助排查", 长度范围：`0` ～ `512` 字符
}

// createTaskResp ...
type createTaskResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskResp `json:"data,omitempty"`
}

// CreateTaskResp ...
type CreateTaskResp struct {
	Task *CreateTaskRespTask `json:"task,omitempty"` // 返回创建好的任务
}

// CreateTaskRespTask ...
type CreateTaskRespTask struct {
	ID           string                    `json:"id,omitempty"`            // 任务 ID，由飞书任务服务器发号
	Summary      string                    `json:"summary,omitempty"`       // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务
	Description  string                    `json:"description,omitempty"`   // 任务备注
	CompleteTime string                    `json:"complete_time,omitempty"` // 任务的完成时间戳（单位为秒），如果完成时间为 0，则表示任务尚未完成
	CreatorID    string                    `json:"creator_id,omitempty"`    // 任务的创建者 ID。在创建任务时无需填充该字段
	Extra        string                    `json:"extra,omitempty"`         // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定
	CreateTime   string                    `json:"create_time,omitempty"`   // 任务的创建时间戳（单位为秒）
	UpdateTime   string                    `json:"update_time,omitempty"`   // 任务的更新时间戳（单位为秒）
	Due          *CreateTaskRespTaskDue    `json:"due,omitempty"`           // 任务的截止时间设置
	Origin       *CreateTaskRespTaskOrigin `json:"origin,omitempty"`        // 任务关联的第三方平台来源信息
	CanEdit      bool                      `json:"can_edit,omitempty"`      // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息,（即将废弃）
	Custom       string                    `json:"custom,omitempty"`        // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递
	Source       int64                     `json:"source,omitempty"`        // 任务创建的来源, 可选值有: `0`：未知类型, `1`：来源任务中心创建, `2`：来源消息转任务, `3`：来源云文档, `4`：来源文档单品, `5`：来源PANO, `6`：来源tenant_access_token创建的任务, `7`：来源user_access_token创建的任务, `8`：来源新版云文档
}

// CreateTaskRespTaskDue ...
type CreateTaskRespTaskDue struct {
	Time     string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）
	Timezone string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai
	IsAllDay bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）
}

// CreateTaskRespTaskOrigin ...
type CreateTaskRespTaskOrigin struct {
	PlatformI18nName string                        `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn
	Href             *CreateTaskRespTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

// CreateTaskRespTaskOriginHref ...
type CreateTaskRespTaskOriginHref struct {
	URL   string `json:"url,omitempty"`   // 具体链接地址
	Title string `json:"title,omitempty"` // 链接对应的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteTask 该接口用于删除任务
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/delete
func (r *TaskService) DeleteTask(ctx context.Context, request *DeleteTaskReq, options ...MethodOptionFunc) (*DeleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskDeleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#DeleteTask mock enable")
		return r.cli.mock.mockTaskDeleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "DeleteTask",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskDeleteTask mock TaskDeleteTask method
func (r *Mock) MockTaskDeleteTask(f func(ctx context.Context, request *DeleteTaskReq, options ...MethodOptionFunc) (*DeleteTaskResp, *Response, error)) {
	r.mockTaskDeleteTask = f
}

// UnMockTaskDeleteTask un-mock TaskDeleteTask method
func (r *Mock) UnMockTaskDeleteTask() {
	r.mockTaskDeleteTask = nil
}

// DeleteTaskReq ...
type DeleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
}

// deleteTaskResp ...
type deleteTaskResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteTaskResp `json:"data,omitempty"`
}

// DeleteTaskResp ...
type DeleteTaskResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTask 该接口用于获取任务详情，包括任务标题、描述、时间、来源等信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/get
func (r *TaskService) GetTask(ctx context.Context, request *GetTaskReq, options ...MethodOptionFunc) (*GetTaskResp, *Response, error) {
	if r.cli.mock.mockTaskGetTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTask mock enable")
		return r.cli.mock.mockTaskGetTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTask mock TaskGetTask method
func (r *Mock) MockTaskGetTask(f func(ctx context.Context, request *GetTaskReq, options ...MethodOptionFunc) (*GetTaskResp, *Response, error)) {
	r.mockTaskGetTask = f
}

// UnMockTaskGetTask un-mock TaskGetTask method
func (r *Mock) UnMockTaskGetTask() {
	r.mockTaskGetTask = nil
}

// GetTaskReq ...
type GetTaskReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
}

// getTaskResp ...
type getTaskResp struct {
	Code int64        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string       `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskResp `json:"data,omitempty"`
}

// GetTaskResp ...
type GetTaskResp struct {
	Task *GetTaskRespTask `json:"task,omitempty"` // 返回任务资源详情
}

// GetTaskRespTask ...
type GetTaskRespTask struct {
	ID           string                 `json:"id,omitempty"`            // 任务 ID，由飞书任务服务器发号
	Summary      string                 `json:"summary,omitempty"`       // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务
	Description  string                 `json:"description,omitempty"`   // 任务备注
	CompleteTime string                 `json:"complete_time,omitempty"` // 任务的完成时间戳（单位为秒），如果完成时间为 0，则表示任务尚未完成
	CreatorID    string                 `json:"creator_id,omitempty"`    // 任务的创建者 ID。在创建任务时无需填充该字段
	Extra        string                 `json:"extra,omitempty"`         // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定
	CreateTime   string                 `json:"create_time,omitempty"`   // 任务的创建时间戳（单位为秒）
	UpdateTime   string                 `json:"update_time,omitempty"`   // 任务的更新时间戳（单位为秒）
	Due          *GetTaskRespTaskDue    `json:"due,omitempty"`           // 任务的截止时间设置
	Origin       *GetTaskRespTaskOrigin `json:"origin,omitempty"`        // 任务关联的第三方平台来源信息
	CanEdit      bool                   `json:"can_edit,omitempty"`      // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息,（即将废弃）
	Custom       string                 `json:"custom,omitempty"`        // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递
	Source       int64                  `json:"source,omitempty"`        // 任务创建的来源, 可选值有: `0`：未知类型, `1`：来源任务中心创建, `2`：来源消息转任务, `3`：来源云文档, `4`：来源文档单品, `5`：来源PANO, `6`：来源tenant_access_token创建的任务, `7`：来源user_access_token创建的任务, `8`：来源新版云文档
}

// GetTaskRespTaskDue ...
type GetTaskRespTaskDue struct {
	Time     string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）
	Timezone string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai
	IsAllDay bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）
}

// GetTaskRespTaskOrigin ...
type GetTaskRespTaskOrigin struct {
	PlatformI18nName string                     `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn
	Href             *GetTaskRespTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

// GetTaskRespTaskOriginHref ...
type GetTaskRespTaskOriginHref struct {
	URL   string `json:"url,omitempty"`   // 具体链接地址
	Title string `json:"title,omitempty"` // 链接对应的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTaskList 以分页的方式获取任务列表。当使用user_access_token时，获取与该用户身份相关的所有任务。当使用tenant_access_token时，获取该应用通过“创建任务“创建的任务列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/list
func (r *TaskService) GetTaskList(ctx context.Context, request *GetTaskListReq, options ...MethodOptionFunc) (*GetTaskListResp, *Response, error) {
	if r.cli.mock.mockTaskGetTaskList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#GetTaskList mock enable")
		return r.cli.mock.mockTaskGetTaskList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "GetTaskList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getTaskListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskGetTaskList mock TaskGetTaskList method
func (r *Mock) MockTaskGetTaskList(f func(ctx context.Context, request *GetTaskListReq, options ...MethodOptionFunc) (*GetTaskListResp, *Response, error)) {
	r.mockTaskGetTaskList = f
}

// UnMockTaskGetTaskList un-mock TaskGetTaskList method
func (r *Mock) UnMockTaskGetTaskList() {
	r.mockTaskGetTaskList = nil
}

// GetTaskListReq ...
type GetTaskListReq struct {
	PageSize        *int64  `query:"page_size" json:"-"`         // 分页大小, 示例值：10, 最大值：`100`
	PageToken       *string `query:"page_token" json:"-"`        // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："MTYzMTg3ODUxNQ=="
	StartCreateTime *string `query:"start_create_time" json:"-"` // 范围查询任务时，查询的起始时间。不填时默认起始时间为第一个任务的创建时间。, 示例值："1652323331"
	EndCreateTime   *string `query:"end_create_time" json:"-"`   // 范围查询任务时，查询的结束时间。不填时默认结束时间为最后一个任务的创建时间。, 示例值："1652323335"
	TaskCompleted   *bool   `query:"task_completed" json:"-"`    // 可用于查询时过滤任务完成状态。true表示只返回已完成的任务，false表示只返回未完成的任务。不填时表示同时返回两种完成状态的任务。, 示例值：false
	UserIDType      *IDType `query:"user_id_type" json:"-"`      // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getTaskListResp ...
type getTaskListResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetTaskListResp `json:"data,omitempty"`
}

// GetTaskListResp ...
type GetTaskListResp struct {
	Items     []*GetTaskListRespItem `json:"items,omitempty"`      // 任务列表
	PageToken string                 `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                   `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetTaskListRespItem ...
type GetTaskListRespItem struct {
	ID           string                     `json:"id,omitempty"`            // 任务 ID，由飞书任务服务器发号
	Summary      string                     `json:"summary,omitempty"`       // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务
	Description  string                     `json:"description,omitempty"`   // 任务备注
	CompleteTime string                     `json:"complete_time,omitempty"` // 任务的完成时间戳（单位为秒），如果完成时间为 0，则表示任务尚未完成
	CreatorID    string                     `json:"creator_id,omitempty"`    // 任务的创建者 ID。在创建任务时无需填充该字段
	Extra        string                     `json:"extra,omitempty"`         // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定
	CreateTime   string                     `json:"create_time,omitempty"`   // 任务的创建时间戳（单位为秒）
	UpdateTime   string                     `json:"update_time,omitempty"`   // 任务的更新时间戳（单位为秒）
	Due          *GetTaskListRespItemDue    `json:"due,omitempty"`           // 任务的截止时间设置
	Origin       *GetTaskListRespItemOrigin `json:"origin,omitempty"`        // 任务关联的第三方平台来源信息
	CanEdit      bool                       `json:"can_edit,omitempty"`      // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息,（即将废弃）
	Custom       string                     `json:"custom,omitempty"`        // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递
	Source       int64                      `json:"source,omitempty"`        // 任务创建的来源, 可选值有: `0`：未知类型, `1`：来源任务中心创建, `2`：来源消息转任务, `3`：来源云文档, `4`：来源文档单品, `5`：来源PANO, `6`：来源tenant_access_token创建的任务, `7`：来源user_access_token创建的任务, `8`：来源新版云文档
}

// GetTaskListRespItemDue ...
type GetTaskListRespItemDue struct {
	Time     string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）
	Timezone string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai
	IsAllDay bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）
}

// GetTaskListRespItemOrigin ...
type GetTaskListRespItemOrigin struct {
	PlatformI18nName string                         `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn
	Href             *GetTaskListRespItemOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

// GetTaskListRespItemOriginHref ...
type GetTaskListRespItemOriginHref struct {
	URL   string `json:"url,omitempty"`   // 具体链接地址
	Title string `json:"title,omitempty"` // 链接对应的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UncompleteTask 该接口用于取消任务的已完成状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/uncomplete
func (r *TaskService) UncompleteTask(ctx context.Context, request *UncompleteTaskReq, options ...MethodOptionFunc) (*UncompleteTaskResp, *Response, error) {
	if r.cli.mock.mockTaskUncompleteTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UncompleteTask mock enable")
		return r.cli.mock.mockTaskUncompleteTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UncompleteTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/uncomplete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(uncompleteTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskUncompleteTask mock TaskUncompleteTask method
func (r *Mock) MockTaskUncompleteTask(f func(ctx context.Context, request *UncompleteTaskReq, options ...MethodOptionFunc) (*UncompleteTaskResp, *Response, error)) {
	r.mockTaskUncompleteTask = f
}

// UnMockTaskUncompleteTask un-mock TaskUncompleteTask method
func (r *Mock) UnMockTaskUncompleteTask() {
	r.mockTaskUncompleteTask = nil
}

// UncompleteTaskReq ...
type UncompleteTaskReq struct {
	TaskID string `path:"task_id" json:"-"` // 任务 ID, 示例值："bb54ab99-d360-434f-bcaa-a4cc4c05840e"
}

// uncompleteTaskResp ...
type uncompleteTaskResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *UncompleteTaskResp `json:"data,omitempty"`
}

// UncompleteTaskResp ...
type UncompleteTaskResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateTask 该接口用于修改任务的标题、描述、时间、来源等相关信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task/patch
func (r *TaskService) UpdateTask(ctx context.Context, request *UpdateTaskReq, options ...MethodOptionFunc) (*UpdateTaskResp, *Response, error) {
	if r.cli.mock.mockTaskUpdateTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#UpdateTask mock enable")
		return r.cli.mock.mockTaskUpdateTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "UpdateTask",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskUpdateTask mock TaskUpdateTask method
func (r *Mock) MockTaskUpdateTask(f func(ctx context.Context, request *UpdateTaskReq, options ...MethodOptionFunc) (*UpdateTaskResp, *Response, error)) {
	r.mockTaskUpdateTask = f
}

// UnMockTaskUpdateTask un-mock TaskUpdateTask method
func (r *Mock) UnMockTaskUpdateTask() {
	r.mockTaskUpdateTask = nil
}

// UpdateTaskReq ...
type UpdateTaskReq struct {
	UserIDType   *IDType            `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID       string             `path:"task_id" json:"-"`        // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	Task         *UpdateTaskReqTask `json:"task,omitempty"`          // 被更新的任务实体基础信息
	UpdateFields []string           `json:"update_fields,omitempty"` // 指定需要更新的字段（目前可选更新的字段为：summary, description, due, extra），否则服务端将不知道更新哪些字段, 示例值：["summary"]
}

// UpdateTaskReqTask ...
type UpdateTaskReqTask struct {
	Summary     *string                  `json:"summary,omitempty"`     // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务, 示例值："每天喝八杯水，保持身心愉悦", 长度范围：`1` ～ `256` 字符
	Description *string                  `json:"description,omitempty"` // 任务备注, 示例值："多吃水果，多运动，健康生活，快乐工作。", 长度范围：`0` ～ `65536` 字符
	Extra       *string                  `json:"extra,omitempty"`       // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定, 示例值："dGVzdA==", 长度范围：`0` ～ `65536` 字符
	Due         *UpdateTaskReqTaskDue    `json:"due,omitempty"`         // 任务的截止时间设置
	Origin      *UpdateTaskReqTaskOrigin `json:"origin,omitempty"`      // 任务关联的第三方平台来源信息
	CanEdit     *bool                    `json:"can_edit,omitempty"`    // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息,（即将废弃）, 示例值：true, 默认值: `false`
	Custom      *string                  `json:"custom,omitempty"`      // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递, 示例值："{\"custom_complete\":{\"android\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"ios\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}},\"pc\":{\"href\":\"https://www.google.com.hk/\",\"tip\":{\"zh_cn\":\"你好\",\"en_us\":\"hello\"}}}}", 长度范围：`0` ～ `65536` 字符
}

// UpdateTaskReqTaskDue ...
type UpdateTaskReqTaskDue struct {
	Time     *string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）, 示例值："1623124318"
	Timezone *string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai, 示例值："Asia/Shanghai", 默认值: `Asia/Shanghai`
	IsAllDay *bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）, 示例值：false, 默认值: `false`
}

// UpdateTaskReqTaskOrigin ...
type UpdateTaskReqTaskOrigin struct {
	PlatformI18nName string                       `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn, 示例值："{\"zh_cn\": \"IT 工作台\", \"en_us\": \"IT Workspace\"}", 长度范围：`0` ～ `1024` 字符
	Href             *UpdateTaskReqTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

// UpdateTaskReqTaskOriginHref ...
type UpdateTaskReqTaskOriginHref struct {
	URL   *string `json:"url,omitempty"`   // 具体链接地址, 示例值："https://support.feishu.com/internal/foo-bar", 长度范围：`0` ～ `1024` 字符
	Title *string `json:"title,omitempty"` // 链接对应的标题, 示例值："反馈一个问题，需要协助排查", 长度范围：`0` ～ `512` 字符
}

// updateTaskResp ...
type updateTaskResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateTaskResp `json:"data,omitempty"`
}

// UpdateTaskResp ...
type UpdateTaskResp struct {
	Task *UpdateTaskRespTask `json:"task,omitempty"` // 返回修改后的任务详情
}

// UpdateTaskRespTask ...
type UpdateTaskRespTask struct {
	ID           string                    `json:"id,omitempty"`            // 任务 ID，由飞书任务服务器发号
	Summary      string                    `json:"summary,omitempty"`       // 任务标题。创建任务时，如果没有标题填充，飞书服务器会将其视为无主题的任务
	Description  string                    `json:"description,omitempty"`   // 任务备注
	CompleteTime string                    `json:"complete_time,omitempty"` // 任务的完成时间戳（单位为秒），如果完成时间为 0，则表示任务尚未完成
	CreatorID    string                    `json:"creator_id,omitempty"`    // 任务的创建者 ID。在创建任务时无需填充该字段
	Extra        string                    `json:"extra,omitempty"`         // 接入方可以自定义的附属信息二进制格式，采用 base64 编码，解析方式由接入方自己决定
	CreateTime   string                    `json:"create_time,omitempty"`   // 任务的创建时间戳（单位为秒）
	UpdateTime   string                    `json:"update_time,omitempty"`   // 任务的更新时间戳（单位为秒）
	Due          *UpdateTaskRespTaskDue    `json:"due,omitempty"`           // 任务的截止时间设置
	Origin       *UpdateTaskRespTaskOrigin `json:"origin,omitempty"`        // 任务关联的第三方平台来源信息
	CanEdit      bool                      `json:"can_edit,omitempty"`      // 此字段用于控制该任务在飞书任务中心是否可编辑，默认为false，若为true则第三方需考虑是否需要接入事件来接收任务在任务中心的变更信息,（即将废弃）
	Custom       string                    `json:"custom,omitempty"`        // 此字段用于存储第三方需透传到端上的自定义数据，Json格式。取值举例中custom_complete字段存储「完成」按钮的跳转链接（href）或提示信息（tip），pc、ios、android三端均可自定义，其中tip字段的key为语言类型，value为提示信息，可自行增加或减少语言类型，支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn。href的优先级高于tip，href和tip同时不为空时只跳转不提示。链接和提示信息可自定义，其余的key需按举例中的结构传递
	Source       int64                     `json:"source,omitempty"`        // 任务创建的来源, 可选值有: `0`：未知类型, `1`：来源任务中心创建, `2`：来源消息转任务, `3`：来源云文档, `4`：来源文档单品, `5`：来源PANO, `6`：来源tenant_access_token创建的任务, `7`：来源user_access_token创建的任务, `8`：来源新版云文档
}

// UpdateTaskRespTaskDue ...
type UpdateTaskRespTaskDue struct {
	Time     string `json:"time,omitempty"`       // 截止时间的时间戳（单位为秒）
	Timezone string `json:"timezone,omitempty"`   // 截止时间对应的时区，使用IANA Time Zone Database标准，如Asia/Shanghai
	IsAllDay bool   `json:"is_all_day,omitempty"` // 标记任务是否为全天任务（全天任务的截止时间为当天 UTC 时间的 0 点）
}

// UpdateTaskRespTaskOrigin ...
type UpdateTaskRespTaskOrigin struct {
	PlatformI18nName string                        `json:"platform_i18n_name,omitempty"` // 任务导入来源的名称，用于在任务中心详情页展示。请提供一个字典，多种语言名称映射。支持的各地区语言名：it_it, th_th, ko_kr, es_es, ja_jp, zh_cn, id_id, zh_hk, pt_br, de_de, fr_fr, zh_tw, ru_ru, en_us, hi_in, vi_vn
	Href             *UpdateTaskRespTaskOriginHref `json:"href,omitempty"`               // 任务关联的来源平台详情页链接
}

// UpdateTaskRespTaskOriginHref ...
type UpdateTaskRespTaskOriginHref struct {
	URL   string `json:"url,omitempty"`   // 具体链接地址
	Title string `json:"title,omitempty"` // 链接对应的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetTenant 获取企业名称、企业编号等企业信息
//
// 如果ISV应用是企业创建时默认安装，并且180天内企业未打开或使用过此应用，则无法通过此接口获取到企业信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/tenant-v2/tenant/query
func (r *TenantService) GetTenant(ctx context.Context, request *GetTenantReq, options ...MethodOptionFunc) (*GetTenantResp, *Response, error) {
	if r.cli.mock.mockTenantGetTenant != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Tenant#GetTenant mock enable")
		return r.cli.mock.mockTenantGetTenant(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Tenant",
		API:                   "GetTenant",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/tenant/v2/tenant/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getTenantResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTenantGetTenant mock TenantGetTenant method
func (r *Mock) MockTenantGetTenant(f func(ctx context.Context, request *GetTenantReq, options ...MethodOptionFunc) (*GetTenantResp, *Response, error)) {
	r.mockTenantGetTenant = f
}

// UnMockTenantGetTenant un-mock TenantGetTenant method
func (r *Mock) UnMockTenantGetTenant() {
	r.mockTenantGetTenant = nil
}

// GetTenantReq ...
type GetTenantReq struct {
}

// getTenantResp ...
type getTenantResp struct {
	Code int64          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string         `json:"msg,omitempty"`  // 错误描述
	Data *GetTenantResp `json:"data,omitempty"`
}

// GetTenantResp ...
type GetTenantResp struct {
	Tenant *GetTenantRespTenant `json:"tenant,omitempty"` // 企业信息
}

// GetTenantRespTenant ...
type GetTenantRespTenant struct {
	Name      string                     `json:"name,omitempty"`       // 企业名称
	DisplayID string                     `json:"display_id,omitempty"` // 企业编号，平台内唯一
	TenantTag int64                      `json:"tenant_tag,omitempty"` // 个人版/团队版标志, 可选值有: `0`：团队版, `2`：个人版
	TenantKey string                     `json:"tenant_key,omitempty"` // 企业标识
	Avatar    *GetTenantRespTenantAvatar `json:"avatar,omitempty"`     // 企业头像
}

// GetTenantRespTenantAvatar ...
type GetTenantRespTenantAvatar struct {
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 企业头像
	Avatar72     string `json:"avatar_72,omitempty"`     // 企业头像 72x72
	Avatar240    string `json:"avatar_240,omitempty"`    // 企业头像 240x240
	Avatar640    string `json:"avatar_640,omitempty"`    // 企业头像 640x640
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// EndVCMeeting 结束一个进行中的会议
//
// 会议正在进行中，且操作者须具有相应的权限（如果操作者为用户，必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/end
func (r *VCService) EndVCMeeting(ctx context.Context, request *EndVCMeetingReq, options ...MethodOptionFunc) (*EndVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCEndVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#EndVCMeeting mock enable")
		return r.cli.mock.mockVCEndVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "EndVCMeeting",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/end",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(endVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCEndVCMeeting mock VCEndVCMeeting method
func (r *Mock) MockVCEndVCMeeting(f func(ctx context.Context, request *EndVCMeetingReq, options ...MethodOptionFunc) (*EndVCMeetingResp, *Response, error)) {
	r.mockVCEndVCMeeting = f
}

// UnMockVCEndVCMeeting un-mock VCEndVCMeeting method
func (r *Mock) UnMockVCEndVCMeeting() {
	r.mockVCEndVCMeeting = nil
}

// EndVCMeetingReq ...
type EndVCMeetingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

// endVCMeetingResp ...
type endVCMeetingResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *EndVCMeetingResp `json:"data,omitempty"`
}

// EndVCMeetingResp ...
type EndVCMeetingResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCMeeting 获取一个会议的详细数据
//
// 只能获取归属于自己的会议，支持查询最近90天内的会议
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/get
func (r *VCService) GetVCMeeting(ctx context.Context, request *GetVCMeetingReq, options ...MethodOptionFunc) (*GetVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCGetVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCMeeting mock enable")
		return r.cli.mock.mockVCGetVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCMeeting",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCMeeting mock VCGetVCMeeting method
func (r *Mock) MockVCGetVCMeeting(f func(ctx context.Context, request *GetVCMeetingReq, options ...MethodOptionFunc) (*GetVCMeetingResp, *Response, error)) {
	r.mockVCGetVCMeeting = f
}

// UnMockVCGetVCMeeting un-mock VCGetVCMeeting method
func (r *Mock) UnMockVCGetVCMeeting() {
	r.mockVCGetVCMeeting = nil
}

// GetVCMeetingReq ...
type GetVCMeetingReq struct {
	WithParticipants   *bool   `query:"with_participants" json:"-"`    // 是否需要参会人列表, 示例值：false
	WithMeetingAbility *bool   `query:"with_meeting_ability" json:"-"` // 是否需要会中使用能力统计（仅限tenant_access_token）, 示例值：false
	UserIDType         *IDType `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID          string  `path:"meeting_id" json:"-"`            // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

// getVCMeetingResp ...
type getVCMeetingResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetVCMeetingResp `json:"data,omitempty"`
}

// GetVCMeetingResp ...
type GetVCMeetingResp struct {
	Meeting *GetVCMeetingRespMeeting `json:"meeting,omitempty"` // 会议数据
}

// GetVCMeetingRespMeeting ...
type GetVCMeetingRespMeeting struct {
	ID               string                                `json:"id,omitempty"`                // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）
	Topic            string                                `json:"topic,omitempty"`             // 会议主题
	URL              string                                `json:"url,omitempty"`               // 会议链接（飞书用户可通过点击会议链接快捷入会）
	CreateTime       string                                `json:"create_time,omitempty"`       // 会议创建时间（unix时间，单位sec）
	StartTime        string                                `json:"start_time,omitempty"`        // 会议开始时间（unix时间，单位sec）
	EndTime          string                                `json:"end_time,omitempty"`          // 会议结束时间（unix时间，单位sec）
	HostUser         *GetVCMeetingRespMeetingHostUser      `json:"host_user,omitempty"`         // 主持人
	Status           int64                                 `json:"status,omitempty"`            // 会议状态, 可选值有: `1`：会议呼叫中, `2`：会议进行中, `3`：会议已结束
	ParticipantCount string                                `json:"participant_count,omitempty"` // 参会人数
	Participants     []*GetVCMeetingRespMeetingParticipant `json:"participants,omitempty"`      // 参会人列表
	Ability          *GetVCMeetingRespMeetingAbility       `json:"ability,omitempty"`           // 会中使用的能力
}

// GetVCMeetingRespMeetingHostUser ...
type GetVCMeetingRespMeetingHostUser struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// GetVCMeetingRespMeetingParticipant ...
type GetVCMeetingRespMeetingParticipant struct {
	ID         string `json:"id,omitempty"`          // 用户ID
	UserType   int64  `json:"user_type,omitempty"`   // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	IsHost     bool   `json:"is_host,omitempty"`     // 是否为主持人
	IsCohost   bool   `json:"is_cohost,omitempty"`   // 是否为联席主持人
	IsExternal bool   `json:"is_external,omitempty"` // 是否为外部参会人
	Status     int64  `json:"status,omitempty"`      // 参会人状态, 可选值有: `1`：呼叫中, `2`：在会中, `3`：正在响铃, `4`：不在会中或已经离开会议
}

// GetVCMeetingRespMeetingAbility ...
type GetVCMeetingRespMeetingAbility struct {
	UseVideo        bool `json:"use_video,omitempty"`         // 是否使用视频
	UseAudio        bool `json:"use_audio,omitempty"`         // 是否使用音频
	UseShareScreen  bool `json:"use_share_screen,omitempty"`  // 是否使用共享屏幕
	UseFollowScreen bool `json:"use_follow_screen,omitempty"` // 是否使用妙享（magic share）
	UseRecording    bool `json:"use_recording,omitempty"`     // 是否使用录制
	UsePstn         bool `json:"use_pstn,omitempty"`          // 是否使用PSTN
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// InviteVCMeeting 邀请参会人进入会议
//
// 发起邀请的操作者必须具有相应的权限（如果操作者为用户，则必须在会中），如果会议被锁定、或参会人数如果达到上限，则会邀请失败
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/invite
func (r *VCService) InviteVCMeeting(ctx context.Context, request *InviteVCMeetingReq, options ...MethodOptionFunc) (*InviteVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCInviteVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#InviteVCMeeting mock enable")
		return r.cli.mock.mockVCInviteVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "InviteVCMeeting",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/invite",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(inviteVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCInviteVCMeeting mock VCInviteVCMeeting method
func (r *Mock) MockVCInviteVCMeeting(f func(ctx context.Context, request *InviteVCMeetingReq, options ...MethodOptionFunc) (*InviteVCMeetingResp, *Response, error)) {
	r.mockVCInviteVCMeeting = f
}

// UnMockVCInviteVCMeeting un-mock VCInviteVCMeeting method
func (r *Mock) UnMockVCInviteVCMeeting() {
	r.mockVCInviteVCMeeting = nil
}

// InviteVCMeetingReq ...
type InviteVCMeetingReq struct {
	UserIDType *IDType                      `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID  string                       `path:"meeting_id" json:"-"`    // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	Invitees   []*InviteVCMeetingReqInvitee `json:"invitees,omitempty"`     // 被邀请的用户列表
}

// InviteVCMeetingReqInvitee ...
type InviteVCMeetingReqInvitee struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// inviteVCMeetingResp ...
type inviteVCMeetingResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *InviteVCMeetingResp `json:"data,omitempty"`
}

// InviteVCMeetingResp ...
type InviteVCMeetingResp struct {
	InviteResults []*InviteVCMeetingRespInviteResult `json:"invite_results,omitempty"` // 邀请结果
}

// InviteVCMeetingRespInviteResult ...
type InviteVCMeetingRespInviteResult struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	Status   int64  `json:"status,omitempty"`    // 邀请结果, 可选值有: `1`：邀请成功, `2`：邀请失败
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// KickoutVCMeeting 将参会人从会议中移除
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/kickout
func (r *VCService) KickoutVCMeeting(ctx context.Context, request *KickoutVCMeetingReq, options ...MethodOptionFunc) (*KickoutVCMeetingResp, *Response, error) {
	if r.cli.mock.mockVCKickoutVCMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#KickoutVCMeeting mock enable")
		return r.cli.mock.mockVCKickoutVCMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "KickoutVCMeeting",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/kickout",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(kickoutVCMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCKickoutVCMeeting mock VCKickoutVCMeeting method
func (r *Mock) MockVCKickoutVCMeeting(f func(ctx context.Context, request *KickoutVCMeetingReq, options ...MethodOptionFunc) (*KickoutVCMeetingResp, *Response, error)) {
	r.mockVCKickoutVCMeeting = f
}

// UnMockVCKickoutVCMeeting un-mock VCKickoutVCMeeting method
func (r *Mock) UnMockVCKickoutVCMeeting() {
	r.mockVCKickoutVCMeeting = nil
}

// KickoutVCMeetingReq ...
type KickoutVCMeetingReq struct {
	UserIDType   *IDType                           `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID    string                            `path:"meeting_id" json:"-"`     // 会议ID, 示例值："6911188411932033028"
	KickoutUsers []*KickoutVCMeetingReqKickoutUser `json:"kickout_users,omitempty"` // 需踢出的用户列表
}

// KickoutVCMeetingReqKickoutUser ...
type KickoutVCMeetingReqKickoutUser struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// kickoutVCMeetingResp ...
type kickoutVCMeetingResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *KickoutVCMeetingResp `json:"data,omitempty"`
}

// KickoutVCMeetingResp ...
type KickoutVCMeetingResp struct {
	KickoutResults []*KickoutVCMeetingRespKickoutResult `json:"kickout_results,omitempty"` // 踢出结果
}

// KickoutVCMeetingRespKickoutResult ...
type KickoutVCMeetingRespKickoutResult struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	Result   int64  `json:"result,omitempty"`    // 邀请结果, 可选值有: `1`：邀请成功, `2`：邀请失败
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ListVCMeetingByNo 获取指定时间范围（90天内)会议号关联的会议简要信息列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/list_by_no
func (r *VCService) ListVCMeetingByNo(ctx context.Context, request *ListVCMeetingByNoReq, options ...MethodOptionFunc) (*ListVCMeetingByNoResp, *Response, error) {
	if r.cli.mock.mockVCListVCMeetingByNo != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#ListVCMeetingByNo mock enable")
		return r.cli.mock.mockVCListVCMeetingByNo(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "ListVCMeetingByNo",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/meetings/list_by_no",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(listVCMeetingByNoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCListVCMeetingByNo mock VCListVCMeetingByNo method
func (r *Mock) MockVCListVCMeetingByNo(f func(ctx context.Context, request *ListVCMeetingByNoReq, options ...MethodOptionFunc) (*ListVCMeetingByNoResp, *Response, error)) {
	r.mockVCListVCMeetingByNo = f
}

// UnMockVCListVCMeetingByNo un-mock VCListVCMeetingByNo method
func (r *Mock) UnMockVCListVCMeetingByNo() {
	r.mockVCListVCMeetingByNo = nil
}

// ListVCMeetingByNoReq ...
type ListVCMeetingByNoReq struct {
	MeetingNo string  `query:"meeting_no" json:"-"` // 9位会议号, 示例值："123456789"
	StartTime string  `query:"start_time" json:"-"` // 查询开始时间（unix时间，单位sec）, 示例值："1608888867"
	EndTime   string  `query:"end_time" json:"-"`   // 查询结束时间（unix时间，单位sec）, 示例值："1608888867"
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："5"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`10`
}

// listVCMeetingByNoResp ...
type listVCMeetingByNoResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *ListVCMeetingByNoResp `json:"data,omitempty"`
}

// ListVCMeetingByNoResp ...
type ListVCMeetingByNoResp struct {
	HasMore       bool                                 `json:"has_more,omitempty"`       // 是否还有更多项
	PageToken     string                               `json:"page_token,omitempty"`     // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	MeetingBriefs []*ListVCMeetingByNoRespMeetingBrief `json:"meeting_briefs,omitempty"` // 会议简要信息列表
}

// ListVCMeetingByNoRespMeetingBrief ...
type ListVCMeetingByNoRespMeetingBrief struct {
	ID        string `json:"id,omitempty"`         // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）
	Topic     string `json:"topic,omitempty"`      // 会议主题
	URL       string `json:"url,omitempty"`        // 会议链接（飞书用户可通过点击会议链接快捷入会）
	MeetingNo string `json:"meeting_no,omitempty"` // 会议号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCMeetingRecording 获取一个会议的录制文件。
//
// 会议结束后并且收到了"录制完成"的事件方可获取录制文件；只有会议owner（通过开放平台预约的会议即为预约人）有权限获取；录制时间太短(&lt;5s)有可能无法生成录制文件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/get
func (r *VCService) GetVCMeetingRecording(ctx context.Context, request *GetVCMeetingRecordingReq, options ...MethodOptionFunc) (*GetVCMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCGetVCMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCMeetingRecording mock enable")
		return r.cli.mock.mockVCGetVCMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "GetVCMeetingRecording",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getVCMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCMeetingRecording mock VCGetVCMeetingRecording method
func (r *Mock) MockVCGetVCMeetingRecording(f func(ctx context.Context, request *GetVCMeetingRecordingReq, options ...MethodOptionFunc) (*GetVCMeetingRecordingResp, *Response, error)) {
	r.mockVCGetVCMeetingRecording = f
}

// UnMockVCGetVCMeetingRecording un-mock VCGetVCMeetingRecording method
func (r *Mock) UnMockVCGetVCMeetingRecording() {
	r.mockVCGetVCMeetingRecording = nil
}

// GetVCMeetingRecordingReq ...
type GetVCMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

// getVCMeetingRecordingResp ...
type getVCMeetingRecordingResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetVCMeetingRecordingResp `json:"data,omitempty"`
}

// GetVCMeetingRecordingResp ...
type GetVCMeetingRecordingResp struct {
	Recording *GetVCMeetingRecordingRespRecording `json:"recording,omitempty"` // 录制文件数据
}

// GetVCMeetingRecordingRespRecording ...
type GetVCMeetingRecordingRespRecording struct {
	URL      string `json:"url,omitempty"`      // 录制文件URL
	Duration string `json:"duration,omitempty"` // 录制总时长（单位msec）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetVCPermissionMeetingRecording 将一个会议的录制文件授权给组织、用户或公开到公网
//
// 会议结束后并且收到了"录制完成"的事件方可进行授权；会议owner（通过开放平台预约的会议即为预约人）才有权限操作
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/set_permission
func (r *VCService) SetVCPermissionMeetingRecording(ctx context.Context, request *SetVCPermissionMeetingRecordingReq, options ...MethodOptionFunc) (*SetVCPermissionMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCSetVCPermissionMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#SetVCPermissionMeetingRecording mock enable")
		return r.cli.mock.mockVCSetVCPermissionMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "SetVCPermissionMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/set_permission",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(setVCPermissionMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCSetVCPermissionMeetingRecording mock VCSetVCPermissionMeetingRecording method
func (r *Mock) MockVCSetVCPermissionMeetingRecording(f func(ctx context.Context, request *SetVCPermissionMeetingRecordingReq, options ...MethodOptionFunc) (*SetVCPermissionMeetingRecordingResp, *Response, error)) {
	r.mockVCSetVCPermissionMeetingRecording = f
}

// UnMockVCSetVCPermissionMeetingRecording un-mock VCSetVCPermissionMeetingRecording method
func (r *Mock) UnMockVCSetVCPermissionMeetingRecording() {
	r.mockVCSetVCPermissionMeetingRecording = nil
}

// SetVCPermissionMeetingRecordingReq ...
type SetVCPermissionMeetingRecordingReq struct {
	UserIDType        *IDType                                               `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MeetingID         string                                                `path:"meeting_id" json:"-"`          // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	PermissionObjects []*SetVCPermissionMeetingRecordingReqPermissionObject `json:"permission_objects,omitempty"` // 授权对象列表
}

// SetVCPermissionMeetingRecordingReqPermissionObject ...
type SetVCPermissionMeetingRecordingReqPermissionObject struct {
	ID         *string `json:"id,omitempty"`         // 授权对象ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	Type       int64   `json:"type,omitempty"`       // 授权对象类型, 示例值：1, 可选值有: `1`：用户授权, `2`：群组授权, `3`：租户内授权（id字段不填）, `4`：公网授权（id字段不填）
	Permission int64   `json:"permission,omitempty"` // 权限, 示例值：1, 可选值有: `1`：查看
}

// setVCPermissionMeetingRecordingResp ...
type setVCPermissionMeetingRecordingResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *SetVCPermissionMeetingRecordingResp `json:"data,omitempty"`
}

// SetVCPermissionMeetingRecordingResp ...
type SetVCPermissionMeetingRecordingResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// StartVCMeetingRecording 在会议中开始录制。
//
// 会议正在进行中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/start
func (r *VCService) StartVCMeetingRecording(ctx context.Context, request *StartVCMeetingRecordingReq, options ...MethodOptionFunc) (*StartVCMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCStartVCMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#StartVCMeetingRecording mock enable")
		return r.cli.mock.mockVCStartVCMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "StartVCMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/start",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(startVCMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCStartVCMeetingRecording mock VCStartVCMeetingRecording method
func (r *Mock) MockVCStartVCMeetingRecording(f func(ctx context.Context, request *StartVCMeetingRecordingReq, options ...MethodOptionFunc) (*StartVCMeetingRecordingResp, *Response, error)) {
	r.mockVCStartVCMeetingRecording = f
}

// UnMockVCStartVCMeetingRecording un-mock VCStartVCMeetingRecording method
func (r *Mock) UnMockVCStartVCMeetingRecording() {
	r.mockVCStartVCMeetingRecording = nil
}

// StartVCMeetingRecordingReq ...
type StartVCMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	Timezone  *int64 `json:"timezone,omitempty"`  // 录制文件时间显示使用的时区[-12,12], 示例值：8
}

// startVCMeetingRecordingResp ...
type startVCMeetingRecordingResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *StartVCMeetingRecordingResp `json:"data,omitempty"`
}

// StartVCMeetingRecordingResp ...
type StartVCMeetingRecordingResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// StopVCMeetingRecording 在会议中停止录制。
//
// 会议正在录制中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/stop
func (r *VCService) StopVCMeetingRecording(ctx context.Context, request *StopVCMeetingRecordingReq, options ...MethodOptionFunc) (*StopVCMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCStopVCMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#StopVCMeetingRecording mock enable")
		return r.cli.mock.mockVCStopVCMeetingRecording(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "StopVCMeetingRecording",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/recording/stop",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(stopVCMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCStopVCMeetingRecording mock VCStopVCMeetingRecording method
func (r *Mock) MockVCStopVCMeetingRecording(f func(ctx context.Context, request *StopVCMeetingRecordingReq, options ...MethodOptionFunc) (*StopVCMeetingRecordingResp, *Response, error)) {
	r.mockVCStopVCMeetingRecording = f
}

// UnMockVCStopVCMeetingRecording un-mock VCStopVCMeetingRecording method
func (r *Mock) UnMockVCStopVCMeetingRecording() {
	r.mockVCStopVCMeetingRecording = nil
}

// StopVCMeetingRecordingReq ...
type StopVCMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
}

// stopVCMeetingRecordingResp ...
type stopVCMeetingRecordingResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *StopVCMeetingRecordingResp `json:"data,omitempty"`
}

// StopVCMeetingRecordingResp ...
type StopVCMeetingRecordingResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetVCHostMeeting 设置会议的主持人
//
// 发起设置主持人的操作者必须具有相应的权限（如果操作者为用户，必须是会中当前主持人）；该操作使用CAS并发安全机制，需传入会中当前主持人，如果操作失败可使用返回的最新数据重试
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting/set_host
func (r *VCService) SetVCHostMeeting(ctx context.Context, request *SetVCHostMeetingReq, options ...MethodOptionFunc) (*SetVCHostMeetingResp, *Response, error) {
	if r.cli.mock.mockVCSetVCHostMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#SetVCHostMeeting mock enable")
		return r.cli.mock.mockVCSetVCHostMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "SetVCHostMeeting",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/meetings/:meeting_id/set_host",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setVCHostMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCSetVCHostMeeting mock VCSetVCHostMeeting method
func (r *Mock) MockVCSetVCHostMeeting(f func(ctx context.Context, request *SetVCHostMeetingReq, options ...MethodOptionFunc) (*SetVCHostMeetingResp, *Response, error)) {
	r.mockVCSetVCHostMeeting = f
}

// UnMockVCSetVCHostMeeting un-mock VCSetVCHostMeeting method
func (r *Mock) UnMockVCSetVCHostMeeting() {
	r.mockVCSetVCHostMeeting = nil
}

// SetVCHostMeetingReq ...
type SetVCHostMeetingReq struct {
	UserIDType  *IDType                         `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	MeetingID   string                          `path:"meeting_id" json:"-"`     // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）, 示例值："6911188411932033028"
	HostUser    *SetVCHostMeetingReqHostUser    `json:"host_user,omitempty"`     // 将要设置的主持人
	OldHostUser *SetVCHostMeetingReqOldHostUser `json:"old_host_user,omitempty"` // 当前主持人（CAS并发安全：如果和会中当前主持人不符则会设置失败，可使用返回的最新数据重新设置）
}

// SetVCHostMeetingReqHostUser ...
type SetVCHostMeetingReqHostUser struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// SetVCHostMeetingReqOldHostUser ...
type SetVCHostMeetingReqOldHostUser struct {
	ID       *string `json:"id,omitempty"`        // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType *int64  `json:"user_type,omitempty"` // 用户类型, 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// setVCHostMeetingResp ...
type setVCHostMeetingResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *SetVCHostMeetingResp `json:"data,omitempty"`
}

// SetVCHostMeetingResp ...
type SetVCHostMeetingResp struct {
	HostUser *SetVCHostMeetingRespHostUser `json:"host_user,omitempty"` // 会中当前主持人
}

// SetVCHostMeetingRespHostUser ...
type SetVCHostMeetingRespHostUser struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCDailyReport 获取一段时间内组织的每日会议使用报告。
//
// 支持最近90天内的数据查询
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_daily
func (r *VCService) GetVCDailyReport(ctx context.Context, request *GetVCDailyReportReq, options ...MethodOptionFunc) (*GetVCDailyReportResp, *Response, error) {
	if r.cli.mock.mockVCGetVCDailyReport != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCDailyReport mock enable")
		return r.cli.mock.mockVCGetVCDailyReport(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCDailyReport",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/reports/get_daily",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getVCDailyReportResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCDailyReport mock VCGetVCDailyReport method
func (r *Mock) MockVCGetVCDailyReport(f func(ctx context.Context, request *GetVCDailyReportReq, options ...MethodOptionFunc) (*GetVCDailyReportResp, *Response, error)) {
	r.mockVCGetVCDailyReport = f
}

// UnMockVCGetVCDailyReport un-mock VCGetVCDailyReport method
func (r *Mock) UnMockVCGetVCDailyReport() {
	r.mockVCGetVCDailyReport = nil
}

// GetVCDailyReportReq ...
type GetVCDailyReportReq struct {
	StartTime string `query:"start_time" json:"-"` // 开始时间（unix时间，单位sec）, 示例值："1608888867"
	EndTime   string `query:"end_time" json:"-"`   // 结束时间（unix时间，单位sec）, 示例值："1608888966"
}

// getVCDailyReportResp ...
type getVCDailyReportResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetVCDailyReportResp `json:"data,omitempty"`
}

// GetVCDailyReportResp ...
type GetVCDailyReportResp struct {
	MeetingReport *GetVCDailyReportRespMeetingReport `json:"meeting_report,omitempty"` // 会议报告
}

// GetVCDailyReportRespMeetingReport ...
type GetVCDailyReportRespMeetingReport struct {
	TotalMeetingCount     string                                          `json:"total_meeting_count,omitempty"`     // 总会议数量
	TotalMeetingDuration  string                                          `json:"total_meeting_duration,omitempty"`  // 总会议时长（单位sec）
	TotalParticipantCount string                                          `json:"total_participant_count,omitempty"` // 总参会人数
	DailyReport           []*GetVCDailyReportRespMeetingReportDailyReport `json:"daily_report,omitempty"`            // 每日会议报告列表
}

// GetVCDailyReportRespMeetingReportDailyReport ...
type GetVCDailyReportRespMeetingReportDailyReport struct {
	Date             string `json:"date,omitempty"`              // 日期（unix时间，单位sec）
	MeetingCount     string `json:"meeting_count,omitempty"`     // 会议数量
	MeetingDuration  string `json:"meeting_duration,omitempty"`  // 会议时长（单位sec）
	ParticipantCount string `json:"participant_count,omitempty"` // 参会人数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCTopUserReport 获取一段时间内组织内会议使用的top用户列表。
//
// 支持最近90天内的数据查询；默认返回前10位，最多可查询前100位
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/report/get_top_user
func (r *VCService) GetVCTopUserReport(ctx context.Context, request *GetVCTopUserReportReq, options ...MethodOptionFunc) (*GetVCTopUserReportResp, *Response, error) {
	if r.cli.mock.mockVCGetVCTopUserReport != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCTopUserReport mock enable")
		return r.cli.mock.mockVCGetVCTopUserReport(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCTopUserReport",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/reports/get_top_user",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getVCTopUserReportResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCTopUserReport mock VCGetVCTopUserReport method
func (r *Mock) MockVCGetVCTopUserReport(f func(ctx context.Context, request *GetVCTopUserReportReq, options ...MethodOptionFunc) (*GetVCTopUserReportResp, *Response, error)) {
	r.mockVCGetVCTopUserReport = f
}

// UnMockVCGetVCTopUserReport un-mock VCGetVCTopUserReport method
func (r *Mock) UnMockVCGetVCTopUserReport() {
	r.mockVCGetVCTopUserReport = nil
}

// GetVCTopUserReportReq ...
type GetVCTopUserReportReq struct {
	StartTime string `query:"start_time" json:"-"` // 开始时间（unix时间，单位sec）, 示例值："1608888867"
	EndTime   string `query:"end_time" json:"-"`   // 结束时间（unix时间，单位sec）, 示例值："1608889966"
	Limit     int64  `query:"limit" json:"-"`      // 取前多少位, 示例值：10
	OrderBy   int64  `query:"order_by" json:"-"`   // 排序依据（降序）, 示例值：1, 可选值有: `1`：会议数量, `2`：会议时长
}

// getVCTopUserReportResp ...
type getVCTopUserReportResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetVCTopUserReportResp `json:"data,omitempty"`
}

// GetVCTopUserReportResp ...
type GetVCTopUserReportResp struct {
	TopUserReport []*GetVCTopUserReportRespTopUserReport `json:"top_user_report,omitempty"` // top用户列表
}

// GetVCTopUserReportRespTopUserReport ...
type GetVCTopUserReportRespTopUserReport struct {
	ID              string `json:"id,omitempty"`               // 用户ID
	Name            string `json:"name,omitempty"`             // 用户名
	UserType        int64  `json:"user_type,omitempty"`        // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	MeetingCount    string `json:"meeting_count,omitempty"`    // 会议数量
	MeetingDuration string `json:"meeting_duration,omitempty"` // 会议时长（单位min）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ApplyVCReserve 创建一个会议预约。
//
// 支持预约最近30天内的会议（到期时间距离当前时间不超过30天），预约到期后会议号将被释放，如需继续使用可通过"更新预约"接口进行续期；预约会议时可配置参会人在会中的权限，以达到控制会议的目的
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/apply
func (r *VCService) ApplyVCReserve(ctx context.Context, request *ApplyVCReserveReq, options ...MethodOptionFunc) (*ApplyVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCApplyVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#ApplyVCReserve mock enable")
		return r.cli.mock.mockVCApplyVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "ApplyVCReserve",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/apply",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(applyVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCApplyVCReserve mock VCApplyVCReserve method
func (r *Mock) MockVCApplyVCReserve(f func(ctx context.Context, request *ApplyVCReserveReq, options ...MethodOptionFunc) (*ApplyVCReserveResp, *Response, error)) {
	r.mockVCApplyVCReserve = f
}

// UnMockVCApplyVCReserve un-mock VCApplyVCReserve method
func (r *Mock) UnMockVCApplyVCReserve() {
	r.mockVCApplyVCReserve = nil
}

// ApplyVCReserveReq ...
type ApplyVCReserveReq struct {
	UserIDType      *IDType                           `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	EndTime         *string                           `json:"end_time,omitempty"`         // 预约到期时间（unix时间，单位sec），多人会议必填, 示例值："1608888867"
	MeetingSettings *ApplyVCReserveReqMeetingSettings `json:"meeting_settings,omitempty"` // 会议设置
}

// ApplyVCReserveReqMeetingSettings ...
type ApplyVCReserveReqMeetingSettings struct {
	Topic              *string                                             `json:"topic,omitempty"`                // 会议主题, 示例值："my meeting"
	ActionPermissions  []*ApplyVCReserveReqMeetingSettingsActionPermission `json:"action_permissions,omitempty"`   // 会议权限配置列表，如果存在相同的权限配置项则它们之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
	MeetingInitialType *int64                                              `json:"meeting_initial_type,omitempty"` // 会议初始类型, 示例值：1, 可选值有: `1`：多人会议, `2`：1v1呼叫
	CallSetting        *ApplyVCReserveReqMeetingSettingsCallSetting        `json:"call_setting,omitempty"`         // 1v1呼叫相关参数
}

// ApplyVCReserveReqMeetingSettingsActionPermission ...
type ApplyVCReserveReqMeetingSettingsActionPermission struct {
	Permission         int64                                                                `json:"permission,omitempty"`          // 权限项, 示例值：1, 可选值有: `1`：是否能成为主持人, `2`：是否能邀请参会人, `3`：是否能加入会议
	PermissionCheckers []*ApplyVCReserveReqMeetingSettingsActionPermissionPermissionChecker `json:"permission_checkers,omitempty"` // 权限检查器列表，权限检查器之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
}

// ApplyVCReserveReqMeetingSettingsActionPermissionPermissionChecker ...
type ApplyVCReserveReqMeetingSettingsActionPermissionPermissionChecker struct {
	CheckField int64    `json:"check_field,omitempty"` // 检查字段类型, 示例值：1, 可选值有: `1`：用户ID, `2`：用户类型, `3`：租户ID
	CheckMode  int64    `json:"check_mode,omitempty"`  // 检查方式, 示例值：1, 可选值有: `1`：在check_list中为有权限（白名单）, `2`：不在check_list中为有权限（黑名单）
	CheckList  []string `json:"check_list,omitempty"`  // 检查字段列表, 示例值：123
}

// ApplyVCReserveReqMeetingSettingsCallSetting ...
type ApplyVCReserveReqMeetingSettingsCallSetting struct {
	Callee *ApplyVCReserveReqMeetingSettingsCallSettingCallee `json:"callee,omitempty"` // 被呼叫的用户
}

// ApplyVCReserveReqMeetingSettingsCallSettingCallee ...
type ApplyVCReserveReqMeetingSettingsCallSettingCallee struct {
	ID          *string                                                       `json:"id,omitempty"`            // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType    int64                                                         `json:"user_type,omitempty"`     // 用户类型，当前仅支持用户类型6(pstn用户), 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	PstnSipInfo *ApplyVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo `json:"pstn_sip_info,omitempty"` // pstn/sip信息
}

// ApplyVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo ...
type ApplyVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo struct {
	Nickname    *string `json:"nickname,omitempty"`     // 给pstn/sip用户设置的临时昵称, 示例值："dodo"
	MainAddress string  `json:"main_address,omitempty"` // pstn/sip主机号，格式为：[国际冠字]-[电话区号][电话号码]，当前仅支持国内手机及固定电话号码, 示例值："+86-02187654321"
}

// applyVCReserveResp ...
type applyVCReserveResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *ApplyVCReserveResp `json:"data,omitempty"`
}

// ApplyVCReserveResp ...
type ApplyVCReserveResp struct {
	Reserve *ApplyVCReserveRespReserve `json:"reserve,omitempty"` // 预约数据
}

// ApplyVCReserveRespReserve ...
type ApplyVCReserveRespReserve struct {
	ID        string `json:"id,omitempty"`         // 预约ID（预约的唯一标识）
	MeetingNo string `json:"meeting_no,omitempty"` // 9位会议号（飞书用户可通过输入9位会议号快捷入会）
	URL       string `json:"url,omitempty"`        // 会议链接（飞书用户可通过点击会议链接快捷入会）
	AppLink   string `json:"app_link,omitempty"`   // APPLink用于唤起飞书APP入会。"{?}"为占位符，用于配置入会参数，使用时需替换具体值：0表示关闭，1表示打开。preview为入会前的设置页，mic为麦克风，speaker为扬声器，camera为摄像头
	LiveLink  string `json:"live_link,omitempty"`  // 直播链接
	EndTime   string `json:"end_time,omitempty"`   // 预约到期时间（unix时间，单位sec）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteVCReserve 删除一个预约
//
// 只能删除归属于自己的预约；删除后数据不可恢复
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/delete
func (r *VCService) DeleteVCReserve(ctx context.Context, request *DeleteVCReserveReq, options ...MethodOptionFunc) (*DeleteVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCDeleteVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#DeleteVCReserve mock enable")
		return r.cli.mock.mockVCDeleteVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "DeleteVCReserve",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deleteVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCDeleteVCReserve mock VCDeleteVCReserve method
func (r *Mock) MockVCDeleteVCReserve(f func(ctx context.Context, request *DeleteVCReserveReq, options ...MethodOptionFunc) (*DeleteVCReserveResp, *Response, error)) {
	r.mockVCDeleteVCReserve = f
}

// UnMockVCDeleteVCReserve un-mock VCDeleteVCReserve method
func (r *Mock) UnMockVCDeleteVCReserve() {
	r.mockVCDeleteVCReserve = nil
}

// DeleteVCReserveReq ...
type DeleteVCReserveReq struct {
	ReserveID string `path:"reserve_id" json:"-"` // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
}

// deleteVCReserveResp ...
type deleteVCReserveResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteVCReserveResp `json:"data,omitempty"`
}

// DeleteVCReserveResp ...
type DeleteVCReserveResp struct {
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCReserve 获取一个预约的详情
//
// 只能获取归属于自己的预约
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get
func (r *VCService) GetVCReserve(ctx context.Context, request *GetVCReserveReq, options ...MethodOptionFunc) (*GetVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCGetVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCReserve mock enable")
		return r.cli.mock.mockVCGetVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "GetVCReserve",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCReserve mock VCGetVCReserve method
func (r *Mock) MockVCGetVCReserve(f func(ctx context.Context, request *GetVCReserveReq, options ...MethodOptionFunc) (*GetVCReserveResp, *Response, error)) {
	r.mockVCGetVCReserve = f
}

// UnMockVCGetVCReserve un-mock VCGetVCReserve method
func (r *Mock) UnMockVCGetVCReserve() {
	r.mockVCGetVCReserve = nil
}

// GetVCReserveReq ...
type GetVCReserveReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ReserveID  string  `path:"reserve_id" json:"-"`    // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
}

// getVCReserveResp ...
type getVCReserveResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetVCReserveResp `json:"data,omitempty"`
}

// GetVCReserveResp ...
type GetVCReserveResp struct {
	Reserve *GetVCReserveRespReserve `json:"reserve,omitempty"` // 预约数据
}

// GetVCReserveRespReserve ...
type GetVCReserveRespReserve struct {
	ID              string                                  `json:"id,omitempty"`               // 预约ID（预约的唯一标识）
	MeetingNo       string                                  `json:"meeting_no,omitempty"`       // 9位会议号（飞书用户可通过输入9位会议号快捷入会）
	URL             string                                  `json:"url,omitempty"`              // 会议链接（飞书用户可通过点击会议链接快捷入会）
	AppLink         string                                  `json:"app_link,omitempty"`         // APPLink用于唤起飞书APP入会。"{?}"为占位符，用于配置入会参数，使用时需替换具体值：0表示关闭，1表示打开。preview为入会前的设置页，mic为麦克风，speaker为扬声器，camera为摄像头
	LiveLink        string                                  `json:"live_link,omitempty"`        // 直播链接
	EndTime         string                                  `json:"end_time,omitempty"`         // 预约到期时间（unix时间，单位sec）
	ExpireStatus    int64                                   `json:"expire_status,omitempty"`    // 过期状态, 可选值有: `1`：未过期, `2`：已过期
	ReserveUserID   string                                  `json:"reserve_user_id,omitempty"`  // 预约人ID
	MeetingSettings *GetVCReserveRespReserveMeetingSettings `json:"meeting_settings,omitempty"` // 会议设置
}

// GetVCReserveRespReserveMeetingSettings ...
type GetVCReserveRespReserveMeetingSettings struct {
	Topic              string                                                    `json:"topic,omitempty"`                // 会议主题
	ActionPermissions  []*GetVCReserveRespReserveMeetingSettingsActionPermission `json:"action_permissions,omitempty"`   // 会议权限配置列表，如果存在相同的权限配置项则它们之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
	MeetingInitialType int64                                                     `json:"meeting_initial_type,omitempty"` // 会议初始类型, 可选值有: `1`：多人会议, `2`：1v1呼叫
	CallSetting        *GetVCReserveRespReserveMeetingSettingsCallSetting        `json:"call_setting,omitempty"`         // 1v1呼叫相关参数
}

// GetVCReserveRespReserveMeetingSettingsActionPermission ...
type GetVCReserveRespReserveMeetingSettingsActionPermission struct {
	Permission         int64                                                                      `json:"permission,omitempty"`          // 权限项, 可选值有: `1`：是否能成为主持人, `2`：是否能邀请参会人, `3`：是否能加入会议
	PermissionCheckers []*GetVCReserveRespReserveMeetingSettingsActionPermissionPermissionChecker `json:"permission_checkers,omitempty"` // 权限检查器列表，权限检查器之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
}

// GetVCReserveRespReserveMeetingSettingsActionPermissionPermissionChecker ...
type GetVCReserveRespReserveMeetingSettingsActionPermissionPermissionChecker struct {
	CheckField int64    `json:"check_field,omitempty"` // 检查字段类型, 可选值有: `1`：用户ID, `2`：用户类型, `3`：租户ID
	CheckMode  int64    `json:"check_mode,omitempty"`  // 检查方式, 可选值有: `1`：在check_list中为有权限（白名单）, `2`：不在check_list中为有权限（黑名单）
	CheckList  []string `json:"check_list,omitempty"`  // 检查字段列表
}

// GetVCReserveRespReserveMeetingSettingsCallSetting ...
type GetVCReserveRespReserveMeetingSettingsCallSetting struct {
	Callee *GetVCReserveRespReserveMeetingSettingsCallSettingCallee `json:"callee,omitempty"` // 被呼叫的用户
}

// GetVCReserveRespReserveMeetingSettingsCallSettingCallee ...
type GetVCReserveRespReserveMeetingSettingsCallSettingCallee struct {
	ID          string                                                              `json:"id,omitempty"`            // 用户ID
	UserType    int64                                                               `json:"user_type,omitempty"`     // 用户类型，当前仅支持用户类型6(pstn用户), 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	PstnSipInfo *GetVCReserveRespReserveMeetingSettingsCallSettingCalleePstnSipInfo `json:"pstn_sip_info,omitempty"` // pstn/sip信息
}

// GetVCReserveRespReserveMeetingSettingsCallSettingCalleePstnSipInfo ...
type GetVCReserveRespReserveMeetingSettingsCallSettingCalleePstnSipInfo struct {
	Nickname    string `json:"nickname,omitempty"`     // 给pstn/sip用户设置的临时昵称
	MainAddress string `json:"main_address,omitempty"` // pstn/sip主机号，格式为：[国际冠字]-[电话区号][电话号码]，当前仅支持国内手机及固定电话号码
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCReserveActiveMeeting 获取一个预约的当前活跃会议
//
// 只能获取归属于自己的预约的活跃会议（一个预约最多有一个正在进行中的会议）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/get_active_meeting
func (r *VCService) GetVCReserveActiveMeeting(ctx context.Context, request *GetVCReserveActiveMeetingReq, options ...MethodOptionFunc) (*GetVCReserveActiveMeetingResp, *Response, error) {
	if r.cli.mock.mockVCGetVCReserveActiveMeeting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCReserveActiveMeeting mock enable")
		return r.cli.mock.mockVCGetVCReserveActiveMeeting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "GetVCReserveActiveMeeting",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id/get_active_meeting",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getVCReserveActiveMeetingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCReserveActiveMeeting mock VCGetVCReserveActiveMeeting method
func (r *Mock) MockVCGetVCReserveActiveMeeting(f func(ctx context.Context, request *GetVCReserveActiveMeetingReq, options ...MethodOptionFunc) (*GetVCReserveActiveMeetingResp, *Response, error)) {
	r.mockVCGetVCReserveActiveMeeting = f
}

// UnMockVCGetVCReserveActiveMeeting un-mock VCGetVCReserveActiveMeeting method
func (r *Mock) UnMockVCGetVCReserveActiveMeeting() {
	r.mockVCGetVCReserveActiveMeeting = nil
}

// GetVCReserveActiveMeetingReq ...
type GetVCReserveActiveMeetingReq struct {
	WithParticipants *bool   `query:"with_participants" json:"-"` // 是否需要参会人列表，默认为false, 示例值：false
	UserIDType       *IDType `query:"user_id_type" json:"-"`      // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ReserveID        string  `path:"reserve_id" json:"-"`         // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
}

// getVCReserveActiveMeetingResp ...
type getVCReserveActiveMeetingResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetVCReserveActiveMeetingResp `json:"data,omitempty"`
}

// GetVCReserveActiveMeetingResp ...
type GetVCReserveActiveMeetingResp struct {
	Meeting *GetVCReserveActiveMeetingRespMeeting `json:"meeting,omitempty"` // 会议数据
}

// GetVCReserveActiveMeetingRespMeeting ...
type GetVCReserveActiveMeetingRespMeeting struct {
	ID                          string                                             `json:"id,omitempty"`                            // 会议ID（视频会议的唯一标识，视频会议开始后才会产生）
	Topic                       string                                             `json:"topic,omitempty"`                         // 会议主题
	URL                         string                                             `json:"url,omitempty"`                           // 会议链接（飞书用户可通过点击会议链接快捷入会）
	MeetingNo                   string                                             `json:"meeting_no,omitempty"`                    // 会议号
	CreateTime                  string                                             `json:"create_time,omitempty"`                   // 会议创建时间（unix时间，单位sec）
	StartTime                   string                                             `json:"start_time,omitempty"`                    // 会议开始时间（unix时间，单位sec）
	EndTime                     string                                             `json:"end_time,omitempty"`                      // 会议结束时间（unix时间，单位sec）
	HostUser                    *GetVCReserveActiveMeetingRespMeetingHostUser      `json:"host_user,omitempty"`                     // 主持人
	Status                      int64                                              `json:"status,omitempty"`                        // 会议状态, 可选值有: `1`：会议呼叫中, `2`：会议进行中, `3`：会议已结束
	ParticipantCount            string                                             `json:"participant_count,omitempty"`             // 参会人数
	ParticipantCountAccumulated string                                             `json:"participant_count_accumulated,omitempty"` // 累计参会人数
	Participants                []*GetVCReserveActiveMeetingRespMeetingParticipant `json:"participants,omitempty"`                  // 参会人列表
	Ability                     *GetVCReserveActiveMeetingRespMeetingAbility       `json:"ability,omitempty"`                       // 会中使用的能力
}

// GetVCReserveActiveMeetingRespMeetingHostUser ...
type GetVCReserveActiveMeetingRespMeetingHostUser struct {
	ID       string `json:"id,omitempty"`        // 用户ID
	UserType int64  `json:"user_type,omitempty"` // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
}

// GetVCReserveActiveMeetingRespMeetingParticipant ...
type GetVCReserveActiveMeetingRespMeetingParticipant struct {
	ID                string `json:"id,omitempty"`                  // 用户ID
	FirstJoinTime     string `json:"first_join_time,omitempty"`     // 首次入会时间，秒级Unix时间戳
	FinalLeaveTime    string `json:"final_leave_time,omitempty"`    // 最终离会时间，秒级Unix时间戳
	InMeetingDuration string `json:"in_meeting_duration,omitempty"` // 累计在会中时间，时间单位：秒
	UserType          int64  `json:"user_type,omitempty"`           // 用户类型, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	IsHost            bool   `json:"is_host,omitempty"`             // 是否为主持人
	IsCohost          bool   `json:"is_cohost,omitempty"`           // 是否为联席主持人
	IsExternal        bool   `json:"is_external,omitempty"`         // 是否为外部参会人
	Status            int64  `json:"status,omitempty"`              // 参会人状态, 可选值有: `1`：呼叫中, `2`：在会中, `3`：正在响铃, `4`：不在会中或已经离开会议
}

// GetVCReserveActiveMeetingRespMeetingAbility ...
type GetVCReserveActiveMeetingRespMeetingAbility struct {
	UseVideo        bool `json:"use_video,omitempty"`         // 是否使用视频
	UseAudio        bool `json:"use_audio,omitempty"`         // 是否使用音频
	UseShareScreen  bool `json:"use_share_screen,omitempty"`  // 是否使用共享屏幕
	UseFollowScreen bool `json:"use_follow_screen,omitempty"` // 是否使用妙享（magic share）
	UseRecording    bool `json:"use_recording,omitempty"`     // 是否使用录制
	UsePstn         bool `json:"use_pstn,omitempty"`          // 是否使用PSTN
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateVCReserve 更新一个预约
//
// 只能更新归属于自己的预约，不需要更新的字段不传（如果传空则会被更新为空）；可用于续期操作，到期时间距离当前时间不超过30天
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/reserve/update
func (r *VCService) UpdateVCReserve(ctx context.Context, request *UpdateVCReserveReq, options ...MethodOptionFunc) (*UpdateVCReserveResp, *Response, error) {
	if r.cli.mock.mockVCUpdateVCReserve != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#UpdateVCReserve mock enable")
		return r.cli.mock.mockVCUpdateVCReserve(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "VC",
		API:                 "UpdateVCReserve",
		Method:              "PUT",
		URL:                 r.cli.openBaseURL + "/open-apis/vc/v1/reserves/:reserve_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(updateVCReserveResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCUpdateVCReserve mock VCUpdateVCReserve method
func (r *Mock) MockVCUpdateVCReserve(f func(ctx context.Context, request *UpdateVCReserveReq, options ...MethodOptionFunc) (*UpdateVCReserveResp, *Response, error)) {
	r.mockVCUpdateVCReserve = f
}

// UnMockVCUpdateVCReserve un-mock VCUpdateVCReserve method
func (r *Mock) UnMockVCUpdateVCReserve() {
	r.mockVCUpdateVCReserve = nil
}

// UpdateVCReserveReq ...
type UpdateVCReserveReq struct {
	UserIDType      *IDType                            `query:"user_id_type" json:"-"`     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ReserveID       string                             `path:"reserve_id" json:"-"`        // 预约ID（预约的唯一标识）, 示例值："6911188411932033028"
	EndTime         *string                            `json:"end_time,omitempty"`         // 预约到期时间（unix时间，单位sec）, 示例值："1608888867"
	MeetingSettings *UpdateVCReserveReqMeetingSettings `json:"meeting_settings,omitempty"` // 会议设置
}

// UpdateVCReserveReqMeetingSettings ...
type UpdateVCReserveReqMeetingSettings struct {
	Topic              *string                                              `json:"topic,omitempty"`                // 会议主题, 示例值："my meeting"
	ActionPermissions  []*UpdateVCReserveReqMeetingSettingsActionPermission `json:"action_permissions,omitempty"`   // 会议权限配置列表，如果存在相同的权限配置项则它们之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
	MeetingInitialType *int64                                               `json:"meeting_initial_type,omitempty"` // 会议初始类型, 示例值：1, 可选值有: `1`：多人会议, `2`：1v1呼叫
	CallSetting        *UpdateVCReserveReqMeetingSettingsCallSetting        `json:"call_setting,omitempty"`         // 1v1呼叫相关参数
}

// UpdateVCReserveReqMeetingSettingsActionPermission ...
type UpdateVCReserveReqMeetingSettingsActionPermission struct {
	Permission         int64                                                                 `json:"permission,omitempty"`          // 权限项, 示例值：1, 可选值有: `1`：是否能成为主持人, `2`：是否能邀请参会人, `3`：是否能加入会议
	PermissionCheckers []*UpdateVCReserveReqMeetingSettingsActionPermissionPermissionChecker `json:"permission_checkers,omitempty"` // 权限检查器列表，权限检查器之间为"逻辑或"的关系（即 有一个为true则拥有该权限）
}

// UpdateVCReserveReqMeetingSettingsActionPermissionPermissionChecker ...
type UpdateVCReserveReqMeetingSettingsActionPermissionPermissionChecker struct {
	CheckField int64    `json:"check_field,omitempty"` // 检查字段类型, 示例值：1, 可选值有: `1`：用户ID, `2`：用户类型, `3`：租户ID
	CheckMode  int64    `json:"check_mode,omitempty"`  // 检查方式, 示例值：1, 可选值有: `1`：在check_list中为有权限（白名单）, `2`：不在check_list中为有权限（黑名单）
	CheckList  []string `json:"check_list,omitempty"`  // 检查字段列表
}

// UpdateVCReserveReqMeetingSettingsCallSetting ...
type UpdateVCReserveReqMeetingSettingsCallSetting struct {
	Callee *UpdateVCReserveReqMeetingSettingsCallSettingCallee `json:"callee,omitempty"` // 被呼叫的用户
}

// UpdateVCReserveReqMeetingSettingsCallSettingCallee ...
type UpdateVCReserveReqMeetingSettingsCallSettingCallee struct {
	ID          *string                                                        `json:"id,omitempty"`            // 用户ID, 示例值："ou_3ec3f6a28a0d08c45d895276e8e5e19b"
	UserType    int64                                                          `json:"user_type,omitempty"`     // 用户类型，当前仅支持用户类型6(pstn用户), 示例值：1, 可选值有: `1`：lark用户, `2`：rooms用户, `3`：文档用户, `4`：neo单品用户, `5`：neo单品游客用户, `6`：pstn用户, `7`：sip用户
	PstnSipInfo *UpdateVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo `json:"pstn_sip_info,omitempty"` // pstn/sip信息
}

// UpdateVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo ...
type UpdateVCReserveReqMeetingSettingsCallSettingCalleePstnSipInfo struct {
	Nickname    *string `json:"nickname,omitempty"`     // 给pstn/sip用户设置的临时昵称, 示例值："dodo"
	MainAddress string  `json:"main_address,omitempty"` // pstn/sip主机号，格式为：[国际冠字]-[电话区号][电话号码]，当前仅支持国内手机及固定电话号码, 示例值："+86-02187654321"
}

// updateVCReserveResp ...
type updateVCReserveResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UpdateVCReserveResp `json:"data,omitempty"`
}

// UpdateVCReserveResp ...
type UpdateVCReserveResp struct {
	Reserve *UpdateVCReserveRespReserve `json:"reserve,omitempty"` // 预约数据
}

// UpdateVCReserveRespReserve ...
type UpdateVCReserveRespReserve struct {
	ID           string `json:"id,omitempty"`            // 预约ID（预约的唯一标识）
	MeetingNo    string `json:"meeting_no,omitempty"`    // 9位会议号（飞书用户可通过输入9位会议号快捷入会）
	URL          string `json:"url,omitempty"`           // 会议链接（飞书用户可通过点击会议链接快捷入会）
	EndTime      string `json:"end_time,omitempty"`      // 预约到期时间（unix时间，单位sec）
	ExpireStatus int64  `json:"expire_status,omitempty"` // 过期状态, 可选值有: `1`：未过期, `2`：已过期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetVCRoomConfig 查询一个范围内的会议室配置。
//
// 根据查询范围传入对应的参数
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_config/query
func (r *VCService) GetVCRoomConfig(ctx context.Context, request *GetVCRoomConfigReq, options ...MethodOptionFunc) (*GetVCRoomConfigResp, *Response, error) {
	if r.cli.mock.mockVCGetVCRoomConfig != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#GetVCRoomConfig mock enable")
		return r.cli.mock.mockVCGetVCRoomConfig(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "GetVCRoomConfig",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/room_configs/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getVCRoomConfigResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCGetVCRoomConfig mock VCGetVCRoomConfig method
func (r *Mock) MockVCGetVCRoomConfig(f func(ctx context.Context, request *GetVCRoomConfigReq, options ...MethodOptionFunc) (*GetVCRoomConfigResp, *Response, error)) {
	r.mockVCGetVCRoomConfig = f
}

// UnMockVCGetVCRoomConfig un-mock VCGetVCRoomConfig method
func (r *Mock) UnMockVCGetVCRoomConfig() {
	r.mockVCGetVCRoomConfig = nil
}

// GetVCRoomConfigReq ...
type GetVCRoomConfigReq struct {
	Scope      int64   `query:"scope" json:"-"`       // 查询节点范围, 示例值：5, 可选值有: `1`：租户, `2`：国家/地区, `3`：城市, `4`：建筑, `5`：楼层, `6`：会议室
	CountryID  *string `query:"country_id" json:"-"`  // 国家/地区ID scope为2，3时需要此参数, 示例值："086"
	DistrictID *string `query:"district_id" json:"-"` // 城市ID scope为3时需要此参数, 示例值："001"
	BuildingID *string `query:"building_id" json:"-"` // 建筑ID scope为4，5时需要此参数, 示例值："22"
	FloorName  *string `query:"floor_name" json:"-"`  // 楼层 scope为5时需要此参数, 示例值："4"
	RoomID     *string `query:"room_id" json:"-"`     // 会议室ID scope为6时需要此参数, 示例值："6383786266263"
}

// getVCRoomConfigResp ...
type getVCRoomConfigResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetVCRoomConfigResp `json:"data,omitempty"`
}

// GetVCRoomConfigResp ...
type GetVCRoomConfigResp struct {
	RoomBackground    string                             `json:"room_background,omitempty"`    // 飞书会议室背景图
	DisplayBackground string                             `json:"display_background,omitempty"` // 飞书签到板背景图
	DigitalSignage    *GetVCRoomConfigRespDigitalSignage `json:"digital_signage,omitempty"`    // 飞书会议室数字标牌
}

// GetVCRoomConfigRespDigitalSignage ...
type GetVCRoomConfigRespDigitalSignage struct {
	Enable       bool                                         `json:"enable,omitempty"`        // 是否开启数字标牌功能
	Mute         bool                                         `json:"mute,omitempty"`          // 是否静音播放
	StartDisplay int64                                        `json:"start_display,omitempty"` // 日程会议开始前n分钟结束播放
	StopDisplay  int64                                        `json:"stop_display,omitempty"`  // 会议结束后n分钟开始播放
	Materials    []*GetVCRoomConfigRespDigitalSignageMaterial `json:"materials,omitempty"`     // 素材列表
}

// GetVCRoomConfigRespDigitalSignageMaterial ...
type GetVCRoomConfigRespDigitalSignageMaterial struct {
	ID           string `json:"id,omitempty"`            // 素材ID
	Name         string `json:"name,omitempty"`          // 素材名称
	MaterialType int64  `json:"material_type,omitempty"` // 素材类型, 可选值有: `1`：图片, `2`：视频, `3`：GIF
	URL          string `json:"url,omitempty"`           // 素材url
	Duration     int64  `json:"duration,omitempty"`      // 播放时长（单位sec）
	Cover        string `json:"cover,omitempty"`         // 素材封面url
	Md5          string `json:"md5,omitempty"`           // 素材文件md5
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetVCRoomConfig 设置一个范围内的会议室配置。
//
// 根据设置范围传入对应的参数
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/room_config/set
func (r *VCService) SetVCRoomConfig(ctx context.Context, request *SetVCRoomConfigReq, options ...MethodOptionFunc) (*SetVCRoomConfigResp, *Response, error) {
	if r.cli.mock.mockVCSetVCRoomConfig != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#SetVCRoomConfig mock enable")
		return r.cli.mock.mockVCSetVCRoomConfig(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "VC",
		API:                   "SetVCRoomConfig",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/vc/v1/room_configs/set",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(setVCRoomConfigResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockVCSetVCRoomConfig mock VCSetVCRoomConfig method
func (r *Mock) MockVCSetVCRoomConfig(f func(ctx context.Context, request *SetVCRoomConfigReq, options ...MethodOptionFunc) (*SetVCRoomConfigResp, *Response, error)) {
	r.mockVCSetVCRoomConfig = f
}

// UnMockVCSetVCRoomConfig un-mock VCSetVCRoomConfig method
func (r *Mock) UnMockVCSetVCRoomConfig() {
	r.mockVCSetVCRoomConfig = nil
}

// SetVCRoomConfigReq ...
type SetVCRoomConfigReq struct {
	Scope      int64                         `json:"scope,omitempty"`       // 设置节点范围, 示例值：5, 可选值有: `1`：租户, `2`：国家/地区, `3`：城市, `4`：建筑, `5`：楼层, `6`：会议室
	CountryID  *string                       `json:"country_id,omitempty"`  // 国家/地区ID scope为2，3时需要此参数, 示例值："086"
	DistrictID *string                       `json:"district_id,omitempty"` // 城市ID scope为3时需要此参数, 示例值："223"
	BuildingID *string                       `json:"building_id,omitempty"` // 建筑ID scope为4，5时需要此参数, 示例值："66"
	FloorName  *string                       `json:"floor_name,omitempty"`  // 楼层 scope为5时需要此参数, 示例值："3"
	RoomID     *string                       `json:"room_id,omitempty"`     // 会议室ID scope为6时需要此参数, 示例值："67687262867363"
	RoomConfig *SetVCRoomConfigReqRoomConfig `json:"room_config,omitempty"` // 会议室设置
}

// SetVCRoomConfigReqRoomConfig ...
type SetVCRoomConfigReqRoomConfig struct {
	RoomBackground    *string                                     `json:"room_background,omitempty"`    // 飞书会议室背景图, 示例值："https://lf1-ttcdn-tos.pstatp.com/obj/xxx"
	DisplayBackground *string                                     `json:"display_background,omitempty"` // 飞书签到板背景图, 示例值："https://lf1-ttcdn-tos.pstatp.com/obj/xxx"
	DigitalSignage    *SetVCRoomConfigReqRoomConfigDigitalSignage `json:"digital_signage,omitempty"`    // 飞书会议室数字标牌
}

// SetVCRoomConfigReqRoomConfigDigitalSignage ...
type SetVCRoomConfigReqRoomConfigDigitalSignage struct {
	Enable       *bool                                                 `json:"enable,omitempty"`        // 是否开启数字标牌功能, 示例值：true
	Mute         *bool                                                 `json:"mute,omitempty"`          // 是否静音播放, 示例值：true
	StartDisplay *int64                                                `json:"start_display,omitempty"` // 日程会议开始前n分钟结束播放, 示例值：3
	StopDisplay  *int64                                                `json:"stop_display,omitempty"`  // 会议结束后n分钟开始播放, 示例值：3
	Materials    []*SetVCRoomConfigReqRoomConfigDigitalSignageMaterial `json:"materials,omitempty"`     // 素材列表
}

// SetVCRoomConfigReqRoomConfigDigitalSignageMaterial ...
type SetVCRoomConfigReqRoomConfigDigitalSignageMaterial struct {
	ID           *string `json:"id,omitempty"`            // 素材ID, 示例值："7847784676276"
	Name         *string `json:"name,omitempty"`          // 素材名称, 示例值："name"
	MaterialType *int64  `json:"material_type,omitempty"` // 素材类型, 示例值：0, 可选值有: `1`：图片, `2`：视频, `3`：GIF
	URL          *string `json:"url,omitempty"`           // 素材url, 示例值："url"
	Duration     *int64  `json:"duration,omitempty"`      // 播放时长（单位sec）, 示例值：15
	Cover        *string `json:"cover,omitempty"`         // 素材封面url, 示例值："url"
	Md5          *string `json:"md5,omitempty"`           // 素材文件md5, 示例值："md5"
}

// setVCRoomConfigResp ...
type setVCRoomConfigResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *SetVCRoomConfigResp `json:"data,omitempty"`
}

// SetVCRoomConfigResp ...
type SetVCRoomConfigResp struct {
}
