// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteRecord 该接口用于删除数据表中的一条记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/delete
func (r *BitableService) DeleteRecord(ctx context.Context, request *DeleteRecordReq, options ...MethodOptionFunc) (*DeleteRecordResp, *Response, error) {
	if r.cli.mock.mockBitableDeleteRecord != nil {
		r.cli.logDebug(ctx, "[lark] Bitable#DeleteRecord mock enable")
		return r.cli.mock.mockBitableDeleteRecord(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Bitable#DeleteRecord call api")
	r.cli.logDebug(ctx, "[lark] Bitable#DeleteRecord request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:              "DELETE",
		URL:                 "https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(deleteRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Bitable#DeleteRecord DELETE https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Bitable#DeleteRecord DELETE https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/:record_id failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Bitable", "DeleteRecord", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Bitable#DeleteRecord request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockBitableDeleteRecord(f func(ctx context.Context, request *DeleteRecordReq, options ...MethodOptionFunc) (*DeleteRecordResp, *Response, error)) {
	r.mockBitableDeleteRecord = f
}

func (r *Mock) UnMockBitableDeleteRecord() {
	r.mockBitableDeleteRecord = nil
}

type DeleteRecordReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID  string `path:"table_id" json:"-"`  // table id, 示例值："tblsRc9GRRXKqhvW"
	RecordID string `path:"record_id" json:"-"` // 单条记录的Id, 示例值："recpCsf4ME"
}

type deleteRecordResp struct {
	Code int               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *DeleteRecordResp `json:"data,omitempty"` //
}

type DeleteRecordResp struct {
	Deleted  bool   `json:"deleted,omitempty"`   // 是否成功删除
	RecordID string `json:"record_id,omitempty"` // 删除的记录 ID
}
