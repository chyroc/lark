// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// UploadAttendanceFile 上传文件并获取文件 ID，可用于“修改用户设置”接口中的 face_key 参数。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload
func (r *AttendanceService) UploadAttendanceFile(ctx context.Context, request *UploadAttendanceFileReq, options ...MethodOptionFunc) (*UploadAttendanceFileResp, *Response, error) {
	if r.cli.mock.mockAttendanceUploadAttendanceFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UploadAttendanceFile mock enable")
		return r.cli.mock.mockAttendanceUploadAttendanceFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UploadAttendanceFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/files/upload",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadAttendanceFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUploadAttendanceFile mock AttendanceUploadAttendanceFile method
func (r *Mock) MockAttendanceUploadAttendanceFile(f func(ctx context.Context, request *UploadAttendanceFileReq, options ...MethodOptionFunc) (*UploadAttendanceFileResp, *Response, error)) {
	r.mockAttendanceUploadAttendanceFile = f
}

// UnMockAttendanceUploadAttendanceFile un-mock AttendanceUploadAttendanceFile method
func (r *Mock) UnMockAttendanceUploadAttendanceFile() {
	r.mockAttendanceUploadAttendanceFile = nil
}

// UploadAttendanceFileReq ...
type UploadAttendanceFileReq struct {
	FileName string    `query:"file_name" json:"-"` // 带后缀的文件名, 示例值："人脸照片.jpg"
	File     io.Reader `json:"file,omitempty"`      // 文件内容, 示例值：二进制文件
}

// uploadAttendanceFileResp ...
type uploadAttendanceFileResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UploadAttendanceFileResp `json:"data,omitempty"`
}

// UploadAttendanceFileResp ...
type UploadAttendanceFileResp struct {
	File *UploadAttendanceFileRespFile `json:"file,omitempty"` // 文件
}

// UploadAttendanceFileRespFile ...
type UploadAttendanceFileRespFile struct {
	FileID string `json:"file_id,omitempty"` // 文件 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceGroup
//
// 考勤组，是对部门或者员工在某个特定场所及特定时间段内的出勤情况（包括上下班、迟到、早退、病假、婚假、丧假、公休、工作时间、加班情况等）的一种规则设定。
// 通过设置考勤组，可以从部门、员工两个维度，来设定考勤方式、考勤时间、考勤地点等考勤规则。
// 出于安全考虑，目前通过该接口只允许修改自己创建的考勤组。
// ## 考勤组负责人
// 考勤组负责人可修改该考勤组的排班，并查看该考勤组的考勤数据。
// 如果考勤组负责人同时被企业管理员赋予了考勤管理员的角色，则该考勤组负责人还拥有考勤管理员的权限，可以编辑及删除考勤规则。
// ## 考勤组人员
// 可按部门、员工两个维度，设置需要参加考勤或无需参加考勤的人员。
// - 若是按部门维度添加的考勤人员，当有新员工加入该部门时，其会自动加入该考勤组。
// - 若是按员工维度添加的考勤人员，当其上级部门被添加到其他考勤组时，该员工不会更换考勤组。
// ## 考勤组类型
// 提供 3 种不同的考勤类型：固定班制、排班制、自由班制。
// - 固定班制：指考勤组内每位人员的上下班时间一致，适用于上下班时间固定或无需安排多个班次的考勤组。
// - 排班制：指考勤组人员的上下班时间不完全一致，可自定义安排每位人员的上下班时间，适用于存在多个班次如早晚班的考勤组。
// - 自由班制：指没有具体的班次，考勤组人员可以在打卡时段内自由打卡，按照打卡时段统计上班时长。
// ## 考勤班次
// - 固定班制下，需设置周一到周日每天安排哪个班次，以及可针对特殊日期进行打卡设置。
// - 排班制下，需对考勤组内每一位人员的每一天进行班次指定。
// - 自由班制下，需设置一天中最早打卡时间和最晚打卡时间，以及一周中哪几天需要打卡。
// ## 考勤方式
// 支持 3 种考勤方式：GPS 打卡、Wi-Fi 打卡、考勤机打卡。
// - GPS 打卡：需设置经纬度信息及考勤地点名称。
// - Wi-Fi 打卡：需设置 Wi-Fi 名称及 Wi-Fi 的 MAC 地址。
// - 考勤机打卡：需设置考勤机名称及考勤机序号。
// ## 考勤其他设置
// - 规则设置：支持设置是否允许外勤打卡，是否允许补卡以及一个月补卡的次数，是否允许 PC 端打卡。
// - 安全设置：支持设置是否开启人脸识别打卡，以及什么情况下开启人脸识别。
// - 统计设置：支持设置考勤组人员是否可以查看到某些维度的统计数据。
// - 加班设置：支持配置加班时间的计算规则。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create
func (r *AttendanceService) CreateAttendanceGroup(ctx context.Context, request *CreateAttendanceGroupReq, options ...MethodOptionFunc) (*CreateAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceGroup mock AttendanceCreateAttendanceGroup method
func (r *Mock) MockAttendanceCreateAttendanceGroup(f func(ctx context.Context, request *CreateAttendanceGroupReq, options ...MethodOptionFunc) (*CreateAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceGroup = f
}

// UnMockAttendanceCreateAttendanceGroup un-mock AttendanceCreateAttendanceGroup method
func (r *Mock) UnMockAttendanceCreateAttendanceGroup() {
	r.mockAttendanceCreateAttendanceGroup = nil
}

// CreateAttendanceGroupReq ...
type CreateAttendanceGroupReq struct {
	EmployeeType EmployeeType                   `query:"employee_type" json:"-"` // 用户 ID 的类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	DeptType     string                         `query:"dept_type" json:"-"`     // 部门 ID 的类型, 示例值："od-fcb45c28a45311afd441b8869541ece8", 可选值有: `open_id`：暂时只支持部门的 openid
	Group        *CreateAttendanceGroupReqGroup `json:"group,omitempty"`         // 6921319402260496386
}

// CreateAttendanceGroupReqGroup ...
type CreateAttendanceGroupReqGroup struct {
	GroupID                *string                                               `json:"group_id,omitempty"`                   // 考勤组 ID（仅修改时提供）, 需要从“获取打卡结果”的接口中获取 groupId, 示例值："6919358128597097404"
	GroupName              string                                                `json:"group_name,omitempty"`                 // 考勤组名称, 示例值："开心考勤"
	TimeZone               string                                                `json:"time_zone,omitempty"`                  // 时区, 示例值："Asia/Shanghai"
	BindDeptIDs            []string                                              `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID, 示例值：od-fcb45c28a45311afd440b7869541fce8
	ExceptDeptIDs          []string                                              `json:"except_dept_ids,omitempty"`            // 排除的部门 ID, 示例值：od-fcb45c28a45311afd440b7869541fce8
	BindUserIDs            []string                                              `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID, 示例值：52aa1fa1
	ExceptUserIDs          []string                                              `json:"except_user_ids,omitempty"`            // 排除的用户 ID, 示例值：52aa1fa1
	GroupLeaderIDs         []string                                              `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段, 示例值：2bg4a9be
	AllowOutPunch          *bool                                                 `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡, 示例值：true
	AllowPcPunch           *bool                                                 `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡, 示例值：true
	AllowRemedy            *bool                                                 `json:"allow_remedy,omitempty"`               // 是否限制补卡, 示例值：true
	RemedyLimit            *bool                                                 `json:"remedy_limit,omitempty"`               // 是否限制补卡次数, 示例值：true
	RemedyLimitCount       *int64                                                `json:"remedy_limit_count,omitempty"`         // 补卡次数, 示例值：3
	RemedyDateLimit        *bool                                                 `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间, 示例值：true
	RemedyDateNum          *int64                                                `json:"remedy_date_num,omitempty"`            // 补卡时间，几天内补卡, 示例值：3
	ShowCumulativeTime     *bool                                                 `json:"show_cumulative_time,omitempty"`       // 是否展示累计时长, 示例值：true
	ShowOverTime           *bool                                                 `json:"show_over_time,omitempty"`             // 是否展示加班时长, 示例值：true
	HideStaffPunchTime     *bool                                                 `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡详情, 示例值：true
	FacePunch              *bool                                                 `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡, 示例值：true
	FacePunchCfg           *int64                                                `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别, 示例值：1
	FaceDowngrade          *bool                                                 `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡, 示例值：true
	ReplaceBasicPic        *bool                                                 `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片, 示例值：true
	Machines               []*CreateAttendanceGroupReqGroupMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               *int64                                                `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）, 示例值：300
	Locations              []*CreateAttendanceGroupReqGroupLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                 `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制, 3：自由班制, 示例值：0
	PunchDayShiftIDs       []string                                              `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填, 示例值：6921319402260496386
	FreePunchCfg           *CreateAttendanceGroupReqGroupFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                 `json:"calendar_id,omitempty"`                // 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1, 示例值：1
	NeedPunchSpecialDays   []*CreateAttendanceGroupReqGroupNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*CreateAttendanceGroupReqGroupNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   *bool                                                 `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡, 示例值：true
	EffectNow              *bool                                                 `json:"effect_now,omitempty"`                 // 是否立即生效，默认 false, 示例值：true
	RemedyPeriodType       *int64                                                `json:"remedy_period_type,omitempty"`         // 补卡周期类型, 示例值：0
	RemedyPeriodCustomDate *int64                                                `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期起始日期, 示例值：1
	PunchType              *int64                                                `json:"punch_type,omitempty"`                 // 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡, 示例值：1
}

// CreateAttendanceGroupReqGroupMachine ...
type CreateAttendanceGroupReqGroupMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号, 示例值："FS0701"
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称, 示例值："创实 9 楼"
}

// CreateAttendanceGroupReqGroupLocation ...
type CreateAttendanceGroupReqGroupLocation struct {
	LocationName string   `json:"location_name,omitempty"` // 地址名称, 示例值："浙江省杭州市余杭区五常街道木桥头西溪八方城"
	LocationType int64    `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wi-Fi，8：IP, 示例值：1
	Latitude     *float64 `json:"latitude,omitempty"`      // 地址纬度, 示例值：30.28994
	Longitude    *float64 `json:"longitude,omitempty"`     // 地址经度, 示例值：120.04509
	Ssid         *string  `json:"ssid,omitempty"`          // Wi-Fi 名称, 示例值："TP-Link-af12ca"
	Bssid        *string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址, 示例值："08:00:20:0A:8C:6D"
	MapType      *int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌, 示例值：1
	Address      *string  `json:"address,omitempty"`       // 地址名称, 示例值："北京市海淀区中航广场"
	Ip           *string  `json:"ip,omitempty"`            // IP 地址, 示例值："122.224.123.146"
	Feature      *string  `json:"feature,omitempty"`       // 额外信息，例如：运营商信息, 示例值："中国电信"
	GpsRange     *int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围, 示例值：300
}

// CreateAttendanceGroupReqGroupFreePunchCfg ...
type CreateAttendanceGroupReqGroupFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制打卡开始时间, 示例值："7:00"
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制打卡结束时间, 示例值："18:00"
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班, 示例值：1111100
	WorkDayNoPunchAsLack *bool  `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡, 示例值：true
}

// CreateAttendanceGroupReqGroupNeedPunchSpecialDay ...
type CreateAttendanceGroupReqGroupNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期, 示例值：20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID, 示例值："6919668827865513935"
}

// CreateAttendanceGroupReqGroupNoNeedPunchSpecialDay ...
type CreateAttendanceGroupReqGroupNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期, 示例值：20190101
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID, 示例值："6919668827865513935"
}

// createAttendanceGroupResp ...
type createAttendanceGroupResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceGroupResp `json:"data,omitempty"`
}

// CreateAttendanceGroupResp ...
type CreateAttendanceGroupResp struct {
	Group *CreateAttendanceGroupRespGroup `json:"group,omitempty"` // 6921319402260496386
}

// CreateAttendanceGroupRespGroup ...
type CreateAttendanceGroupRespGroup struct {
	GroupID                string                                                 `json:"group_id,omitempty"`                   // 考勤组 ID（仅修改时提供）, 需要从“获取打卡结果”的接口中获取 groupId
	GroupName              string                                                 `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                                 `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                               `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                               `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                               `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                               `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                               `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	AllowOutPunch          bool                                                   `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                                   `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                                   `json:"allow_remedy,omitempty"`               // 是否限制补卡
	RemedyLimit            bool                                                   `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                                  `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyDateLimit        bool                                                   `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                                  `json:"remedy_date_num,omitempty"`            // 补卡时间，几天内补卡
	ShowCumulativeTime     bool                                                   `json:"show_cumulative_time,omitempty"`       // 是否展示累计时长
	ShowOverTime           bool                                                   `json:"show_over_time,omitempty"`             // 是否展示加班时长
	HideStaffPunchTime     bool                                                   `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡详情
	FacePunch              bool                                                   `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                                  `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                                   `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                                   `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*CreateAttendanceGroupRespGroupMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                                  `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*CreateAttendanceGroupRespGroupLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                                  `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制, 3：自由班制
	PunchDayShiftIDs       []string                                               `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *CreateAttendanceGroupRespGroupFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                                  `json:"calendar_id,omitempty"`                // 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1
	NeedPunchSpecialDays   []*CreateAttendanceGroupRespGroupNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*CreateAttendanceGroupRespGroupNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                                   `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡
	EffectNow              bool                                                   `json:"effect_now,omitempty"`                 // 是否立即生效，默认 false
	RemedyPeriodType       int64                                                  `json:"remedy_period_type,omitempty"`         // 补卡周期类型
	RemedyPeriodCustomDate int64                                                  `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期起始日期
	PunchType              int64                                                  `json:"punch_type,omitempty"`                 // 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡
}

// CreateAttendanceGroupRespGroupMachine ...
type CreateAttendanceGroupRespGroupMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

// CreateAttendanceGroupRespGroupLocation ...
type CreateAttendanceGroupRespGroupLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wi-Fi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如：运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围
}

// CreateAttendanceGroupRespGroupFreePunchCfg ...
type CreateAttendanceGroupRespGroupFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

// CreateAttendanceGroupRespGroupNeedPunchSpecialDay ...
type CreateAttendanceGroupRespGroupNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// CreateAttendanceGroupRespGroupNoNeedPunchSpecialDay ...
type CreateAttendanceGroupRespGroupNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteAttendanceGroup 通过班次 ID 删除班次。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/delete
func (r *AttendanceService) DeleteAttendanceGroup(ctx context.Context, request *DeleteAttendanceGroupReq, options ...MethodOptionFunc) (*DeleteAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceDeleteAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceDeleteAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DeleteAttendanceGroup",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceDeleteAttendanceGroup mock AttendanceDeleteAttendanceGroup method
func (r *Mock) MockAttendanceDeleteAttendanceGroup(f func(ctx context.Context, request *DeleteAttendanceGroupReq, options ...MethodOptionFunc) (*DeleteAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceDeleteAttendanceGroup = f
}

// UnMockAttendanceDeleteAttendanceGroup un-mock AttendanceDeleteAttendanceGroup method
func (r *Mock) UnMockAttendanceDeleteAttendanceGroup() {
	r.mockAttendanceDeleteAttendanceGroup = nil
}

// DeleteAttendanceGroupReq ...
type DeleteAttendanceGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query), 示例值："6919358128597097404"
}

// deleteAttendanceGroupResp ...
type deleteAttendanceGroupResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteAttendanceGroupResp `json:"data,omitempty"`
}

// DeleteAttendanceGroupResp ...
type DeleteAttendanceGroupResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceGroup 通过考勤组 ID 获取考勤组详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/get
func (r *AttendanceService) GetAttendanceGroup(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceGroup mock AttendanceGetAttendanceGroup method
func (r *Mock) MockAttendanceGetAttendanceGroup(f func(ctx context.Context, request *GetAttendanceGroupReq, options ...MethodOptionFunc) (*GetAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceGetAttendanceGroup = f
}

// UnMockAttendanceGetAttendanceGroup un-mock AttendanceGetAttendanceGroup method
func (r *Mock) UnMockAttendanceGetAttendanceGroup() {
	r.mockAttendanceGetAttendanceGroup = nil
}

// GetAttendanceGroupReq ...
type GetAttendanceGroupReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 用户 ID 的类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employeeId, `employee_no`：员工工号
	DeptType     string       `query:"dept_type" json:"-"`     // 部门 ID 的类型, 示例值："od-fcb45c28a45311afd441b8869541ece8", 可选值有: `open_id`：暂时只支持部门的 openid
	GroupID      string       `path:"group_id" json:"-"`       // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query), 示例值："6919358128597097404"
}

// getAttendanceGroupResp ...
type getAttendanceGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceGroupResp `json:"data,omitempty"`
}

// GetAttendanceGroupResp ...
type GetAttendanceGroupResp struct {
	GroupID                string                                         `json:"group_id,omitempty"`                   // 考勤组 ID（仅修改时提供）, 需要从“获取打卡结果”的接口中获取 groupId
	GroupName              string                                         `json:"group_name,omitempty"`                 // 考勤组名称
	TimeZone               string                                         `json:"time_zone,omitempty"`                  // 时区
	BindDeptIDs            []string                                       `json:"bind_dept_ids,omitempty"`              // 绑定的部门 ID
	ExceptDeptIDs          []string                                       `json:"except_dept_ids,omitempty"`            // 排除的部门 ID
	BindUserIDs            []string                                       `json:"bind_user_ids,omitempty"`              // 绑定的用户 ID
	ExceptUserIDs          []string                                       `json:"except_user_ids,omitempty"`            // 排除的用户 ID
	GroupLeaderIDs         []string                                       `json:"group_leader_ids,omitempty"`           // 考勤负责人 ID 列表，必选字段
	AllowOutPunch          bool                                           `json:"allow_out_punch,omitempty"`            // 是否允许外勤打卡
	AllowPcPunch           bool                                           `json:"allow_pc_punch,omitempty"`             // 是否允许 PC 端打卡
	AllowRemedy            bool                                           `json:"allow_remedy,omitempty"`               // 是否限制补卡
	RemedyLimit            bool                                           `json:"remedy_limit,omitempty"`               // 是否限制补卡次数
	RemedyLimitCount       int64                                          `json:"remedy_limit_count,omitempty"`         // 补卡次数
	RemedyDateLimit        bool                                           `json:"remedy_date_limit,omitempty"`          // 是否限制补卡时间
	RemedyDateNum          int64                                          `json:"remedy_date_num,omitempty"`            // 补卡时间，几天内补卡
	ShowCumulativeTime     bool                                           `json:"show_cumulative_time,omitempty"`       // 是否展示累计时长
	ShowOverTime           bool                                           `json:"show_over_time,omitempty"`             // 是否展示加班时长
	HideStaffPunchTime     bool                                           `json:"hide_staff_punch_time,omitempty"`      // 是否隐藏员工打卡详情
	FacePunch              bool                                           `json:"face_punch,omitempty"`                 // 是否开启人脸识别打卡
	FacePunchCfg           int64                                          `json:"face_punch_cfg,omitempty"`             // 人脸识别打卡规则，1：每次打卡均需人脸识别，2：疑似作弊打卡时需要人脸识别
	FaceDowngrade          bool                                           `json:"face_downgrade,omitempty"`             // 人脸识别失败时是否允许普通拍照打卡
	ReplaceBasicPic        bool                                           `json:"replace_basic_pic,omitempty"`          // 人脸识别失败时是否允许替换基准图片
	Machines               []*GetAttendanceGroupRespMachine               `json:"machines,omitempty"`                   // 考勤机列表
	GpsRange               int64                                          `json:"gps_range,omitempty"`                  // GPS 打卡的有效范围（不建议使用）
	Locations              []*GetAttendanceGroupRespLocation              `json:"locations,omitempty"`                  // 地址列表
	GroupType              int64                                          `json:"group_type,omitempty"`                 // 考勤类型，0：固定班制，2：排班制, 3：自由班制
	PunchDayShiftIDs       []string                                       `json:"punch_day_shift_ids,omitempty"`        // 固定班制必须填
	FreePunchCfg           *GetAttendanceGroupRespFreePunchCfg            `json:"free_punch_cfg,omitempty"`             // 配置自由班制
	CalendarID             int64                                          `json:"calendar_id,omitempty"`                // 国家日历  ID，0：不根据国家日历排休，1：中国大陆，2：美国，3：日本，4：印度，5：新加坡，默认 1
	NeedPunchSpecialDays   []*GetAttendanceGroupRespNeedPunchSpecialDay   `json:"need_punch_special_days,omitempty"`    // 必须打卡的特殊日期
	NoNeedPunchSpecialDays []*GetAttendanceGroupRespNoNeedPunchSpecialDay `json:"no_need_punch_special_days,omitempty"` // 无需打卡的特殊日期
	WorkDayNoPunchAsLack   bool                                           `json:"work_day_no_punch_as_lack,omitempty"`  // 自由班制下工作日不打卡是否记为缺卡
	EffectNow              bool                                           `json:"effect_now,omitempty"`                 // 是否立即生效，默认 false
	RemedyPeriodType       int64                                          `json:"remedy_period_type,omitempty"`         // 补卡周期类型
	RemedyPeriodCustomDate int64                                          `json:"remedy_period_custom_date,omitempty"`  // 补卡自定义周期起始日期
	PunchType              int64                                          `json:"punch_type,omitempty"`                 // 打卡类型，位运算。1：GPS 打卡，2：Wi-Fi 打卡，4：考勤机打卡，8：IP 打卡
}

// GetAttendanceGroupRespMachine ...
type GetAttendanceGroupRespMachine struct {
	MachineSn   string `json:"machine_sn,omitempty"`   // 考勤机序列号
	MachineName string `json:"machine_name,omitempty"` // 考勤机名称
}

// GetAttendanceGroupRespLocation ...
type GetAttendanceGroupRespLocation struct {
	LocationID   string  `json:"location_id,omitempty"`   // 地址 ID
	LocationName string  `json:"location_name,omitempty"` // 地址名称
	LocationType int64   `json:"location_type,omitempty"` // 地址类型，1：GPS，2：Wi-Fi，8：IP
	Latitude     float64 `json:"latitude,omitempty"`      // 地址纬度
	Longitude    float64 `json:"longitude,omitempty"`     // 地址经度
	Ssid         string  `json:"ssid,omitempty"`          // Wi-Fi 名称
	Bssid        string  `json:"bssid,omitempty"`         // Wi-Fi 的 MAC 地址
	MapType      int64   `json:"map_type,omitempty"`      // 地图类型，1：高德, 2：谷歌
	Address      string  `json:"address,omitempty"`       // 地址名称
	Ip           string  `json:"ip,omitempty"`            // IP 地址
	Feature      string  `json:"feature,omitempty"`       // 额外信息，例如：运营商信息
	GpsRange     int64   `json:"gps_range,omitempty"`     // GPS 打卡的有效范围
}

// GetAttendanceGroupRespFreePunchCfg ...
type GetAttendanceGroupRespFreePunchCfg struct {
	FreeStartTime        string `json:"free_start_time,omitempty"`           // 自由班制打卡开始时间
	FreeEndTime          string `json:"free_end_time,omitempty"`             // 自由班制打卡结束时间
	PunchDay             int64  `json:"punch_day,omitempty"`                 // 打卡的时间，为 7 位数字，每一位依次代表周一到周日，0 为不上班，1 为上班
	WorkDayNoPunchAsLack bool   `json:"work_day_no_punch_as_lack,omitempty"` // 工作日不打卡是否记为缺卡
}

// GetAttendanceGroupRespNeedPunchSpecialDay ...
type GetAttendanceGroupRespNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// GetAttendanceGroupRespNoNeedPunchSpecialDay ...
type GetAttendanceGroupRespNoNeedPunchSpecialDay struct {
	PunchDay int64  `json:"punch_day,omitempty"` // 打卡日期
	ShiftID  string `json:"shift_id,omitempty"`  // 班次 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchAttendanceGroup 按考勤组名称查询考勤组摘要信息。查询条件支持名称精确匹配和模糊匹配两种方式。查询结果按考勤组修改时间 desc 排序，且最大记录数为 10 条。
//
// 该接口依赖的数据和考勤组主数据间存在数据同步延时（正常数据同步 2 秒以内），因此在使用该接口时需注意评估数据延迟潜在风险。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search
func (r *AttendanceService) SearchAttendanceGroup(ctx context.Context, request *SearchAttendanceGroupReq, options ...MethodOptionFunc) (*SearchAttendanceGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceSearchAttendanceGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#SearchAttendanceGroup mock enable")
		return r.cli.mock.mockAttendanceSearchAttendanceGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "SearchAttendanceGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/groups/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchAttendanceGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceSearchAttendanceGroup mock AttendanceSearchAttendanceGroup method
func (r *Mock) MockAttendanceSearchAttendanceGroup(f func(ctx context.Context, request *SearchAttendanceGroupReq, options ...MethodOptionFunc) (*SearchAttendanceGroupResp, *Response, error)) {
	r.mockAttendanceSearchAttendanceGroup = f
}

// UnMockAttendanceSearchAttendanceGroup un-mock AttendanceSearchAttendanceGroup method
func (r *Mock) UnMockAttendanceSearchAttendanceGroup() {
	r.mockAttendanceSearchAttendanceGroup = nil
}

// SearchAttendanceGroupReq ...
type SearchAttendanceGroupReq struct {
	GroupName      string `json:"group_name,omitempty"`      // 考勤组名称, 示例值："考勤组1"
	ExactlyMatched *bool  `json:"exactly_matched,omitempty"` // 是否精准匹配，默认为 false：模糊匹配；true：精准匹配, 示例值：true
}

// searchAttendanceGroupResp ...
type searchAttendanceGroupResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *SearchAttendanceGroupResp `json:"data,omitempty"`
}

// SearchAttendanceGroupResp ...
type SearchAttendanceGroupResp struct {
	GroupList []*SearchAttendanceGroupRespGroup `json:"group_list,omitempty"` // 考勤组列表
}

// SearchAttendanceGroupRespGroup ...
type SearchAttendanceGroupRespGroup struct {
	GroupID   string `json:"group_id,omitempty"`   // 考勤组 ID
	GroupName string `json:"group_name,omitempty"` // 考勤组名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// InitAttendanceRemedyApproval
//
// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书的考勤系统中。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/notify-remedy-approval-initiation
func (r *AttendanceService) InitAttendanceRemedyApproval(ctx context.Context, request *InitAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*InitAttendanceRemedyApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceInitAttendanceRemedyApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#InitAttendanceRemedyApproval mock enable")
		return r.cli.mock.mockAttendanceInitAttendanceRemedyApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "InitAttendanceRemedyApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(initAttendanceRemedyApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceInitAttendanceRemedyApproval mock AttendanceInitAttendanceRemedyApproval method
func (r *Mock) MockAttendanceInitAttendanceRemedyApproval(f func(ctx context.Context, request *InitAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*InitAttendanceRemedyApprovalResp, *Response, error)) {
	r.mockAttendanceInitAttendanceRemedyApproval = f
}

// UnMockAttendanceInitAttendanceRemedyApproval un-mock AttendanceInitAttendanceRemedyApproval method
func (r *Mock) UnMockAttendanceInitAttendanceRemedyApproval() {
	r.mockAttendanceInitAttendanceRemedyApproval = nil
}

// InitAttendanceRemedyApprovalReq ...
type InitAttendanceRemedyApprovalReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期
	PunchNo      int64        `json:"punch_no,omitempty"`      // 第几次上下班，可用值【0（第 1 次上下班），1（第 2 次上下班），2（第 3 次上下班）】，自由班次时填 0
	WorkType     int64        `json:"work_type,omitempty"`     // 上班/下班，1：上班，2：下班，自由班次时填 0
	RemedyTime   string       `json:"remedy_time,omitempty"`   // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Reason       string       `json:"reason,omitempty"`        // 补卡原因
}

// initAttendanceRemedyApprovalResp ...
type initAttendanceRemedyApprovalResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *InitAttendanceRemedyApprovalResp `json:"data,omitempty"` // -
}

// InitAttendanceRemedyApprovalResp ...
type InitAttendanceRemedyApprovalResp struct {
	UserRemedy *InitAttendanceRemedyApprovalRespUserRemedy `json:"user_remedy,omitempty"`
}

// InitAttendanceRemedyApprovalRespUserRemedy ...
type InitAttendanceRemedyApprovalRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	ApprovalID string `json:"approval_id,omitempty"` // 审批实例 ID，可用于通知审批状态更新
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班，可用值【0（第 1 次上下班），1（第2次上下班），2（第3次上下班）】，自由班次时填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班/下班，1：上班，2：下班
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Reason     string `json:"reason,omitempty"`      // 补卡原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceRemedyApproval
//
// 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口更新写入飞书考勤系统中的三方系统审批状态，例如请假、加班、外出、出差、补卡等审批，状态包括通过、不通过、撤销等。
// 发起状态的审批才可以被更新为通过、不通过，已经通过的审批才可以被更新为撤销。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/notify-approval-status-update
func (r *AttendanceService) UpdateAttendanceRemedyApproval(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceRemedyApproval mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceRemedyApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceRemedyApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/approval_infos/process",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceRemedyApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUpdateAttendanceRemedyApproval mock AttendanceUpdateAttendanceRemedyApproval method
func (r *Mock) MockAttendanceUpdateAttendanceRemedyApproval(f func(ctx context.Context, request *UpdateAttendanceRemedyApprovalReq, options ...MethodOptionFunc) (*UpdateAttendanceRemedyApprovalResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceRemedyApproval = f
}

// UnMockAttendanceUpdateAttendanceRemedyApproval un-mock AttendanceUpdateAttendanceRemedyApproval method
func (r *Mock) UnMockAttendanceUpdateAttendanceRemedyApproval() {
	r.mockAttendanceUpdateAttendanceRemedyApproval = nil
}

// UpdateAttendanceRemedyApprovalReq ...
type UpdateAttendanceRemedyApprovalReq struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：撤销
}

// updateAttendanceRemedyApprovalResp ...
type updateAttendanceRemedyApprovalResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceRemedyApprovalResp `json:"data,omitempty"` // -
}

// UpdateAttendanceRemedyApprovalResp ...
type UpdateAttendanceRemedyApprovalResp struct {
	ApprovalInfo *UpdateAttendanceRemedyApprovalRespApprovalInfo `json:"approval_info,omitempty"`
}

// UpdateAttendanceRemedyApprovalRespApprovalInfo ...
type UpdateAttendanceRemedyApprovalRespApprovalInfo struct {
	ApprovalID   string `json:"approval_id,omitempty"`   // 审批实例 ID
	ApprovalType string `json:"approval_type,omitempty"` // 审批类型，leave：请假，out：外出，overtime：加班，trip：出差，remedy：补卡
	Status       int64  `json:"status,omitempty"`        // 审批状态，1：不通过，2：通过，4：已撤销
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceShift 班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。
//
// - 创建一个考勤组前，必须先创建一个或者多个班次。
// - 一个公司内的班次是共享的，你可以直接引用他人创建的班次，但是需要注意的是，若他人修改了班次，会影响到你的考勤组及其考勤结果。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create
func (r *AttendanceService) CreateAttendanceShift(ctx context.Context, request *CreateAttendanceShiftReq, options ...MethodOptionFunc) (*CreateAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceShift mock AttendanceCreateAttendanceShift method
func (r *Mock) MockAttendanceCreateAttendanceShift(f func(ctx context.Context, request *CreateAttendanceShiftReq, options ...MethodOptionFunc) (*CreateAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceShift = f
}

// UnMockAttendanceCreateAttendanceShift un-mock AttendanceCreateAttendanceShift method
func (r *Mock) UnMockAttendanceCreateAttendanceShift() {
	r.mockAttendanceCreateAttendanceShift = nil
}

// CreateAttendanceShiftReq ...
type CreateAttendanceShiftReq struct {
	ShiftName         string                                     `json:"shift_name,omitempty"`            // 班次名称, 示例值："早班"
	PunchTimes        int64                                      `json:"punch_times,omitempty"`           // 打卡次数, 示例值：1
	IsFlexible        *bool                                      `json:"is_flexible,omitempty"`           // 是否弹性打卡, 示例值：false
	FlexibleMinutes   *int64                                     `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间, 示例值：60
	NoNeedOff         *bool                                      `json:"no_need_off,omitempty"`           // 不需要打下班卡, 示例值：true
	PunchTimeRule     *CreateAttendanceShiftReqPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *CreateAttendanceShiftReqLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *CreateAttendanceShiftReqRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// CreateAttendanceShiftReqPunchTimeRule ...
type CreateAttendanceShiftReqPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间, 示例值："9:00"
	OffTime             string `json:"off_time,omitempty"`               // 下班时间, 示例值："18:00, 第二天凌晨2点, 26:00"
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到, 示例值：30
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡, 示例值：60
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡, 示例值：60
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退, 示例值：30
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡, 示例值：60
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡, 示例值：60
}

// CreateAttendanceShiftReqLateOffLateOnRule ...
type CreateAttendanceShiftReqLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久, 示例值：60
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久, 示例值：30
}

// CreateAttendanceShiftReqRestTimeRule ...
type CreateAttendanceShiftReqRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始, 示例值："13:00"
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束, 示例值："14:00"
}

// createAttendanceShiftResp ...
type createAttendanceShiftResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceShiftResp `json:"data,omitempty"`
}

// CreateAttendanceShiftResp ...
type CreateAttendanceShiftResp struct {
	Shift *CreateAttendanceShiftRespShift `json:"shift,omitempty"` // 班次
}

// CreateAttendanceShiftRespShift ...
type CreateAttendanceShiftRespShift struct {
	ShiftID           string                                           `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                           `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                            `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                             `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                            `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间
	NoNeedOff         bool                                             `json:"no_need_off,omitempty"`           // 不需要打下班卡
	PunchTimeRule     *CreateAttendanceShiftRespShiftPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *CreateAttendanceShiftRespShiftLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *CreateAttendanceShiftRespShiftRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// CreateAttendanceShiftRespShiftPunchTimeRule ...
type CreateAttendanceShiftRespShiftPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡
}

// CreateAttendanceShiftRespShiftLateOffLateOnRule ...
type CreateAttendanceShiftRespShiftLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久
}

// CreateAttendanceShiftRespShiftRestTimeRule ...
type CreateAttendanceShiftRespShiftRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteAttendanceShift 通过班次 ID 删除班次。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/delete
func (r *AttendanceService) DeleteAttendanceShift(ctx context.Context, request *DeleteAttendanceShiftReq, options ...MethodOptionFunc) (*DeleteAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceDeleteAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceDeleteAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DeleteAttendanceShift",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/:shift_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceDeleteAttendanceShift mock AttendanceDeleteAttendanceShift method
func (r *Mock) MockAttendanceDeleteAttendanceShift(f func(ctx context.Context, request *DeleteAttendanceShiftReq, options ...MethodOptionFunc) (*DeleteAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceDeleteAttendanceShift = f
}

// UnMockAttendanceDeleteAttendanceShift un-mock AttendanceDeleteAttendanceShift method
func (r *Mock) UnMockAttendanceDeleteAttendanceShift() {
	r.mockAttendanceDeleteAttendanceShift = nil
}

// DeleteAttendanceShiftReq ...
type DeleteAttendanceShiftReq struct {
	ShiftID string `path:"shift_id" json:"-"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create), 示例值："6919358778597097404"
}

// deleteAttendanceShiftResp ...
type deleteAttendanceShiftResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteAttendanceShiftResp `json:"data,omitempty"`
}

// DeleteAttendanceShiftResp ...
type DeleteAttendanceShiftResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceShift 通过班次的名称查询班次信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query
func (r *AttendanceService) GetAttendanceShift(ctx context.Context, request *GetAttendanceShiftReq, options ...MethodOptionFunc) (*GetAttendanceShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceShift mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceShift mock AttendanceGetAttendanceShift method
func (r *Mock) MockAttendanceGetAttendanceShift(f func(ctx context.Context, request *GetAttendanceShiftReq, options ...MethodOptionFunc) (*GetAttendanceShiftResp, *Response, error)) {
	r.mockAttendanceGetAttendanceShift = f
}

// UnMockAttendanceGetAttendanceShift un-mock AttendanceGetAttendanceShift method
func (r *Mock) UnMockAttendanceGetAttendanceShift() {
	r.mockAttendanceGetAttendanceShift = nil
}

// GetAttendanceShiftReq ...
type GetAttendanceShiftReq struct {
	ShiftName string `query:"shift_name" json:"-"` // 班次名称, 示例值："早班"
}

// getAttendanceShiftResp ...
type getAttendanceShiftResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceShiftResp `json:"data,omitempty"`
}

// GetAttendanceShiftResp ...
type GetAttendanceShiftResp struct {
	ShiftID           string                                   `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                   `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                    `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                     `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                    `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间
	NoNeedOff         bool                                     `json:"no_need_off,omitempty"`           // 不需要打下班卡
	PunchTimeRule     *GetAttendanceShiftRespPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *GetAttendanceShiftRespLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *GetAttendanceShiftRespRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// GetAttendanceShiftRespPunchTimeRule ...
type GetAttendanceShiftRespPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡
}

// GetAttendanceShiftRespLateOffLateOnRule ...
type GetAttendanceShiftRespLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久
}

// GetAttendanceShiftRespRestTimeRule ...
type GetAttendanceShiftRespRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceShiftDetail 通过班次 ID 获取班次详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/get
func (r *AttendanceService) GetAttendanceShiftDetail(ctx context.Context, request *GetAttendanceShiftDetailReq, options ...MethodOptionFunc) (*GetAttendanceShiftDetailResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceShiftDetail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceShiftDetail mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceShiftDetail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceShiftDetail",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/shifts/:shift_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceShiftDetailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceShiftDetail mock AttendanceGetAttendanceShiftDetail method
func (r *Mock) MockAttendanceGetAttendanceShiftDetail(f func(ctx context.Context, request *GetAttendanceShiftDetailReq, options ...MethodOptionFunc) (*GetAttendanceShiftDetailResp, *Response, error)) {
	r.mockAttendanceGetAttendanceShiftDetail = f
}

// UnMockAttendanceGetAttendanceShiftDetail un-mock AttendanceGetAttendanceShiftDetail method
func (r *Mock) UnMockAttendanceGetAttendanceShiftDetail() {
	r.mockAttendanceGetAttendanceShiftDetail = nil
}

// GetAttendanceShiftDetailReq ...
type GetAttendanceShiftDetailReq struct {
	ShiftID string `path:"shift_id" json:"-"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create), 示例值："6919358778597097404"
}

// getAttendanceShiftDetailResp ...
type getAttendanceShiftDetailResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceShiftDetailResp `json:"data,omitempty"`
}

// GetAttendanceShiftDetailResp ...
type GetAttendanceShiftDetailResp struct {
	ShiftID           string                                         `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                         `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int64                                          `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                           `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int64                                          `json:"flexible_minutes,omitempty"`      // 弹性打卡的时间
	NoNeedOff         bool                                           `json:"no_need_off,omitempty"`           // 不需要打下班卡
	PunchTimeRule     *GetAttendanceShiftDetailRespPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *GetAttendanceShiftDetailRespLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *GetAttendanceShiftDetailRespRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息规则
}

// GetAttendanceShiftDetailRespPunchTimeRule ...
type GetAttendanceShiftDetailRespPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int64  `json:"late_minutes_as_late,omitempty"`   // 晚到多久记为迟到
	LateMinutesAsLack   int64  `json:"late_minutes_as_lack,omitempty"`   // 晚到多久记为缺卡
	OnAdvanceMinutes    int64  `json:"on_advance_minutes,omitempty"`     // 最早多久可打上班卡
	EarlyMinutesAsEarly int64  `json:"early_minutes_as_early,omitempty"` // 早退多久记为早退
	EarlyMinutesAsLack  int64  `json:"early_minutes_as_lack,omitempty"`  // 早退多久记为缺卡
	OffDelayMinutes     int64  `json:"off_delay_minutes,omitempty"`      // 最晚多久可打下班卡
}

// GetAttendanceShiftDetailRespLateOffLateOnRule ...
type GetAttendanceShiftDetailRespLateOffLateOnRule struct {
	LateOffMinutes int64 `json:"late_off_minutes,omitempty"` // 晚走多久
	LateOnMinutes  int64 `json:"late_on_minutes,omitempty"`  // 晚到多久
}

// GetAttendanceShiftDetailRespRestTimeRule ...
type GetAttendanceShiftDetailRespRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserAllowedRemedy
//
// 获取用户某天可以补第几次上/下班卡的时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/query-user-allowed-remedys
func (r *AttendanceService) GetAttendanceUserAllowedRemedy(ctx context.Context, request *GetAttendanceUserAllowedRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserAllowedRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserAllowedRemedy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserAllowedRemedy mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserAllowedRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserAllowedRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserAllowedRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserAllowedRemedy mock AttendanceGetAttendanceUserAllowedRemedy method
func (r *Mock) MockAttendanceGetAttendanceUserAllowedRemedy(f func(ctx context.Context, request *GetAttendanceUserAllowedRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserAllowedRemedyResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserAllowedRemedy = f
}

// UnMockAttendanceGetAttendanceUserAllowedRemedy un-mock AttendanceGetAttendanceUserAllowedRemedy method
func (r *Mock) UnMockAttendanceGetAttendanceUserAllowedRemedy() {
	r.mockAttendanceGetAttendanceUserAllowedRemedy = nil
}

// GetAttendanceUserAllowedRemedyReq ...
type GetAttendanceUserAllowedRemedyReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 查询补卡的日期
}

// getAttendanceUserAllowedRemedyResp ...
type getAttendanceUserAllowedRemedyResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserAllowedRemedyResp `json:"data,omitempty"` // -
}

// GetAttendanceUserAllowedRemedyResp ...
type GetAttendanceUserAllowedRemedyResp struct {
	UserAllowedRemedys *GetAttendanceUserAllowedRemedyRespUserAllowedRemedys `json:"user_allowed_remedys,omitempty"`
}

// GetAttendanceUserAllowedRemedyRespUserAllowedRemedys ...
type GetAttendanceUserAllowedRemedyRespUserAllowedRemedys struct {
	UserID          string `json:"user_id,omitempty"`           // 用户 ID
	RemedyDate      int64  `json:"remedy_date,omitempty"`       // 补卡日期
	IsFreePunch     bool   `json:"is_free_punch,omitempty"`     // 是否为自由班次，若为自由班次，则不用选择考虑第几次上下班，直接选择补卡时间即可
	PunchNo         int64  `json:"punch_no,omitempty"`          // 第几次上下班，可用值：【0（第 1 次上下班），1（第 2 次上下班），2（第 3 次上下班）】
	WorkType        int64  `json:"work_type,omitempty"`         // 上班/下班，1：上班，2：下班
	PunchStatus     string `json:"punch_status,omitempty"`      // 打卡状态，可用值【Early（早退），Late（迟到），Lack（缺卡）】
	NormalPunchTime string `json:"normal_punch_time,omitempty"` // 正常的应打卡时间，时间格式为 yyyy-MM-dd HH:mm
	RemedyStartTime string `json:"remedy_start_time,omitempty"` // 可选的补卡时间的最小值，时间格式为 yyyy-MM-dd HH:mm
	RemedyEndTime   string `json:"remedy_end_time,omitempty"`   // 可选的补卡时间的最大值，时间格式为 yyyy-MM-dd HH:mm
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceUserApproval
//
// 由于部分企业使用的是自己的审批系统，而不是飞书审批系统，因此员工的请假、加班等数据无法流入到飞书考勤系统中，导致员工在请假时间段内依然收到打卡提醒，并且被记为缺卡。
// 对于这些只使用飞书考勤系统，而未使用飞书审批系统的企业，可以通过考勤开放接口的形式，将三方审批结果数据回写到飞书的考勤系统中。
// 目前支持加班、请假、出差和外出这四种审批结果的写入。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//AddApprovalsInLarkAttendance
func (r *AttendanceService) CreateAttendanceUserApproval(ctx context.Context, request *CreateAttendanceUserApprovalReq, options ...MethodOptionFunc) (*CreateAttendanceUserApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceUserApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceUserApproval mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceUserApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceUserApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_approvals",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceUserApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceUserApproval mock AttendanceCreateAttendanceUserApproval method
func (r *Mock) MockAttendanceCreateAttendanceUserApproval(f func(ctx context.Context, request *CreateAttendanceUserApprovalReq, options ...MethodOptionFunc) (*CreateAttendanceUserApprovalResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceUserApproval = f
}

// UnMockAttendanceCreateAttendanceUserApproval un-mock AttendanceCreateAttendanceUserApproval method
func (r *Mock) UnMockAttendanceCreateAttendanceUserApproval() {
	r.mockAttendanceCreateAttendanceUserApproval = nil
}

// CreateAttendanceUserApprovalReq ...
type CreateAttendanceUserApprovalReq struct {
	EmployeeType EmployeeType                                 `query:"employee_type" json:"-"` // 请求体中的 user_id 的员工工号类型，必选字段，可用值：【employee_id（员工employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserApproval *CreateAttendanceUserApprovalReqUserApproval `json:"user_approval,omitempty"` // 审批信息
}

// CreateAttendanceUserApprovalReqUserApproval ...
type CreateAttendanceUserApprovalReqUserApproval struct {
	UserID        string                                                     `json:"user_id,omitempty"`        // 审批用户
	Date          string                                                     `json:"date,omitempty"`           // 审批作用时间
	Outs          []*CreateAttendanceUserApprovalReqUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*CreateAttendanceUserApprovalReqUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*CreateAttendanceUserApprovalReqUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*CreateAttendanceUserApprovalReqUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

// CreateAttendanceUserApprovalReqUserApprovalOut ...
type CreateAttendanceUserApprovalReqUserApprovalOut struct {
	UniqID        string     `json:"uniq_id,omitempty"`        // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit          int64      `json:"unit,omitempty"`           // 外出时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval      int64      `json:"interval,omitempty"`       // 假期时长（单位秒）
	StartTime     string     `json:"start_time,omitempty"`     // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime       string     `json:"end_time,omitempty"`       // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames     *I18nNames `json:"i18n_names,omitempty"`     // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale string     `json:"default_locale,omitempty"` // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason        string     `json:"reason,omitempty"`         // 外出理由
}

// CreateAttendanceUserApprovalReqUserApprovalLeave ...
type CreateAttendanceUserApprovalReqUserApprovalLeave struct {
	UniqID        string     `json:"uniq_id,omitempty"`        // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit          int64      `json:"unit,omitempty"`           // 假期时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval      int64      `json:"interval,omitempty"`       // 假期时长（单位秒）
	StartTime     string     `json:"start_time,omitempty"`     // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime       string     `json:"end_time,omitempty"`       // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames     *I18nNames `json:"i18n_names,omitempty"`     // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale string     `json:"default_locale,omitempty"` // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason        string     `json:"reason,omitempty"`         // 请假理由，必选字段
}

// CreateAttendanceUserApprovalReqUserApprovalOvertimeWork ...
type CreateAttendanceUserApprovalReqUserApprovalOvertimeWork struct {
	Duration  float64 `json:"duration,omitempty"`   // 加班时长
	Unit      int64   `json:"unit,omitempty"`       // 加班时长单位，可用值：【1（天），2（小时）】
	Category  int64   `json:"category,omitempty"`   // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type      int64   `json:"type,omitempty"`       // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费）】
	StartTime string  `json:"start_time,omitempty"` // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime   string  `json:"end_time,omitempty"`   // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// CreateAttendanceUserApprovalReqUserApprovalTrip ...
type CreateAttendanceUserApprovalReqUserApprovalTrip struct {
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// createAttendanceUserApprovalResp ...
type createAttendanceUserApprovalResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceUserApprovalResp `json:"data,omitempty"` // -
}

// CreateAttendanceUserApprovalResp ...
type CreateAttendanceUserApprovalResp struct {
	UserApprovals []*CreateAttendanceUserApprovalRespUserApproval `json:"user_approvals,omitempty"` // 审批结果列表
}

// CreateAttendanceUserApprovalRespUserApproval ...
type CreateAttendanceUserApprovalRespUserApproval struct {
	UserID        string                                                      `json:"user_id,omitempty"`        // 审批用户 ID
	Date          string                                                      `json:"date,omitempty"`           // 审批作用时间
	Outs          []*CreateAttendanceUserApprovalRespUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*CreateAttendanceUserApprovalRespUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*CreateAttendanceUserApprovalRespUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*CreateAttendanceUserApprovalRespUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

// CreateAttendanceUserApprovalRespUserApprovalOut ...
type CreateAttendanceUserApprovalRespUserApprovalOut struct {
	ApprovalID       string     `json:"approval_id,omitempty"`        // 审批实例ID
	UniqID           string     `json:"uniq_id,omitempty"`            // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 外出时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 假期时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason           string     `json:"reason,omitempty"`             // 外出理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间
}

// CreateAttendanceUserApprovalRespUserApprovalLeave ...
type CreateAttendanceUserApprovalRespUserApprovalLeave struct {
	ApprovalID       string     `json:"approval_id,omitempty"`        // 审批实例ID
	UniqID           string     `json:"uniq_id,omitempty"`            // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 假期时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 假期时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason           string     `json:"reason,omitempty"`             // 请假理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// CreateAttendanceUserApprovalRespUserApprovalOvertimeWork ...
type CreateAttendanceUserApprovalRespUserApprovalOvertimeWork struct {
	ApprovalID string  `json:"approval_id,omitempty"` // 审批实例ID
	Duration   float64 `json:"duration,omitempty"`    // 加班时长
	Unit       int64   `json:"unit,omitempty"`        // 加班时长单位，可用值：【1（天），2（小时）】
	Category   int64   `json:"category,omitempty"`    // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type       int64   `json:"type,omitempty"`        // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费），3（关联加班规则，没有调休或加班费）】
	StartTime  string  `json:"start_time,omitempty"`  // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime    string  `json:"end_time,omitempty"`    // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// CreateAttendanceUserApprovalRespUserApprovalTrip ...
type CreateAttendanceUserApprovalRespUserApprovalTrip struct {
	ApprovalID       string `json:"approval_id,omitempty"`        // 审批实例ID
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserApproval
//
// 获取员工在某段时间内的请假、加班、外出和出差四种审批的通过数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//RetrieveUserApprovals
func (r *AttendanceService) GetAttendanceUserApproval(ctx context.Context, request *GetAttendanceUserApprovalReq, options ...MethodOptionFunc) (*GetAttendanceUserApprovalResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserApproval mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_approvals/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserApproval mock AttendanceGetAttendanceUserApproval method
func (r *Mock) MockAttendanceGetAttendanceUserApproval(f func(ctx context.Context, request *GetAttendanceUserApprovalReq, options ...MethodOptionFunc) (*GetAttendanceUserApprovalResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserApproval = f
}

// UnMockAttendanceGetAttendanceUserApproval un-mock AttendanceGetAttendanceUserApproval method
func (r *Mock) UnMockAttendanceGetAttendanceUserApproval() {
	r.mockAttendanceGetAttendanceUserApproval = nil
}

// GetAttendanceUserApprovalReq ...
type GetAttendanceUserApprovalReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 的员工工号类型，必选字段，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表
	CheckDateFrom int64        `json:"check_date_from,omitempty"` // 查询的起始工作日
	CheckDateTo   int64        `json:"check_date_to,omitempty"`   // 查询的结束工作日，与 check_date_from 的时间间隔不超过30天
}

// getAttendanceUserApprovalResp ...
type getAttendanceUserApprovalResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserApprovalResp `json:"data,omitempty"` // -
}

// GetAttendanceUserApprovalResp ...
type GetAttendanceUserApprovalResp struct {
	UserApprovals []*GetAttendanceUserApprovalRespUserApproval `json:"user_approvals,omitempty"` // 审批结果列表
}

// GetAttendanceUserApprovalRespUserApproval ...
type GetAttendanceUserApprovalRespUserApproval struct {
	UserID        string                                                   `json:"user_id,omitempty"`        // 审批用户 ID
	Date          string                                                   `json:"date,omitempty"`           // 审批作用时间
	Outs          []*GetAttendanceUserApprovalRespUserApprovalOut          `json:"outs,omitempty"`           // 外出信息
	Leaves        []*GetAttendanceUserApprovalRespUserApprovalLeave        `json:"leaves,omitempty"`         // 请假信息
	OvertimeWorks []*GetAttendanceUserApprovalRespUserApprovalOvertimeWork `json:"overtime_works,omitempty"` // 加班信息
	Trips         []*GetAttendanceUserApprovalRespUserApprovalTrip         `json:"trips,omitempty"`          // 出差信息
}

// GetAttendanceUserApprovalRespUserApprovalOut ...
type GetAttendanceUserApprovalRespUserApprovalOut struct {
	UniqID           string     `json:"uniq_id,omitempty"`            // 外出类型唯一 ID，代表一种外出类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 外出时长单位，可用值：【1（天），2（小时），3（半天），4（半小时）】
	Interval         int64      `json:"interval,omitempty"`           // 外出时长（单位秒）
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 外出多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果外出名称没有所对应语言的名称，则会使用默认语言的名称
	Reason           string     `json:"reason,omitempty"`             // 外出理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间
}

// GetAttendanceUserApprovalRespUserApprovalLeave ...
type GetAttendanceUserApprovalRespUserApprovalLeave struct {
	UniqID           string     `json:"uniq_id,omitempty"`            // 假期类型唯一 ID，代表一种假期类型，长度小于 14
	Unit             int64      `json:"unit,omitempty"`               // 假期时长单位，可用值：【1（天），0（小时），4（分钟）】
	StartTime        string     `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string     `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	I18nNames        *I18nNames `json:"i18n_names,omitempty"`         // 假期多语言展示，格式为 map，key 为["ch"、"en"、"ja"]，其中 ch 代表中文，en 代表英文、ja 代表日文
	DefaultLocale    string     `json:"default_locale,omitempty"`     // 默认语言类型，由于飞书客户端支持中、英、日三种语言，当用户切换语言时，如果假期名称没有所对应语言的名称，则会使用默认语言的名称，可用值：【ch（中文），en（英文），ja（日文）】
	Reason           string     `json:"reason,omitempty"`             // 请假理由
	ApprovePassTime  string     `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string     `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// GetAttendanceUserApprovalRespUserApprovalOvertimeWork ...
type GetAttendanceUserApprovalRespUserApprovalOvertimeWork struct {
	Duration  float64 `json:"duration,omitempty"`   // 加班时长
	Unit      int64   `json:"unit,omitempty"`       // 加班时长单位，可用值：【1（天），2（小时）】
	Category  int64   `json:"category,omitempty"`   // 加班日期类型，可用值：【1（工作日），2（休息日），3（节假日）】
	Type      int64   `json:"type,omitempty"`       // 加班规则类型，可用值：【0（不关联加班规则），1（调休），2（加班费）】
	StartTime string  `json:"start_time,omitempty"` // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime   string  `json:"end_time,omitempty"`   // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// GetAttendanceUserApprovalRespUserApprovalTrip ...
type GetAttendanceUserApprovalRespUserApprovalTrip struct {
	StartTime        string `json:"start_time,omitempty"`         // 开始时间，时间格式为 yyyy-MM-dd HH:mm:ss
	EndTime          string `json:"end_time,omitempty"`           // 结束时间，时间格式为 yyyy-MM-dd HH:mm:ss
	Reason           string `json:"reason,omitempty"`             // 出差理由
	ApprovePassTime  string `json:"approve_pass_time,omitempty"`  // 审批通过时间，时间格式为 yyyy-MM-dd HH:mm:ss
	ApproveApplyTime string `json:"approve_apply_time,omitempty"` // 审批申请时间，时间格式为 yyyy-MM-dd HH:mm:ss
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchCreateAttendanceUserDailyShift 班表是用来描述考勤组内人员每天按哪个班次进行上班。目前班表支持按一个整月对一位或多位人员进行排班。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/batch_create
func (r *AttendanceService) BatchCreateAttendanceUserDailyShift(ctx context.Context, request *BatchCreateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchCreateAttendanceUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchCreateAttendanceUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceBatchCreateAttendanceUserDailyShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchCreateAttendanceUserDailyShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_daily_shifts/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchCreateAttendanceUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceBatchCreateAttendanceUserDailyShift mock AttendanceBatchCreateAttendanceUserDailyShift method
func (r *Mock) MockAttendanceBatchCreateAttendanceUserDailyShift(f func(ctx context.Context, request *BatchCreateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceBatchCreateAttendanceUserDailyShift = f
}

// UnMockAttendanceBatchCreateAttendanceUserDailyShift un-mock AttendanceBatchCreateAttendanceUserDailyShift method
func (r *Mock) UnMockAttendanceBatchCreateAttendanceUserDailyShift() {
	r.mockAttendanceBatchCreateAttendanceUserDailyShift = nil
}

// BatchCreateAttendanceUserDailyShiftReq ...
type BatchCreateAttendanceUserDailyShiftReq struct {
	EmployeeType    EmployeeType                                            `query:"employee_type" json:"-"`     // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserDailyShifts []*BatchCreateAttendanceUserDailyShiftReqUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// BatchCreateAttendanceUserDailyShiftReqUserDailyShift ...
type BatchCreateAttendanceUserDailyShiftReqUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query), 示例值："6737202939523236110"
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create), 示例值："6753520403404030215"
	Month   int64  `json:"month,omitempty"`    // 月份, 示例值：202101
	UserID  string `json:"user_id,omitempty"`  // 用户 ID, 示例值："abd754f7"
	DayNo   int64  `json:"day_no,omitempty"`   // 日期, 示例值：21
}

// batchCreateAttendanceUserDailyShiftResp ...
type batchCreateAttendanceUserDailyShiftResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateAttendanceUserDailyShiftResp `json:"data,omitempty"`
}

// BatchCreateAttendanceUserDailyShiftResp ...
type BatchCreateAttendanceUserDailyShiftResp struct {
	UserDailyShifts []*BatchCreateAttendanceUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// BatchCreateAttendanceUserDailyShiftRespUserDailyShift ...
type BatchCreateAttendanceUserDailyShiftRespUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户 ID
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateUpdateAttendanceUserDailyShift
//
// 班表是用来描述考勤组内人员每天按哪个班次进行上班。目前班表支持按一个整月对一位或多位人员进行排班。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//CreateandEditShifts
func (r *AttendanceService) CreateUpdateAttendanceUserDailyShift(ctx context.Context, request *CreateUpdateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*CreateUpdateAttendanceUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateUpdateAttendanceUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateUpdateAttendanceUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceCreateUpdateAttendanceUserDailyShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateUpdateAttendanceUserDailyShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_daily_shifts/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createUpdateAttendanceUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateUpdateAttendanceUserDailyShift mock AttendanceCreateUpdateAttendanceUserDailyShift method
func (r *Mock) MockAttendanceCreateUpdateAttendanceUserDailyShift(f func(ctx context.Context, request *CreateUpdateAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*CreateUpdateAttendanceUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceCreateUpdateAttendanceUserDailyShift = f
}

// UnMockAttendanceCreateUpdateAttendanceUserDailyShift un-mock AttendanceCreateUpdateAttendanceUserDailyShift method
func (r *Mock) UnMockAttendanceCreateUpdateAttendanceUserDailyShift() {
	r.mockAttendanceCreateUpdateAttendanceUserDailyShift = nil
}

// CreateUpdateAttendanceUserDailyShiftReq ...
type CreateUpdateAttendanceUserDailyShiftReq struct {
	EmployeeType    EmployeeType                                             `query:"employee_type" json:"-"`     // 请求体中的 user_id 的员工工号类型可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值："employee_id"
	UserDailyShifts []*CreateUpdateAttendanceUserDailyShiftReqUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// CreateUpdateAttendanceUserDailyShiftReqUserDailyShift ...
type CreateUpdateAttendanceUserDailyShiftReqUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，休息为 0
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

// createUpdateAttendanceUserDailyShiftResp ...
type createUpdateAttendanceUserDailyShiftResp struct {
	Code int64                                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                    `json:"msg,omitempty"`  // 错误描述
	Data *CreateUpdateAttendanceUserDailyShiftResp `json:"data,omitempty"` // -
}

// CreateUpdateAttendanceUserDailyShiftResp ...
type CreateUpdateAttendanceUserDailyShiftResp struct {
	UserDailyShifts []*CreateUpdateAttendanceUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// CreateUpdateAttendanceUserDailyShiftRespUserDailyShift ...
type CreateUpdateAttendanceUserDailyShiftRespUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserDailyShift 支持查询多个用户的排班情况，查询的时间跨度不能超过 30 天。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_daily_shift/query
func (r *AttendanceService) GetAttendanceUserDailyShift(ctx context.Context, request *GetAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*GetAttendanceUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserDailyShift(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserDailyShift",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_daily_shifts/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserDailyShift mock AttendanceGetAttendanceUserDailyShift method
func (r *Mock) MockAttendanceGetAttendanceUserDailyShift(f func(ctx context.Context, request *GetAttendanceUserDailyShiftReq, options ...MethodOptionFunc) (*GetAttendanceUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserDailyShift = f
}

// UnMockAttendanceGetAttendanceUserDailyShift un-mock AttendanceGetAttendanceUserDailyShift method
func (r *Mock) UnMockAttendanceGetAttendanceUserDailyShift() {
	r.mockAttendanceGetAttendanceUserDailyShift = nil
}

// GetAttendanceUserDailyShiftReq ...
type GetAttendanceUserDailyShiftReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表, 示例值：["abd754f7"]
	CheckDateFrom int64        `json:"check_date_from,omitempty"` // 查询的起始工作日, 示例值：20190817
	CheckDateTo   int64        `json:"check_date_to,omitempty"`   // 查询的结束工作日, 示例值：20190820
}

// getAttendanceUserDailyShiftResp ...
type getAttendanceUserDailyShiftResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserDailyShiftResp `json:"data,omitempty"`
}

// GetAttendanceUserDailyShiftResp ...
type GetAttendanceUserDailyShiftResp struct {
	UserDailyShifts []*GetAttendanceUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

// GetAttendanceUserDailyShiftRespUserDailyShift ...
type GetAttendanceUserDailyShiftRespUserDailyShift struct {
	GroupID string `json:"group_id,omitempty"` // 考勤组 ID，获取方式：1）[创建或修改考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/create) 2）[按名称查询考勤组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/group/search) 3）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query)
	ShiftID string `json:"shift_id,omitempty"` // 班次 ID，获取方式：1）[按名称查询班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/query) 2）[创建班次](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/shift/create)
	Month   int64  `json:"month,omitempty"`    // 月份
	UserID  string `json:"user_id,omitempty"`  // 用户 ID
	DayNo   int64  `json:"day_no,omitempty"`   // 日期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchCreateAttendanceUserFlow 导入授权内员工的打卡流水记录。导入后，会根据员工所在的考勤组班次规则，计算最终的打卡状态与结果。
//
// 适用于考勤机数据导入等场景。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create
func (r *AttendanceService) BatchCreateAttendanceUserFlow(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchCreateAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceBatchCreateAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchCreateAttendanceUserFlow",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchCreateAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceBatchCreateAttendanceUserFlow mock AttendanceBatchCreateAttendanceUserFlow method
func (r *Mock) MockAttendanceBatchCreateAttendanceUserFlow(f func(ctx context.Context, request *BatchCreateAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchCreateAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceBatchCreateAttendanceUserFlow = f
}

// UnMockAttendanceBatchCreateAttendanceUserFlow un-mock AttendanceBatchCreateAttendanceUserFlow method
func (r *Mock) UnMockAttendanceBatchCreateAttendanceUserFlow() {
	r.mockAttendanceBatchCreateAttendanceUserFlow = nil
}

// BatchCreateAttendanceUserFlowReq ...
type BatchCreateAttendanceUserFlowReq struct {
	EmployeeType EmployeeType                                  `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 和 creator_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	FlowRecords  []*BatchCreateAttendanceUserFlowReqFlowRecord `json:"flow_records,omitempty"`  // 打卡流水记录列表
}

// BatchCreateAttendanceUserFlowReqFlowRecord ...
type BatchCreateAttendanceUserFlowReqFlowRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID, 示例值："abd754f7"
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID, 示例值："abd754f7"
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息, 示例值："西溪八方城"
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳, 示例值："1611476284"
	Comment      string   `json:"comment,omitempty"`       // 打卡备注, 示例值："上班打卡"
	RecordID     *string  `json:"record_id,omitempty"`     // 打卡记录 ID, 示例值："6709359313699356941"
	Longitude    *float64 `json:"longitude,omitempty"`     // 打卡经度, 示例值：30.28991
	Latitude     *float64 `json:"latitude,omitempty"`      // 打卡纬度, 示例值：120.04513
	Ssid         *string  `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID, 示例值："b0:b8:67:5c:1d:72"
	Bssid        *string  `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址, 示例值："b0:b8:67:5c:1d:72"
	IsField      *bool    `json:"is_field,omitempty"`      // 是否为外勤打卡, 示例值：true
	IsWifi       *bool    `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡, 示例值：true
	Type         *int64   `json:"type,omitempty"`          // 记录生成方式, 示例值：0, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表, 示例值：https://time.clockin.biz/manage/download/6840389754748502021
	DeviceID     *string  `json:"device_id,omitempty"`     // 打卡设备 ID, 示例值："99e0609ee053448596502691a81428654d7ded64c7bd85acd982d26b3636c37d"
}

// batchCreateAttendanceUserFlowResp ...
type batchCreateAttendanceUserFlowResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateAttendanceUserFlowResp `json:"data,omitempty"`
}

// BatchCreateAttendanceUserFlowResp ...
type BatchCreateAttendanceUserFlowResp struct {
	FlowRecords []*BatchCreateAttendanceUserFlowRespFlowRecord `json:"flow_records,omitempty"` // 打卡流水记录列表
}

// BatchCreateAttendanceUserFlowRespFlowRecord ...
type BatchCreateAttendanceUserFlowRespFlowRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetAttendanceUserFlow 批量查询授权内员工的实际打卡流水记录。例如，企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，但是该员工在这期间打了多次卡，该接口会把所有的打卡记录都返回。
//
// 如果只需获取打卡结果，而不需要详细的打卡数据，可使用“获取打卡结果”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query
func (r *AttendanceService) BatchGetAttendanceUserFlow(ctx context.Context, request *BatchGetAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchGetAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceBatchGetAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#BatchGetAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceBatchGetAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "BatchGetAttendanceUserFlow",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceBatchGetAttendanceUserFlow mock AttendanceBatchGetAttendanceUserFlow method
func (r *Mock) MockAttendanceBatchGetAttendanceUserFlow(f func(ctx context.Context, request *BatchGetAttendanceUserFlowReq, options ...MethodOptionFunc) (*BatchGetAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceBatchGetAttendanceUserFlow = f
}

// UnMockAttendanceBatchGetAttendanceUserFlow un-mock AttendanceBatchGetAttendanceUserFlow method
func (r *Mock) UnMockAttendanceBatchGetAttendanceUserFlow() {
	r.mockAttendanceBatchGetAttendanceUserFlow = nil
}

// BatchGetAttendanceUserFlowReq ...
type BatchGetAttendanceUserFlowReq struct {
	EmployeeType          EmployeeType `query:"employee_type" json:"-"`           // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	IncludeTerminatedUser *bool        `query:"include_terminated_user" json:"-"` // 由于新入职用户可以复用已离职用户的employee_no/employee_id。如果true，返回employee_no/employee_id对应的所有在职+离职用户数据；如果false，只返回employee_no/employee_id对应的在职或最近一个离职用户数据, 示例值：true
	UserIDs               []string     `json:"user_ids,omitempty"`                // employee_no 或 employee_id 列表，长度不超过 50, 示例值：[ "abd754f7"]
	CheckTimeFrom         string       `json:"check_time_from,omitempty"`         // 查询的起始时间，时间戳, 示例值："1566641088"
	CheckTimeTo           string       `json:"check_time_to,omitempty"`           // 查询的结束时间，时间戳, 示例值："1566641088"
}

// batchGetAttendanceUserFlowResp ...
type batchGetAttendanceUserFlowResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetAttendanceUserFlowResp `json:"data,omitempty"`
}

// BatchGetAttendanceUserFlowResp ...
type BatchGetAttendanceUserFlowResp struct {
	UserFlowResults []*BatchGetAttendanceUserFlowRespUserFlowResult `json:"user_flow_results,omitempty"` // 打卡记录列表
}

// BatchGetAttendanceUserFlowRespUserFlowResult ...
type BatchGetAttendanceUserFlowRespUserFlowResult struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserFlow 通过打卡记录 ID 获取用户的打卡流水记录。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/get
func (r *AttendanceService) GetAttendanceUserFlow(ctx context.Context, request *GetAttendanceUserFlowReq, options ...MethodOptionFunc) (*GetAttendanceUserFlowResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserFlow != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserFlow mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserFlow(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserFlow",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_flows/:user_flow_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserFlowResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserFlow mock AttendanceGetAttendanceUserFlow method
func (r *Mock) MockAttendanceGetAttendanceUserFlow(f func(ctx context.Context, request *GetAttendanceUserFlowReq, options ...MethodOptionFunc) (*GetAttendanceUserFlowResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserFlow = f
}

// UnMockAttendanceGetAttendanceUserFlow un-mock AttendanceGetAttendanceUserFlow method
func (r *Mock) UnMockAttendanceGetAttendanceUserFlow() {
	r.mockAttendanceGetAttendanceUserFlow = nil
}

// GetAttendanceUserFlowReq ...
type GetAttendanceUserFlowReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 响应体中的 user_id 和 creator_id 的员工工号类型, 示例值："employee_id", 可选值有: `open_id`：开放 openID, `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserFlowID   string       `path:"user_flow_id" json:"-"`   // 打卡流水记录 ID，获取方式：1）[批量查询打卡流水记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/query) 2）[获取打卡结果](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query) 3）[导入打卡流水记录](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_flow/batch_create), 示例值："6708236686834352397"
}

// getAttendanceUserFlowResp ...
type getAttendanceUserFlowResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserFlowResp `json:"data,omitempty"`
}

// GetAttendanceUserFlowResp ...
type GetAttendanceUserFlowResp struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserSettingList 批量查询授权内员工的用户设置信息，包括人脸照片文件 ID、人脸照片更新时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/query
func (r *AttendanceService) GetAttendanceUserSettingList(ctx context.Context, request *GetAttendanceUserSettingListReq, options ...MethodOptionFunc) (*GetAttendanceUserSettingListResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserSettingList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserSettingList mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserSettingList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserSettingList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_settings/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserSettingListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserSettingList mock AttendanceGetAttendanceUserSettingList method
func (r *Mock) MockAttendanceGetAttendanceUserSettingList(f func(ctx context.Context, request *GetAttendanceUserSettingListReq, options ...MethodOptionFunc) (*GetAttendanceUserSettingListResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserSettingList = f
}

// UnMockAttendanceGetAttendanceUserSettingList un-mock AttendanceGetAttendanceUserSettingList method
func (r *Mock) UnMockAttendanceGetAttendanceUserSettingList() {
	r.mockAttendanceGetAttendanceUserSettingList = nil
}

// GetAttendanceUserSettingListReq ...
type GetAttendanceUserSettingListReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserIDs      []string     `json:"user_ids,omitempty"`      // employee_no 或 employee_id 列表, 示例值：["abd754f7"], 最大长度：`100`
}

// getAttendanceUserSettingListResp ...
type getAttendanceUserSettingListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserSettingListResp `json:"data,omitempty"`
}

// GetAttendanceUserSettingListResp ...
type GetAttendanceUserSettingListResp struct {
	UserSettings []*GetAttendanceUserSettingListRespUserSetting `json:"user_settings,omitempty"` // 用户设置信息列表
}

// GetAttendanceUserSettingListRespUserSetting ...
type GetAttendanceUserSettingListRespUserSetting struct {
	UserID            string `json:"user_id,omitempty"`              // 用户 ID
	FaceKey           string `json:"face_key,omitempty"`             // 人脸照片文件 ID，获取方式：[文件上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload)
	FaceKeyUpdateTime string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceUserSetting 修改授权内员工的用户设置信息，包括人脸照片文件 ID。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_setting/modify
func (r *AttendanceService) UpdateAttendanceUserSetting(ctx context.Context, request *UpdateAttendanceUserSettingReq, options ...MethodOptionFunc) (*UpdateAttendanceUserSettingResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceUserSetting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceUserSetting mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceUserSetting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceUserSetting",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_settings/modify",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceUserSettingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUpdateAttendanceUserSetting mock AttendanceUpdateAttendanceUserSetting method
func (r *Mock) MockAttendanceUpdateAttendanceUserSetting(f func(ctx context.Context, request *UpdateAttendanceUserSettingReq, options ...MethodOptionFunc) (*UpdateAttendanceUserSettingResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceUserSetting = f
}

// UnMockAttendanceUpdateAttendanceUserSetting un-mock AttendanceUpdateAttendanceUserSetting method
func (r *Mock) UnMockAttendanceUpdateAttendanceUserSetting() {
	r.mockAttendanceUpdateAttendanceUserSetting = nil
}

// UpdateAttendanceUserSettingReq ...
type UpdateAttendanceUserSettingReq struct {
	EmployeeType EmployeeType                               `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserSetting  *UpdateAttendanceUserSettingReqUserSetting `json:"user_setting,omitempty"`  // 用户设置
}

// UpdateAttendanceUserSettingReqUserSetting ...
type UpdateAttendanceUserSettingReqUserSetting struct {
	UserID            string  `json:"user_id,omitempty"`              // 用户 ID, 示例值："abd754f7"
	FaceKey           string  `json:"face_key,omitempty"`             // 人脸照片文件 ID，获取方式：[文件上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload), 示例值："xxxxxb306842b1c189bc5212eefxxxxx"
	FaceKeyUpdateTime *string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳, 示例值："1625681917"
}

// updateAttendanceUserSettingResp ...
type updateAttendanceUserSettingResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceUserSettingResp `json:"data,omitempty"`
}

// UpdateAttendanceUserSettingResp ...
type UpdateAttendanceUserSettingResp struct {
	UserSetting *UpdateAttendanceUserSettingRespUserSetting `json:"user_setting,omitempty"` // 用户设置
}

// UpdateAttendanceUserSettingRespUserSetting ...
type UpdateAttendanceUserSettingRespUserSetting struct {
	UserID            string `json:"user_id,omitempty"`              // 用户 ID
	FaceKey           string `json:"face_key,omitempty"`             // 人脸照片文件 ID，获取方式：[文件上传](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/upload)
	FaceKeyUpdateTime string `json:"face_key_update_time,omitempty"` // 人脸照片更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserStatsData 查询日度统计或月度统计的统计数据。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_data/query
func (r *AttendanceService) GetAttendanceUserStatsData(ctx context.Context, request *GetAttendanceUserStatsDataReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsDataResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserStatsData != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserStatsData mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserStatsData(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserStatsData",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_datas/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserStatsDataResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserStatsData mock AttendanceGetAttendanceUserStatsData method
func (r *Mock) MockAttendanceGetAttendanceUserStatsData(f func(ctx context.Context, request *GetAttendanceUserStatsDataReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsDataResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserStatsData = f
}

// UnMockAttendanceGetAttendanceUserStatsData un-mock AttendanceGetAttendanceUserStatsData method
func (r *Mock) UnMockAttendanceGetAttendanceUserStatsData() {
	r.mockAttendanceGetAttendanceUserStatsData = nil
}

// GetAttendanceUserStatsDataReq ...
type GetAttendanceUserStatsDataReq struct {
	EmployeeType     EmployeeType `query:"employee_type" json:"-"`      // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	Locale           string       `json:"locale,omitempty"`             // 语言类型, 示例值："zh", 可选值有: `en`：英语, `ja`：日语, `zh`：中文
	StatsType        string       `json:"stats_type,omitempty"`         // 统计类型, 示例值："month", 可选值有: `daily`：日度统计, `month`：月度统计
	StartDate        int64        `json:"start_date,omitempty"`         // 开始时间, 示例值：20210316
	EndDate          int64        `json:"end_date,omitempty"`           // 结束时间,（时间间隔不超过 40 天）, 示例值：20210323
	UserIDs          []string     `json:"user_ids,omitempty"`           // 查询的用户 ID 列表,（用户数量不超过 20）, 示例值：[,        "ec8ddg56",,        "4dbb52f2",,        "4167842e",    ]
	NeedHistory      *bool        `json:"need_history,omitempty"`       // 是否需要历史数据, 示例值：true
	CurrentGroupOnly *bool        `json:"current_group_only,omitempty"` // 只展示当前考勤组, 示例值：true
}

// getAttendanceUserStatsDataResp ...
type getAttendanceUserStatsDataResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserStatsDataResp `json:"data,omitempty"`
}

// GetAttendanceUserStatsDataResp ...
type GetAttendanceUserStatsDataResp struct {
	UserDatas []*GetAttendanceUserStatsDataRespUserData `json:"user_datas,omitempty"` // 用户统计数据
}

// GetAttendanceUserStatsDataRespUserData ...
type GetAttendanceUserStatsDataRespUserData struct {
	Name   string                                        `json:"name,omitempty"`    // 用户姓名
	UserID string                                        `json:"user_id,omitempty"` // 用户 ID
	Datas  []*GetAttendanceUserStatsDataRespUserDataData `json:"datas,omitempty"`   // 用户的统计数据
}

// GetAttendanceUserStatsDataRespUserDataData ...
type GetAttendanceUserStatsDataRespUserDataData struct {
	Code     string                                               `json:"code,omitempty"`     // 字段编号
	Value    string                                               `json:"value,omitempty"`    // 数据值
	Features []*GetAttendanceUserStatsDataRespUserDataDataFeature `json:"features,omitempty"` // 数据属性
}

// GetAttendanceUserStatsDataRespUserDataDataFeature ...
type GetAttendanceUserStatsDataRespUserDataDataFeature struct {
	Key   string `json:"key,omitempty"`   // 统计数据列附加属性的名称
	Value string `json:"value,omitempty"` // 统计数据列附加属性的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserStatsField 查询考勤统计支持的日度统计或月度统计的统计表头。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_field/query
func (r *AttendanceService) GetAttendanceUserStatsField(ctx context.Context, request *GetAttendanceUserStatsFieldReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsFieldResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserStatsField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserStatsField mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserStatsField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserStatsField",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_fields/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserStatsFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserStatsField mock AttendanceGetAttendanceUserStatsField method
func (r *Mock) MockAttendanceGetAttendanceUserStatsField(f func(ctx context.Context, request *GetAttendanceUserStatsFieldReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsFieldResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserStatsField = f
}

// UnMockAttendanceGetAttendanceUserStatsField un-mock AttendanceGetAttendanceUserStatsField method
func (r *Mock) UnMockAttendanceGetAttendanceUserStatsField() {
	r.mockAttendanceGetAttendanceUserStatsField = nil
}

// GetAttendanceUserStatsFieldReq ...
type GetAttendanceUserStatsFieldReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	Locale       string       `json:"locale,omitempty"`        // 语言类型, 示例值："zh", 可选值有: `en`：英语, `ja`：日语, `zh`：中文
	StatsType    string       `json:"stats_type,omitempty"`    // 统计类型, 示例值："daily", 可选值有: `daily`：日度统计, `month`：月度统计
	StartDate    int64        `json:"start_date,omitempty"`    // 开始时间, 示例值：20210316
	EndDate      int64        `json:"end_date,omitempty"`      // 结束时间（时间间隔不超过 40 天）, 示例值：20210323
}

// getAttendanceUserStatsFieldResp ...
type getAttendanceUserStatsFieldResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserStatsFieldResp `json:"data,omitempty"`
}

// GetAttendanceUserStatsFieldResp ...
type GetAttendanceUserStatsFieldResp struct {
	UserStatsField *GetAttendanceUserStatsFieldRespUserStatsField `json:"user_stats_field,omitempty"` // 统计数据表头
}

// GetAttendanceUserStatsFieldRespUserStatsField ...
type GetAttendanceUserStatsFieldRespUserStatsField struct {
	StatsType string                                                `json:"stats_type,omitempty"` // 统计类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                                `json:"user_id,omitempty"`    // 用户 ID
	Fields    []*GetAttendanceUserStatsFieldRespUserStatsFieldField `json:"fields,omitempty"`     // 字段列表
}

// GetAttendanceUserStatsFieldRespUserStatsFieldField ...
type GetAttendanceUserStatsFieldRespUserStatsFieldField struct {
	Code        string                                                          `json:"code,omitempty"`         // 字段编号
	Title       string                                                          `json:"title,omitempty"`        // 字段名称
	ChildFields []*GetAttendanceUserStatsFieldRespUserStatsFieldFieldChildField `json:"child_fields,omitempty"` // 子字段列表
}

// GetAttendanceUserStatsFieldRespUserStatsFieldFieldChildField ...
type GetAttendanceUserStatsFieldRespUserStatsFieldFieldChildField struct {
	Code     string `json:"code,omitempty"`      // 子字段编号
	Title    string `json:"title,omitempty"`     // 子字段名称
	TimeUnit string `json:"time_unit,omitempty"` // 时间单位
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserStatsView 查询开发者定制的日度统计或月度统计的统计报表表头设置信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query
func (r *AttendanceService) GetAttendanceUserStatsView(ctx context.Context, request *GetAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsViewResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserStatsView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserStatsView mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserStatsView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserStatsView",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_views/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserStatsViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserStatsView mock AttendanceGetAttendanceUserStatsView method
func (r *Mock) MockAttendanceGetAttendanceUserStatsView(f func(ctx context.Context, request *GetAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*GetAttendanceUserStatsViewResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserStatsView = f
}

// UnMockAttendanceGetAttendanceUserStatsView un-mock AttendanceGetAttendanceUserStatsView method
func (r *Mock) UnMockAttendanceGetAttendanceUserStatsView() {
	r.mockAttendanceGetAttendanceUserStatsView = nil
}

// GetAttendanceUserStatsViewReq ...
type GetAttendanceUserStatsViewReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	Locale       string       `json:"locale,omitempty"`        // 语言类型, 示例值："zh", 可选值有: `en`：英语, `ja`：日语, `zh`：中文
	StatsType    string       `json:"stats_type,omitempty"`    // 统计类型, 示例值："daily", 可选值有: `daily`：日度统计, `month`：月度统计
}

// getAttendanceUserStatsViewResp ...
type getAttendanceUserStatsViewResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserStatsViewResp `json:"data,omitempty"`
}

// GetAttendanceUserStatsViewResp ...
type GetAttendanceUserStatsViewResp struct {
	View *GetAttendanceUserStatsViewRespView `json:"view,omitempty"` // 统计视图
}

// GetAttendanceUserStatsViewRespView ...
type GetAttendanceUserStatsViewRespView struct {
	ViewID    string                                    `json:"view_id,omitempty"`    // 视图 ID
	StatsType string                                    `json:"stats_type,omitempty"` // 视图类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                    `json:"user_id,omitempty"`    // 用户 ID
	Items     []*GetAttendanceUserStatsViewRespViewItem `json:"items,omitempty"`      // 用户设置字段
}

// GetAttendanceUserStatsViewRespViewItem ...
type GetAttendanceUserStatsViewRespViewItem struct {
	Code       string                                             `json:"code,omitempty"`        // 标题编号
	Title      string                                             `json:"title,omitempty"`       // 标题名称
	ChildItems []*GetAttendanceUserStatsViewRespViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

// GetAttendanceUserStatsViewRespViewItemChildItem ...
type GetAttendanceUserStatsViewRespViewItemChildItem struct {
	Code       string `json:"code,omitempty"`        // 子标题编号
	Value      string `json:"value,omitempty"`       // 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）
	Title      string `json:"title,omitempty"`       // 子标题名称
	ColumnType int64  `json:"column_type,omitempty"` // 列类型
	ReadOnly   bool   `json:"read_only,omitempty"`   // 是否只读
	MinValue   string `json:"min_value,omitempty"`   // 最小值
	MaxValue   string `json:"max_value,omitempty"`   // 最大值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateAttendanceUserStatsView 更新开发者定制的日度统计或月度统计的统计报表表头设置信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/update
func (r *AttendanceService) UpdateAttendanceUserStatsView(ctx context.Context, request *UpdateAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*UpdateAttendanceUserStatsViewResp, *Response, error) {
	if r.cli.mock.mockAttendanceUpdateAttendanceUserStatsView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#UpdateAttendanceUserStatsView mock enable")
		return r.cli.mock.mockAttendanceUpdateAttendanceUserStatsView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "UpdateAttendanceUserStatsView",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_stats_views/:user_stats_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateAttendanceUserStatsViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceUpdateAttendanceUserStatsView mock AttendanceUpdateAttendanceUserStatsView method
func (r *Mock) MockAttendanceUpdateAttendanceUserStatsView(f func(ctx context.Context, request *UpdateAttendanceUserStatsViewReq, options ...MethodOptionFunc) (*UpdateAttendanceUserStatsViewResp, *Response, error)) {
	r.mockAttendanceUpdateAttendanceUserStatsView = f
}

// UnMockAttendanceUpdateAttendanceUserStatsView un-mock AttendanceUpdateAttendanceUserStatsView method
func (r *Mock) UnMockAttendanceUpdateAttendanceUserStatsView() {
	r.mockAttendanceUpdateAttendanceUserStatsView = nil
}

// UpdateAttendanceUserStatsViewReq ...
type UpdateAttendanceUserStatsViewReq struct {
	EmployeeType    EmployeeType                          `query:"employee_type" json:"-"`     // 员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserStatsViewID string                                `path:"user_stats_view_id" json:"-"` // 用户视图 ID，获取方式：1）[查询统计设置](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_stats_view/query), 示例值："TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
	View            *UpdateAttendanceUserStatsViewReqView `json:"view,omitempty"`              // 统计设置
}

// UpdateAttendanceUserStatsViewReqView ...
type UpdateAttendanceUserStatsViewReqView struct {
	ViewID    string                                      `json:"view_id,omitempty"`    // 视图 ID, 示例值："TmpZNU5qTTJORFF6T1RnNU5UTTNOakV6TWl0dGIyNTBhQT09"
	StatsType string                                      `json:"stats_type,omitempty"` // 视图类型, 示例值："month", 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                      `json:"user_id,omitempty"`    // 用户 ID, 示例值："ec8ddg56"
	Items     []*UpdateAttendanceUserStatsViewReqViewItem `json:"items,omitempty"`      // 用户设置字段
}

// UpdateAttendanceUserStatsViewReqViewItem ...
type UpdateAttendanceUserStatsViewReqViewItem struct {
	Code       string                                               `json:"code,omitempty"`        // 标题编号, 示例值："522"
	ChildItems []*UpdateAttendanceUserStatsViewReqViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

// UpdateAttendanceUserStatsViewReqViewItemChildItem ...
type UpdateAttendanceUserStatsViewReqViewItemChildItem struct {
	Code  string `json:"code,omitempty"`  // 子标题编号, 示例值："50101"
	Value string `json:"value,omitempty"` // 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）, 示例值："0"
}

// updateAttendanceUserStatsViewResp ...
type updateAttendanceUserStatsViewResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *UpdateAttendanceUserStatsViewResp `json:"data,omitempty"`
}

// UpdateAttendanceUserStatsViewResp ...
type UpdateAttendanceUserStatsViewResp struct {
	View *UpdateAttendanceUserStatsViewRespView `json:"view,omitempty"` // 视图
}

// UpdateAttendanceUserStatsViewRespView ...
type UpdateAttendanceUserStatsViewRespView struct {
	ViewID    string                                       `json:"view_id,omitempty"`    // 视图 ID
	StatsType string                                       `json:"stats_type,omitempty"` // 视图类型, 可选值有: `daily`：日度统计, `month`：月度统计
	UserID    string                                       `json:"user_id,omitempty"`    // 用户 ID
	Items     []*UpdateAttendanceUserStatsViewRespViewItem `json:"items,omitempty"`      // 用户设置字段
}

// UpdateAttendanceUserStatsViewRespViewItem ...
type UpdateAttendanceUserStatsViewRespViewItem struct {
	Code       string                                                `json:"code,omitempty"`        // 标题编号
	Title      string                                                `json:"title,omitempty"`       // 标题名称
	ChildItems []*UpdateAttendanceUserStatsViewRespViewItemChildItem `json:"child_items,omitempty"` // 子标题
}

// UpdateAttendanceUserStatsViewRespViewItemChildItem ...
type UpdateAttendanceUserStatsViewRespViewItemChildItem struct {
	Code       string `json:"code,omitempty"`        // 子标题编号
	Value      string `json:"value,omitempty"`       // 开关字段，0：关闭，1：开启（非开关字段场景：code = 51501 可选值为1-6）
	Title      string `json:"title,omitempty"`       // 子标题名称
	ColumnType int64  `json:"column_type,omitempty"` // 列类型
	ReadOnly   bool   `json:"read_only,omitempty"`   // 是否只读
	MinValue   string `json:"min_value,omitempty"`   // 最小值
	MaxValue   string `json:"max_value,omitempty"`   // 最大值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTask 获取企业内员工的实际打卡结果，包括上班打卡结果和下班打卡结果。
//
// - 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。
// - 如果要获取打卡的详细数据，如打卡位置等信息，可使用“获取打卡流水记录”或“批量查询打卡流水记录”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task/query
func (r *AttendanceService) GetAttendanceUserTask(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTask mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserTask mock AttendanceGetAttendanceUserTask method
func (r *Mock) MockAttendanceGetAttendanceUserTask(f func(ctx context.Context, request *GetAttendanceUserTaskReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTask = f
}

// UnMockAttendanceGetAttendanceUserTask un-mock AttendanceGetAttendanceUserTask method
func (r *Mock) UnMockAttendanceGetAttendanceUserTask() {
	r.mockAttendanceGetAttendanceUserTask = nil
}

// GetAttendanceUserTaskReq ...
type GetAttendanceUserTaskReq struct {
	EmployeeType          EmployeeType `query:"employee_type" json:"-"`           // 员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	IgnoreInvalidUsers    *bool        `query:"ignore_invalid_users" json:"-"`    // 是否忽略无效和没有权限的用户。如果 true，则返回有效用户的信息，并告知无效和没有权限的用户信息；如果 false，且 user_ids 中存在无效或没有权限的用户，则返回错误, 示例值：true
	IncludeTerminatedUser *bool        `query:"include_terminated_user" json:"-"` // 由于新入职员工可以复用已离职员工的 employee_no/employee_id，如果 true，则返回 employee_no/employee_id 对应的所有在职 + 离职员工的数据；如果 false，则只返回 employee_no/employee_id 对应的在职或最近一个离职员工的数据, 示例值：true
	UserIDs               []string     `json:"user_ids,omitempty"`                // employee_no 或 employee_id 列表, 示例值：abd754f7
	CheckDateFrom         int64        `json:"check_date_from,omitempty"`         // 查询的起始工作日, 示例值：20190817
	CheckDateTo           int64        `json:"check_date_to,omitempty"`           // 查询的结束工作日, 示例值：20190820
}

// getAttendanceUserTaskResp ...
type getAttendanceUserTaskResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskResp `json:"data,omitempty"`
}

// GetAttendanceUserTaskResp ...
type GetAttendanceUserTaskResp struct {
	UserTaskResults     []*GetAttendanceUserTaskRespUserTaskResult `json:"user_task_results,omitempty"`     // 打卡任务列表
	InvalidUserIDs      []string                                   `json:"invalid_user_ids,omitempty"`      // 无效用户 ID 列表
	UnauthorizedUserIDs []string                                   `json:"unauthorized_user_ids,omitempty"` // 没有权限用户 ID 列表
}

// GetAttendanceUserTaskRespUserTaskResult ...
type GetAttendanceUserTaskRespUserTaskResult struct {
	ResultID     string                                           `json:"result_id,omitempty"`     // 打卡记录 ID
	UserID       string                                           `json:"user_id,omitempty"`       // 用户 ID
	EmployeeName string                                           `json:"employee_name,omitempty"` // 用户姓名
	Day          int64                                            `json:"day,omitempty"`           // 日期
	GroupID      string                                           `json:"group_id,omitempty"`      // 考勤组 ID
	ShiftID      string                                           `json:"shift_id,omitempty"`      // 班次 ID
	Records      []*GetAttendanceUserTaskRespUserTaskResultRecord `json:"records,omitempty"`       // 用户考勤记录
}

// GetAttendanceUserTaskRespUserTaskResultRecord ...
type GetAttendanceUserTaskRespUserTaskResultRecord struct {
	CheckInRecordID          string                                                       `json:"check_in_record_id,omitempty"`          // 上班打卡记录 ID
	CheckInRecord            *GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord  `json:"check_in_record,omitempty"`             // 上班打卡记录
	CheckOutRecordID         string                                                       `json:"check_out_record_id,omitempty"`         // 下班打卡记录 ID
	CheckOutRecord           *GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord `json:"check_out_record,omitempty"`            // 下班打卡记录
	CheckInResult            string                                                       `json:"check_in_result,omitempty"`             // 上班打卡结果, 可选值有: `NoNeedCheck`：无需打卡, `SystemCheck`：系统打卡, `Normal`：正常, `Early`：早退, `Late`：迟到, `Lack`：缺卡
	CheckOutResult           string                                                       `json:"check_out_result,omitempty"`            // 下班打卡结果, 可选值有: `NoNeedCheck`：无需打卡, `SystemCheck`：系统打卡, `Normal`：正常, `Early`：早退, `Late`：迟到, `Lack`：缺卡
	CheckInResultSupplement  string                                                       `json:"check_in_result_supplement,omitempty"`  // 上班打卡结果补充, 可选值有: `None`：无, `ManagerModification`：管理员修改, `CardReplacement`：补卡通过, `ShiftChange`：换班, `Travel`：出差, `Leave`：请假, `GoOut`：外出, `CardReplacementApplication`：补卡申请中, `FieldPunch`：外勤打卡
	CheckOutResultSupplement string                                                       `json:"check_out_result_supplement,omitempty"` // 下班打卡结果补充, 可选值有: `None`：无, `ManagerModification`：管理员修改, `CardReplacement`：补卡通过, `ShiftChange`：换班, `Travel`：出差, `Leave`：请假, `GoOut`：外出, `CardReplacementApplication`：补卡申请中, `FieldPunch`：外勤打卡
	CheckInShiftTime         string                                                       `json:"check_in_shift_time,omitempty"`         // 上班打卡时间
	CheckOutShiftTime        string                                                       `json:"check_out_shift_time,omitempty"`        // 下班打卡时间
}

// GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord ...
type GetAttendanceUserTaskRespUserTaskResultRecordCheckInRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord ...
type GetAttendanceUserTaskRespUserTaskResultRecordCheckOutRecord struct {
	UserID       string   `json:"user_id,omitempty"`       // 用户 ID
	CreatorID    string   `json:"creator_id,omitempty"`    // 记录创建者 ID
	LocationName string   `json:"location_name,omitempty"` // 打卡位置名称信息
	CheckTime    string   `json:"check_time,omitempty"`    // 打卡时间，精确到秒的时间戳
	Comment      string   `json:"comment,omitempty"`       // 打卡备注
	RecordID     string   `json:"record_id,omitempty"`     // 打卡记录 ID
	Longitude    float64  `json:"longitude,omitempty"`     // 打卡经度
	Latitude     float64  `json:"latitude,omitempty"`      // 打卡纬度
	Ssid         string   `json:"ssid,omitempty"`          // 打卡 Wi-Fi 的 SSID
	Bssid        string   `json:"bssid,omitempty"`         // 打卡 Wi-Fi 的 MAC 地址
	IsField      bool     `json:"is_field,omitempty"`      // 是否为外勤打卡
	IsWifi       bool     `json:"is_wifi,omitempty"`       // 是否为 Wi-Fi 打卡
	Type         int64    `json:"type,omitempty"`          // 记录生成方式, 可选值有: `0`：用户打卡, `1`：管理员修改, `2`：用户补卡, `3`：系统自动生成, `4`：下班免打卡, `5`：考勤机, `6`：极速打卡, `7`：考勤开放平台导入
	PhotoURLs    []string `json:"photo_urls,omitempty"`    // 打卡照片列表
	DeviceID     string   `json:"device_id,omitempty"`     // 打卡设备 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTaskRemedyAllowedRemedyList 获取用户某天可以补的第几次上 / 下班卡的时间。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query_user_allowed_remedys
func (r *AttendanceService) GetAttendanceUserTaskRemedyAllowedRemedyList(ctx context.Context, request *GetAttendanceUserTaskRemedyAllowedRemedyListReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyAllowedRemedyListResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTaskRemedyAllowedRemedyList mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTaskRemedyAllowedRemedyList",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys/query_user_allowed_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskRemedyAllowedRemedyListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList mock AttendanceGetAttendanceUserTaskRemedyAllowedRemedyList method
func (r *Mock) MockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList(f func(ctx context.Context, request *GetAttendanceUserTaskRemedyAllowedRemedyListReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyAllowedRemedyListResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList = f
}

// UnMockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList un-mock AttendanceGetAttendanceUserTaskRemedyAllowedRemedyList method
func (r *Mock) UnMockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList() {
	r.mockAttendanceGetAttendanceUserTaskRemedyAllowedRemedyList = nil
}

// GetAttendanceUserTaskRemedyAllowedRemedyListReq ...
type GetAttendanceUserTaskRemedyAllowedRemedyListReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID, 示例值："abd754f7"
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期, 示例值：20210104
}

// getAttendanceUserTaskRemedyAllowedRemedyListResp ...
type getAttendanceUserTaskRemedyAllowedRemedyListResp struct {
	Code int64                                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                            `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskRemedyAllowedRemedyListResp `json:"data,omitempty"`
}

// GetAttendanceUserTaskRemedyAllowedRemedyListResp ...
type GetAttendanceUserTaskRemedyAllowedRemedyListResp struct {
	UserAllowedRemedys []*GetAttendanceUserTaskRemedyAllowedRemedyListRespUserAllowedRemedy `json:"user_allowed_remedys,omitempty"` // 用户可补卡时间
}

// GetAttendanceUserTaskRemedyAllowedRemedyListRespUserAllowedRemedy ...
type GetAttendanceUserTaskRemedyAllowedRemedyListRespUserAllowedRemedy struct {
	UserID          string `json:"user_id,omitempty"`           // 用户 ID
	RemedyDate      int64  `json:"remedy_date,omitempty"`       // 补卡日期
	IsFreePunch     bool   `json:"is_free_punch,omitempty"`     // 是否为自由班次，若为自由班次，则不用选择考虑第几次上下班，直接选择补卡时间即可
	PunchNo         int64  `json:"punch_no,omitempty"`          // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班
	WorkType        int64  `json:"work_type,omitempty"`         // 上班 / 下班，1：上班，2：下班
	PunchStatus     string `json:"punch_status,omitempty"`      // 打卡状态，Early：早退，Late：迟到，Lack：缺卡
	NormalPunchTime string `json:"normal_punch_time,omitempty"` // 正常的应打卡时间，时间格式为 yyyy-MM-dd HH:mm
	RemedyStartTime string `json:"remedy_start_time,omitempty"` // 可选的补卡时间的最小值，时间格式为 yyyy-MM-dd HH:mm
	RemedyEndTime   string `json:"remedy_end_time,omitempty"`   // 可选的补卡时间的最大值，时间格式为 yyyy-MM-dd HH:mm
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateAttendanceUserTaskRemedy 对于只使用飞书考勤系统而未使用飞书审批系统的企业，可以通过该接口，将在三方审批系统中发起的补卡审批数据，写入到飞书考勤系统中。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/create
func (r *AttendanceService) CreateAttendanceUserTaskRemedy(ctx context.Context, request *CreateAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*CreateAttendanceUserTaskRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateAttendanceUserTaskRemedy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateAttendanceUserTaskRemedy mock enable")
		return r.cli.mock.mockAttendanceCreateAttendanceUserTaskRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "CreateAttendanceUserTaskRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createAttendanceUserTaskRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceCreateAttendanceUserTaskRemedy mock AttendanceCreateAttendanceUserTaskRemedy method
func (r *Mock) MockAttendanceCreateAttendanceUserTaskRemedy(f func(ctx context.Context, request *CreateAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*CreateAttendanceUserTaskRemedyResp, *Response, error)) {
	r.mockAttendanceCreateAttendanceUserTaskRemedy = f
}

// UnMockAttendanceCreateAttendanceUserTaskRemedy un-mock AttendanceCreateAttendanceUserTaskRemedy method
func (r *Mock) UnMockAttendanceCreateAttendanceUserTaskRemedy() {
	r.mockAttendanceCreateAttendanceUserTaskRemedy = nil
}

// CreateAttendanceUserTaskRemedyReq ...
type CreateAttendanceUserTaskRemedyReq struct {
	EmployeeType EmployeeType `query:"employee_type" json:"-"` // 请求体和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserID       string       `json:"user_id,omitempty"`       // 用户 ID, 示例值："abd754f7"
	RemedyDate   int64        `json:"remedy_date,omitempty"`   // 补卡日期, 示例值：20210701
	PunchNo      int64        `json:"punch_no,omitempty"`      // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0, 示例值：0
	WorkType     int64        `json:"work_type,omitempty"`     // 上班 / 下班，1：上班，2：下班，自由班制填 0, 示例值：1
	ApprovalID   *string      `json:"approval_id,omitempty"`   // 审批 ID, 示例值："6737202939523236113"
	RemedyTime   string       `json:"remedy_time,omitempty"`   // 补卡时间，时间格式为 yyyy-MM-dd HH:mm, 示例值："2021-07-01 08:00"
	Status       *int64       `json:"status,omitempty"`        // 补卡状态, 示例值：2, 可选值有: `0`：审批中, `2`：已通过, `3`：已取消, `4`：通过后撤回
	Reason       string       `json:"reason,omitempty"`        // 补卡原因, 示例值："忘记打卡"
	Time         *string      `json:"time,omitempty"`          // 补卡时间，精确到秒的时间戳, 示例值："1611476284"
	TimeZone     *string      `json:"time_zone,omitempty"`     // 补卡时考勤组时区, 示例值："Asia/Shanghai"
	CreateTime   *string      `json:"create_time,omitempty"`   // 补卡发起时间，精确到秒的时间戳, 示例值："1611476284"
	UpdateTime   *string      `json:"update_time,omitempty"`   // 补卡状态更新时间，精确到秒的时间戳, 示例值："1611476284"
}

// createAttendanceUserTaskRemedyResp ...
type createAttendanceUserTaskRemedyResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *CreateAttendanceUserTaskRemedyResp `json:"data,omitempty"`
}

// CreateAttendanceUserTaskRemedyResp ...
type CreateAttendanceUserTaskRemedyResp struct {
	UserRemedy *CreateAttendanceUserTaskRemedyRespUserRemedy `json:"user_remedy,omitempty"` // 补卡审批信息
}

// CreateAttendanceUserTaskRemedyRespUserRemedy ...
type CreateAttendanceUserTaskRemedyRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班 / 下班，1：上班，2：下班，自由班制填 0
	ApprovalID string `json:"approval_id,omitempty"` // 审批 ID
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Status     int64  `json:"status,omitempty"`      // 补卡状态, 可选值有: `0`：审批中, `2`：已通过, `3`：已取消, `4`：通过后撤回
	Reason     string `json:"reason,omitempty"`      // 补卡原因
	Time       string `json:"time,omitempty"`        // 补卡时间，精确到秒的时间戳
	TimeZone   string `json:"time_zone,omitempty"`   // 补卡时考勤组时区
	CreateTime string `json:"create_time,omitempty"` // 补卡发起时间，精确到秒的时间戳
	UpdateTime string `json:"update_time,omitempty"` // 补卡状态更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAttendanceUserTaskRemedy 获取授权内员工的补卡记录。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/user_task_remedy/query
func (r *AttendanceService) GetAttendanceUserTaskRemedy(ctx context.Context, request *GetAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetAttendanceUserTaskRemedy mock enable")
		return r.cli.mock.mockAttendanceGetAttendanceUserTaskRemedy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "GetAttendanceUserTaskRemedy",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/user_task_remedys/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAttendanceUserTaskRemedyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceGetAttendanceUserTaskRemedy mock AttendanceGetAttendanceUserTaskRemedy method
func (r *Mock) MockAttendanceGetAttendanceUserTaskRemedy(f func(ctx context.Context, request *GetAttendanceUserTaskRemedyReq, options ...MethodOptionFunc) (*GetAttendanceUserTaskRemedyResp, *Response, error)) {
	r.mockAttendanceGetAttendanceUserTaskRemedy = f
}

// UnMockAttendanceGetAttendanceUserTaskRemedy un-mock AttendanceGetAttendanceUserTaskRemedy method
func (r *Mock) UnMockAttendanceGetAttendanceUserTaskRemedy() {
	r.mockAttendanceGetAttendanceUserTaskRemedy = nil
}

// GetAttendanceUserTaskRemedyReq ...
type GetAttendanceUserTaskRemedyReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 和响应体中的 user_id 的员工工号类型, 示例值："employee_id", 可选值有: `employee_id`：员工 employee ID，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的用户 ID, `employee_no`：员工工号，即飞书管理后台 > 组织架构 > 成员与部门 > 成员详情中的工号
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表, 示例值：["abd754f7"]
	CheckTimeFrom string       `json:"check_time_from,omitempty"` // 查询的起始时间，精确到秒的时间戳, 示例值："1566641088"
	CheckTimeTo   string       `json:"check_time_to,omitempty"`   // 查询的结束时间，精确到秒的时间戳, 示例值："1592561088"
}

// getAttendanceUserTaskRemedyResp ...
type getAttendanceUserTaskRemedyResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetAttendanceUserTaskRemedyResp `json:"data,omitempty"`
}

// GetAttendanceUserTaskRemedyResp ...
type GetAttendanceUserTaskRemedyResp struct {
	UserRemedys []*GetAttendanceUserTaskRemedyRespUserRemedy `json:"user_remedys,omitempty"` // 补卡记录列表
}

// GetAttendanceUserTaskRemedyRespUserRemedy ...
type GetAttendanceUserTaskRemedyRespUserRemedy struct {
	UserID     string `json:"user_id,omitempty"`     // 用户 ID
	RemedyDate int64  `json:"remedy_date,omitempty"` // 补卡日期
	PunchNo    int64  `json:"punch_no,omitempty"`    // 第几次上下班，0：第 1 次上下班，1：第 2 次上下班，2：第 3 次上下班，自由班制填 0
	WorkType   int64  `json:"work_type,omitempty"`   // 上班 / 下班，1：上班，2：下班，自由班制填 0
	ApprovalID string `json:"approval_id,omitempty"` // 审批 ID
	RemedyTime string `json:"remedy_time,omitempty"` // 补卡时间，时间格式为 yyyy-MM-dd HH:mm
	Status     int64  `json:"status,omitempty"`      // 补卡状态, 可选值有: `0`：审批中, `2`：已通过, `3`：已取消, `4`：通过后撤回
	Reason     string `json:"reason,omitempty"`      // 补卡原因
	Time       string `json:"time,omitempty"`        // 补卡时间，精确到秒的时间戳
	TimeZone   string `json:"time_zone,omitempty"`   // 补卡时考勤组时区
	CreateTime string `json:"create_time,omitempty"` // 补卡发起时间，精确到秒的时间戳
	UpdateTime string `json:"update_time,omitempty"` // 补卡状态更新时间，精确到秒的时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAccessToken 获取登录预授权码 code 对应的登录用户身份。
//
// 该接口仅适用于通过网页应用登录方式获取的预授权码，小程序登录中用户身份的获取，请使用[小程序 code2session 接口](https://open.feishu.cn/document/uYjL24iN/ukjM04SOyQjL5IDN)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token
func (r *AuthService) GetAccessToken(ctx context.Context, request *GetAccessTokenReq, options ...MethodOptionFunc) (*GetAccessTokenResp, *Response, error) {
	if r.cli.mock.mockAuthGetAccessToken != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#GetAccessToken mock enable")
		return r.cli.mock.mockAuthGetAccessToken(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "GetAccessToken",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/access_token",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedAppAccessToken:  true,
		NeedUserAccessToken: true,
	}
	resp := new(getAccessTokenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthGetAccessToken mock AuthGetAccessToken method
func (r *Mock) MockAuthGetAccessToken(f func(ctx context.Context, request *GetAccessTokenReq, options ...MethodOptionFunc) (*GetAccessTokenResp, *Response, error)) {
	r.mockAuthGetAccessToken = f
}

// UnMockAuthGetAccessToken un-mock AuthGetAccessToken method
func (r *Mock) UnMockAuthGetAccessToken() {
	r.mockAuthGetAccessToken = nil
}

// GetAccessTokenReq ...
type GetAccessTokenReq struct {
	GrantType string `json:"grant_type,omitempty"` // 授权类型，本流程中，此值为："authorization_code", 示例值："authorization_code"
	Code      string `json:"code,omitempty"`       // 来自[请求身份验证](https://open.feishu.cn/document/ukTMukTMukTM/ukzN4UjL5cDO14SO3gTN)流程，用户扫码登录后会自动302到redirect_uri并带上此参数, 示例值："xMSldislSkdK"
}

// getAccessTokenResp ...
type getAccessTokenResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetAccessTokenResp `json:"data,omitempty"`
}

// GetAccessTokenResp ...
type GetAccessTokenResp struct {
	AccessToken      string `json:"access_token,omitempty"`       // user_access_token，用于获取用户资源
	TokenType        string `json:"token_type,omitempty"`         // token 类型
	ExpiresIn        int64  `json:"expires_in,omitempty"`         // access_token 的有效期，单位: 秒
	Name             string `json:"name,omitempty"`               // 用户姓名
	EnName           string `json:"en_name,omitempty"`            // 用户英文名称
	AvatarURL        string `json:"avatar_url,omitempty"`         // 用户头像
	AvatarThumb      string `json:"avatar_thumb,omitempty"`       // 用户头像 72x72
	AvatarMiddle     string `json:"avatar_middle,omitempty"`      // 用户头像 240x240
	AvatarBig        string `json:"avatar_big,omitempty"`         // 用户头像 640x640
	OpenID           string `json:"open_id,omitempty"`            // 用户在应用内的唯一标识
	UnionID          string `json:"union_id,omitempty"`           // 用户统一ID
	Email            string `json:"email,omitempty"`              // 用户邮箱, 字段权限要求: 获取用户邮箱信息
	UserID           string `json:"user_id,omitempty"`            // 用户 user_id, 字段权限要求: 获取用户 user ID
	Mobile           string `json:"mobile,omitempty"`             // 用户手机号, 字段权限要求: 获取用户手机号
	TenantKey        string `json:"tenant_key,omitempty"`         // 当前企业标识
	RefreshExpiresIn int64  `json:"refresh_expires_in,omitempty"` // refresh_token 的有效期，单位: 秒
	RefreshToken     string `json:"refresh_token,omitempty"`      // 刷新用户 access_token 时使用的 token
}
