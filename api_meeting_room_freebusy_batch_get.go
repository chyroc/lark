// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// BatchGetFreebusy 该接口用于获取指定会议室的忙闲日程实例列表。非重复日程只有唯一实例；重复日程可能存在多个实例，依据重复规则和时间范围扩展。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIDOyUjLygjM14iM4ITN
func (r *MeetingRoomService) BatchGetFreebusy(ctx context.Context, request *BatchGetFreebusyReq, options ...MethodOptionFunc) (*BatchGetFreebusyResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetFreebusy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetFreebusy mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetFreebusy(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] MeetingRoom#BatchGetFreebusy call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetFreebusy request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/meeting_room/freebusy/batch_get?room_ids=omm_83d09ad4f6896e02029a6a075f71c9d1&room_ids=omm_eada1d61a550955240c28757e7dec3af&time_min=2019-09-04T08:45:00%2B08:00&time_max=2019-09-04T09:45:00%2B08:00",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetFreebusyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] MeetingRoom#BatchGetFreebusy GET https://open.feishu.cn/open-apis/meeting_room/freebusy/batch_get?room_ids=omm_83d09ad4f6896e02029a6a075f71c9d1&room_ids=omm_eada1d61a550955240c28757e7dec3af&time_min=2019-09-04T08:45:00%2B08:00&time_max=2019-09-04T09:45:00%2B08:00 failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] MeetingRoom#BatchGetFreebusy GET https://open.feishu.cn/open-apis/meeting_room/freebusy/batch_get?room_ids=omm_83d09ad4f6896e02029a6a075f71c9d1&room_ids=omm_eada1d61a550955240c28757e7dec3af&time_min=2019-09-04T08:45:00%2B08:00&time_max=2019-09-04T09:45:00%2B08:00 failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("MeetingRoom", "BatchGetFreebusy", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetFreebusy success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockMeetingRoomBatchGetFreebusy(f func(ctx context.Context, request *BatchGetFreebusyReq, options ...MethodOptionFunc) (*BatchGetFreebusyResp, *Response, error)) {
	r.mockMeetingRoomBatchGetFreebusy = f
}

func (r *Mock) UnMockMeetingRoomBatchGetFreebusy() {
	r.mockMeetingRoomBatchGetFreebusy = nil
}

type BatchGetFreebusyReq struct {
	RoomIDs string `query:"room_ids" json:"-"` // 用于查询指定会议室的 ID
	TimeMin string `query:"time_min" json:"-"` // 查询会议室忙闲的起始时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
	TimeMax string `query:"time_max" json:"-"` // 查询会议室忙闲的结束时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
}

type batchGetFreebusyResp struct {
	Code int                   `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetFreebusyResp `json:"data,omitempty"` // 返回业务信息
}

type BatchGetFreebusyResp struct {
	TimeMin  string                        `json:"time_min,omitempty"`  // 查询会议室忙闲的起始时间，与请求参数完全相同
	TimeMax  string                        `json:"time_max,omitempty"`  // 查询会议室忙闲的结束时间，与请求参数完全相同
	FreeBusy *BatchGetFreebusyRespFreeBusy `json:"free_busy,omitempty"` // 会议室忙闲列表
}

type BatchGetFreebusyRespFreeBusy struct {
	RoomID *BatchGetFreebusyRespFreeBusyRoomID `json:"room_id,omitempty"` // 与请求合法参数相同，表示之后是对应会议室的忙闲状态
}

type BatchGetFreebusyRespFreeBusyRoomID struct {
	StartTime     string                                           `json:"start_time,omitempty"`     // 忙碌起始时间
	EndTime       string                                           `json:"end_time,omitempty"`       // 忙碌结束时间
	Uid           string                                           `json:"uid,omitempty"`            // 日程 ID
	OriginalTime  int                                              `json:"original_time,omitempty"`  // 日程实例的原始时间, 非重复日程为0，重复日程为非0
	OrganizerInfo *BatchGetFreebusyRespFreeBusyRoomIDOrganizerInfo `json:"organizer_info,omitempty"` // 组织者信息, 私密日程不返回该信息
}

type BatchGetFreebusyRespFreeBusyRoomIDOrganizerInfo struct {
	Name   string `json:"name,omitempty"`    // 组织者姓名
	OpenID string `json:"open_id,omitempty"` // 组织者 open_id
}
