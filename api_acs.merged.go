// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// GetACSAccessRecordList
//
// 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录。
// 该接口返回满足查询参数的识别记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record/list
func (r *ACSService) GetACSAccessRecordList(ctx context.Context, request *GetACSAccessRecordListReq, options ...MethodOptionFunc) (*GetACSAccessRecordListResp, *Response, error) {
	if r.cli.mock.mockACSGetACSAccessRecordList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSAccessRecordList mock enable")
		return r.cli.mock.mockACSGetACSAccessRecordList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSAccessRecordList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/access_records",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSAccessRecordListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSAccessRecordList mock ACSGetACSAccessRecordList method
func (r *Mock) MockACSGetACSAccessRecordList(f func(ctx context.Context, request *GetACSAccessRecordListReq, options ...MethodOptionFunc) (*GetACSAccessRecordListResp, *Response, error)) {
	r.mockACSGetACSAccessRecordList = f
}

// UnMockACSGetACSAccessRecordList un-mock ACSGetACSAccessRecordList method
func (r *Mock) UnMockACSGetACSAccessRecordList() {
	r.mockACSGetACSAccessRecordList = nil
}

// GetACSAccessRecordListReq ...
type GetACSAccessRecordListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：100, 最大值：`500`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	From       int64   `query:"from" json:"-"`         // 记录开始时间，单位秒, 示例值：1624520521
	To         int64   `query:"to" json:"-"`           // 记录结束时间，单位秒，,时间跨度不能超过30天, 示例值：1624520521
	DeviceID   *string `query:"device_id" json:"-"`    // 门禁设备 ID, 示例值："7091146989218002577"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getACSAccessRecordListResp ...
type getACSAccessRecordListResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetACSAccessRecordListResp `json:"data,omitempty"`
}

// GetACSAccessRecordListResp ...
type GetACSAccessRecordListResp struct {
	Items     []*GetACSAccessRecordListRespItem `json:"items,omitempty"`      // -
	PageToken string                            `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                              `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetACSAccessRecordListRespItem ...
type GetACSAccessRecordListRespItem struct {
	AccessRecordID string `json:"access_record_id,omitempty"` // 门禁记录 ID
	UserID         string `json:"user_id,omitempty"`          // 门禁记录所属用户 ID
	DeviceID       string `json:"device_id,omitempty"`        // 门禁设备 ID
	IsClockIn      bool   `json:"is_clock_in,omitempty"`      // 是否是打卡
	AccessTime     string `json:"access_time,omitempty"`      // 访问时间，单位秒
	AccessType     string `json:"access_type,omitempty"`      // 识别方式, 可选值有: `FA`：人脸识别方式
	AccessData     string `json:"access_data,omitempty"`      // 识别相关数据，根据 access_type 不同，取值不同
	IsDoorOpen     bool   `json:"is_door_open,omitempty"`     // 是否开门
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSAccessRecordPhoto
//
// 用户在门禁考勤机上成功开门或打卡后，智能门禁应用都会生成一条门禁记录，对于使用人脸识别方式进行开门的识别记录，还会有抓拍图。
// 可以用该接口下载开门时的人脸识别照片
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/access_record-access_photo/get
func (r *ACSService) GetACSAccessRecordPhoto(ctx context.Context, request *GetACSAccessRecordPhotoReq, options ...MethodOptionFunc) (*GetACSAccessRecordPhotoResp, *Response, error) {
	if r.cli.mock.mockACSGetACSAccessRecordPhoto != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSAccessRecordPhoto mock enable")
		return r.cli.mock.mockACSGetACSAccessRecordPhoto(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSAccessRecordPhoto",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/access_records/:access_record_id/access_photo",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSAccessRecordPhotoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSAccessRecordPhoto mock ACSGetACSAccessRecordPhoto method
func (r *Mock) MockACSGetACSAccessRecordPhoto(f func(ctx context.Context, request *GetACSAccessRecordPhotoReq, options ...MethodOptionFunc) (*GetACSAccessRecordPhotoResp, *Response, error)) {
	r.mockACSGetACSAccessRecordPhoto = f
}

// UnMockACSGetACSAccessRecordPhoto un-mock ACSGetACSAccessRecordPhoto method
func (r *Mock) UnMockACSGetACSAccessRecordPhoto() {
	r.mockACSGetACSAccessRecordPhoto = nil
}

// GetACSAccessRecordPhotoReq ...
type GetACSAccessRecordPhotoReq struct {
	AccessRecordID string `path:"access_record_id" json:"-"` // 门禁访问记录 ID, 示例值："6939433228970082591"
}

// getACSAccessRecordPhotoResp ...
type getACSAccessRecordPhotoResp struct {
	IsFile bool                         `json:"is_file,omitempty"`
	Code   int64                        `json:"code,omitempty"`
	Msg    string                       `json:"msg,omitempty"`
	Data   *GetACSAccessRecordPhotoResp `json:"data,omitempty"`
}

func (r *getACSAccessRecordPhotoResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetACSAccessRecordPhotoResp{}
	}
	r.Data.File = file
}

// GetACSAccessRecordPhotoResp ...
type GetACSAccessRecordPhotoResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSDeviceList 使用该接口获取租户内所有设备
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/device/list
func (r *ACSService) GetACSDeviceList(ctx context.Context, request *GetACSDeviceListReq, options ...MethodOptionFunc) (*GetACSDeviceListResp, *Response, error) {
	if r.cli.mock.mockACSGetACSDeviceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSDeviceList mock enable")
		return r.cli.mock.mockACSGetACSDeviceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSDeviceList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/devices",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSDeviceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSDeviceList mock ACSGetACSDeviceList method
func (r *Mock) MockACSGetACSDeviceList(f func(ctx context.Context, request *GetACSDeviceListReq, options ...MethodOptionFunc) (*GetACSDeviceListResp, *Response, error)) {
	r.mockACSGetACSDeviceList = f
}

// UnMockACSGetACSDeviceList un-mock ACSGetACSDeviceList method
func (r *Mock) UnMockACSGetACSDeviceList() {
	r.mockACSGetACSDeviceList = nil
}

// GetACSDeviceListReq ...
type GetACSDeviceListReq struct{}

// getACSDeviceListResp ...
type getACSDeviceListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetACSDeviceListResp `json:"data,omitempty"`
}

// GetACSDeviceListResp ...
type GetACSDeviceListResp struct {
	Items []*GetACSDeviceListRespItem `json:"items,omitempty"` // -
}

// GetACSDeviceListRespItem ...
type GetACSDeviceListRespItem struct {
	DeviceID   string `json:"device_id,omitempty"`   // 门禁设备 ID
	DeviceName string `json:"device_name,omitempty"` // 设备名称
	DeviceSn   string `json:"device_sn,omitempty"`   // 设备 SN 码
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSUserFace 对于已经录入人脸图片的用户，可以使用该接口下载用户人脸图片
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/get
func (r *ACSService) GetACSUserFace(ctx context.Context, request *GetACSUserFaceReq, options ...MethodOptionFunc) (*GetACSUserFaceResp, *Response, error) {
	if r.cli.mock.mockACSGetACSUserFace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSUserFace mock enable")
		return r.cli.mock.mockACSGetACSUserFace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSUserFace",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id/face",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSUserFaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSUserFace mock ACSGetACSUserFace method
func (r *Mock) MockACSGetACSUserFace(f func(ctx context.Context, request *GetACSUserFaceReq, options ...MethodOptionFunc) (*GetACSUserFaceResp, *Response, error)) {
	r.mockACSGetACSUserFace = f
}

// UnMockACSGetACSUserFace un-mock ACSGetACSUserFace method
func (r *Mock) UnMockACSGetACSUserFace() {
	r.mockACSGetACSUserFace = nil
}

// GetACSUserFaceReq ...
type GetACSUserFaceReq struct {
	IsCropped  *bool   `query:"is_cropped" json:"-"`   // 裁剪图, 示例值：true
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string  `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// getACSUserFaceResp ...
type getACSUserFaceResp struct {
	IsFile bool                `json:"is_file,omitempty"`
	Code   int64               `json:"code,omitempty"`
	Msg    string              `json:"msg,omitempty"`
	Data   *GetACSUserFaceResp `json:"data,omitempty"`
}

func (r *getACSUserFaceResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetACSUserFaceResp{}
	}
	r.Data.File = file
}

// GetACSUserFaceResp ...
type GetACSUserFaceResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateACSUserFace 用户需要录入人脸图片才可以使用门禁考勤机。使用该 API 上传门禁用户的人脸图片。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user-face/update
func (r *ACSService) UpdateACSUserFace(ctx context.Context, request *UpdateACSUserFaceReq, options ...MethodOptionFunc) (*UpdateACSUserFaceResp, *Response, error) {
	if r.cli.mock.mockACSUpdateACSUserFace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#UpdateACSUserFace mock enable")
		return r.cli.mock.mockACSUpdateACSUserFace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "UpdateACSUserFace",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id/face",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(updateACSUserFaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSUpdateACSUserFace mock ACSUpdateACSUserFace method
func (r *Mock) MockACSUpdateACSUserFace(f func(ctx context.Context, request *UpdateACSUserFaceReq, options ...MethodOptionFunc) (*UpdateACSUserFaceResp, *Response, error)) {
	r.mockACSUpdateACSUserFace = f
}

// UnMockACSUpdateACSUserFace un-mock ACSUpdateACSUserFace method
func (r *Mock) UnMockACSUpdateACSUserFace() {
	r.mockACSUpdateACSUserFace = nil
}

// UpdateACSUserFaceReq ...
type UpdateACSUserFaceReq struct {
	UserIDType *IDType   `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string    `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Files      io.Reader `json:"files,omitempty"`        // 人脸图片内容, 示例值：jpg图片
	FileType   FileType  `json:"file_type,omitempty"`    // 文件类型,可选的类型有jpg,png, 示例值："jpg"
	FileName   string    `json:"file_name,omitempty"`    // 带后缀的文件名, 示例值："efeqz12f.jpg"
}

// updateACSUserFaceResp ...
type updateACSUserFaceResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateACSUserFaceResp `json:"data,omitempty"`
}

// UpdateACSUserFaceResp ...
type UpdateACSUserFaceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSUser 该接口用于获取智能门禁中单个用户的信息。
//
// 只能获取已加入智能门禁权限组的用户
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/get
func (r *ACSService) GetACSUser(ctx context.Context, request *GetACSUserReq, options ...MethodOptionFunc) (*GetACSUserResp, *Response, error) {
	if r.cli.mock.mockACSGetACSUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSUser mock enable")
		return r.cli.mock.mockACSGetACSUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSUser",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSUser mock ACSGetACSUser method
func (r *Mock) MockACSGetACSUser(f func(ctx context.Context, request *GetACSUserReq, options ...MethodOptionFunc) (*GetACSUserResp, *Response, error)) {
	r.mockACSGetACSUser = f
}

// UnMockACSGetACSUser un-mock ACSGetACSUser method
func (r *Mock) UnMockACSGetACSUser() {
	r.mockACSGetACSUser = nil
}

// GetACSUserReq ...
type GetACSUserReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string  `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// getACSUserResp ...
type getACSUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *GetACSUserResp `json:"data,omitempty"`
}

// GetACSUserResp ...
type GetACSUserResp struct {
	User *GetACSUserRespUser `json:"user,omitempty"` // 门禁用户信息
}

// GetACSUserRespUser ...
type GetACSUserRespUser struct {
	Feature *GetACSUserRespUserFeature `json:"feature,omitempty"` // 用户特征
	UserID  string                     `json:"user_id,omitempty"` // 用户 ID
}

// GetACSUserRespUserFeature ...
type GetACSUserRespUserFeature struct {
	Card         int64 `json:"card,omitempty"`          // 卡号
	FaceUploaded bool  `json:"face_uploaded,omitempty"` // 是否已上传人脸图片
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetACSUserList 使用该接口获取智能门禁中所有用户信息
//
// 只能获取已加入智能门禁权限组的用户
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/list
func (r *ACSService) GetACSUserList(ctx context.Context, request *GetACSUserListReq, options ...MethodOptionFunc) (*GetACSUserListResp, *Response, error) {
	if r.cli.mock.mockACSGetACSUserList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#GetACSUserList mock enable")
		return r.cli.mock.mockACSGetACSUserList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "GetACSUserList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getACSUserListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSGetACSUserList mock ACSGetACSUserList method
func (r *Mock) MockACSGetACSUserList(f func(ctx context.Context, request *GetACSUserListReq, options ...MethodOptionFunc) (*GetACSUserListResp, *Response, error)) {
	r.mockACSGetACSUserList = f
}

// UnMockACSGetACSUserList un-mock ACSGetACSUserList method
func (r *Mock) UnMockACSGetACSUserList() {
	r.mockACSGetACSUserList = nil
}

// GetACSUserListReq ...
type GetACSUserListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`50`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："10"
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
}

// getACSUserListResp ...
type getACSUserListResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetACSUserListResp `json:"data,omitempty"`
}

// GetACSUserListResp ...
type GetACSUserListResp struct {
	Items     []*GetACSUserListRespItem `json:"items,omitempty"`      // -
	PageToken string                    `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                      `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetACSUserListRespItem ...
type GetACSUserListRespItem struct {
	Feature *GetACSUserListRespItemFeature `json:"feature,omitempty"` // 用户特征
	UserID  string                         `json:"user_id,omitempty"` // 用户 ID
}

// GetACSUserListRespItemFeature ...
type GetACSUserListRespItemFeature struct {
	Card         int64 `json:"card,omitempty"`          // 卡号
	FaceUploaded bool  `json:"face_uploaded,omitempty"` // 是否已上传人脸图片
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateACSUser 飞书智能门禁在人脸识别成功后会有韦根信号输出，输出用户的卡号。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/acs-v1/user/patch
func (r *ACSService) UpdateACSUser(ctx context.Context, request *UpdateACSUserReq, options ...MethodOptionFunc) (*UpdateACSUserResp, *Response, error) {
	if r.cli.mock.mockACSUpdateACSUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] ACS#UpdateACSUser mock enable")
		return r.cli.mock.mockACSUpdateACSUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "ACS",
		API:                   "UpdateACSUser",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/acs/v1/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateACSUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockACSUpdateACSUser mock ACSUpdateACSUser method
func (r *Mock) MockACSUpdateACSUser(f func(ctx context.Context, request *UpdateACSUserReq, options ...MethodOptionFunc) (*UpdateACSUserResp, *Response, error)) {
	r.mockACSUpdateACSUser = f
}

// UnMockACSUpdateACSUser un-mock ACSUpdateACSUser method
func (r *Mock) UnMockACSUpdateACSUser() {
	r.mockACSUpdateACSUser = nil
}

// UpdateACSUserReq ...
type UpdateACSUserReq struct {
	UserIDType *IDType                  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	UserID     string                   `path:"user_id" json:"-"`       // 用户 ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Feature    *UpdateACSUserReqFeature `json:"feature,omitempty"`      // 用户特征
}

// UpdateACSUserReqFeature ...
type UpdateACSUserReqFeature struct {
	Card *int64 `json:"card,omitempty"` // 卡号, 示例值：123456
}

// updateACSUserResp ...
type updateACSUserResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *UpdateACSUserResp `json:"data,omitempty"`
}

// UpdateACSUserResp ...
type UpdateACSUserResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetAdminDeptStats 该接口用于获取部门维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
//
// - 只有企业自建应用才有权限调用此接口
// - 当天的数据会在第二天的早上八点产出（UTC+8）
// - 部门维度的数据最多查询最近366天（包含366天）的数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_dept_stat/list
func (r *AdminService) GetAdminDeptStats(ctx context.Context, request *GetAdminDeptStatsReq, options ...MethodOptionFunc) (*GetAdminDeptStatsResp, *Response, error) {
	if r.cli.mock.mockAdminGetAdminDeptStats != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Admin#GetAdminDeptStats mock enable")
		return r.cli.mock.mockAdminGetAdminDeptStats(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "GetAdminDeptStats",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/admin_dept_stats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAdminDeptStatsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminGetAdminDeptStats mock AdminGetAdminDeptStats method
func (r *Mock) MockAdminGetAdminDeptStats(f func(ctx context.Context, request *GetAdminDeptStatsReq, options ...MethodOptionFunc) (*GetAdminDeptStatsResp, *Response, error)) {
	r.mockAdminGetAdminDeptStats = f
}

// UnMockAdminGetAdminDeptStats un-mock AdminGetAdminDeptStats method
func (r *Mock) UnMockAdminGetAdminDeptStats() {
	r.mockAdminGetAdminDeptStats = nil
}

// GetAdminDeptStatsReq ...
type GetAdminDeptStatsReq struct {
	DepartmentIDType  DepartmentIDType `query:"department_id_type" json:"-"`  // 部门ID类型, 示例值："open_department_id", 可选值有: `department_id`：部门的 ID, `open_department_id`：部门的 Open ID
	StartDate         string           `query:"start_date" json:"-"`          // 起始日期（包含），格式是YYYY-mm-dd, 示例值："2020-02-15"
	EndDate           string           `query:"end_date" json:"-"`            // 终止日期（包含），格式是YYYY-mm-dd，起止日期之间相差不能超过91天（包含91天）, 示例值："2020-02-15"
	DepartmentID      string           `query:"department_id" json:"-"`       // 部门的 ID，取决于department_id_type，仅支持根部门及其下前4级子部门, 示例值："od-382e2793cfc9471f892e8a672987654c"
	ContainsChildDept bool             `query:"contains_child_dept" json:"-"` // 是否包含子部门，如果该值为false，则只查出本部门直属用户活跃和功能使用数据；如果该值为true，则查出该部门以及其子部门（子部门层级最多不超过根部门下的前4级）的用户活跃和功能使用数据, 示例值：false
	PageSize          *int64           `query:"page_size" json:"-"`           // 分页大小，默认是10, 示例值：10, 取值范围：`1` ～ `20`
	PageToken         *string          `query:"page_token" json:"-"`          // 分页标记，第一次请求不填，表示从头开始遍历；当返回的has_more为true时，会返回新的page_token，再次调用接口，传入这个page_token，将获得下一页数据, 示例值："2"
}

// getAdminDeptStatsResp ...
type getAdminDeptStatsResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetAdminDeptStatsResp `json:"data,omitempty"`
}

// GetAdminDeptStatsResp ...
type GetAdminDeptStatsResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 分页查询时返回，代表是否还有更多数据
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，下一页分页的token
	Items     []*GetAdminDeptStatsRespItem `json:"items,omitempty"`      // 数据报表
}

// GetAdminDeptStatsRespItem ...
type GetAdminDeptStatsRespItem struct {
	Date                 string `json:"date,omitempty"`                    // 日期
	DepartmentID         string `json:"department_id,omitempty"`           // 部门的department_id 或者open_department_id
	DepartmentName       string `json:"department_name,omitempty"`         // 部门名字
	DepartmentPath       string `json:"department_path,omitempty"`         // 部门路径
	TotalUserNum         int64  `json:"total_user_num,omitempty"`          // 部门总人数
	ActiveUserNum        int64  `json:"active_user_num,omitempty"`         // 激活人数
	ActiveUserRate       string `json:"active_user_rate,omitempty"`        // 激活率
	SuiteDau             int64  `json:"suite_dau,omitempty"`               // 活跃人数
	SuiteActiveRate      string `json:"suite_active_rate,omitempty"`       // 活跃率
	NewUserNum           int64  `json:"new_user_num,omitempty"`            // 新用户数
	NewActiveNum         int64  `json:"new_active_num,omitempty"`          // 新激活数
	ResignUserNum        int64  `json:"resign_user_num,omitempty"`         // 离职人数
	IMDau                int64  `json:"im_dau,omitempty"`                  // 消息活跃人数
	SendMessengerUserNum int64  `json:"send_messenger_user_num,omitempty"` // 发送消息人数
	SendMessengerNum     int64  `json:"send_messenger_num,omitempty"`      // 发送消息数
	AvgSendMessengerNum  string `json:"avg_send_messenger_num,omitempty"`  // 人均发送消息数
	DocsDau              int64  `json:"docs_dau,omitempty"`                // 云文档活跃人数
	CreateDocsUserNum    int64  `json:"create_docs_user_num,omitempty"`    // 创建文件人数
	CreateDocsNum        int64  `json:"create_docs_num,omitempty"`         // 创建文件数
	AvgCreateDocsNum     string `json:"avg_create_docs_num,omitempty"`     // 人均创建文件数
	CalDau               int64  `json:"cal_dau,omitempty"`                 // 日历活跃人数
	CreateCalUserNum     int64  `json:"create_cal_user_num,omitempty"`     // 创建日程人数
	CreateCalNum         int64  `json:"create_cal_num,omitempty"`          // 创建日程数
	AvgCreateCalNum      string `json:"avg_create_cal_num,omitempty"`      // 人均创建日程数
	VCDau                int64  `json:"vc_dau,omitempty"`                  // 音视频会议活跃人数
	VCDuration           int64  `json:"vc_duration,omitempty"`             // 会议时长（分钟）
	AvgVCDuration        string `json:"avg_vc_duration,omitempty"`         // 人均会议时长（分钟）
	AvgDuration          string `json:"avg_duration,omitempty"`            // 人均飞书使用时长（分钟）
	TaskDau              int64  `json:"task_dau,omitempty"`                // 任务活跃人数
	CreateTaskUserNum    int64  `json:"create_task_user_num,omitempty"`    // 创建任务人数
	CreateTaskNum        int64  `json:"create_task_num,omitempty"`         // 创建任务数
	AvgCreateTaskNum     string `json:"avg_create_task_num,omitempty"`     // 人均创建任务数
}
