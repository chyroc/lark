// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetUserTask
//
// 获取企业内员工的实际打卡结果，包括上班打卡结果和下班打卡结果。
// * 如果企业给一个员工设定的班次是上午 9 点和下午 6 点各打一次上下班卡，即使员工在这期间打了多次卡，该接口也只会返回 1 条记录。
// * 如果要获取打卡的详细数据，如打卡位置等信息，可使用“获取打卡流水记录”或“批量查询打卡流水记录”的接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//GetCheckinResults
func (r *AttendanceService) GetUserTask(ctx context.Context, request *GetUserTaskReq, options ...MethodOptionFunc) (*GetUserTaskResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetUserTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetUserTask mock enable")
		return r.cli.mock.mockAttendanceGetUserTask(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Attendance#GetUserTask call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetUserTask request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/attendance/v1/user_tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getUserTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#GetUserTask POST https://open.feishu.cn/open-apis/attendance/v1/user_tasks/query failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#GetUserTask POST https://open.feishu.cn/open-apis/attendance/v1/user_tasks/query failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Attendance", "GetUserTask", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetUserTask success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockAttendanceGetUserTask(f func(ctx context.Context, request *GetUserTaskReq, options ...MethodOptionFunc) (*GetUserTaskResp, *Response, error)) {
	r.mockAttendanceGetUserTask = f
}

func (r *Mock) UnMockAttendanceGetUserTask() {
	r.mockAttendanceGetUserTask = nil
}

type GetUserTaskReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表
	CheckDateFrom int          `json:"check_date_from,omitempty"` // 查询的起始工作日
	CheckDateTo   int          `json:"check_date_to,omitempty"`   // 查询的结束工作日
}

type getUserTaskResp struct {
	Code int              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetUserTaskResp `json:"data,omitempty"` // -
}

type GetUserTaskResp struct {
	UserTaskResults []*GetUserTaskRespUserTaskResult `json:"user_task_results,omitempty"` // 打卡任务列表
}

type GetUserTaskRespUserTaskResult struct {
	ResultID     string                                 `json:"result_id,omitempty"`     // 打卡记录 ID
	UserID       string                                 `json:"user_id,omitempty"`       // employee ID
	EmployeeName string                                 `json:"employee_name,omitempty"` // employee 姓名
	Day          int                                    `json:"day,omitempty"`           // 日期
	GroupID      string                                 `json:"group_id,omitempty"`      // 考勤组 ID
	ShiftID      string                                 `json:"shift_id,omitempty"`      // 班次 ID
	Records      []*GetUserTaskRespUserTaskResultRecord `json:"records,omitempty"`       // 用户考勤记录
}

type GetUserTaskRespUserTaskResultRecord struct {
	CheckInRecordID          string `json:"check_in_record_id,omitempty"`          // 上班打卡记录 ID
	CheckOutRecordID         string `json:"check_out_record_id,omitempty"`         // 下班打卡记录 ID
	CheckInResult            string `json:"check_in_result,omitempty"`             // 上班打卡结果，可用值：【NoNeedCheck（无需打卡），SystemCheck（系统打卡），Normal（正常），Early（早退），Late（迟到），Lack（缺卡）】
	CheckOutResult           string `json:"check_out_result,omitempty"`            // 下班打卡结果，可用值：【NoNeedCheck（无需打卡），SystemCheck（系统打卡），Normal（正常），Early（早退），Late（迟到），Lack（缺卡）】
	CheckInResultSupplement  string `json:"check_in_result_supplement,omitempty"`  // 上班打卡结果补充，可用值：【None（无），ManagerModification（管理员修改），CardReplacement（补卡通过），ShiftChange（换班），Travel（出差），Leave（请假），GoOut（外出），CardReplacementApplication（补卡申请中），FieldPunch（外勤打卡）】
	CheckOutResultSupplement string `json:"check_out_result_supplement,omitempty"` // 下班打卡结果补充，可用值：【None（无），ManagerModification（管理员修改），CardReplacement（补卡通过），ShiftChange（换班），Travel（出差），Leave（请假），GoOut（外出），CardReplacementApplication（补卡申请中），FieldPunch（外勤打卡）】
}
