// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateSearchDataSourceItem 索引一条数据记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/create
func (r *SearchService) CreateSearchDataSourceItem(ctx context.Context, request *CreateSearchDataSourceItemReq, options ...MethodOptionFunc) (*CreateSearchDataSourceItemResp, *Response, error) {
	if r.cli.mock.mockSearchCreateSearchDataSourceItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#CreateSearchDataSourceItem mock enable")
		return r.cli.mock.mockSearchCreateSearchDataSourceItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "CreateSearchDataSourceItem",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/search/v2/data_sources/:data_source_id/items",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createSearchDataSourceItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockSearchCreateSearchDataSourceItem(f func(ctx context.Context, request *CreateSearchDataSourceItemReq, options ...MethodOptionFunc) (*CreateSearchDataSourceItemResp, *Response, error)) {
	r.mockSearchCreateSearchDataSourceItem = f
}

func (r *Mock) UnMockSearchCreateSearchDataSourceItem() {
	r.mockSearchCreateSearchDataSourceItem = nil
}

type CreateSearchDataSourceItemReq struct {
	DataSourceID   string                                 `path:"data_source_id" json:"-"`   // 数据源的ID, 示例值："service_ticket"
	ID             string                                 `json:"id,omitempty"`              // item 在 datasource 中的唯一标识, 示例值："01010111"
	ACL            *CreateSearchDataSourceItemReqACL      `json:"acl,omitempty"`             // item 的访问权限控制
	Metadata       *CreateSearchDataSourceItemReqMetadata `json:"metadata,omitempty"`        // item 的元信息
	StructuredData string                                 `json:"structured_data,omitempty"` // 结构化数据（以 json 字符串传递），这些字段是搜索结果的展示字段（title字段无须在此另外指定）；目前支持的key为：,summary：搜索结果的摘要；,icon_url：搜索结果的icon地址；,footer：搜索结果的脚注, 示例值："{\"key\":\"value\"}"
	Content        *CreateSearchDataSourceItemReqContent  `json:"content,omitempty"`         // 非结构化数据，如文档文本，飞书搜索会用来做召回
}

type CreateSearchDataSourceItemReqACL struct {
	Access *string `json:"access,omitempty"` // 权限类型，优先级：Deny > Allow, 示例值："1", 可选值有: `1`：允许访问, `2`：禁止访问
	Value  *string `json:"value,omitempty"`  // 设置的权限值，例如 userID 、groupID，依赖 type 描述, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Type   *string `json:"type,omitempty"`   // 权限值类型, 示例值："1", 可选值有: `1`：访问权限控制中指定用户可以访问或拒绝访问该条数据, `2`：访问权限控制中指定用户组可以访问或拒绝访问该条数据
}

type CreateSearchDataSourceItemReqMetadata struct {
	Title      string `json:"title,omitempty"`       // 该条数据记录对应的标题, 示例值："工单：无法创建文章"
	SourceURL  string `json:"source_url,omitempty"`  // 该条数据记录对应的跳转url, 示例值："http://www.abc.com.cn"
	CreateTime *int64 `json:"create_time,omitempty"` // 数据项的创建时间, 示例值：1618831236
	UpdateTime *int64 `json:"update_time,omitempty"` // 数据项的更新时间, 示例值：1618831236
}

type CreateSearchDataSourceItemReqContent struct {
	Format      *string `json:"format,omitempty"`       // 内容的格式, 示例值："1", 可选值有: `0`：html格式, `1`：纯文本格式
	ContentData *string `json:"content_data,omitempty"` // 全文数据, 示例值："这是一个很长的文本"
}

type createSearchDataSourceItemResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateSearchDataSourceItemResp `json:"data,omitempty"`
}

type CreateSearchDataSourceItemResp struct{}
