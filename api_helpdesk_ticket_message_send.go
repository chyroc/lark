// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// SendTicketMessage 该接口用于获取服务台工单消息详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list
func (r *HelpdeskService) SendTicketMessage(ctx context.Context, request *SendTicketMessageReq, options ...MethodOptionFunc) (*SendTicketMessageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSendTicketMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendTicketMessage mock enable")
		return r.cli.mock.mockHelpdeskSendTicketMessage(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Helpdesk#SendTicketMessage call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendTicketMessage request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,

		NeedHelpdeskAuth: true,
	}
	resp := new(sendTicketMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Helpdesk#SendTicketMessage GET https://open.feishu.cn/open-apis/helpdesk/v1/tickets/:ticket_id/messages failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Helpdesk#SendTicketMessage GET https://open.feishu.cn/open-apis/helpdesk/v1/tickets/:ticket_id/messages failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Helpdesk", "SendTicketMessage", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendTicketMessage success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockHelpdeskSendTicketMessage(f func(ctx context.Context, request *SendTicketMessageReq, options ...MethodOptionFunc) (*SendTicketMessageResp, *Response, error)) {
	r.mockHelpdeskSendTicketMessage = f
}

func (r *Mock) UnMockHelpdeskSendTicketMessage() {
	r.mockHelpdeskSendTicketMessage = nil
}

type SendTicketMessageReq struct {
	TimeStart *int   `query:"time_start" json:"-"` // 起始时间, 示例值：1617960686000
	TimeEnd   *int   `query:"time_end" json:"-"`   // 结束时间, 示例值：1617960687000
	Page      *int   `query:"page" json:"-"`       // 页数ID, 示例值：1
	PageSize  *int   `query:"page_size" json:"-"`  // 消息数量，最大200，默认20, 示例值：10
	TicketID  string `path:"ticket_id" json:"-"`   // 工单ID, 示例值："6948728206392295444"
}

type sendTicketMessageResp struct {
	Code int                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *SendTicketMessageResp `json:"data,omitempty"` //
}

type SendTicketMessageResp struct {
	Messages []*SendTicketMessageRespMessage `json:"messages,omitempty"` // 工单消息列表
	Total    int                             `json:"total,omitempty"`    // 消息总数
}

type SendTicketMessageRespMessage struct {
	ID          string  `json:"id,omitempty"`           // 工单消息ID
	MessageID   string  `json:"message_id,omitempty"`   // chat消息ID
	MessageType MsgType `json:"message_type,omitempty"` // 消息类型；text：纯文本；post：富文本
	CreatedAt   int     `json:"created_at,omitempty"`   // 创建时间
	Content     string  `json:"content,omitempty"`      // 内容
	UserName    string  `json:"user_name,omitempty"`    // 用户名
	AvatarURL   string  `json:"avatar_url,omitempty"`   // 用户图片url
	UserID      string  `json:"user_id,omitempty"`      // 用户open ID
}
