// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// UpdateTicketCustomizedField
//
// 该接口用于更新自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/update-ticket-customized-field
func (r *HelpdeskService) UpdateTicketCustomizedField(ctx context.Context, request *UpdateTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateTicketCustomizedField != nil {
		r.cli.logDebug(ctx, "[lark] Helpdesk#UpdateTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskUpdateTicketCustomizedField(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Helpdesk#UpdateTicketCustomizedField call api")
	r.cli.logDebug(ctx, "[lark] Helpdesk#UpdateTicketCustomizedField request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:              "PATCH",
		URL:                 "https://open.feishu.cn/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Helpdesk#UpdateTicketCustomizedField PATCH https://open.feishu.cn/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Helpdesk#UpdateTicketCustomizedField PATCH https://open.feishu.cn/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Helpdesk", "UpdateTicketCustomizedField", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Helpdesk#UpdateTicketCustomizedField request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockHelpdeskUpdateTicketCustomizedField(f func(ctx context.Context, request *UpdateTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskUpdateTicketCustomizedField = f
}

func (r *Mock) UnMockHelpdeskUpdateTicketCustomizedField() {
	r.mockHelpdeskUpdateTicketCustomizedField = nil
}

type UpdateTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string                  `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
	DisplayName             *string                 `json:"display_name,omitempty"`              // 名称, 示例值："test dropdown"
	Position                *string                 `json:"position,omitempty"`                  // 字段在列表后台管理列表中的位置, 示例值："3"
	Description             *string                 `json:"description,omitempty"`               // 描述, 示例值："下拉示例"
	Visible                 *bool                   `json:"visible,omitempty"`                   // 是否可见, 示例值：true
	Required                *bool                   `json:"required,omitempty"`                  // 是否必填, 示例值：false
	DropdownOptions         *HelpdeskDropdownOption `json:"dropdown_options,omitempty"`          // 下拉列表选项
}

type updateTicketCustomizedFieldResp struct {
	Code int                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateTicketCustomizedFieldResp `json:"data,omitempty"`
}

type UpdateTicketCustomizedFieldResp struct{}
