// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteGroup
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//group_delete
func (r *AttendanceService) DeleteGroup(ctx context.Context, request *DeleteGroupReq, options ...MethodOptionFunc) (*DeleteGroupResp, *Response, error) {
	if r.cli.mock.mockAttendanceDeleteGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteGroup mock enable")
		return r.cli.mock.mockAttendanceDeleteGroup(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Attendance#DeleteGroup call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteGroup request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "DELETE",
		URL:                   "https://open.feishu.cn/open-apis/attendance/v1/groups/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#DeleteGroup DELETE https://open.feishu.cn/open-apis/attendance/v1/groups/:group_id failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#DeleteGroup DELETE https://open.feishu.cn/open-apis/attendance/v1/groups/:group_id failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Attendance", "DeleteGroup", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DeleteGroup success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockAttendanceDeleteGroup(f func(ctx context.Context, request *DeleteGroupReq, options ...MethodOptionFunc) (*DeleteGroupResp, *Response, error)) {
	r.mockAttendanceDeleteGroup = f
}

func (r *Mock) UnMockAttendanceDeleteGroup() {
	r.mockAttendanceDeleteGroup = nil
}

type DeleteGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 考勤组的 ID，需要从获取打卡结果的接口中获取 group_id，示例值："6919358128597097404"
}

type deleteGroupResp struct {
	Code int              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteGroupResp `json:"data,omitempty"`
}

type DeleteGroupResp struct{}
