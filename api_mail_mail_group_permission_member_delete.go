// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteMailGroupPermissionMember 从自定义成员中删除单个成员，删除后该成员无法发送邮件到该邮件组
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/mailgroup-permission_member/delete
func (r *MailService) DeleteMailGroupPermissionMember(ctx context.Context, request *DeleteMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupPermissionMemberResp, *Response, error) {
	if r.cli.mock.mockMailDeleteMailGroupPermissionMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupPermissionMember mock enable")
		return r.cli.mock.mockMailDeleteMailGroupPermissionMember(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Mail#DeleteMailGroupPermissionMember call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupPermissionMember request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "DELETE",
		URL:                   "https://open.feishu.cn/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMailGroupPermissionMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Mail#DeleteMailGroupPermissionMember DELETE https://open.feishu.cn/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Mail#DeleteMailGroupPermissionMember DELETE https://open.feishu.cn/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members/:permission_member_id failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Mail", "DeleteMailGroupPermissionMember", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Mail#DeleteMailGroupPermissionMember success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockMailDeleteMailGroupPermissionMember(f func(ctx context.Context, request *DeleteMailGroupPermissionMemberReq, options ...MethodOptionFunc) (*DeleteMailGroupPermissionMemberResp, *Response, error)) {
	r.mockMailDeleteMailGroupPermissionMember = f
}

func (r *Mock) UnMockMailDeleteMailGroupPermissionMember() {
	r.mockMailDeleteMailGroupPermissionMember = nil
}

type DeleteMailGroupPermissionMemberReq struct {
	MailGroupID        string `path:"mailgroup_id" json:"-"`         // The unique ID or email address of a mail group, 示例值："xxxxxxxxxxxxxxx or test_mail_group@xxx.xx"
	PermissionMemberID string `path:"permission_member_id" json:"-"` // The unique ID of a member in this permission group, 示例值："xxxxxxxxxxxxxxx"
}

type deleteMailGroupPermissionMemberResp struct {
	Code int                                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteMailGroupPermissionMemberResp `json:"data,omitempty"`
}

type DeleteMailGroupPermissionMemberResp struct{}
