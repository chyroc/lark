// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetBitableRecordList 该接口用于列出数据表中的现有记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/list
func (r *BitableService) GetBitableRecordList(ctx context.Context, request *GetBitableRecordListReq, options ...MethodOptionFunc) (*GetBitableRecordListResp, *Response, error) {
	if r.cli.mock.mockBitableGetBitableRecordList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#GetBitableRecordList mock enable")
		return r.cli.mock.mockBitableGetBitableRecordList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "GetBitableRecordList",
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBitableRecordListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockBitableGetBitableRecordList(f func(ctx context.Context, request *GetBitableRecordListReq, options ...MethodOptionFunc) (*GetBitableRecordListResp, *Response, error)) {
	r.mockBitableGetBitableRecordList = f
}

func (r *Mock) UnMockBitableGetBitableRecordList() {
	r.mockBitableGetBitableRecordList = nil
}

type GetBitableRecordListReq struct {
	ViewID    *string `query:"view_id" json:"-"`    // 视图 id, 示例值："vewkLhyICY"
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："recP750ZNJ"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	AppToken  string  `path:"app_token" json:"-"`   // bitable app token, 示例值："bascng7vrxcxpig7geggXiCtadY"
	TableID   string  `path:"table_id" json:"-"`    // table id, 示例值："tblUa9vcYjWQYJCj"
}

type getBitableRecordListResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetBitableRecordListResp `json:"data,omitempty"`
}

type GetBitableRecordListResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetBitableRecordListRespItem `json:"items,omitempty"`      // 记录信息
}

type GetBitableRecordListRespItem struct {
	RecordID string                 `json:"record_id,omitempty"` // 记录 id
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段
}
