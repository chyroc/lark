// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// RecognizeBasicImage 基础图片识别接口，识别图片中的文字，按区域划分返回文本列表
//
// 单租户限流：20QPS，同租户下的应用没有限流，共享本租户的 20QPS 限流
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/optical_char_recognition-v1/image/basic_recognize
func (r *AIService) RecognizeBasicImage(ctx context.Context, request *RecognizeBasicImageReq, options ...MethodOptionFunc) (*RecognizeBasicImageResp, *Response, error) {
	if r.cli.mock.mockAIRecognizeBasicImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#RecognizeBasicImage mock enable")
		return r.cli.mock.mockAIRecognizeBasicImage(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] AI#RecognizeBasicImage call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] AI#RecognizeBasicImage request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/optical_char_recognition/v1/image/basic_recognize",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(recognizeBasicImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] AI#RecognizeBasicImage POST https://open.feishu.cn/open-apis/optical_char_recognition/v1/image/basic_recognize failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] AI#RecognizeBasicImage POST https://open.feishu.cn/open-apis/optical_char_recognition/v1/image/basic_recognize failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("AI", "RecognizeBasicImage", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] AI#RecognizeBasicImage success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockAIRecognizeBasicImage(f func(ctx context.Context, request *RecognizeBasicImageReq, options ...MethodOptionFunc) (*RecognizeBasicImageResp, *Response, error)) {
	r.mockAIRecognizeBasicImage = f
}

func (r *Mock) UnMockAIRecognizeBasicImage() {
	r.mockAIRecognizeBasicImage = nil
}

type RecognizeBasicImageReq struct {
	Image    *string `json:"image,omitempty"`     // base64 后的图片数据, 示例值："base64后的图片二进制数据"
	ImageKey *string `json:"image_key,omitempty"` // 上传到 drive 存储平台后获取到的 key （暂不支持）, 示例值："asd12345d6d7890d"
}

type recognizeBasicImageResp struct {
	Code int                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *RecognizeBasicImageResp `json:"data,omitempty"` //
}

type RecognizeBasicImageResp struct {
	TextList []string `json:"text_list,omitempty"` // 按区域识别，返回文本列表
}
