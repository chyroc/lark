// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteMemberPermission 该接口用于根据 filetoken 移除文档协作者的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTN3UjL2UzN14iN1cTN
func (r *DriveAPI) DeleteMemberPermission(ctx context.Context, request *DeleteMemberPermissionReq, options ...MethodOptionFunc) (*DeleteMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteMemberPermission != nil {
		r.cli.logDebug(ctx, "[lark] Drive#DeleteMemberPermission mock enable")
		return r.cli.mock.mockDriveDeleteMemberPermission(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Drive#DeleteMemberPermission call api")
	r.cli.logDebug(ctx, "[lark] Drive#DeleteMemberPermission request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/drive/permission/member/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Drive#DeleteMemberPermission POST https://open.feishu.cn/open-apis/drive/permission/member/delete failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Drive#DeleteMemberPermission POST https://open.feishu.cn/open-apis/drive/permission/member/delete failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Drive", "DeleteMemberPermission", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Drive#DeleteMemberPermission request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockDriveDeleteMemberPermission(f func(ctx context.Context, request *DeleteMemberPermissionReq, options ...MethodOptionFunc) (*DeleteMemberPermissionResp, *Response, error)) {
	r.mockDriveDeleteMemberPermission = f
}

func (r *Mock) UnMockDriveDeleteMemberPermission() {
	r.mockDriveDeleteMemberPermission = nil
}

type DeleteMemberPermissionReq struct {
	Token      string `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](/ssl:ttdoc/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string `json:"type,omitempty"`        // 文档类型  "doc"  or  "sheet" or "file"
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **"openid"、"openchat"、"userid"**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
}

type deleteMemberPermissionResp struct {
	Code int                         `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *DeleteMemberPermissionResp `json:"data,omitempty"`
}

type DeleteMemberPermissionResp struct {
	IsSuccess bool `json:"is_success,omitempty"` // 是否操作成功
}
