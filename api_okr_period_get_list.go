// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetPeriodList 获取OKR周期列表
//
// 使用<md-tag mode="inline" type="token-tenant">tenant_access_token</md-tag>需要额外申请权限以应用身份访问OKR信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/okr-v1/period/list
func (r *OKRService) GetPeriodList(ctx context.Context, request *GetPeriodListReq, options ...MethodOptionFunc) (*GetPeriodListResp, *Response, error) {
	if r.cli.mock.mockOKRGetPeriodList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] OKR#GetPeriodList mock enable")
		return r.cli.mock.mockOKRGetPeriodList(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] OKR#GetPeriodList call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] OKR#GetPeriodList request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/okr/v1/periods",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getPeriodListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] OKR#GetPeriodList GET https://open.feishu.cn/open-apis/okr/v1/periods failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] OKR#GetPeriodList GET https://open.feishu.cn/open-apis/okr/v1/periods failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("OKR", "GetPeriodList", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] OKR#GetPeriodList success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockOKRGetPeriodList(f func(ctx context.Context, request *GetPeriodListReq, options ...MethodOptionFunc) (*GetPeriodListResp, *Response, error)) {
	r.mockOKRGetPeriodList = f
}

func (r *Mock) UnMockOKRGetPeriodList() {
	r.mockOKRGetPeriodList = nil
}

type GetPeriodListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标志page_token, 示例值："xaasdasdax"
	PageSize  *int    `query:"page_size" json:"-"`  // 分页大小，默认10, 示例值：10, 默认值: `10`
}

type getPeriodListResp struct {
	Code int                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *GetPeriodListResp `json:"data,omitempty"` //
}

type GetPeriodListResp struct {
	PageToken string                   `json:"page_token,omitempty"` // 分页标志
	HasMore   bool                     `json:"has_more,omitempty"`   // 是否有更多
	Items     []*GetPeriodListRespItem `json:"items,omitempty"`      // 数据项
}

type GetPeriodListRespItem struct {
	ID     string `json:"id,omitempty"`      // id
	ZhName string `json:"zh_name,omitempty"` // 中文名称
	EnName string `json:"en_name,omitempty"` // 英文名称
	Status int    `json:"status,omitempty"`  // 启用状态, 可选值有: `0`：正常状态, `1`：暂不处理, `2`：标记失效, `3`：隐藏周期
}
