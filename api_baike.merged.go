// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateBaikeUpdate 根据 draft_id 更新草稿内容，已审批的草稿无法编辑
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/update
func (r *BaikeService) CreateBaikeUpdate(ctx context.Context, request *CreateBaikeUpdateReq, options ...MethodOptionFunc) (*CreateBaikeUpdateResp, *Response, error) {
	if r.cli.mock.mockBaikeCreateBaikeUpdate != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#CreateBaikeUpdate mock enable")
		return r.cli.mock.mockBaikeCreateBaikeUpdate(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "CreateBaikeUpdate",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/drafts/:draft_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBaikeUpdateResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeCreateBaikeUpdate mock BaikeCreateBaikeUpdate method
func (r *Mock) MockBaikeCreateBaikeUpdate(f func(ctx context.Context, request *CreateBaikeUpdateReq, options ...MethodOptionFunc) (*CreateBaikeUpdateResp, *Response, error)) {
	r.mockBaikeCreateBaikeUpdate = f
}

// UnMockBaikeCreateBaikeUpdate un-mock BaikeCreateBaikeUpdate method
func (r *Mock) UnMockBaikeCreateBaikeUpdate() {
	r.mockBaikeCreateBaikeUpdate = nil
}

// CreateBaikeUpdateReq ...
type CreateBaikeUpdateReq struct {
	UserIDType  *IDType                          `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DraftID     string                           `path:"draft_id" json:"-"`      // 草稿 Id, 示例值："5347"
	ID          *string                          `json:"id,omitempty"`           // 词条 Id, 示例值："enterprise_40217521"
	MainKeys    []*CreateBaikeUpdateReqMainKey   `json:"main_keys,omitempty"`    // 主关键词, 最大长度：`1`
	Aliases     []*CreateBaikeUpdateReqAliase    `json:"aliases,omitempty"`      // 别名, 最大长度：`10`
	Description string                           `json:"description,omitempty"`  // 详情信息, 示例值："企业百科是飞书提供的一款知识管理工具，通过企业百科可以帮助企业将分散的知识信息进行聚合，并通过UGC的方式，促进企业知识的保鲜和流通"
	RelatedMeta *CreateBaikeUpdateReqRelatedMeta `json:"related_meta,omitempty"` // 相关数据
}

// CreateBaikeUpdateReqMainKey ...
type CreateBaikeUpdateReqMainKey struct {
	Key           string                                    `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeUpdateReqMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateReqMainKeyDisplayStatus ...
type CreateBaikeUpdateReqMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeUpdateReqAliase ...
type CreateBaikeUpdateReqAliase struct {
	Key           string                                   `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeUpdateReqAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateReqAliaseDisplayStatus ...
type CreateBaikeUpdateReqAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeUpdateReqRelatedMeta ...
type CreateBaikeUpdateReqRelatedMeta struct {
	Users         []*CreateBaikeUpdateReqRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeUpdateReqRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeUpdateReqRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeUpdateReqRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeUpdateReqRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeUpdateReqRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeUpdateReqRelatedMetaUser ...
type CreateBaikeUpdateReqRelatedMetaUser struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN"
}

// CreateBaikeUpdateReqRelatedMetaChat ...
type CreateBaikeUpdateReqRelatedMetaChat struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN"
}

// CreateBaikeUpdateReqRelatedMetaDoc ...
type CreateBaikeUpdateReqRelatedMetaDoc struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeUpdateReqRelatedMetaOncall ...
type CreateBaikeUpdateReqRelatedMetaOncall struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN"
}

// CreateBaikeUpdateReqRelatedMetaLink ...
type CreateBaikeUpdateReqRelatedMetaLink struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeUpdateReqRelatedMetaAbbreviation ...
type CreateBaikeUpdateReqRelatedMetaAbbreviation struct {
	ID *string `json:"id,omitempty"` // 词条 id, 示例值："enterprise_51587960"
}

// createBaikeUpdateResp ...
type createBaikeUpdateResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateBaikeUpdateResp `json:"data,omitempty"`
}

// CreateBaikeUpdateResp ...
type CreateBaikeUpdateResp struct {
	Draft *CreateBaikeUpdateRespDraft `json:"draft,omitempty"` // 草稿
}

// CreateBaikeUpdateRespDraft ...
type CreateBaikeUpdateRespDraft struct {
	DraftID string                            `json:"draft_id,omitempty"` // 草稿 Id
	Entity  *CreateBaikeUpdateRespDraftEntity `json:"entity,omitempty"`   // 实体词
}

// CreateBaikeUpdateRespDraftEntity ...
type CreateBaikeUpdateRespDraftEntity struct {
	ID          string                                       `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*CreateBaikeUpdateRespDraftEntityMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*CreateBaikeUpdateRespDraftEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                       `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                       `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                       `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *CreateBaikeUpdateRespDraftEntityRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                     `json:"categories,omitempty"`   // 词条标签
	Statistics  *CreateBaikeUpdateRespDraftEntityStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *CreateBaikeUpdateRespDraftEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// CreateBaikeUpdateRespDraftEntityMainKey ...
type CreateBaikeUpdateRespDraftEntityMainKey struct {
	Key           string                                                `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeUpdateRespDraftEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateRespDraftEntityMainKeyDisplayStatus ...
type CreateBaikeUpdateRespDraftEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeUpdateRespDraftEntityAliase ...
type CreateBaikeUpdateRespDraftEntityAliase struct {
	Key           string                                               `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeUpdateRespDraftEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeUpdateRespDraftEntityAliaseDisplayStatus ...
type CreateBaikeUpdateRespDraftEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeUpdateRespDraftEntityRelatedMeta ...
type CreateBaikeUpdateRespDraftEntityRelatedMeta struct {
	Users         []*CreateBaikeUpdateRespDraftEntityRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeUpdateRespDraftEntityRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeUpdateRespDraftEntityRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeUpdateRespDraftEntityRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeUpdateRespDraftEntityRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeUpdateRespDraftEntityRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaUser ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaChat ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaDoc ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaOncall ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaLink ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeUpdateRespDraftEntityRelatedMetaAbbreviation ...
type CreateBaikeUpdateRespDraftEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// CreateBaikeUpdateRespDraftEntityStatistics ...
type CreateBaikeUpdateRespDraftEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// CreateBaikeUpdateRespDraftEntityOuterInfo ...
type CreateBaikeUpdateRespDraftEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBaikeEntity 通过词条 id 拉取对应的实体词详情信息
//
// 也支持通过 provider 和 outer_id 返回对应实体的详情数据。此时路径中的 entity_id 为固定的 enterprise_0
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/get
func (r *BaikeService) GetBaikeEntity(ctx context.Context, request *GetBaikeEntityReq, options ...MethodOptionFunc) (*GetBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeGetBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#GetBaikeEntity mock enable")
		return r.cli.mock.mockBaikeGetBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "GetBaikeEntity",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/:entity_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeGetBaikeEntity mock BaikeGetBaikeEntity method
func (r *Mock) MockBaikeGetBaikeEntity(f func(ctx context.Context, request *GetBaikeEntityReq, options ...MethodOptionFunc) (*GetBaikeEntityResp, *Response, error)) {
	r.mockBaikeGetBaikeEntity = f
}

// UnMockBaikeGetBaikeEntity un-mock BaikeGetBaikeEntity method
func (r *Mock) UnMockBaikeGetBaikeEntity() {
	r.mockBaikeGetBaikeEntity = nil
}

// GetBaikeEntityReq ...
type GetBaikeEntityReq struct {
	Provider   *string `query:"provider" json:"-"`     // 数据提供者, 示例值："星云", 长度范围：`2` ～ `32` 字符
	OuterID    *string `query:"outer_id" json:"-"`     // 外部唯一 id, 示例值："12345", 长度范围：`1` ～ `64` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	EntityID   string  `path:"entity_id" json:"-"`     // 词条 id, 示例值："enterprise_515879"
}

// getBaikeEntityResp ...
type getBaikeEntityResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetBaikeEntityResp `json:"data,omitempty"`
}

// GetBaikeEntityResp ...
type GetBaikeEntityResp struct {
	Entity *GetBaikeEntityRespEntity `json:"entity,omitempty"` // 实体词
}

// GetBaikeEntityRespEntity ...
type GetBaikeEntityRespEntity struct {
	ID          string                               `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*GetBaikeEntityRespEntityMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*GetBaikeEntityRespEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                               `json:"description,omitempty"`  // 详情信息
	CreateTime  string                               `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                               `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *GetBaikeEntityRespEntityRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                             `json:"categories,omitempty"`   // 词条标签
	Statistics  *GetBaikeEntityRespEntityStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *GetBaikeEntityRespEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// GetBaikeEntityRespEntityMainKey ...
type GetBaikeEntityRespEntityMainKey struct {
	Key           string                                        `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityRespEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityRespEntityMainKeyDisplayStatus ...
type GetBaikeEntityRespEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityRespEntityAliase ...
type GetBaikeEntityRespEntityAliase struct {
	Key           string                                       `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityRespEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityRespEntityAliaseDisplayStatus ...
type GetBaikeEntityRespEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityRespEntityRelatedMeta ...
type GetBaikeEntityRespEntityRelatedMeta struct {
	Users         []*GetBaikeEntityRespEntityRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*GetBaikeEntityRespEntityRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*GetBaikeEntityRespEntityRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*GetBaikeEntityRespEntityRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*GetBaikeEntityRespEntityRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*GetBaikeEntityRespEntityRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// GetBaikeEntityRespEntityRelatedMetaUser ...
type GetBaikeEntityRespEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaChat ...
type GetBaikeEntityRespEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaDoc ...
type GetBaikeEntityRespEntityRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaOncall ...
type GetBaikeEntityRespEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaLink ...
type GetBaikeEntityRespEntityRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityRespEntityRelatedMetaAbbreviation ...
type GetBaikeEntityRespEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// GetBaikeEntityRespEntityStatistics ...
type GetBaikeEntityRespEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// GetBaikeEntityRespEntityOuterInfo ...
type GetBaikeEntityRespEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// HighlightBaikeEntity 用户传入一个句子，返回词条的位置和对应的 Id，通过 Get 接口可以获取词条的详情信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/highlight
func (r *BaikeService) HighlightBaikeEntity(ctx context.Context, request *HighlightBaikeEntityReq, options ...MethodOptionFunc) (*HighlightBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeHighlightBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#HighlightBaikeEntity mock enable")
		return r.cli.mock.mockBaikeHighlightBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "HighlightBaikeEntity",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/highlight",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(highlightBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeHighlightBaikeEntity mock BaikeHighlightBaikeEntity method
func (r *Mock) MockBaikeHighlightBaikeEntity(f func(ctx context.Context, request *HighlightBaikeEntityReq, options ...MethodOptionFunc) (*HighlightBaikeEntityResp, *Response, error)) {
	r.mockBaikeHighlightBaikeEntity = f
}

// UnMockBaikeHighlightBaikeEntity un-mock BaikeHighlightBaikeEntity method
func (r *Mock) UnMockBaikeHighlightBaikeEntity() {
	r.mockBaikeHighlightBaikeEntity = nil
}

// HighlightBaikeEntityReq ...
type HighlightBaikeEntityReq struct {
	Text string `json:"text,omitempty"` // 需要被识别实体词内容的一句话（不要超过1000字）, 示例值："企业百科是飞书提供的一款知识管理工具"
}

// highlightBaikeEntityResp ...
type highlightBaikeEntityResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *HighlightBaikeEntityResp `json:"data,omitempty"`
}

// HighlightBaikeEntityResp ...
type HighlightBaikeEntityResp struct {
	Phrases []*HighlightBaikeEntityRespPhrase `json:"phrases,omitempty"` // 返回识别到的实体词信息
}

// HighlightBaikeEntityRespPhrase ...
type HighlightBaikeEntityRespPhrase struct {
	Name      string                              `json:"name,omitempty"`       // 关键词
	EntityIDs []string                            `json:"entity_ids,omitempty"` // 词条 id 列表
	Span      *HighlightBaikeEntityRespPhraseSpan `json:"span,omitempty"`       // 词条所在位置
}

// HighlightBaikeEntityRespPhraseSpan ...
type HighlightBaikeEntityRespPhraseSpan struct {
	Start int64 `json:"start,omitempty"` // 偏移量开始位置，从 0 开始计数（编码格式采用 utf-8）
	End   int64 `json:"end,omitempty"`   // 偏移量结束位置，从 0 开始计数（编码格式采用 utf-8）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetBaikeEntityList 通过分页拉取词条数据，支持租户内的全部词条拉取
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/list
func (r *BaikeService) GetBaikeEntityList(ctx context.Context, request *GetBaikeEntityListReq, options ...MethodOptionFunc) (*GetBaikeEntityListResp, *Response, error) {
	if r.cli.mock.mockBaikeGetBaikeEntityList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#GetBaikeEntityList mock enable")
		return r.cli.mock.mockBaikeGetBaikeEntityList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "GetBaikeEntityList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getBaikeEntityListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeGetBaikeEntityList mock BaikeGetBaikeEntityList method
func (r *Mock) MockBaikeGetBaikeEntityList(f func(ctx context.Context, request *GetBaikeEntityListReq, options ...MethodOptionFunc) (*GetBaikeEntityListResp, *Response, error)) {
	r.mockBaikeGetBaikeEntityList = f
}

// UnMockBaikeGetBaikeEntityList un-mock BaikeGetBaikeEntityList method
func (r *Mock) UnMockBaikeGetBaikeEntityList() {
	r.mockBaikeGetBaikeEntityList = nil
}

// GetBaikeEntityListReq ...
type GetBaikeEntityListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：20, 最大值：`100`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c"
	Provider   *string `query:"provider" json:"-"`     // 数据提供方【可用来过滤数据】, 示例值："星云", 长度范围：`2` ～ `32` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getBaikeEntityListResp ...
type getBaikeEntityListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetBaikeEntityListResp `json:"data,omitempty"`
}

// GetBaikeEntityListResp ...
type GetBaikeEntityListResp struct {
	Entities  []*GetBaikeEntityListRespEntitie `json:"entities,omitempty"`   // 词条列表
	PageToken string                           `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetBaikeEntityListRespEntitie ...
type GetBaikeEntityListRespEntitie struct {
	ID          string                                    `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*GetBaikeEntityListRespEntitieMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*GetBaikeEntityListRespEntitieAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                    `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                    `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                    `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *GetBaikeEntityListRespEntitieRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                  `json:"categories,omitempty"`   // 词条标签
	Statistics  *GetBaikeEntityListRespEntitieStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *GetBaikeEntityListRespEntitieOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// GetBaikeEntityListRespEntitieMainKey ...
type GetBaikeEntityListRespEntitieMainKey struct {
	Key           string                                             `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityListRespEntitieMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityListRespEntitieMainKeyDisplayStatus ...
type GetBaikeEntityListRespEntitieMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityListRespEntitieAliase ...
type GetBaikeEntityListRespEntitieAliase struct {
	Key           string                                            `json:"key,omitempty"`            // 内容
	DisplayStatus *GetBaikeEntityListRespEntitieAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// GetBaikeEntityListRespEntitieAliaseDisplayStatus ...
type GetBaikeEntityListRespEntitieAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// GetBaikeEntityListRespEntitieRelatedMeta ...
type GetBaikeEntityListRespEntitieRelatedMeta struct {
	Users         []*GetBaikeEntityListRespEntitieRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*GetBaikeEntityListRespEntitieRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*GetBaikeEntityListRespEntitieRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*GetBaikeEntityListRespEntitieRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*GetBaikeEntityListRespEntitieRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*GetBaikeEntityListRespEntitieRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// GetBaikeEntityListRespEntitieRelatedMetaUser ...
type GetBaikeEntityListRespEntitieRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaChat ...
type GetBaikeEntityListRespEntitieRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaDoc ...
type GetBaikeEntityListRespEntitieRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaOncall ...
type GetBaikeEntityListRespEntitieRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaLink ...
type GetBaikeEntityListRespEntitieRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// GetBaikeEntityListRespEntitieRelatedMetaAbbreviation ...
type GetBaikeEntityListRespEntitieRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// GetBaikeEntityListRespEntitieStatistics ...
type GetBaikeEntityListRespEntitieStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// GetBaikeEntityListRespEntitieOuterInfo ...
type GetBaikeEntityListRespEntitieOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MatchBaikeEntity 准确匹配词条的关键词、全名、别名属性，并召回对应的 ID
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/match
func (r *BaikeService) MatchBaikeEntity(ctx context.Context, request *MatchBaikeEntityReq, options ...MethodOptionFunc) (*MatchBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeMatchBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#MatchBaikeEntity mock enable")
		return r.cli.mock.mockBaikeMatchBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "MatchBaikeEntity",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/match",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(matchBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeMatchBaikeEntity mock BaikeMatchBaikeEntity method
func (r *Mock) MockBaikeMatchBaikeEntity(f func(ctx context.Context, request *MatchBaikeEntityReq, options ...MethodOptionFunc) (*MatchBaikeEntityResp, *Response, error)) {
	r.mockBaikeMatchBaikeEntity = f
}

// UnMockBaikeMatchBaikeEntity un-mock BaikeMatchBaikeEntity method
func (r *Mock) UnMockBaikeMatchBaikeEntity() {
	r.mockBaikeMatchBaikeEntity = nil
}

// MatchBaikeEntityReq ...
type MatchBaikeEntityReq struct {
	Word string `json:"word,omitempty"` // 词条主关键词、全称、别名全匹配, 示例值："企业百科"
}

// matchBaikeEntityResp ...
type matchBaikeEntityResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *MatchBaikeEntityResp `json:"data,omitempty"`
}

// MatchBaikeEntityResp ...
type MatchBaikeEntityResp struct {
	Results []*MatchBaikeEntityRespResult `json:"results,omitempty"` // 匹配结果
}

// MatchBaikeEntityRespResult ...
type MatchBaikeEntityRespResult struct {
	EntityID string `json:"entity_id,omitempty"` // 词条 id
	Type     int64  `json:"type,omitempty"`      // 匹配中的字段, 可选值有: `0`：主关键词, `1`：全称, `2`：别名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchBaikeEntity 传入关键词，进行模糊匹配搜索相应的词条
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/entity/search
func (r *BaikeService) SearchBaikeEntity(ctx context.Context, request *SearchBaikeEntityReq, options ...MethodOptionFunc) (*SearchBaikeEntityResp, *Response, error) {
	if r.cli.mock.mockBaikeSearchBaikeEntity != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#SearchBaikeEntity mock enable")
		return r.cli.mock.mockBaikeSearchBaikeEntity(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "SearchBaikeEntity",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/entities/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(searchBaikeEntityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeSearchBaikeEntity mock BaikeSearchBaikeEntity method
func (r *Mock) MockBaikeSearchBaikeEntity(f func(ctx context.Context, request *SearchBaikeEntityReq, options ...MethodOptionFunc) (*SearchBaikeEntityResp, *Response, error)) {
	r.mockBaikeSearchBaikeEntity = f
}

// UnMockBaikeSearchBaikeEntity un-mock BaikeSearchBaikeEntity method
func (r *Mock) UnMockBaikeSearchBaikeEntity() {
	r.mockBaikeSearchBaikeEntity = nil
}

// SearchBaikeEntityReq ...
type SearchBaikeEntityReq struct {
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："b152fa6e6f62a291019a04c3a93f365f8ac641910506ff15ff4cad6534e087cb4ed8fa2c"
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Query      string  `json:"query,omitempty"`        // 搜索关键词, 示例值："百科"
}

// searchBaikeEntityResp ...
type searchBaikeEntityResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *SearchBaikeEntityResp `json:"data,omitempty"`
}

// SearchBaikeEntityResp ...
type SearchBaikeEntityResp struct {
	Entities  []*SearchBaikeEntityRespEntitie `json:"entities,omitempty"`   // 数据数组
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// SearchBaikeEntityRespEntitie ...
type SearchBaikeEntityRespEntitie struct {
	ID          string                                   `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*SearchBaikeEntityRespEntitieMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*SearchBaikeEntityRespEntitieAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                   `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                   `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                   `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *SearchBaikeEntityRespEntitieRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                 `json:"categories,omitempty"`   // 词条标签
	Statistics  *SearchBaikeEntityRespEntitieStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *SearchBaikeEntityRespEntitieOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// SearchBaikeEntityRespEntitieMainKey ...
type SearchBaikeEntityRespEntitieMainKey struct {
	Key           string                                            `json:"key,omitempty"`            // 内容
	DisplayStatus *SearchBaikeEntityRespEntitieMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// SearchBaikeEntityRespEntitieMainKeyDisplayStatus ...
type SearchBaikeEntityRespEntitieMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// SearchBaikeEntityRespEntitieAliase ...
type SearchBaikeEntityRespEntitieAliase struct {
	Key           string                                           `json:"key,omitempty"`            // 内容
	DisplayStatus *SearchBaikeEntityRespEntitieAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// SearchBaikeEntityRespEntitieAliaseDisplayStatus ...
type SearchBaikeEntityRespEntitieAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// SearchBaikeEntityRespEntitieRelatedMeta ...
type SearchBaikeEntityRespEntitieRelatedMeta struct {
	Users         []*SearchBaikeEntityRespEntitieRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*SearchBaikeEntityRespEntitieRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*SearchBaikeEntityRespEntitieRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*SearchBaikeEntityRespEntitieRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*SearchBaikeEntityRespEntitieRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*SearchBaikeEntityRespEntitieRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// SearchBaikeEntityRespEntitieRelatedMetaUser ...
type SearchBaikeEntityRespEntitieRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaChat ...
type SearchBaikeEntityRespEntitieRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaDoc ...
type SearchBaikeEntityRespEntitieRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaOncall ...
type SearchBaikeEntityRespEntitieRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaLink ...
type SearchBaikeEntityRespEntitieRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// SearchBaikeEntityRespEntitieRelatedMetaAbbreviation ...
type SearchBaikeEntityRespEntitieRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// SearchBaikeEntityRespEntitieStatistics ...
type SearchBaikeEntityRespEntitieStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// SearchBaikeEntityRespEntitieOuterInfo ...
type SearchBaikeEntityRespEntitieOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBitableField 该接口用于在数据表中新增一个字段
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/create
func (r *BitableService) CreateBitableField(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableField mock enable")
		return r.cli.mock.mockBitableCreateBitableField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableField",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBitableCreateBitableField mock BitableCreateBitableField method
func (r *Mock) MockBitableCreateBitableField(f func(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error)) {
	r.mockBitableCreateBitableField = f
}

// UnMockBitableCreateBitableField un-mock BitableCreateBitableField method
func (r *Mock) UnMockBitableCreateBitableField() {
	r.mockBitableCreateBitableField = nil
}

// CreateBitableFieldReq ...
type CreateBitableFieldReq struct {
	AppToken  string                         `path:"app_token" json:"-"`   // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID   string                         `path:"table_id" json:"-"`    // table id, 示例值："tblsRc9GRRXKqhvW"
	FieldName string                         `json:"field_name,omitempty"` // 多维表格字段名, 示例值："多行文本"
	Type      int64                          `json:"type,omitempty"`       // 多维表格字段类型, 示例值：1, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *CreateBitableFieldReqProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// CreateBitableFieldReqProperty ...
type CreateBitableFieldReqProperty struct {
	Options       []*CreateBitableFieldReqPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     *string                                `json:"formatter,omitempty"`       // 数字、公式字段的显示格式, 示例值："0"
	DateFormatter *string                                `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式, 示例值："日期格式"
	AutoFill      *bool                                  `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间, 示例值：false
	Multiple      *bool                                  `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录, 示例值：false
	TableID       *string                                `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id, 示例值："tblsRc9GRRXKqhvW"
	TableName     *string                                `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字, 示例值：""table2""
	BackFieldName *string                                `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字, 示例值：""table1-双向关联""
}

// CreateBitableFieldReqPropertyOption ...
type CreateBitableFieldReqPropertyOption struct {
	Name  *string `json:"name,omitempty"`  // 选项名, 示例值："红色"
	ID    *string `json:"id,omitempty"`    // 选项id, 示例值："optKl35lnG"
	Color *int64  `json:"color,omitempty"` // 选项颜色, 示例值：0, 取值范围：`0` ～ `54`
}

// createBitableFieldResp ...
type createBitableFieldResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableFieldResp `json:"data,omitempty"`
}

// CreateBitableFieldResp ...
type CreateBitableFieldResp struct {
	Field *CreateBitableFieldRespField `json:"field,omitempty"` // 字段
}

// CreateBitableFieldRespField ...
type CreateBitableFieldRespField struct {
	FieldID   string                               `json:"field_id,omitempty"`   // 多维表格字段 id
	FieldName string                               `json:"field_name,omitempty"` // 多维表格字段名
	Type      int64                                `json:"type,omitempty"`       // 多维表格字段类型, 可选值有: `1`：多行文本, `2`：数字, `3`：单选, `4`：多选, `5`：日期, `7`：复选框, `11`：人员, `15`：超链接, `17`：附件, `18`：关联, `20`：公式, `21`：双向关联, `1001`：创建时间, `1002`：最后更新时间, `1003`：创建人, `1004`：修改人
	Property  *CreateBitableFieldRespFieldProperty `json:"property,omitempty"`   // 字段属性，具体参考：[字段编辑指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/guide)
}

// CreateBitableFieldRespFieldProperty ...
type CreateBitableFieldRespFieldProperty struct {
	Options       []*CreateBitableFieldRespFieldPropertyOption `json:"options,omitempty"`         // 单选、多选字段的选项信息
	Formatter     string                                       `json:"formatter,omitempty"`       // 数字、公式字段的显示格式
	DateFormatter string                                       `json:"date_formatter,omitempty"`  // 日期、创建时间、最后更新时间字段的显示格式
	AutoFill      bool                                         `json:"auto_fill,omitempty"`       // 日期字段中新纪录自动填写创建时间
	Multiple      bool                                         `json:"multiple,omitempty"`        // 人员字段中允许添加多个成员，单向关联、双向关联中允许添加多个记录
	TableID       string                                       `json:"table_id,omitempty"`        // 单向关联、双向关联字段中关联的数据表的id
	TableName     string                                       `json:"table_name,omitempty"`      // 单向关联、双向关联字段中关联的数据表的名字
	BackFieldName string                                       `json:"back_field_name,omitempty"` // 双向关联字段中关联的数据表中对应的双向关联字段的名字
}

// CreateBitableFieldRespFieldPropertyOption ...
type CreateBitableFieldRespFieldPropertyOption struct {
	Name  string `json:"name,omitempty"`  // 选项名
	ID    string `json:"id,omitempty"`    // 选项id
	Color int64  `json:"color,omitempty"` // 选项颜色
}
