// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// DeleteSearchDataSource 删除一个已存在的数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/delete
func (r *SearchService) DeleteSearchDataSource(ctx context.Context, request *DeleteSearchDataSourceReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchDeleteSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#DeleteSearchDataSource mock enable")
		return r.cli.mock.mockSearchDeleteSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "DeleteSearchDataSource",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchDeleteSearchDataSource mock SearchDeleteSearchDataSource method
func (r *Mock) MockSearchDeleteSearchDataSource(f func(ctx context.Context, request *DeleteSearchDataSourceReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceResp, *Response, error)) {
	r.mockSearchDeleteSearchDataSource = f
}

// UnMockSearchDeleteSearchDataSource un-mock SearchDeleteSearchDataSource method
func (r *Mock) UnMockSearchDeleteSearchDataSource() {
	r.mockSearchDeleteSearchDataSource = nil
}

// DeleteSearchDataSourceReq ...
type DeleteSearchDataSourceReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的唯一标识, 示例值："6953903108179099667"
}

// deleteSearchDataSourceResp ...
type deleteSearchDataSourceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSearchDataSourceResp `json:"data,omitempty"`
}

// DeleteSearchDataSourceResp ...
type DeleteSearchDataSourceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSearchDataSource 获取已经创建的数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/get
func (r *SearchService) GetSearchDataSource(ctx context.Context, request *GetSearchDataSourceReq, options ...MethodOptionFunc) (*GetSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchGetSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#GetSearchDataSource mock enable")
		return r.cli.mock.mockSearchGetSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "GetSearchDataSource",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchGetSearchDataSource mock SearchGetSearchDataSource method
func (r *Mock) MockSearchGetSearchDataSource(f func(ctx context.Context, request *GetSearchDataSourceReq, options ...MethodOptionFunc) (*GetSearchDataSourceResp, *Response, error)) {
	r.mockSearchGetSearchDataSource = f
}

// UnMockSearchGetSearchDataSource un-mock SearchGetSearchDataSource method
func (r *Mock) UnMockSearchGetSearchDataSource() {
	r.mockSearchGetSearchDataSource = nil
}

// GetSearchDataSourceReq ...
type GetSearchDataSourceReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的唯一标识, 示例值："service_ticket"
}

// getSearchDataSourceResp ...
type getSearchDataSourceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetSearchDataSourceResp `json:"data,omitempty"`
}

// GetSearchDataSourceResp ...
type GetSearchDataSourceResp struct {
	DataSource *GetSearchDataSourceRespDataSource `json:"data_source,omitempty"` // 数据源实例
}

// GetSearchDataSourceRespDataSource ...
type GetSearchDataSourceRespDataSource struct {
	ID            string `json:"id,omitempty"`              // 数据源的唯一标识
	Name          string `json:"name,omitempty"`            // data_source的展示名称
	State         int64  `json:"state,omitempty"`           // 数据源状态，0-未上线，1-已上线, 可选值有: `0`：未上线, `1`：已上线
	Description   string `json:"description,omitempty"`     // 对于数据源的描述
	CreateTime    string `json:"create_time,omitempty"`     // 创建时间，使用Unix时间戳，单位为“秒”
	UpdateTime    string `json:"update_time,omitempty"`     // 更新时间，使用Unix时间戳，单位为“秒”
	IsExceedQuota bool   `json:"is_exceed_quota,omitempty"` // 是否超限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSearchDataSourceItem 索引一条数据记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/create
func (r *SearchService) CreateSearchDataSourceItem(ctx context.Context, request *CreateSearchDataSourceItemReq, options ...MethodOptionFunc) (*CreateSearchDataSourceItemResp, *Response, error) {
	if r.cli.mock.mockSearchCreateSearchDataSourceItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#CreateSearchDataSourceItem mock enable")
		return r.cli.mock.mockSearchCreateSearchDataSourceItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "CreateSearchDataSourceItem",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id/items",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createSearchDataSourceItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchCreateSearchDataSourceItem mock SearchCreateSearchDataSourceItem method
func (r *Mock) MockSearchCreateSearchDataSourceItem(f func(ctx context.Context, request *CreateSearchDataSourceItemReq, options ...MethodOptionFunc) (*CreateSearchDataSourceItemResp, *Response, error)) {
	r.mockSearchCreateSearchDataSourceItem = f
}

// UnMockSearchCreateSearchDataSourceItem un-mock SearchCreateSearchDataSourceItem method
func (r *Mock) UnMockSearchCreateSearchDataSourceItem() {
	r.mockSearchCreateSearchDataSourceItem = nil
}

// CreateSearchDataSourceItemReq ...
type CreateSearchDataSourceItemReq struct {
	DataSourceID   string                                 `path:"data_source_id" json:"-"`   // 数据源的ID, 示例值："service_ticket"
	ID             string                                 `json:"id,omitempty"`              // item 在 datasource 中的唯一标识, 示例值："01010111"
	ACL            *CreateSearchDataSourceItemReqACL      `json:"acl,omitempty"`             // item 的访问权限控制
	Metadata       *CreateSearchDataSourceItemReqMetadata `json:"metadata,omitempty"`        // item 的元信息
	StructuredData string                                 `json:"structured_data,omitempty"` // 结构化数据（以 json 字符串传递），这些字段是搜索结果的展示字段（title字段无须在此另外指定）；目前支持的key为：, summary：搜索结果的摘要；, icon_url：搜索结果的icon地址；, footer：搜索结果的脚注, 示例值："{\"key\":\"value\"}"
	Content        *CreateSearchDataSourceItemReqContent  `json:"content,omitempty"`         // 非结构化数据，如文档文本，飞书搜索会用来做召回
}

// CreateSearchDataSourceItemReqACL ...
type CreateSearchDataSourceItemReqACL struct {
	Access *string `json:"access,omitempty"` // 权限类型，优先级：Deny > Allow。默认为全员不可见，即 deny。, 示例值："allow", 可选值有: `allow`：允许访问, `deny`：禁止访问
	Value  *string `json:"value,omitempty"`  // 设置的权限值，例如 userID 、groupID，依赖 type 描述。,**注**：在 type 为 user 且 access 为 allow 时，可填 "everyone" 来表示该数据项对全员可见。, 示例值："6629468020840333501"
	Type   *string `json:"type,omitempty"`   // 权限值类型, 示例值："user", 可选值有: `user`：访问权限控制中指定用户可以访问或拒绝访问该条数据, `group`：访问权限控制中指定用户组可以访问或拒绝访问该条数据
}

// CreateSearchDataSourceItemReqMetadata ...
type CreateSearchDataSourceItemReqMetadata struct {
	Title      string `json:"title,omitempty"`       // 该条数据记录对应的标题, 示例值："工单：无法创建文章"
	SourceURL  string `json:"source_url,omitempty"`  // 该条数据记录对应的跳转url, 示例值："http://www.abc.com.cn"
	CreateTime *int64 `json:"create_time,omitempty"` // 数据项的创建时间。Unix 时间，单位为秒, 示例值：1618831236
	UpdateTime *int64 `json:"update_time,omitempty"` // 数据项的更新时间。Unix 时间，单位为秒, 示例值：1618831236
}

// CreateSearchDataSourceItemReqContent ...
type CreateSearchDataSourceItemReqContent struct {
	Format      *string `json:"format,omitempty"`       // 内容的格式, 示例值："html", 可选值有: `html`：html格式, `plaintext`：纯文本格式
	ContentData *string `json:"content_data,omitempty"` // 全文数据, 示例值："这是一个很长的文本"
}

// createSearchDataSourceItemResp ...
type createSearchDataSourceItemResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateSearchDataSourceItemResp `json:"data,omitempty"`
}

// CreateSearchDataSourceItemResp ...
type CreateSearchDataSourceItemResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSearchDataSourceItem 删除数据记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/delete
func (r *SearchService) DeleteSearchDataSourceItem(ctx context.Context, request *DeleteSearchDataSourceItemReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceItemResp, *Response, error) {
	if r.cli.mock.mockSearchDeleteSearchDataSourceItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#DeleteSearchDataSourceItem mock enable")
		return r.cli.mock.mockSearchDeleteSearchDataSourceItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "DeleteSearchDataSourceItem",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id/items/:item_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteSearchDataSourceItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchDeleteSearchDataSourceItem mock SearchDeleteSearchDataSourceItem method
func (r *Mock) MockSearchDeleteSearchDataSourceItem(f func(ctx context.Context, request *DeleteSearchDataSourceItemReq, options ...MethodOptionFunc) (*DeleteSearchDataSourceItemResp, *Response, error)) {
	r.mockSearchDeleteSearchDataSourceItem = f
}

// UnMockSearchDeleteSearchDataSourceItem un-mock SearchDeleteSearchDataSourceItem method
func (r *Mock) UnMockSearchDeleteSearchDataSourceItem() {
	r.mockSearchDeleteSearchDataSourceItem = nil
}

// DeleteSearchDataSourceItemReq ...
type DeleteSearchDataSourceItemReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的ID, 示例值："service_ticket"
	ItemID       string `path:"item_id" json:"-"`        // 数据记录的ID, 示例值："01010111"
}

// deleteSearchDataSourceItemResp ...
type deleteSearchDataSourceItemResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSearchDataSourceItemResp `json:"data,omitempty"`
}

// DeleteSearchDataSourceItemResp ...
type DeleteSearchDataSourceItemResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSearchDataSourceItem 获取单个数据记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source-item/get
func (r *SearchService) GetSearchDataSourceItem(ctx context.Context, request *GetSearchDataSourceItemReq, options ...MethodOptionFunc) (*GetSearchDataSourceItemResp, *Response, error) {
	if r.cli.mock.mockSearchGetSearchDataSourceItem != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#GetSearchDataSourceItem mock enable")
		return r.cli.mock.mockSearchGetSearchDataSourceItem(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "GetSearchDataSourceItem",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id/items/:item_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getSearchDataSourceItemResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchGetSearchDataSourceItem mock SearchGetSearchDataSourceItem method
func (r *Mock) MockSearchGetSearchDataSourceItem(f func(ctx context.Context, request *GetSearchDataSourceItemReq, options ...MethodOptionFunc) (*GetSearchDataSourceItemResp, *Response, error)) {
	r.mockSearchGetSearchDataSourceItem = f
}

// UnMockSearchGetSearchDataSourceItem un-mock SearchGetSearchDataSourceItem method
func (r *Mock) UnMockSearchGetSearchDataSourceItem() {
	r.mockSearchGetSearchDataSourceItem = nil
}

// GetSearchDataSourceItemReq ...
type GetSearchDataSourceItemReq struct {
	DataSourceID string `path:"data_source_id" json:"-"` // 数据源的id, 示例值："service_ticket"
	ItemID       string `path:"item_id" json:"-"`        // 数据记录的唯一标识, 示例值："01010111"
}

// getSearchDataSourceItemResp ...
type getSearchDataSourceItemResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetSearchDataSourceItemResp `json:"data,omitempty"`
}

// GetSearchDataSourceItemResp ...
type GetSearchDataSourceItemResp struct {
	Item *GetSearchDataSourceItemRespItem `json:"item,omitempty"` // 数据项实例
}

// GetSearchDataSourceItemRespItem ...
type GetSearchDataSourceItemRespItem struct {
	ID             string                                   `json:"id,omitempty"`              // item 在 datasource 中的唯一标识
	ACL            *GetSearchDataSourceItemRespItemACL      `json:"acl,omitempty"`             // item 的访问权限控制
	Metadata       *GetSearchDataSourceItemRespItemMetadata `json:"metadata,omitempty"`        // item 的元信息
	StructuredData string                                   `json:"structured_data,omitempty"` // 结构化数据（以 json 字符串传递），这些字段是搜索结果的展示字段（title字段无须在此另外指定）；目前支持的key为：, summary：搜索结果的摘要；, icon_url：搜索结果的icon地址；, footer：搜索结果的脚注
	Content        *GetSearchDataSourceItemRespItemContent  `json:"content,omitempty"`         // 非结构化数据，如文档文本，飞书搜索会用来做召回
}

// GetSearchDataSourceItemRespItemACL ...
type GetSearchDataSourceItemRespItemACL struct {
	Access string `json:"access,omitempty"` // 权限类型，优先级：Deny > Allow。默认为全员不可见，即 deny。, 可选值有: `allow`：允许访问, `deny`：禁止访问
	Value  string `json:"value,omitempty"`  // 设置的权限值，例如 userID 、groupID，依赖 type 描述。,**注**：在 type 为 user 且 access 为 allow 时，可填 "everyone" 来表示该数据项对全员可见。
	Type   string `json:"type,omitempty"`   // 权限值类型, 可选值有: `user`：访问权限控制中指定用户可以访问或拒绝访问该条数据, `group`：访问权限控制中指定用户组可以访问或拒绝访问该条数据
}

// GetSearchDataSourceItemRespItemMetadata ...
type GetSearchDataSourceItemRespItemMetadata struct {
	Title      string `json:"title,omitempty"`       // 该条数据记录对应的标题
	SourceURL  string `json:"source_url,omitempty"`  // 该条数据记录对应的跳转url
	CreateTime int64  `json:"create_time,omitempty"` // 数据项的创建时间。Unix 时间，单位为秒
	UpdateTime int64  `json:"update_time,omitempty"` // 数据项的更新时间。Unix 时间，单位为秒
}

// GetSearchDataSourceItemRespItemContent ...
type GetSearchDataSourceItemRespItemContent struct {
	Format      string `json:"format,omitempty"`       // 内容的格式, 可选值有: `html`：html格式, `plaintext`：纯文本格式
	ContentData string `json:"content_data,omitempty"` // 全文数据
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSearchDataSourceList 获取创建的所有数据源信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/list
func (r *SearchService) GetSearchDataSourceList(ctx context.Context, request *GetSearchDataSourceListReq, options ...MethodOptionFunc) (*GetSearchDataSourceListResp, *Response, error) {
	if r.cli.mock.mockSearchGetSearchDataSourceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#GetSearchDataSourceList mock enable")
		return r.cli.mock.mockSearchGetSearchDataSourceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "GetSearchDataSourceList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getSearchDataSourceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchGetSearchDataSourceList mock SearchGetSearchDataSourceList method
func (r *Mock) MockSearchGetSearchDataSourceList(f func(ctx context.Context, request *GetSearchDataSourceListReq, options ...MethodOptionFunc) (*GetSearchDataSourceListResp, *Response, error)) {
	r.mockSearchGetSearchDataSourceList = f
}

// UnMockSearchGetSearchDataSourceList un-mock SearchGetSearchDataSourceList method
func (r *Mock) UnMockSearchGetSearchDataSourceList() {
	r.mockSearchGetSearchDataSourceList = nil
}

// GetSearchDataSourceListReq ...
type GetSearchDataSourceListReq struct {
	View      *int64  `query:"view" json:"-"`       // 回包数据格式，0-全量数据；1-摘要数据。,**注**：摘要数据仅包含"id"，"name"，"state"。, 示例值：0, 可选值有: `0`：全量数据, `1`：摘要数据
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："PxZFma9OIRhdBlT/dOYNiu2Ro8F2WAhcby7OhOijfljZ"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
}

// getSearchDataSourceListResp ...
type getSearchDataSourceListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetSearchDataSourceListResp `json:"data,omitempty"`
}

// GetSearchDataSourceListResp ...
type GetSearchDataSourceListResp struct {
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetSearchDataSourceListRespItem `json:"items,omitempty"`      // 数据源中的数据记录
}

// GetSearchDataSourceListRespItem ...
type GetSearchDataSourceListRespItem struct {
	ID            string `json:"id,omitempty"`              // 数据源的唯一标识
	Name          string `json:"name,omitempty"`            // data_source的展示名称
	State         int64  `json:"state,omitempty"`           // 数据源状态，0-未上线，1-已上线, 可选值有: `0`：未上线, `1`：已上线
	Description   string `json:"description,omitempty"`     // 对于数据源的描述
	CreateTime    string `json:"create_time,omitempty"`     // 创建时间，使用Unix时间戳，单位为“秒”
	UpdateTime    string `json:"update_time,omitempty"`     // 更新时间，使用Unix时间戳，单位为“秒”
	IsExceedQuota bool   `json:"is_exceed_quota,omitempty"` // 是否超限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSearchDataSource 更新一个已经存在的数据源
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/search-v2/data_source/patch
func (r *SearchService) UpdateSearchDataSource(ctx context.Context, request *UpdateSearchDataSourceReq, options ...MethodOptionFunc) (*UpdateSearchDataSourceResp, *Response, error) {
	if r.cli.mock.mockSearchUpdateSearchDataSource != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Search#UpdateSearchDataSource mock enable")
		return r.cli.mock.mockSearchUpdateSearchDataSource(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Search",
		API:                   "UpdateSearchDataSource",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/search/v2/data_sources/:data_source_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateSearchDataSourceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockSearchUpdateSearchDataSource mock SearchUpdateSearchDataSource method
func (r *Mock) MockSearchUpdateSearchDataSource(f func(ctx context.Context, request *UpdateSearchDataSourceReq, options ...MethodOptionFunc) (*UpdateSearchDataSourceResp, *Response, error)) {
	r.mockSearchUpdateSearchDataSource = f
}

// UnMockSearchUpdateSearchDataSource un-mock SearchUpdateSearchDataSource method
func (r *Mock) UnMockSearchUpdateSearchDataSource() {
	r.mockSearchUpdateSearchDataSource = nil
}

// UpdateSearchDataSourceReq ...
type UpdateSearchDataSourceReq struct {
	DataSourceID string  `path:"data_source_id" json:"-"` // 数据源的唯一标识, 示例值："service_ticket"
	Name         *string `json:"name,omitempty"`          // 数据源的展示名称, 示例值："客服工单"
	State        *int64  `json:"state,omitempty"`         // 数据源状态，0-未上线，1-已上线, 示例值：0, 可选值有: `0`：未上线, `1`：已上线
	Description  *string `json:"description,omitempty"`   // 对于数据源的描述, 示例值："搜索客服工单"
}

// updateSearchDataSourceResp ...
type updateSearchDataSourceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSearchDataSourceResp `json:"data,omitempty"`
}

// UpdateSearchDataSourceResp ...
type UpdateSearchDataSourceResp struct {
	DataSource *UpdateSearchDataSourceRespDataSource `json:"data_source,omitempty"` // 数据源
}

// UpdateSearchDataSourceRespDataSource ...
type UpdateSearchDataSourceRespDataSource struct {
	ID            string `json:"id,omitempty"`              // 数据源的唯一标识
	Name          string `json:"name,omitempty"`            // data_source的展示名称
	State         int64  `json:"state,omitempty"`           // 数据源状态，0-未上线，1-已上线, 可选值有: `0`：未上线, `1`：已上线
	Description   string `json:"description,omitempty"`     // 对于数据源的描述
	CreateTime    string `json:"create_time,omitempty"`     // 创建时间，使用Unix时间戳，单位为“秒”
	UpdateTime    string `json:"update_time,omitempty"`     // 更新时间，使用Unix时间戳，单位为“秒”
	IsExceedQuota bool   `json:"is_exceed_quota,omitempty"` // 是否超限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateTaskCollaborator 该接口用于新增任务执行者，一个任务最多添加50个执行者
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/task-v1/task-collaborator/create
func (r *TaskService) CreateTaskCollaborator(ctx context.Context, request *CreateTaskCollaboratorReq, options ...MethodOptionFunc) (*CreateTaskCollaboratorResp, *Response, error) {
	if r.cli.mock.mockTaskCreateTaskCollaborator != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Task#CreateTaskCollaborator mock enable")
		return r.cli.mock.mockTaskCreateTaskCollaborator(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Task",
		API:                   "CreateTaskCollaborator",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/task/v1/tasks/:task_id/collaborators",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createTaskCollaboratorResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockTaskCreateTaskCollaborator mock TaskCreateTaskCollaborator method
func (r *Mock) MockTaskCreateTaskCollaborator(f func(ctx context.Context, request *CreateTaskCollaboratorReq, options ...MethodOptionFunc) (*CreateTaskCollaboratorResp, *Response, error)) {
	r.mockTaskCreateTaskCollaborator = f
}

// UnMockTaskCreateTaskCollaborator un-mock TaskCreateTaskCollaborator method
func (r *Mock) UnMockTaskCreateTaskCollaborator() {
	r.mockTaskCreateTaskCollaborator = nil
}

// CreateTaskCollaboratorReq ...
type CreateTaskCollaboratorReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID     string  `path:"task_id" json:"-"`       // 任务 ID, 示例值："83912691-2e43-47fc-94a4-d512e03984fa"
	ID         string  `json:"id,omitempty"`           // 任务协作者的 ID, 示例值："ou_99e1a581b36ecc4862cbfbce473f1234"
}

// createTaskCollaboratorResp ...
type createTaskCollaboratorResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateTaskCollaboratorResp `json:"data,omitempty"`
}

// CreateTaskCollaboratorResp ...
type CreateTaskCollaboratorResp struct {
	Collaborator *CreateTaskCollaboratorRespCollaborator `json:"collaborator,omitempty"` // 返回创建成功后的任务协作者
}

// CreateTaskCollaboratorRespCollaborator ...
type CreateTaskCollaboratorRespCollaborator struct {
	ID string `json:"id,omitempty"` // 任务协作者的 ID
}
