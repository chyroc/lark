// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// BatchCreateBitableRecord 该接口用于在数据表中新增多条记录
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-record/batch_create
func (r *BitableService) BatchCreateBitableRecord(ctx context.Context, request *BatchCreateBitableRecordReq, options ...MethodOptionFunc) (*BatchCreateBitableRecordResp, *Response, error) {
	if r.cli.mock.mockBitableBatchCreateBitableRecord != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#BatchCreateBitableRecord mock enable")
		return r.cli.mock.mockBitableBatchCreateBitableRecord(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "BatchCreateBitableRecord",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/records/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchCreateBitableRecordResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockBitableBatchCreateBitableRecord(f func(ctx context.Context, request *BatchCreateBitableRecordReq, options ...MethodOptionFunc) (*BatchCreateBitableRecordResp, *Response, error)) {
	r.mockBitableBatchCreateBitableRecord = f
}

func (r *Mock) UnMockBitableBatchCreateBitableRecord() {
	r.mockBitableBatchCreateBitableRecord = nil
}

type BatchCreateBitableRecordReq struct {
	UserIDType *IDType                              `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 userid
	AppToken   string                               `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID    string                               `path:"table_id" json:"-"`      // table id, 示例值："tblsRc9GRRXKqhvW"
	Records    []*BatchCreateBitableRecordReqRecord `json:"records,omitempty"`      // 记录
}

type BatchCreateBitableRecordReqRecord struct {
	RecordID *string                `json:"record_id,omitempty"` // 记录 id, 示例值："recqwIwhc6"
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段
}

type batchCreateBitableRecordResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *BatchCreateBitableRecordResp `json:"data,omitempty"`
}

type BatchCreateBitableRecordResp struct {
	Records []*BatchCreateBitableRecordRespRecord `json:"records,omitempty"` // 记录
}

type BatchCreateBitableRecordRespRecord struct {
	RecordID string                 `json:"record_id,omitempty"` // 记录 id
	Fields   map[string]interface{} `json:"fields,omitempty"`    // 记录字段
}
