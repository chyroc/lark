// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// DeleteDriveComment 删除云文档中的某条回复。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/delete
func (r *DriveService) DeleteDriveComment(ctx context.Context, request *DeleteDriveCommentReq, options ...MethodOptionFunc) (*DeleteDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveComment mock enable")
		return r.cli.mock.mockDriveDeleteDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveComment",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveComment mock DriveDeleteDriveComment method
func (r *Mock) MockDriveDeleteDriveComment(f func(ctx context.Context, request *DeleteDriveCommentReq, options ...MethodOptionFunc) (*DeleteDriveCommentResp, *Response, error)) {
	r.mockDriveDeleteDriveComment = f
}

// UnMockDriveDeleteDriveComment un-mock DriveDeleteDriveComment method
func (r *Mock) UnMockDriveDeleteDriveComment() {
	r.mockDriveDeleteDriveComment = nil
}

// DeleteDriveCommentReq ...
type DeleteDriveCommentReq struct {
	FileType  FileType `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	FileToken string   `path:"file_token" json:"-"` // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID string   `path:"comment_id" json:"-"` // 评论ID, 示例值："6916106822734578184"
	ReplyID   string   `path:"reply_id" json:"-"`   // 回复ID, 示例值："6916106822734594568"
}

// deleteDriveCommentResp ...
type deleteDriveCommentResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDriveCommentResp `json:"data,omitempty"`
}

// DeleteDriveCommentResp ...
type DeleteDriveCommentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveComment 获取云文档中的某条评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/get
func (r *DriveService) GetDriveComment(ctx context.Context, request *GetDriveCommentReq, options ...MethodOptionFunc) (*GetDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveComment mock enable")
		return r.cli.mock.mockDriveGetDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveComment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveComment mock DriveGetDriveComment method
func (r *Mock) MockDriveGetDriveComment(f func(ctx context.Context, request *GetDriveCommentReq, options ...MethodOptionFunc) (*GetDriveCommentResp, *Response, error)) {
	r.mockDriveGetDriveComment = f
}

// UnMockDriveGetDriveComment un-mock DriveGetDriveComment method
func (r *Mock) UnMockDriveGetDriveComment() {
	r.mockDriveGetDriveComment = nil
}

// GetDriveCommentReq ...
type GetDriveCommentReq struct {
	FileType   FileType `query:"file_type" json:"-"`    // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	FileToken  string   `path:"file_token" json:"-"`    // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID  string   `path:"comment_id" json:"-"`    // 评论ID, 示例值："6916106822734578184"
}

// getDriveCommentResp ...
type getDriveCommentResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveCommentResp `json:"data,omitempty"`
}

// GetDriveCommentResp ...
type GetDriveCommentResp struct {
	CommentID    string                        `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）
	UserID       string                        `json:"user_id,omitempty"`        // 用户ID
	CreateTime   int64                         `json:"create_time,omitempty"`    // 创建时间
	UpdateTime   int64                         `json:"update_time,omitempty"`    // 更新时间
	IsSolved     bool                          `json:"is_solved,omitempty"`      // 是否已解决
	SolvedTime   int64                         `json:"solved_time,omitempty"`    // 解决评论时间
	SolverUserID string                        `json:"solver_user_id,omitempty"` // 解决评论者的用户ID
	ReplyList    *GetDriveCommentRespReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// GetDriveCommentRespReplyList ...
type GetDriveCommentRespReplyList struct {
	Replies []*GetDriveCommentRespReplyListReply `json:"replies,omitempty"` // 回复列表
}

// GetDriveCommentRespReplyListReply ...
type GetDriveCommentRespReplyListReply struct {
	ReplyID    string                                    `json:"reply_id,omitempty"`    // 回复ID
	UserID     string                                    `json:"user_id,omitempty"`     // 用户ID
	CreateTime int64                                     `json:"create_time,omitempty"` // 创建时间
	UpdateTime int64                                     `json:"update_time,omitempty"` // 更新时间
	Content    *GetDriveCommentRespReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// GetDriveCommentRespReplyListReplyContent ...
type GetDriveCommentRespReplyListReplyContent struct {
	Elements []*GetDriveCommentRespReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// GetDriveCommentRespReplyListReplyContentElement ...
type GetDriveCommentRespReplyListReplyContentElement struct {
	Type     string                                                   `json:"type,omitempty"`      // 回复的内容元素, 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *GetDriveCommentRespReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *GetDriveCommentRespReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *GetDriveCommentRespReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// GetDriveCommentRespReplyListReplyContentElementTextRun ...
type GetDriveCommentRespReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本
}

// GetDriveCommentRespReplyListReplyContentElementDocsLink ...
type GetDriveCommentRespReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档
}

// GetDriveCommentRespReplyListReplyContentElementPerson ...
type GetDriveCommentRespReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveCommentList 通过分页方式获取云文档中的全文评论列表。
//
// 注意：该接口仅可获取在线文档的全文评论，不支持获取局部评论或者在线表格中的评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/list
func (r *DriveService) GetDriveCommentList(ctx context.Context, request *GetDriveCommentListReq, options ...MethodOptionFunc) (*GetDriveCommentListResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveCommentList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveCommentList mock enable")
		return r.cli.mock.mockDriveGetDriveCommentList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveCommentList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveCommentListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveCommentList mock DriveGetDriveCommentList method
func (r *Mock) MockDriveGetDriveCommentList(f func(ctx context.Context, request *GetDriveCommentListReq, options ...MethodOptionFunc) (*GetDriveCommentListResp, *Response, error)) {
	r.mockDriveGetDriveCommentList = f
}

// UnMockDriveGetDriveCommentList un-mock DriveGetDriveCommentList method
func (r *Mock) UnMockDriveGetDriveCommentList() {
	r.mockDriveGetDriveCommentList = nil
}

// GetDriveCommentListReq ...
type GetDriveCommentListReq struct {
	FileType   FileType `query:"file_type" json:"-"`    // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	IsSolved   *bool    `query:"is_solved" json:"-"`    // 是否已解决（可选）, 示例值：false
	PageToken  *string  `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6916106822734578184"
	PageSize   *int64   `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
	FileToken  string   `path:"file_token" json:"-"`    // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
}

// getDriveCommentListResp ...
type getDriveCommentListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveCommentListResp `json:"data,omitempty"`
}

// GetDriveCommentListResp ...
type GetDriveCommentListResp struct {
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetDriveCommentListRespItem `json:"items,omitempty"`      // 评论列表
}

// GetDriveCommentListRespItem ...
type GetDriveCommentListRespItem struct {
	CommentID    string                                `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）
	UserID       string                                `json:"user_id,omitempty"`        // 用户ID
	CreateTime   int64                                 `json:"create_time,omitempty"`    // 创建时间
	UpdateTime   int64                                 `json:"update_time,omitempty"`    // 更新时间
	IsSolved     bool                                  `json:"is_solved,omitempty"`      // 是否已解决
	SolvedTime   int64                                 `json:"solved_time,omitempty"`    // 解决评论时间
	SolverUserID string                                `json:"solver_user_id,omitempty"` // 解决评论者的用户ID
	ReplyList    *GetDriveCommentListRespItemReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// GetDriveCommentListRespItemReplyList ...
type GetDriveCommentListRespItemReplyList struct {
	Replies []*GetDriveCommentListRespItemReplyListReply `json:"replies,omitempty"` // 回复列表
}

// GetDriveCommentListRespItemReplyListReply ...
type GetDriveCommentListRespItemReplyListReply struct {
	ReplyID    string                                            `json:"reply_id,omitempty"`    // 回复ID
	UserID     string                                            `json:"user_id,omitempty"`     // 用户ID
	CreateTime int64                                             `json:"create_time,omitempty"` // 创建时间
	UpdateTime int64                                             `json:"update_time,omitempty"` // 更新时间
	Content    *GetDriveCommentListRespItemReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// GetDriveCommentListRespItemReplyListReplyContent ...
type GetDriveCommentListRespItemReplyListReplyContent struct {
	Elements []*GetDriveCommentListRespItemReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// GetDriveCommentListRespItemReplyListReplyContentElement ...
type GetDriveCommentListRespItemReplyListReplyContentElement struct {
	Type     string                                                           `json:"type,omitempty"`      // 回复的内容元素, 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *GetDriveCommentListRespItemReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *GetDriveCommentListRespItemReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *GetDriveCommentListRespItemReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// GetDriveCommentListRespItemReplyListReplyContentElementTextRun ...
type GetDriveCommentListRespItemReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本
}

// GetDriveCommentListRespItemReplyListReplyContentElementDocsLink ...
type GetDriveCommentListRespItemReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档
}

// GetDriveCommentListRespItemReplyListReplyContentElementPerson ...
type GetDriveCommentListRespItemReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveCommentPatch 解决或恢复云文档中的评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/patch
func (r *DriveService) UpdateDriveCommentPatch(ctx context.Context, request *UpdateDriveCommentPatchReq, options ...MethodOptionFunc) (*UpdateDriveCommentPatchResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveCommentPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveCommentPatch mock enable")
		return r.cli.mock.mockDriveUpdateDriveCommentPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveCommentPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveCommentPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveCommentPatch mock DriveUpdateDriveCommentPatch method
func (r *Mock) MockDriveUpdateDriveCommentPatch(f func(ctx context.Context, request *UpdateDriveCommentPatchReq, options ...MethodOptionFunc) (*UpdateDriveCommentPatchResp, *Response, error)) {
	r.mockDriveUpdateDriveCommentPatch = f
}

// UnMockDriveUpdateDriveCommentPatch un-mock DriveUpdateDriveCommentPatch method
func (r *Mock) UnMockDriveUpdateDriveCommentPatch() {
	r.mockDriveUpdateDriveCommentPatch = nil
}

// UpdateDriveCommentPatchReq ...
type UpdateDriveCommentPatchReq struct {
	FileType  FileType `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	FileToken string   `path:"file_token" json:"-"` // 文档token, 示例值："doccnGp4UK1UskrOEJwBXd3****"
	CommentID string   `path:"comment_id" json:"-"` // 评论ID, 示例值："6916106822734578184"
	IsSolved  bool     `json:"is_solved,omitempty"` // 评论解决标志, 示例值：true
}

// updateDriveCommentPatchResp ...
type updateDriveCommentPatchResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveCommentPatchResp `json:"data,omitempty"`
}

// UpdateDriveCommentPatchResp ...
type UpdateDriveCommentPatchResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveComment 更新云文档中的某条回复。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment-reply/update
func (r *DriveService) UpdateDriveComment(ctx context.Context, request *UpdateDriveCommentReq, options ...MethodOptionFunc) (*UpdateDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveComment mock enable")
		return r.cli.mock.mockDriveUpdateDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveComment",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments/:comment_id/replies/:reply_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveComment mock DriveUpdateDriveComment method
func (r *Mock) MockDriveUpdateDriveComment(f func(ctx context.Context, request *UpdateDriveCommentReq, options ...MethodOptionFunc) (*UpdateDriveCommentResp, *Response, error)) {
	r.mockDriveUpdateDriveComment = f
}

// UnMockDriveUpdateDriveComment un-mock DriveUpdateDriveComment method
func (r *Mock) UnMockDriveUpdateDriveComment() {
	r.mockDriveUpdateDriveComment = nil
}

// UpdateDriveCommentReq ...
type UpdateDriveCommentReq struct {
	FileType  FileType                      `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	FileToken string                        `path:"file_token" json:"-"` // 文档token, 示例值："doccnHh7U87HOFpii5u5G*****"
	CommentID string                        `path:"comment_id" json:"-"` // 评论ID, 示例值："6916106822734578184"
	ReplyID   string                        `path:"reply_id" json:"-"`   // 回复ID, 示例值："6916106822734594568"
	Content   *UpdateDriveCommentReqContent `json:"content,omitempty"`   // 回复内容
}

// UpdateDriveCommentReqContent ...
type UpdateDriveCommentReqContent struct {
	Elements []*UpdateDriveCommentReqContentElement `json:"elements,omitempty"` // 回复的内容
}

// UpdateDriveCommentReqContentElement ...
type UpdateDriveCommentReqContentElement struct {
	Type     string                                       `json:"type,omitempty"`      // 回复的内容元素, 示例值："text_run", 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *UpdateDriveCommentReqContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *UpdateDriveCommentReqContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *UpdateDriveCommentReqContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// UpdateDriveCommentReqContentElementTextRun ...
type UpdateDriveCommentReqContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本, 示例值："comment text"
}

// UpdateDriveCommentReqContentElementDocsLink ...
type UpdateDriveCommentReqContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档, 示例值："https://bytedance.feishu.cn/docs/doccnHh7U87HOFpii5u5G*****"
}

// UpdateDriveCommentReqContentElementPerson ...
type UpdateDriveCommentReqContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab*****"
}

// updateDriveCommentResp ...
type updateDriveCommentResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveCommentResp `json:"data,omitempty"`
}

// UpdateDriveCommentResp ...
type UpdateDriveCommentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocContent
//
// 在使用此接口前，请仔细阅读[文档概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/docs-doc-overview)和[准备接入文档 API](https://open.feishu.cn/document/ukTMukTMukTM/ugzNzUjL4czM14CO3MTN/guide/getting-start)了解文档调用的规则和约束，确保你的文档数据不会丢失或出错。
// 文档数据结构定义可参考：[文档数据结构概述](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)
// 该接口用于获取结构化的文档内容。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDM2YjL1AjN24SNwYjN
func (r *DriveService) GetDriveDocContent(ctx context.Context, request *GetDriveDocContentReq, options ...MethodOptionFunc) (*GetDriveDocContentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocContent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocContent mock enable")
		return r.cli.mock.mockDriveGetDriveDocContent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocContent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/:docToken/content",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocContentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocContent mock DriveGetDriveDocContent method
func (r *Mock) MockDriveGetDriveDocContent(f func(ctx context.Context, request *GetDriveDocContentReq, options ...MethodOptionFunc) (*GetDriveDocContentResp, *Response, error)) {
	r.mockDriveGetDriveDocContent = f
}

// UnMockDriveGetDriveDocContent un-mock DriveGetDriveDocContent method
func (r *Mock) UnMockDriveGetDriveDocContent() {
	r.mockDriveGetDriveDocContent = nil
}

// GetDriveDocContentReq ...
type GetDriveDocContentReq struct {
	DocToken string `path:"docToken" json:"-"` // 获取方式详见 [云文档接口快速入门](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)
}

// getDriveDocContentResp ...
type getDriveDocContentResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *GetDriveDocContentResp `json:"data,omitempty"`
}

// GetDriveDocContentResp ...
type GetDriveDocContentResp struct {
	Content  string `json:"content,omitempty"`  // 详情参考[文档数据结构](https://open.feishu.cn/document/ukTMukTMukTM/ukDM2YjL5AjN24SOwYjN)
	Revision int64  `json:"revision,omitempty"` // 文档当前版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveDoc
//
// 在使用此接口前，请仔细阅读[文档概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/docs-doc-overview)和[准备接入文档 API](https://open.feishu.cn/document/ukTMukTMukTM/ugzNzUjL4czM14CO3MTN/guide/getting-start)了解文档调用的规则和约束，确保你的文档数据不会丢失或出错。
// 文档数据结构定义可参考：[文档数据结构概述](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)
// 该接口用于创建并初始化文档。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDM2YjL4AjN24COwYjN
func (r *DriveService) CreateDriveDoc(ctx context.Context, request *CreateDriveDocReq, options ...MethodOptionFunc) (*CreateDriveDocResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveDoc != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveDoc mock enable")
		return r.cli.mock.mockDriveCreateDriveDoc(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveDoc",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveDocResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveDoc mock DriveCreateDriveDoc method
func (r *Mock) MockDriveCreateDriveDoc(f func(ctx context.Context, request *CreateDriveDocReq, options ...MethodOptionFunc) (*CreateDriveDocResp, *Response, error)) {
	r.mockDriveCreateDriveDoc = f
}

// UnMockDriveCreateDriveDoc un-mock DriveCreateDriveDoc method
func (r *Mock) UnMockDriveCreateDriveDoc() {
	r.mockDriveCreateDriveDoc = nil
}

// CreateDriveDocReq ...
type CreateDriveDocReq struct {
	FolderToken *string `json:"FolderToken,omitempty"` // 文件夹 token，获取方式见[云文档接口快速入门](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)；空表示根目录，tenant_access_token应用权限仅允许操作应用创建的目录
	Content     *string `json:"Content,omitempty"`     // 传入符合[文档数据结构](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)的字符串，若为空表示创建空文档
}

// createDriveDocResp ...
type createDriveDocResp struct {
	Code int64               `json:"code,omitempty"`
	Msg  string              `json:"msg,omitempty"`
	Data *CreateDriveDocResp `json:"data,omitempty"`
}

// CreateDriveDocResp ...
type CreateDriveDocResp struct {
	ObjToken string `json:"objToken,omitempty"` // 新建文档的token
	URL      string `json:"url,omitempty"`      // 新建文档的访问链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocMeta
//
// 该接口用于根据 docToken 获取元数据。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uczN3UjL3czN14yN3cTN
func (r *DriveService) GetDriveDocMeta(ctx context.Context, request *GetDriveDocMetaReq, options ...MethodOptionFunc) (*GetDriveDocMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocMeta mock enable")
		return r.cli.mock.mockDriveGetDriveDocMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/meta/:docToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocMeta mock DriveGetDriveDocMeta method
func (r *Mock) MockDriveGetDriveDocMeta(f func(ctx context.Context, request *GetDriveDocMetaReq, options ...MethodOptionFunc) (*GetDriveDocMetaResp, *Response, error)) {
	r.mockDriveGetDriveDocMeta = f
}

// UnMockDriveGetDriveDocMeta un-mock DriveGetDriveDocMeta method
func (r *Mock) UnMockDriveGetDriveDocMeta() {
	r.mockDriveGetDriveDocMeta = nil
}

// GetDriveDocMetaReq ...
type GetDriveDocMetaReq struct {
	DocToken string `path:"docToken" json:"-"` // doc 的 token，获取方式见[准备接入文档 API](https://open.feishu.cn/document/ukTMukTMukTM/ugzNzUjL4czM14CO3MTN/guide/getting-start)
}

// getDriveDocMetaResp ...
type getDriveDocMetaResp struct {
	Code int64                `json:"code,omitempty"`
	Msg  string               `json:"msg,omitempty"`
	Data *GetDriveDocMetaResp `json:"data,omitempty"`
}

// GetDriveDocMetaResp ...
type GetDriveDocMetaResp struct {
	CreateDate     string `json:"create_date,omitempty"`      // 创建日期
	CreateTime     int64  `json:"create_time,omitempty"`      // 创建时间戳
	Creator        string `json:"creator,omitempty"`          // 创建者open_id
	CreateUserName string `json:"create_user_name,omitempty"` // 创建者用户名
	DeleteFlag     int64  `json:"delete_flag,omitempty"`      // 删除标志，0表示正常访问未删除，1表示在回收站，2表示已经彻底删除
	EditTime       int64  `json:"edit_time,omitempty"`        // 最后编辑时间戳
	EditUserName   string `json:"edit_user_name,omitempty"`   // 最后编辑者用户名
	IsExternal     bool   `json:"is_external,omitempty"`      // 是否外部文档
	IsPined        bool   `json:"is_pined,omitempty"`         // 是否在接口调用者目录里快速访问
	IsStared       bool   `json:"is_stared,omitempty"`        // 是否在接口调用者目录里收藏
	ObjType        string `json:"obj_type,omitempty"`         // 文档类型，固定是doc
	Owner          string `json:"owner,omitempty"`            // 当前所有者open_id
	OwnerUserName  string `json:"owner_user_name,omitempty"`  // 当前所有者用户名
	ServerTime     int64  `json:"server_time,omitempty"`      // 处理请求时的服务器时间戳
	TenantID       string `json:"tenant_id,omitempty"`        // 文档所在租户id
	Title          string `json:"title,omitempty"`            // 文档名称
	Type           int64  `json:"type,omitempty"`             // 文档类型，固定是2
	URL            string `json:"url,omitempty"`              // 文档url
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveDocRawContent
//
// 该接口用于获取文档的纯文本内容，不包含富文本格式信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukzNzUjL5czM14SO3MTN
func (r *DriveService) GetDriveDocRawContent(ctx context.Context, request *GetDriveDocRawContentReq, options ...MethodOptionFunc) (*GetDriveDocRawContentResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveDocRawContent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveDocRawContent mock enable")
		return r.cli.mock.mockDriveGetDriveDocRawContent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveDocRawContent",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/doc/v2/:docToken/raw_content",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveDocRawContentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveDocRawContent mock DriveGetDriveDocRawContent method
func (r *Mock) MockDriveGetDriveDocRawContent(f func(ctx context.Context, request *GetDriveDocRawContentReq, options ...MethodOptionFunc) (*GetDriveDocRawContentResp, *Response, error)) {
	r.mockDriveGetDriveDocRawContent = f
}

// UnMockDriveGetDriveDocRawContent un-mock DriveGetDriveDocRawContent method
func (r *Mock) UnMockDriveGetDriveDocRawContent() {
	r.mockDriveGetDriveDocRawContent = nil
}

// GetDriveDocRawContentReq ...
type GetDriveDocRawContentReq struct {
	DocToken string `path:"docToken" json:"-"` // 获取方式详见 [云文档接口快速入门](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)
}

// getDriveDocRawContentResp ...
type getDriveDocRawContentResp struct {
	Code int64                      `json:"code,omitempty"` // 如: 0
	Msg  string                     `json:"msg,omitempty"`  // 如: Success
	Data *GetDriveDocRawContentResp `json:"data,omitempty"`
}

// GetDriveDocRawContentResp ...
type GetDriveDocRawContentResp struct {
	Content string `json:"content,omitempty"` // 如: string
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CopyDriveFile
//
// 该接口用于根据文件 token 复制 Doc 或 Sheet  到目标文件夹中。
// 若没有特定的文件夹用于承载创建的文档，可以先调用「获取文件夹元信息」文档中的「获取 root folder (我的空间) meta」接口，获得我的空间的 token，然后再使用此接口。复制的文档将会在「我的空间」的「归我所有」列表里。
// 该接口不支持并发创建，且调用频率上限为 5QPS 且 10000次/天
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTNzUjL2UzM14iN1MTN
func (r *DriveService) CopyDriveFile(ctx context.Context, request *CopyDriveFileReq, options ...MethodOptionFunc) (*CopyDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveCopyDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CopyDriveFile mock enable")
		return r.cli.mock.mockDriveCopyDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CopyDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/file/copy/files/:fileToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(copyDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCopyDriveFile mock DriveCopyDriveFile method
func (r *Mock) MockDriveCopyDriveFile(f func(ctx context.Context, request *CopyDriveFileReq, options ...MethodOptionFunc) (*CopyDriveFileResp, *Response, error)) {
	r.mockDriveCopyDriveFile = f
}

// UnMockDriveCopyDriveFile un-mock DriveCopyDriveFile method
func (r *Mock) UnMockDriveCopyDriveFile() {
	r.mockDriveCopyDriveFile = nil
}

// CopyDriveFileReq ...
type CopyDriveFileReq struct {
	FileToken      string `path:"fileToken" json:"-"`       // 需要复制的源文件或文档的 token, 获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Type           string `json:"type,omitempty"`           // 需要创建文档的类型   "doc" 、"sheet" or "bitable"
	DstFolderToken string `json:"dstFolderToken,omitempty"` // 目标文件夹的 token, 获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	DstName        string `json:"dstName,omitempty"`        // 复制的副本文件的新名称
	CommentNeeded  *bool  `json:"commentNeeded,omitempty"`  // 是否复制评论
}

// copyDriveFileResp ...
type copyDriveFileResp struct {
	Code int64              `json:"code,omitempty"`
	Msg  string             `json:"msg,omitempty"`
	Data *CopyDriveFileResp `json:"data,omitempty"`
}

// CopyDriveFileResp ...
type CopyDriveFileResp struct {
	FolderToken string `json:"folderToken,omitempty"` // 目标文件夹的 token
	Revision    int64  `json:"revision,omitempty"`    // 新创建文档的版本号
	Token       string `json:"token,omitempty"`       // 新创建文档的 token
	Type        string `json:"type,omitempty"`        // 新建文档的类型，"doc" or "sheet"
	URL         string `json:"url,omitempty"`         // 新创建文档的 url
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveFile
//
// 该接口用于根据 folderToken 创建 Doc、 Sheet 或 Bitable 。
// 若没有特定的文件夹用于承载创建的文档，可以先调用「获取文件夹元信息」文档中的「获取 root folder (我的空间) meta」接口，获得我的空间的 token，然后再使用此接口。创建的文档将会在「我的空间」的「归我所有」列表里。
// 该接口不支持并发创建，且调用频率上限为 5QPS 且 10000次/天
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTNzUjL0UzM14CN1MTN
func (r *DriveService) CreateDriveFile(ctx context.Context, request *CreateDriveFileReq, options ...MethodOptionFunc) (*CreateDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFile mock enable")
		return r.cli.mock.mockDriveCreateDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/file/:folderToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveFile mock DriveCreateDriveFile method
func (r *Mock) MockDriveCreateDriveFile(f func(ctx context.Context, request *CreateDriveFileReq, options ...MethodOptionFunc) (*CreateDriveFileResp, *Response, error)) {
	r.mockDriveCreateDriveFile = f
}

// UnMockDriveCreateDriveFile un-mock DriveCreateDriveFile method
func (r *Mock) UnMockDriveCreateDriveFile() {
	r.mockDriveCreateDriveFile = nil
}

// CreateDriveFileReq ...
type CreateDriveFileReq struct {
	FolderToken string `path:"folderToken" json:"-"` // 文件夹 token，用于在此文件夹下新建文档，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Type        string `json:"type,omitempty"`       // 需要创建文档的类型  "doc" 、 "sheet"  or  "bitable"
	Title       string `json:"title,omitempty"`      // 创建文档的标题。注：type 为 "doc" 时不可用（非必填，请求会被过滤），有创建带标题doc文档需求可用 [创建文档](https://open.feishu.cn/document/ukTMukTMukTM/ugDM2YjL4AjN24COwYjN) 接口
}

// createDriveFileResp ...
type createDriveFileResp struct {
	Code int64                `json:"code,omitempty"`
	Msg  string               `json:"msg,omitempty"`
	Data *CreateDriveFileResp `json:"data,omitempty"`
}

// CreateDriveFileResp ...
type CreateDriveFileResp struct {
	URL      string `json:"url,omitempty"`      // 新创建文档的 url
	Token    string `json:"token,omitempty"`    // 新创建文档的 token
	Revision int64  `json:"revision,omitempty"` // 新创建文档的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveDocFile
//
// 该接口用于根据 docToken 删除对应的 Docs 文档。
// 文档只能被文档所有者删除，文档被删除后将会放到回收站里
// 该接口不支持并发调用，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATM2UjLwEjN14CMxYTN
func (r *DriveService) DeleteDriveDocFile(ctx context.Context, request *DeleteDriveDocFileReq, options ...MethodOptionFunc) (*DeleteDriveDocFileResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveDocFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveDocFile mock enable")
		return r.cli.mock.mockDriveDeleteDriveDocFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveDocFile",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/file/docs/:docToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveDocFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveDocFile mock DriveDeleteDriveDocFile method
func (r *Mock) MockDriveDeleteDriveDocFile(f func(ctx context.Context, request *DeleteDriveDocFileReq, options ...MethodOptionFunc) (*DeleteDriveDocFileResp, *Response, error)) {
	r.mockDriveDeleteDriveDocFile = f
}

// UnMockDriveDeleteDriveDocFile un-mock DriveDeleteDriveDocFile method
func (r *Mock) UnMockDriveDeleteDriveDocFile() {
	r.mockDriveDeleteDriveDocFile = nil
}

// DeleteDriveDocFileReq ...
type DeleteDriveDocFileReq struct {
	DocToken string `path:"docToken" json:"-"` // doc 的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

// deleteDriveDocFileResp ...
type deleteDriveDocFileResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *DeleteDriveDocFileResp `json:"data,omitempty"`
}

// DeleteDriveDocFileResp ...
type DeleteDriveDocFileResp struct {
	ID     string `json:"id,omitempty"`     // doc 的 id「字符串类型」
	Result bool   `json:"result,omitempty"` // 删除结果
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadDriveFile 使用该接口可以下载在云空间目录下的文件（不含飞书文档/表格/思维导图等在线文档）。支持range下载。
//
// 该接口支持调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/download
func (r *DriveService) DownloadDriveFile(ctx context.Context, request *DownloadDriveFileReq, options ...MethodOptionFunc) (*DownloadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveDownloadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DownloadDriveFile mock enable")
		return r.cli.mock.mockDriveDownloadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DownloadDriveFile",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(downloadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDownloadDriveFile mock DriveDownloadDriveFile method
func (r *Mock) MockDriveDownloadDriveFile(f func(ctx context.Context, request *DownloadDriveFileReq, options ...MethodOptionFunc) (*DownloadDriveFileResp, *Response, error)) {
	r.mockDriveDownloadDriveFile = f
}

// UnMockDriveDownloadDriveFile un-mock DriveDownloadDriveFile method
func (r *Mock) UnMockDriveDownloadDriveFile() {
	r.mockDriveDownloadDriveFile = nil
}

// DownloadDriveFileReq ...
type DownloadDriveFileReq struct {
	FileToken string   `path:"file_token" json:"-"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："boxcnabCdefg12345"
	Range     [2]int64 `header:"range" json:"-"`    // 指定文件下载部分, 示例值："bytes=0-1024"
}

// downloadDriveFileResp ...
type downloadDriveFileResp struct {
	IsFile bool
	Code   int64
	Msg    string
	Data   *DownloadDriveFileResp
}

func (r *downloadDriveFileResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadDriveFileResp{}
	}
	r.Data.File = file
}

func (r *downloadDriveFileResp) SetFilename(filename string) {
	if r.Data == nil {
		r.Data = &DownloadDriveFileResp{}
	}
	r.Data.Filename = filename
}

// DownloadDriveFileResp ...
type DownloadDriveFileResp struct {
	File     io.Reader
	Filename string // 文件名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveFile 删除在云空间内的文件
//
// 文档只能被文档所有者删除(使用tenant_access_token 前，请确保该应用是文档的所有者，否则会报无权限错误)，文档被删除后将会放到回收站里
// 该接口不支持并发调用，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/delete
func (r *DriveService) DeleteDriveFile(ctx context.Context, request *DeleteDriveFileReq, options ...MethodOptionFunc) (*DeleteDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveFile mock enable")
		return r.cli.mock.mockDriveDeleteDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveFile",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveFile mock DriveDeleteDriveFile method
func (r *Mock) MockDriveDeleteDriveFile(f func(ctx context.Context, request *DeleteDriveFileReq, options ...MethodOptionFunc) (*DeleteDriveFileResp, *Response, error)) {
	r.mockDriveDeleteDriveFile = f
}

// UnMockDriveDeleteDriveFile un-mock DriveDeleteDriveFile method
func (r *Mock) UnMockDriveDeleteDriveFile() {
	r.mockDriveDeleteDriveFile = nil
}

// DeleteDriveFileReq ...
type DeleteDriveFileReq struct {
	Type      string `query:"type" json:"-"`      // 云文档类型, 示例值："file", 可选值有: `file`：box开头云文档类型
	FileToken string `path:"file_token" json:"-"` // 需要删除的文件token, 示例值："boxxxxxxx"
}

// deleteDriveFileResp ...
type deleteDriveFileResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDriveFileResp `json:"data,omitempty"`
}

// DeleteDriveFileResp ...
type DeleteDriveFileResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFileMeta 该接口用于根据 token 获取各类文件的元数据。
//
// 请求用户需要拥有该文件的访问（读）权限
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjN3UjLzYzN14yM2cTN
func (r *DriveService) GetDriveFileMeta(ctx context.Context, request *GetDriveFileMetaReq, options ...MethodOptionFunc) (*GetDriveFileMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileMeta mock enable")
		return r.cli.mock.mockDriveGetDriveFileMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFileMeta",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/suite/docs-api/meta",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFileMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileMeta mock DriveGetDriveFileMeta method
func (r *Mock) MockDriveGetDriveFileMeta(f func(ctx context.Context, request *GetDriveFileMetaReq, options ...MethodOptionFunc) (*GetDriveFileMetaResp, *Response, error)) {
	r.mockDriveGetDriveFileMeta = f
}

// UnMockDriveGetDriveFileMeta un-mock DriveGetDriveFileMeta method
func (r *Mock) UnMockDriveGetDriveFileMeta() {
	r.mockDriveGetDriveFileMeta = nil
}

// GetDriveFileMetaReq ...
type GetDriveFileMetaReq struct {
	RequestDocs []*GetDriveFileMetaReqRequestDocs `json:"request_docs,omitempty"` // 请求文档，一次不超过200个
}

// GetDriveFileMetaReqRequestDocs ...
type GetDriveFileMetaReqRequestDocs struct {
	DocsToken string `json:"docs_token,omitempty"` // 文件的 token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	DocsType  string `json:"docs_type,omitempty"`  // 文件类型  <br>1) "doc": 飞书文档<br>2) "sheet": 飞书电子表格 <br>3) "bitable": 飞书多维表格<br>4) "mindnote": 飞书思维笔记 <br>5) "file": 飞书文件
}

// getDriveFileMetaResp ...
type getDriveFileMetaResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *GetDriveFileMetaResp `json:"data,omitempty"`
}

// GetDriveFileMetaResp ...
type GetDriveFileMetaResp struct {
	DocsMetas []*GetDriveFileMetaRespDocsMetas `json:"docs_metas,omitempty"` // 文件元数据
}

// GetDriveFileMetaRespDocsMetas ...
type GetDriveFileMetaRespDocsMetas struct {
	DocsToken        string `json:"docs_token,omitempty"`         // 文件token
	DocsType         string `json:"docs_type,omitempty"`          // 文件类型
	Title            string `json:"title,omitempty"`              // 标题
	OwnerID          string `json:"owner_id,omitempty"`           // 文件拥有者
	CreateTime       int64  `json:"create_time,omitempty"`        // 创建时间（Unix时间戳）
	LatestModifyUser string `json:"latest_modify_user,omitempty"` // 最后编辑者
	LatestModifyTime int64  `json:"latest_modify_time,omitempty"` // 最后编辑时间（Unix时间戳）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchDriveFile 该接口用于根据搜索条件进行文档搜索。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDM4UjL4ADO14COwgTN
func (r *DriveService) SearchDriveFile(ctx context.Context, request *SearchDriveFileReq, options ...MethodOptionFunc) (*SearchDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveSearchDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SearchDriveFile mock enable")
		return r.cli.mock.mockDriveSearchDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "SearchDriveFile",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/suite/docs-api/search/object",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSearchDriveFile mock DriveSearchDriveFile method
func (r *Mock) MockDriveSearchDriveFile(f func(ctx context.Context, request *SearchDriveFileReq, options ...MethodOptionFunc) (*SearchDriveFileResp, *Response, error)) {
	r.mockDriveSearchDriveFile = f
}

// UnMockDriveSearchDriveFile un-mock DriveSearchDriveFile method
func (r *Mock) UnMockDriveSearchDriveFile() {
	r.mockDriveSearchDriveFile = nil
}

// SearchDriveFileReq ...
type SearchDriveFileReq struct {
	SearchKey string   `json:"search_key,omitempty"` // 搜索关键字
	Count     *int64   `json:"count,omitempty"`      // 搜索返回数量，0 <= count <= 50
	Offset    *int64   `json:"offset,omitempty"`     // 搜索偏移位，offset >= 0，offset + count < 200
	OwnerIDs  []string `json:"owner_ids,omitempty"`  // 文档所有者的userid
	ChatIDs   []string `json:"chat_ids,omitempty"`   // 文档所在群的chatid
	DocsTypes []string `json:"docs_types,omitempty"` // 文档类型，支持："doc", "sheet", "slide", "bitable", "mindnote", "file"
}

// searchDriveFileResp ...
type searchDriveFileResp struct {
	Code int64                `json:"code,omitempty"`
	Msg  string               `json:"msg,omitempty"`
	Data *SearchDriveFileResp `json:"data,omitempty"`
}

// SearchDriveFileResp ...
type SearchDriveFileResp struct {
	DocsEntities []*SearchDriveFileRespDocsEntity `json:"docs_entities,omitempty"` // 搜索匹配文档列表
	HasMore      bool                             `json:"has_more,omitempty"`      // 搜索偏移位结果列表后是否还有数据
	Total        int64                            `json:"total,omitempty"`         // 搜索匹配文档总数量
}

// SearchDriveFileRespDocsEntity ...
type SearchDriveFileRespDocsEntity struct {
	DocsToken string `json:"docs_token,omitempty"` // 文档token
	DocsType  string `json:"docs_type,omitempty"`  // 文档类型
	Title     string `json:"title,omitempty"`      // 标题
	OwnerID   string `json:"owner_id,omitempty"`   // 文件所有者
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveSheetFile 该接口用于根据 spreadsheetToken 删除对应的 sheet 文档。
//
// 文档只能被文档所有者删除，文档被删除后将会放到回收站里
// 该接口不支持并发调用，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTNzUjL1UzM14SN1MTN/delete-sheet
func (r *DriveService) DeleteDriveSheetFile(ctx context.Context, request *DeleteDriveSheetFileReq, options ...MethodOptionFunc) (*DeleteDriveSheetFileResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveSheetFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveSheetFile mock enable")
		return r.cli.mock.mockDriveDeleteDriveSheetFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveSheetFile",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/file/spreadsheets/:spreadsheetToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveSheetFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveSheetFile mock DriveDeleteDriveSheetFile method
func (r *Mock) MockDriveDeleteDriveSheetFile(f func(ctx context.Context, request *DeleteDriveSheetFileReq, options ...MethodOptionFunc) (*DeleteDriveSheetFileResp, *Response, error)) {
	r.mockDriveDeleteDriveSheetFile = f
}

// UnMockDriveDeleteDriveSheetFile un-mock DriveDeleteDriveSheetFile method
func (r *Mock) UnMockDriveDeleteDriveSheetFile() {
	r.mockDriveDeleteDriveSheetFile = nil
}

// DeleteDriveSheetFileReq ...
type DeleteDriveSheetFileReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

// deleteDriveSheetFileResp ...
type deleteDriveSheetFileResp struct {
	Code int64                     `json:"code,omitempty"`
	Msg  string                    `json:"msg,omitempty"`
	Data *DeleteDriveSheetFileResp `json:"data,omitempty"`
}

// DeleteDriveSheetFileResp ...
type DeleteDriveSheetFileResp struct {
	ID     string `json:"id,omitempty"`     // sheet 的 id 「字符串类型」
	Result bool   `json:"result,omitempty"` // 删除结果
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFileStatistics 此接口用于获取文件统计信息，包括文档阅读人数、次数和点赞数。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-statistics/get
func (r *DriveService) GetDriveFileStatistics(ctx context.Context, request *GetDriveFileStatisticsReq, options ...MethodOptionFunc) (*GetDriveFileStatisticsResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileStatistics != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileStatistics mock enable")
		return r.cli.mock.mockDriveGetDriveFileStatistics(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFileStatistics",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/statistics",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFileStatisticsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileStatistics mock DriveGetDriveFileStatistics method
func (r *Mock) MockDriveGetDriveFileStatistics(f func(ctx context.Context, request *GetDriveFileStatisticsReq, options ...MethodOptionFunc) (*GetDriveFileStatisticsResp, *Response, error)) {
	r.mockDriveGetDriveFileStatistics = f
}

// UnMockDriveGetDriveFileStatistics un-mock DriveGetDriveFileStatistics method
func (r *Mock) UnMockDriveGetDriveFileStatistics() {
	r.mockDriveGetDriveFileStatistics = nil
}

// GetDriveFileStatisticsReq ...
type GetDriveFileStatisticsReq struct {
	FileType  FileType `query:"file_type" json:"-"` // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `mindnote`：思维笔记, `bitable`：多维表格, `wiki`：知识库, `file`：文件
	FileToken string   `path:"file_token" json:"-"` // 文件 token, 示例值："doccnRs*******"
}

// getDriveFileStatisticsResp ...
type getDriveFileStatisticsResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveFileStatisticsResp `json:"data,omitempty"`
}

// GetDriveFileStatisticsResp ...
type GetDriveFileStatisticsResp struct {
	FileToken  string                                `json:"file_token,omitempty"` // 文件 token
	FileType   FileType                              `json:"file_type,omitempty"`  // 文件类型
	Statistics *GetDriveFileStatisticsRespStatistics `json:"statistics,omitempty"` // 文件统计信息
}

// GetDriveFileStatisticsRespStatistics ...
type GetDriveFileStatisticsRespStatistics struct {
	Uv        int64 `json:"uv,omitempty"`         // 文件历史访问人数，同一用户（user_id）多次访问按一次计算。
	Pv        int64 `json:"pv,omitempty"`         // 文件历史访问次数，同一用户（user_id）多次访问按多次计算。（注：同一用户相邻两次访问间隔在半小时内视为一次访问）
	LikeCount int64 `json:"like_count,omitempty"` // 文件历史点赞总数，若对应的文档类型不支持点赞，返回 -1
	Timestamp int64 `json:"timestamp,omitempty"`  // 时间戳（秒）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveFileSubscription 订阅文档中的变更事件，当前支持文档评论订阅
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/create
func (r *DriveService) CreateDriveFileSubscription(ctx context.Context, request *CreateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*CreateDriveFileSubscriptionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFileSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFileSubscription mock enable")
		return r.cli.mock.mockDriveCreateDriveFileSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveFileSubscription",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/subscriptions",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveFileSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveFileSubscription mock DriveCreateDriveFileSubscription method
func (r *Mock) MockDriveCreateDriveFileSubscription(f func(ctx context.Context, request *CreateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*CreateDriveFileSubscriptionResp, *Response, error)) {
	r.mockDriveCreateDriveFileSubscription = f
}

// UnMockDriveCreateDriveFileSubscription un-mock DriveCreateDriveFileSubscription method
func (r *Mock) UnMockDriveCreateDriveFileSubscription() {
	r.mockDriveCreateDriveFileSubscription = nil
}

// CreateDriveFileSubscriptionReq ...
type CreateDriveFileSubscriptionReq struct {
	FileToken        string   `path:"file_token" json:"-"`         // 文档token, 示例值："doxcnxxxxxxxxxxxxxxxxxxxxxx"
	SubscriptionID   *string  `json:"subscription_id,omitempty"`   // 订阅关系ID, 示例值："1234567890987654321"
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 示例值："comment_update", 可选值有: `comment_update`：评论更新
	IsSubcribe       *bool    `json:"is_subcribe,omitempty"`       // 是否订阅, 示例值：true
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `docx`：文档2.0, `wiki`：知识库wiki
}

// createDriveFileSubscriptionResp ...
type createDriveFileSubscriptionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveFileSubscriptionResp `json:"data,omitempty"`
}

// CreateDriveFileSubscriptionResp ...
type CreateDriveFileSubscriptionResp struct {
	Subscription *CreateDriveFileSubscriptionRespSubscription `json:"subscription,omitempty"` // 本次增加的文档订阅信息
}

// CreateDriveFileSubscriptionRespSubscription ...
type CreateDriveFileSubscriptionRespSubscription struct {
	SubscriptionID   string   `json:"subscription_id,omitempty"`   // 订阅关系ID
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 可选值有: `comment_update`：评论更新
	IsSubcribe       bool     `json:"is_subcribe,omitempty"`       // 是否订阅
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 可选值有: `doc`：文档, `docx`：文档2.0, `wiki`：知识库wiki
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFileSubscription 根据订阅ID获取该订阅的状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/get
func (r *DriveService) GetDriveFileSubscription(ctx context.Context, request *GetDriveFileSubscriptionReq, options ...MethodOptionFunc) (*GetDriveFileSubscriptionResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFileSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFileSubscription mock enable")
		return r.cli.mock.mockDriveGetDriveFileSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFileSubscription",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFileSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFileSubscription mock DriveGetDriveFileSubscription method
func (r *Mock) MockDriveGetDriveFileSubscription(f func(ctx context.Context, request *GetDriveFileSubscriptionReq, options ...MethodOptionFunc) (*GetDriveFileSubscriptionResp, *Response, error)) {
	r.mockDriveGetDriveFileSubscription = f
}

// UnMockDriveGetDriveFileSubscription un-mock DriveGetDriveFileSubscription method
func (r *Mock) UnMockDriveGetDriveFileSubscription() {
	r.mockDriveGetDriveFileSubscription = nil
}

// GetDriveFileSubscriptionReq ...
type GetDriveFileSubscriptionReq struct {
	FileToken        string   `path:"file_token" json:"-"`         // 文档token, 示例值："doxcnxxxxxxxxxxxxxxxxxxxxxx"
	SubscriptionID   string   `path:"subscription_id" json:"-"`    // 订阅关系ID, 示例值："1234567890987654321"
	SubscriptionType *string  `json:"subscription_type,omitempty"` // 订阅类型, 示例值："comment_update", 可选值有: `comment_update`：评论更新
	IsSubcribe       *bool    `json:"is_subcribe,omitempty"`       // 是否订阅, 示例值：true
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `docx`：文档2.0, `wiki`：知识库wiki
}

// getDriveFileSubscriptionResp ...
type getDriveFileSubscriptionResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveFileSubscriptionResp `json:"data,omitempty"`
}

// GetDriveFileSubscriptionResp ...
type GetDriveFileSubscriptionResp struct {
	Subscription *GetDriveFileSubscriptionRespSubscription `json:"subscription,omitempty"` // 文档订阅信息
}

// GetDriveFileSubscriptionRespSubscription ...
type GetDriveFileSubscriptionRespSubscription struct {
	SubscriptionID   string   `json:"subscription_id,omitempty"`   // 订阅关系ID
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 可选值有: `comment_update`：评论更新
	IsSubcribe       bool     `json:"is_subcribe,omitempty"`       // 是否订阅
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 可选值有: `doc`：文档, `docx`：文档2.0, `wiki`：知识库wiki
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveFileSubscription 根据订阅ID更新订阅状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-subscription/patch
func (r *DriveService) UpdateDriveFileSubscription(ctx context.Context, request *UpdateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*UpdateDriveFileSubscriptionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveFileSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveFileSubscription mock enable")
		return r.cli.mock.mockDriveUpdateDriveFileSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveFileSubscription",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/subscriptions/:subscription_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveFileSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveFileSubscription mock DriveUpdateDriveFileSubscription method
func (r *Mock) MockDriveUpdateDriveFileSubscription(f func(ctx context.Context, request *UpdateDriveFileSubscriptionReq, options ...MethodOptionFunc) (*UpdateDriveFileSubscriptionResp, *Response, error)) {
	r.mockDriveUpdateDriveFileSubscription = f
}

// UnMockDriveUpdateDriveFileSubscription un-mock DriveUpdateDriveFileSubscription method
func (r *Mock) UnMockDriveUpdateDriveFileSubscription() {
	r.mockDriveUpdateDriveFileSubscription = nil
}

// UpdateDriveFileSubscriptionReq ...
type UpdateDriveFileSubscriptionReq struct {
	FileToken      string   `path:"file_token" json:"-"`      // 文档token, 示例值："doxcnxxxxxxxxxxxxxxxxxxxxxx"
	SubscriptionID string   `path:"subscription_id" json:"-"` // 订阅关系ID, 示例值："1234567890987654321"
	IsSubscribe    bool     `json:"is_subscribe,omitempty"`   // 是否订阅, 示例值：true
	FileType       FileType `json:"file_type,omitempty"`      // 文档类型, 示例值："doc", 可选值有: `doc`：文档1.0, `docx`：文档2.0, `wiki`：知识库wiki
}

// updateDriveFileSubscriptionResp ...
type updateDriveFileSubscriptionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveFileSubscriptionResp `json:"data,omitempty"`
}

// UpdateDriveFileSubscriptionResp ...
type UpdateDriveFileSubscriptionResp struct {
	Subscription *UpdateDriveFileSubscriptionRespSubscription `json:"subscription,omitempty"` // 本次修改的文档订阅信息
}

// UpdateDriveFileSubscriptionRespSubscription ...
type UpdateDriveFileSubscriptionRespSubscription struct {
	SubscriptionID   string   `json:"subscription_id,omitempty"`   // 订阅关系ID
	SubscriptionType string   `json:"subscription_type,omitempty"` // 订阅类型, 可选值有: `comment_update`：评论更新
	IsSubcribe       bool     `json:"is_subcribe,omitempty"`       // 是否订阅
	FileType         FileType `json:"file_type,omitempty"`         // 文档类型, 可选值有: `doc`：文档, `docx`：文档2.0, `wiki`：知识库wiki
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadDriveFile 向云空间指定目录下上传一个文件
//
// 使用此方式上传可以快速传输小于等于20MB的文件
// 该接口支持调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_all
func (r *DriveService) UploadDriveFile(ctx context.Context, request *UploadDriveFileReq, options ...MethodOptionFunc) (*UploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UploadDriveFile mock enable")
		return r.cli.mock.mockDriveUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_all",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(uploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUploadDriveFile mock DriveUploadDriveFile method
func (r *Mock) MockDriveUploadDriveFile(f func(ctx context.Context, request *UploadDriveFileReq, options ...MethodOptionFunc) (*UploadDriveFileResp, *Response, error)) {
	r.mockDriveUploadDriveFile = f
}

// UnMockDriveUploadDriveFile un-mock DriveUploadDriveFile method
func (r *Mock) UnMockDriveUploadDriveFile() {
	r.mockDriveUploadDriveFile = nil
}

// UploadDriveFileReq ...
type UploadDriveFileReq struct {
	FileName   string    `json:"file_name,omitempty"`   // 文件名, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string    `json:"parent_type,omitempty"` // 上传点类型, 示例值："explorer", 可选值有: `explorer`：云空间
	ParentNode string    `json:"parent_node,omitempty"` // 文件夹token，,获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："fldcn77hdDT5"
	Size       int64     `json:"size,omitempty"`        // 文件大小,全量上传最大20M, 示例值：1024, 最大值：`20971520`
	Checksum   *string   `json:"checksum,omitempty"`    // 文件adler32校验和(可选), 示例值："123423882374238957235"
	File       io.Reader `json:"file,omitempty"`        // 文件数据, 示例值：file binary
}

// uploadDriveFileResp ...
type uploadDriveFileResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UploadDriveFileResp `json:"data,omitempty"`
}

// UploadDriveFileResp ...
type UploadDriveFileResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建文件的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// FinishUploadDriveFile 触发完成上传。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_finish
func (r *DriveService) FinishUploadDriveFile(ctx context.Context, request *FinishUploadDriveFileReq, options ...MethodOptionFunc) (*FinishUploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDriveFinishUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#FinishUploadDriveFile mock enable")
		return r.cli.mock.mockDriveFinishUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "FinishUploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_finish",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(finishUploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveFinishUploadDriveFile mock DriveFinishUploadDriveFile method
func (r *Mock) MockDriveFinishUploadDriveFile(f func(ctx context.Context, request *FinishUploadDriveFileReq, options ...MethodOptionFunc) (*FinishUploadDriveFileResp, *Response, error)) {
	r.mockDriveFinishUploadDriveFile = f
}

// UnMockDriveFinishUploadDriveFile un-mock DriveFinishUploadDriveFile method
func (r *Mock) UnMockDriveFinishUploadDriveFile() {
	r.mockDriveFinishUploadDriveFile = nil
}

// FinishUploadDriveFileReq ...
type FinishUploadDriveFileReq struct {
	UploadID string `json:"upload_id,omitempty"` // 分片上传事务ID, 示例值："123456"
	BlockNum int64  `json:"block_num,omitempty"` // 分片数量, 示例值：1
}

// finishUploadDriveFileResp ...
type finishUploadDriveFileResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *FinishUploadDriveFileResp `json:"data,omitempty"`
}

// FinishUploadDriveFileResp ...
type FinishUploadDriveFileResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建的文件token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PartUploadDriveFile 上传对应的文件块。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_part
func (r *DriveService) PartUploadDriveFile(ctx context.Context, request *PartUploadDriveFileReq, options ...MethodOptionFunc) (*PartUploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDrivePartUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PartUploadDriveFile mock enable")
		return r.cli.mock.mockDrivePartUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PartUploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_part",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(partUploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePartUploadDriveFile mock DrivePartUploadDriveFile method
func (r *Mock) MockDrivePartUploadDriveFile(f func(ctx context.Context, request *PartUploadDriveFileReq, options ...MethodOptionFunc) (*PartUploadDriveFileResp, *Response, error)) {
	r.mockDrivePartUploadDriveFile = f
}

// UnMockDrivePartUploadDriveFile un-mock DrivePartUploadDriveFile method
func (r *Mock) UnMockDrivePartUploadDriveFile() {
	r.mockDrivePartUploadDriveFile = nil
}

// PartUploadDriveFileReq ...
type PartUploadDriveFileReq struct {
	UploadID string    `json:"upload_id,omitempty"` // 分片上传事务ID, 示例值："123456"
	Seq      int64     `json:"seq,omitempty"`       // 块号，从0开始计数, 示例值：0
	Size     int64     `json:"size,omitempty"`      // 块大小, 示例值：4194304
	Checksum *string   `json:"checksum,omitempty"`  // 文件分块adler32校验和(可选), 示例值："12342388237783294798"
	File     io.Reader `json:"file,omitempty"`      // 文件分片内容, 示例值：file binary
}

// partUploadDriveFileResp ...
type partUploadDriveFileResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *PartUploadDriveFileResp `json:"data,omitempty"`
}

// PartUploadDriveFileResp ...
type PartUploadDriveFileResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PrepareUploadDriveFile 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
//
// 你在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file/upload_prepare
func (r *DriveService) PrepareUploadDriveFile(ctx context.Context, request *PrepareUploadDriveFileReq, options ...MethodOptionFunc) (*PrepareUploadDriveFileResp, *Response, error) {
	if r.cli.mock.mockDrivePrepareUploadDriveFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PrepareUploadDriveFile mock enable")
		return r.cli.mock.mockDrivePrepareUploadDriveFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PrepareUploadDriveFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/upload_prepare",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(prepareUploadDriveFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePrepareUploadDriveFile mock DrivePrepareUploadDriveFile method
func (r *Mock) MockDrivePrepareUploadDriveFile(f func(ctx context.Context, request *PrepareUploadDriveFileReq, options ...MethodOptionFunc) (*PrepareUploadDriveFileResp, *Response, error)) {
	r.mockDrivePrepareUploadDriveFile = f
}

// UnMockDrivePrepareUploadDriveFile un-mock DrivePrepareUploadDriveFile method
func (r *Mock) UnMockDrivePrepareUploadDriveFile() {
	r.mockDrivePrepareUploadDriveFile = nil
}

// PrepareUploadDriveFileReq ...
type PrepareUploadDriveFileReq struct {
	FileName   string `json:"file_name,omitempty"`   // 文件名, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string `json:"parent_type,omitempty"` // 上传点类型, 示例值："explorer", 可选值有: `explorer`：云空间
	ParentNode string `json:"parent_node,omitempty"` // 文件夹的token, 示例值："fldcnaBcdEfghdis"
	Size       int64  `json:"size,omitempty"`        // 文件大小, 示例值：1024, 最小值：`0`
}

// prepareUploadDriveFileResp ...
type prepareUploadDriveFileResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *PrepareUploadDriveFileResp `json:"data,omitempty"`
}

// PrepareUploadDriveFileResp ...
type PrepareUploadDriveFileResp struct {
	UploadID  string `json:"upload_id,omitempty"`  // 分片上传事务ID
	BlockSize int64  `json:"block_size,omitempty"` // 分片大小策略
	BlockNum  int64  `json:"block_num,omitempty"`  // 分片数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFolderChildren
//
// 该接口用于根据 folderToken 获取该文件夹的文档清单，如 doc、sheet、file、bitable、folder。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEjNzUjLxYzM14SM2MTN
func (r *DriveService) GetDriveFolderChildren(ctx context.Context, request *GetDriveFolderChildrenReq, options ...MethodOptionFunc) (*GetDriveFolderChildrenResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFolderChildren != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFolderChildren mock enable")
		return r.cli.mock.mockDriveGetDriveFolderChildren(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFolderChildren",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/folder/:folderToken/children",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFolderChildrenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFolderChildren mock DriveGetDriveFolderChildren method
func (r *Mock) MockDriveGetDriveFolderChildren(f func(ctx context.Context, request *GetDriveFolderChildrenReq, options ...MethodOptionFunc) (*GetDriveFolderChildrenResp, *Response, error)) {
	r.mockDriveGetDriveFolderChildren = f
}

// UnMockDriveGetDriveFolderChildren un-mock DriveGetDriveFolderChildren method
func (r *Mock) UnMockDriveGetDriveFolderChildren() {
	r.mockDriveGetDriveFolderChildren = nil
}

// GetDriveFolderChildrenReq ...
type GetDriveFolderChildrenReq struct {
	Types       []string `query:"types" json:"-"`      // 需要查询的文件类型，默认返回所有 children；types 可多选，可选类型有 doc、sheet、file、bitable、folder 。如 url?types=folder&types=sheet
	FolderToken string   `path:"folderToken" json:"-"` // 文件夹的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

// getDriveFolderChildrenResp ...
type getDriveFolderChildrenResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *GetDriveFolderChildrenResp `json:"data,omitempty"`
}

// GetDriveFolderChildrenResp ...
type GetDriveFolderChildrenResp struct {
	ParentToken string                                         `json:"parentToken,omitempty"` // 文件夹的 token
	Children    map[string]*GetDriveFolderChildrenRespChildren `json:"children,omitempty"`    // 文件夹的下的文件
}

// GetDriveFolderChildrenRespChildren ...
type GetDriveFolderChildrenRespChildren struct {
	Token string `json:"token,omitempty"` // 文件的 token
	Name  string `json:"name,omitempty"`  // 文件的标题
	Type  string `json:"type,omitempty"`  // 文件的类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveFolder
//
// 该接口用于根据 folderToken 在该 folder 下创建文件夹。
// 该接口不支持并发创建，且调用频率上限为 5QPS 以及 10000次/天
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTNzUjL5UzM14SO1MTN
func (r *DriveService) CreateDriveFolder(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveFolder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveFolder mock enable")
		return r.cli.mock.mockDriveCreateDriveFolder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveFolder",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/folder/:folderToken",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveFolderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveFolder mock DriveCreateDriveFolder method
func (r *Mock) MockDriveCreateDriveFolder(f func(ctx context.Context, request *CreateDriveFolderReq, options ...MethodOptionFunc) (*CreateDriveFolderResp, *Response, error)) {
	r.mockDriveCreateDriveFolder = f
}

// UnMockDriveCreateDriveFolder un-mock DriveCreateDriveFolder method
func (r *Mock) UnMockDriveCreateDriveFolder() {
	r.mockDriveCreateDriveFolder = nil
}

// CreateDriveFolderReq ...
type CreateDriveFolderReq struct {
	FolderToken string `path:"folderToken" json:"-"` // 文件夹的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Title       string `json:"title,omitempty"`      // 文件夹标题
}

// createDriveFolderResp ...
type createDriveFolderResp struct {
	Code int64                  `json:"code,omitempty"`
	Msg  string                 `json:"msg,omitempty"`
	Data *CreateDriveFolderResp `json:"data,omitempty"`
}

// CreateDriveFolderResp ...
type CreateDriveFolderResp struct {
	URL      string `json:"url,omitempty"`      // 新创建文件夹的 url
	Revision int64  `json:"revision,omitempty"` // 新创建文件夹的版本号
	Token    string `json:"token,omitempty"`    // 新创建文件夹的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveFolderMeta
//
// 该接口用于根据 folderToken 获取该文件夹的元信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAjNzUjLwYzM14CM2MTN
func (r *DriveService) GetDriveFolderMeta(ctx context.Context, request *GetDriveFolderMetaReq, options ...MethodOptionFunc) (*GetDriveFolderMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveFolderMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveFolderMeta mock enable")
		return r.cli.mock.mockDriveGetDriveFolderMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveFolderMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/folder/:folderToken/meta",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveFolderMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveFolderMeta mock DriveGetDriveFolderMeta method
func (r *Mock) MockDriveGetDriveFolderMeta(f func(ctx context.Context, request *GetDriveFolderMetaReq, options ...MethodOptionFunc) (*GetDriveFolderMetaResp, *Response, error)) {
	r.mockDriveGetDriveFolderMeta = f
}

// UnMockDriveGetDriveFolderMeta un-mock DriveGetDriveFolderMeta method
func (r *Mock) UnMockDriveGetDriveFolderMeta() {
	r.mockDriveGetDriveFolderMeta = nil
}

// GetDriveFolderMetaReq ...
type GetDriveFolderMetaReq struct {
	FolderToken string `path:"folderToken" json:"-"` // 文件夹 token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
}

// getDriveFolderMetaResp ...
type getDriveFolderMetaResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *GetDriveFolderMetaResp `json:"data,omitempty"`
}

// GetDriveFolderMetaResp ...
type GetDriveFolderMetaResp struct {
	ID        string `json:"id,omitempty"`        // 文件夹的 id
	Name      string `json:"name,omitempty"`      // 文件夹的标题
	Token     string `json:"token,omitempty"`     // 文件夹的 token
	CreateUid string `json:"createUid,omitempty"` // 文件夹的创建者 id
	EditUid   string `json:"editUid,omitempty"`   // 文件夹的最后编辑者 id
	ParentID  string `json:"parentId,omitempty"`  // 文件夹的上级目录 id
	OwnUid    string `json:"ownUid,omitempty"`    // 文件夹为个人文件夹时，为文件夹的所有者 id；文件夹为共享文件夹时，为文件夹树id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveRootFolderMeta
//
// 该接口用于获取 "我的空间" 的元信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugTNzUjL4UzM14CO1MTN/get-root-folder-meta
func (r *DriveService) GetDriveRootFolderMeta(ctx context.Context, request *GetDriveRootFolderMetaReq, options ...MethodOptionFunc) (*GetDriveRootFolderMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveRootFolderMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveRootFolderMeta mock enable")
		return r.cli.mock.mockDriveGetDriveRootFolderMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveRootFolderMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/explorer/v2/root_folder/meta",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveRootFolderMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveRootFolderMeta mock DriveGetDriveRootFolderMeta method
func (r *Mock) MockDriveGetDriveRootFolderMeta(f func(ctx context.Context, request *GetDriveRootFolderMetaReq, options ...MethodOptionFunc) (*GetDriveRootFolderMetaResp, *Response, error)) {
	r.mockDriveGetDriveRootFolderMeta = f
}

// UnMockDriveGetDriveRootFolderMeta un-mock DriveGetDriveRootFolderMeta method
func (r *Mock) UnMockDriveGetDriveRootFolderMeta() {
	r.mockDriveGetDriveRootFolderMeta = nil
}

// GetDriveRootFolderMetaReq ...
type GetDriveRootFolderMetaReq struct{}

// getDriveRootFolderMetaResp ...
type getDriveRootFolderMetaResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *GetDriveRootFolderMetaResp `json:"data,omitempty"`
}

// GetDriveRootFolderMetaResp ...
type GetDriveRootFolderMetaResp struct {
	Token  string `json:"token,omitempty"`   // 文件夹的 token
	ID     string `json:"id,omitempty"`      // 文件夹的 id
	UserID string `json:"user_id,omitempty"` // 文件夹的所有者 id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveImportTask 创建导入任务。支持导入为 doc、sheet、bitable，参考[导入用户指南](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/create
func (r *DriveService) CreateDriveImportTask(ctx context.Context, request *CreateDriveImportTaskReq, options ...MethodOptionFunc) (*CreateDriveImportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveImportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveImportTask mock enable")
		return r.cli.mock.mockDriveCreateDriveImportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveImportTask",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/import_tasks",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveImportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveImportTask mock DriveCreateDriveImportTask method
func (r *Mock) MockDriveCreateDriveImportTask(f func(ctx context.Context, request *CreateDriveImportTaskReq, options ...MethodOptionFunc) (*CreateDriveImportTaskResp, *Response, error)) {
	r.mockDriveCreateDriveImportTask = f
}

// UnMockDriveCreateDriveImportTask un-mock DriveCreateDriveImportTask method
func (r *Mock) UnMockDriveCreateDriveImportTask() {
	r.mockDriveCreateDriveImportTask = nil
}

// CreateDriveImportTaskReq ...
type CreateDriveImportTaskReq struct {
	FileExtension string                         `json:"file_extension,omitempty"` // 导入文件格式后缀, 示例值："xlsx"
	FileToken     string                         `json:"file_token,omitempty"`     // 导入文件Drive FileToken, 示例值："boxcnxe5OxxxxxxxSNdsJviENsk"
	Type          string                         `json:"type,omitempty"`           // 导入目标云文档格式, 示例值："sheet"
	FileName      *string                        `json:"file_name,omitempty"`      // 导入目标云文档文件名 ，若为空使用Drive文件名, 示例值："test"
	Point         *CreateDriveImportTaskReqPoint `json:"point,omitempty"`          // 挂载点
}

// CreateDriveImportTaskReqPoint ...
type CreateDriveImportTaskReqPoint struct {
	MountType int64  `json:"mount_type,omitempty"` // 挂载类型, 示例值：1, 可选值有: `1`：挂载到云空间
	MountKey  string `json:"mount_key,omitempty"`  // 挂载位置,对于mount_type=1, 云空间目录token，空表示根目录, 示例值：""fldxxxxxxxx""
}

// createDriveImportTaskResp ...
type createDriveImportTaskResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveImportTaskResp `json:"data,omitempty"`
}

// CreateDriveImportTaskResp ...
type CreateDriveImportTaskResp struct {
	Ticket string `json:"ticket,omitempty"` // 导入任务ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveImportTask 根据创建导入任务返回的 ticket 查询导入结果。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/get
func (r *DriveService) GetDriveImportTask(ctx context.Context, request *GetDriveImportTaskReq, options ...MethodOptionFunc) (*GetDriveImportTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveImportTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveImportTask mock enable")
		return r.cli.mock.mockDriveGetDriveImportTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveImportTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/import_tasks/:ticket",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveImportTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveImportTask mock DriveGetDriveImportTask method
func (r *Mock) MockDriveGetDriveImportTask(f func(ctx context.Context, request *GetDriveImportTaskReq, options ...MethodOptionFunc) (*GetDriveImportTaskResp, *Response, error)) {
	r.mockDriveGetDriveImportTask = f
}

// UnMockDriveGetDriveImportTask un-mock DriveGetDriveImportTask method
func (r *Mock) UnMockDriveGetDriveImportTask() {
	r.mockDriveGetDriveImportTask = nil
}

// GetDriveImportTaskReq ...
type GetDriveImportTaskReq struct {
	Ticket string `path:"ticket" json:"-"` // 导入任务ID, 示例值："6990281865xxxxxxxx7843"
}

// getDriveImportTaskResp ...
type getDriveImportTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetDriveImportTaskResp `json:"data,omitempty"`
}

// GetDriveImportTaskResp ...
type GetDriveImportTaskResp struct {
	Result *GetDriveImportTaskRespResult `json:"result,omitempty"` // 导入结果
}

// GetDriveImportTaskRespResult ...
type GetDriveImportTaskRespResult struct {
	Ticket      string   `json:"ticket,omitempty"`        // 任务ID
	Type        string   `json:"type,omitempty"`          // 导入目标云文档格式
	JobStatus   int64    `json:"job_status,omitempty"`    // 任务状态, 可选值有: `0`：成功, `1`：初始化, `2`：处理中, `100`：导入文档已加密, `101`：内部错误, `102`：内部错误, `103`：内部错误, `104`：租户容量不足, `105`：文件夹节点太多, `106`：内部错误, `107`：导出文档过大, `108`：处理超时, `109`：内部错误, `110`：无权限, `111`：导出文档已删除, `112`：格式不支持, `113`：office格式不支持, `114`：内部错误, `115`：导入文件过大, `116`：目录无权限, `117`：目录已删除, `118`：导入文件和任务指定后缀不匹配, `119`：目录不存在, `120`：导入文件和任务指定文件类型不匹配, `121`：导入文件已过期, `122`：创建副本中禁止导出, `123`：导出文档不存在, `5000`：内部错误, `6000`：导出文档图片太多, `7000`：docx block 数量超过系统上限, `7001`：docx block 层级超过系统上线, `7002`：docx block 大小超过系统上限
	JobErrorMsg string   `json:"job_error_msg,omitempty"` // 任务失败原因
	Token       string   `json:"token,omitempty"`         // 导入云文档Token
	URL         string   `json:"url,omitempty"`           // 导入云文档URL
	Extra       []string `json:"extra,omitempty"`         // 任务成功后的提示信息
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetDriveMediaTmpDownloadURL 通过file_token获取素材临时下载链接，链接时效性是24小时，过期失效。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/batch_get_tmp_download_url
func (r *DriveService) BatchGetDriveMediaTmpDownloadURL(ctx context.Context, request *BatchGetDriveMediaTmpDownloadURLReq, options ...MethodOptionFunc) (*BatchGetDriveMediaTmpDownloadURLResp, *Response, error) {
	if r.cli.mock.mockDriveBatchGetDriveMediaTmpDownloadURL != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchGetDriveMediaTmpDownloadURL mock enable")
		return r.cli.mock.mockDriveBatchGetDriveMediaTmpDownloadURL(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchGetDriveMediaTmpDownloadURL",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/batch_get_tmp_download_url",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchGetDriveMediaTmpDownloadURLResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchGetDriveMediaTmpDownloadURL mock DriveBatchGetDriveMediaTmpDownloadURL method
func (r *Mock) MockDriveBatchGetDriveMediaTmpDownloadURL(f func(ctx context.Context, request *BatchGetDriveMediaTmpDownloadURLReq, options ...MethodOptionFunc) (*BatchGetDriveMediaTmpDownloadURLResp, *Response, error)) {
	r.mockDriveBatchGetDriveMediaTmpDownloadURL = f
}

// UnMockDriveBatchGetDriveMediaTmpDownloadURL un-mock DriveBatchGetDriveMediaTmpDownloadURL method
func (r *Mock) UnMockDriveBatchGetDriveMediaTmpDownloadURL() {
	r.mockDriveBatchGetDriveMediaTmpDownloadURL = nil
}

// BatchGetDriveMediaTmpDownloadURLReq ...
type BatchGetDriveMediaTmpDownloadURLReq struct {
	FileTokens []string `query:"file_tokens" json:"-"` // 文件标识符列表, 示例值：boxcnabcdefg
	Extra      *string  `query:"extra" json:"-"`       // 拓展信息(可选), 示例值："[请参考-上传点类型及对应Extra说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)"
}

// batchGetDriveMediaTmpDownloadURLResp ...
type batchGetDriveMediaTmpDownloadURLResp struct {
	Code int64                                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetDriveMediaTmpDownloadURLResp `json:"data,omitempty"`
}

// BatchGetDriveMediaTmpDownloadURLResp ...
type BatchGetDriveMediaTmpDownloadURLResp struct {
	TmpDownloadURLs []*BatchGetDriveMediaTmpDownloadURLRespTmpDownloadURL `json:"tmp_download_urls,omitempty"` // 临时下载列表
}

// BatchGetDriveMediaTmpDownloadURLRespTmpDownloadURL ...
type BatchGetDriveMediaTmpDownloadURLRespTmpDownloadURL struct {
	FileToken      string `json:"file_token,omitempty"`       // 文件标识符
	TmpDownloadURL string `json:"tmp_download_url,omitempty"` // 文件临时下载链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadDriveMedia 使用该接口可以下载素材。素材表示在各种创作容器里的文件，如Doc文档内的图片，文件均属于素材。支持range下载。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/download
func (r *DriveService) DownloadDriveMedia(ctx context.Context, request *DownloadDriveMediaReq, options ...MethodOptionFunc) (*DownloadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDriveDownloadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DownloadDriveMedia mock enable")
		return r.cli.mock.mockDriveDownloadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DownloadDriveMedia",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/:file_token/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(downloadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDownloadDriveMedia mock DriveDownloadDriveMedia method
func (r *Mock) MockDriveDownloadDriveMedia(f func(ctx context.Context, request *DownloadDriveMediaReq, options ...MethodOptionFunc) (*DownloadDriveMediaResp, *Response, error)) {
	r.mockDriveDownloadDriveMedia = f
}

// UnMockDriveDownloadDriveMedia un-mock DriveDownloadDriveMedia method
func (r *Mock) UnMockDriveDownloadDriveMedia() {
	r.mockDriveDownloadDriveMedia = nil
}

// DownloadDriveMediaReq ...
type DownloadDriveMediaReq struct {
	Extra     *string  `query:"extra" json:"-"`     // 扩展信息, 示例值："[请参考-上传点类型及对应Extra说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/introduction)"
	FileToken string   `path:"file_token" json:"-"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："boxcnabCdefg12345"
	Range     [2]int64 `header:"range" json:"-"`    // 指定文件下载部分，示例:bytes=0-1024
}

// downloadDriveMediaResp ...
type downloadDriveMediaResp struct {
	IsFile bool
	Code   int64
	Msg    string
	Data   *DownloadDriveMediaResp
}

func (r *downloadDriveMediaResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadDriveMediaResp{}
	}
	r.Data.File = file
}

func (r *downloadDriveMediaResp) SetFilename(filename string) {
	if r.Data == nil {
		r.Data = &DownloadDriveMediaResp{}
	}
	r.Data.Filename = filename
}

// DownloadDriveMediaResp ...
type DownloadDriveMediaResp struct {
	File     io.Reader
	Filename string // 文件名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadDriveMedia 将云文档或其他飞书套件所需要的素材（图片/文件）上传到云空间。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all
func (r *DriveService) UploadDriveMedia(ctx context.Context, request *UploadDriveMediaReq, options ...MethodOptionFunc) (*UploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDriveUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UploadDriveMedia mock enable")
		return r.cli.mock.mockDriveUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_all",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(uploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUploadDriveMedia mock DriveUploadDriveMedia method
func (r *Mock) MockDriveUploadDriveMedia(f func(ctx context.Context, request *UploadDriveMediaReq, options ...MethodOptionFunc) (*UploadDriveMediaResp, *Response, error)) {
	r.mockDriveUploadDriveMedia = f
}

// UnMockDriveUploadDriveMedia un-mock DriveUploadDriveMedia method
func (r *Mock) UnMockDriveUploadDriveMedia() {
	r.mockDriveUploadDriveMedia = nil
}

// UploadDriveMediaReq ...
type UploadDriveMediaReq struct {
	FileName   string    `json:"file_name,omitempty"`   // 文件名, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string    `json:"parent_type,omitempty"` // 上传点类型, 示例值："doc_image", 可选值有: `doc_image`：docs图片, `docx_image`：docx图片(灰度中，暂未开放), `sheet_image`：sheet图片, `doc_file`：doc文件, `docx_file`：docx文件(灰度中，暂未开放), `sheet_file`：sheet文件, `vc_virtual_background`：vc虚拟背景(灰度中，暂未开放), `bitable_image`：多维表格图片, `bitable_file`：多维表格文件, `moments`：同事圈(灰度中，暂未开放), `ccm_import_open`：云文档导入文件
	ParentNode string    `json:"parent_node,omitempty"` // 上传点的token, 示例值："doccn123456"
	Size       int64     `json:"size,omitempty"`        // 文件大小,全量上传最大20M, 示例值：1024, 最大值：`20971520`
	Checksum   *string   `json:"checksum,omitempty"`    // 文件adler32校验和(可选), 示例值："12345678"
	Extra      *string   `json:"extra,omitempty"`       // 扩展信息(可选), 示例值："{"test":"test"}"
	File       io.Reader `json:"file,omitempty"`        // 文件内容, 示例值：file binary
}

// uploadDriveMediaResp ...
type uploadDriveMediaResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *UploadDriveMediaResp `json:"data,omitempty"`
}

// UploadDriveMediaResp ...
type UploadDriveMediaResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建文件的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// FinishUploadDriveMedia 触发完成上传。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_finish
func (r *DriveService) FinishUploadDriveMedia(ctx context.Context, request *FinishUploadDriveMediaReq, options ...MethodOptionFunc) (*FinishUploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDriveFinishUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#FinishUploadDriveMedia mock enable")
		return r.cli.mock.mockDriveFinishUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "FinishUploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_finish",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(finishUploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveFinishUploadDriveMedia mock DriveFinishUploadDriveMedia method
func (r *Mock) MockDriveFinishUploadDriveMedia(f func(ctx context.Context, request *FinishUploadDriveMediaReq, options ...MethodOptionFunc) (*FinishUploadDriveMediaResp, *Response, error)) {
	r.mockDriveFinishUploadDriveMedia = f
}

// UnMockDriveFinishUploadDriveMedia un-mock DriveFinishUploadDriveMedia method
func (r *Mock) UnMockDriveFinishUploadDriveMedia() {
	r.mockDriveFinishUploadDriveMedia = nil
}

// FinishUploadDriveMediaReq ...
type FinishUploadDriveMediaReq struct {
	UploadID string `json:"upload_id,omitempty"` // 分片上传事务ID, 示例值："1233456"
	BlockNum int64  `json:"block_num,omitempty"` // 分片数量, 示例值：1
}

// finishUploadDriveMediaResp ...
type finishUploadDriveMediaResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *FinishUploadDriveMediaResp `json:"data,omitempty"`
}

// FinishUploadDriveMediaResp ...
type FinishUploadDriveMediaResp struct {
	FileToken string `json:"file_token,omitempty"` // 新创建文件的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PartUploadDriveMedia 上传对应的文件块。
//
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_part
func (r *DriveService) PartUploadDriveMedia(ctx context.Context, request *PartUploadDriveMediaReq, options ...MethodOptionFunc) (*PartUploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDrivePartUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PartUploadDriveMedia mock enable")
		return r.cli.mock.mockDrivePartUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PartUploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_part",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		IsFile:                true,
	}
	resp := new(partUploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePartUploadDriveMedia mock DrivePartUploadDriveMedia method
func (r *Mock) MockDrivePartUploadDriveMedia(f func(ctx context.Context, request *PartUploadDriveMediaReq, options ...MethodOptionFunc) (*PartUploadDriveMediaResp, *Response, error)) {
	r.mockDrivePartUploadDriveMedia = f
}

// UnMockDrivePartUploadDriveMedia un-mock DrivePartUploadDriveMedia method
func (r *Mock) UnMockDrivePartUploadDriveMedia() {
	r.mockDrivePartUploadDriveMedia = nil
}

// PartUploadDriveMediaReq ...
type PartUploadDriveMediaReq struct {
	UploadID string    `json:"upload_id,omitempty"` // 分片上传事务ID, 示例值："123456"
	Seq      int64     `json:"seq,omitempty"`       // 块号，从0开始计数, 示例值：0
	Size     int64     `json:"size,omitempty"`      // 块大小, 示例值：4194304
	Checksum *string   `json:"checksum,omitempty"`  // 文件分块adler32校验和(可选), 示例值："12345678"
	File     io.Reader `json:"file,omitempty"`      // 文件分片内容, 示例值：file binary
}

// partUploadDriveMediaResp ...
type partUploadDriveMediaResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *PartUploadDriveMediaResp `json:"data,omitempty"`
}

// PartUploadDriveMediaResp ...
type PartUploadDriveMediaResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PrepareUploadDriveMedia 发送初始化请求获取上传事务ID和分块策略，目前是以4MB大小进行定长分片。
//
// 您在24小时内可保存上传事务ID和上传进度，以便可以恢复上传
// 该接口不支持太高的并发，且调用频率上限为5QPS
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_prepare
func (r *DriveService) PrepareUploadDriveMedia(ctx context.Context, request *PrepareUploadDriveMediaReq, options ...MethodOptionFunc) (*PrepareUploadDriveMediaResp, *Response, error) {
	if r.cli.mock.mockDrivePrepareUploadDriveMedia != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PrepareUploadDriveMedia mock enable")
		return r.cli.mock.mockDrivePrepareUploadDriveMedia(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PrepareUploadDriveMedia",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/medias/upload_prepare",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(prepareUploadDriveMediaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePrepareUploadDriveMedia mock DrivePrepareUploadDriveMedia method
func (r *Mock) MockDrivePrepareUploadDriveMedia(f func(ctx context.Context, request *PrepareUploadDriveMediaReq, options ...MethodOptionFunc) (*PrepareUploadDriveMediaResp, *Response, error)) {
	r.mockDrivePrepareUploadDriveMedia = f
}

// UnMockDrivePrepareUploadDriveMedia un-mock DrivePrepareUploadDriveMedia method
func (r *Mock) UnMockDrivePrepareUploadDriveMedia() {
	r.mockDrivePrepareUploadDriveMedia = nil
}

// PrepareUploadDriveMediaReq ...
type PrepareUploadDriveMediaReq struct {
	FileName   string  `json:"file_name,omitempty"`   // 文件名, 示例值："test.txt", 最大长度：`250` 字符
	ParentType string  `json:"parent_type,omitempty"` // 上传点类型, 示例值："doc_image", 可选值有: `doc_image`：docs图片, `sheet_image`：sheet图片, `doc_file`：doc文件, `sheet_file`：sheet文件, `vc_virtual_background`：vc虚拟背景(灰度中，暂未开放), `bitable_image`：多维表格图片, `bitable_file`：多维表格文件, `moments`：同事圈(灰度中，暂未开放), `ccm_import_open`：云文档导入文件
	ParentNode string  `json:"parent_node,omitempty"` // 上传点的标识符, 示例值："doccn123456675"
	Size       int64   `json:"size,omitempty"`        // 文件大小, 示例值：1024, 最小值：`0`
	Extra      *string `json:"extra,omitempty"`       // 扩展信息(可选), 示例值："{\"test\":\"test\"}"
}

// prepareUploadDriveMediaResp ...
type prepareUploadDriveMediaResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *PrepareUploadDriveMediaResp `json:"data,omitempty"`
}

// PrepareUploadDriveMediaResp ...
type PrepareUploadDriveMediaResp struct {
	UploadID  string `json:"upload_id,omitempty"`  // 分片上传事务ID
	BlockSize int64  `json:"block_size,omitempty"` // 分片大小策略
	BlockNum  int64  `json:"block_num,omitempty"`  // 分片数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CheckDriveMemberPermission 该接口用于根据 filetoken 判断当前登录用户是否具有某权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzN3UjL2czN14iN3cTN
func (r *DriveService) CheckDriveMemberPermission(ctx context.Context, request *CheckDriveMemberPermissionReq, options ...MethodOptionFunc) (*CheckDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveCheckDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CheckDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveCheckDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CheckDriveMemberPermission",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/permitted",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(checkDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCheckDriveMemberPermission mock DriveCheckDriveMemberPermission method
func (r *Mock) MockDriveCheckDriveMemberPermission(f func(ctx context.Context, request *CheckDriveMemberPermissionReq, options ...MethodOptionFunc) (*CheckDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveCheckDriveMemberPermission = f
}

// UnMockDriveCheckDriveMemberPermission un-mock DriveCheckDriveMemberPermission method
func (r *Mock) UnMockDriveCheckDriveMemberPermission() {
	r.mockDriveCheckDriveMemberPermission = nil
}

// CheckDriveMemberPermissionReq ...
type CheckDriveMemberPermissionReq struct {
	Token string `json:"token,omitempty"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Type  string `json:"type,omitempty"`  // 文档类型  "doc"  or  "sheet" or "file"
	Perm  string `json:"perm,omitempty"`  // 权限，"view" or "edit" or "share"
}

// checkDriveMemberPermissionResp ...
type checkDriveMemberPermissionResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *CheckDriveMemberPermissionResp `json:"data,omitempty"`
}

// CheckDriveMemberPermissionResp ...
type CheckDriveMemberPermissionResp struct {
	IsPermitted bool `json:"is_permitted,omitempty"` // 是否具有指定权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveMemberPermission 该接口用于根据 filetoken 给用户增加文档的权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create
func (r *DriveService) CreateDriveMemberPermission(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveCreateDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveMemberPermission",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveMemberPermission mock DriveCreateDriveMemberPermission method
func (r *Mock) MockDriveCreateDriveMemberPermission(f func(ctx context.Context, request *CreateDriveMemberPermissionReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveCreateDriveMemberPermission = f
}

// UnMockDriveCreateDriveMemberPermission un-mock DriveCreateDriveMemberPermission method
func (r *Mock) UnMockDriveCreateDriveMemberPermission() {
	r.mockDriveCreateDriveMemberPermission = nil
}

// CreateDriveMemberPermissionReq ...
type CreateDriveMemberPermissionReq struct {
	Type             string `query:"type" json:"-"`              // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点（部分支持）, `bitable`：多维表格, `docx`：文档（暂不支持）
	NeedNotification *bool  `query:"need_notification" json:"-"` // 添加权限后是否通知对方,**注意：** 使用`tenant_access_token`访问不支持该参数, 示例值：false, 默认值: `false`
	Token            string `path:"token" json:"-"`              // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	MemberType       string `json:"member_type,omitempty"`       // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`, 示例值："openid"
	MemberID         string `json:"member_id,omitempty"`         // 用户类型下的值, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Perm             string `json:"perm,omitempty"`              // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限, 示例值："view"
}

// createDriveMemberPermissionResp ...
type createDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveMemberPermissionResp `json:"data,omitempty"`
}

// CreateDriveMemberPermissionResp ...
type CreateDriveMemberPermissionResp struct {
	Member *CreateDriveMemberPermissionRespMember `json:"member,omitempty"` // 本次添加权限的用户信息
}

// CreateDriveMemberPermissionRespMember ...
type CreateDriveMemberPermissionRespMember struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveMemberPermissionOld 该接口用于根据 filetoken 给用户增加文档的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzNzUjLzczM14yM3MTN
func (r *DriveService) CreateDriveMemberPermissionOld(ctx context.Context, request *CreateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionOldResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveMemberPermissionOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveMemberPermissionOld mock enable")
		return r.cli.mock.mockDriveCreateDriveMemberPermissionOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveMemberPermissionOld",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveMemberPermissionOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveMemberPermissionOld mock DriveCreateDriveMemberPermissionOld method
func (r *Mock) MockDriveCreateDriveMemberPermissionOld(f func(ctx context.Context, request *CreateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*CreateDriveMemberPermissionOldResp, *Response, error)) {
	r.mockDriveCreateDriveMemberPermissionOld = f
}

// UnMockDriveCreateDriveMemberPermissionOld un-mock DriveCreateDriveMemberPermissionOld method
func (r *Mock) UnMockDriveCreateDriveMemberPermissionOld() {
	r.mockDriveCreateDriveMemberPermissionOld = nil
}

// CreateDriveMemberPermissionOldReq ...
type CreateDriveMemberPermissionOldReq struct {
	Token      string                                    `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string                                    `json:"type,omitempty"`        // 文档类型  "doc" 、"sheet" 、 "bitable" or "file"
	Members    *CreateDriveMemberPermissionOldReqMembers `json:"members,omitempty"`     // 用户
	NotifyLark *bool                                     `json:"notify_lark,omitempty"` // 添加权限后是否飞书/lark通知对方<br>true 通知 or false 不通知
}

// CreateDriveMemberPermissionOldReqMembers ...
type CreateDriveMemberPermissionOldReqMembers struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **email 、openid、openchat、userid**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要增加的权限，权限值："view"，"edit"
}

// createDriveMemberPermissionOldResp ...
type createDriveMemberPermissionOldResp struct {
	Code int64                               `json:"code,omitempty"`
	Msg  string                              `json:"msg,omitempty"`
	Data *CreateDriveMemberPermissionOldResp `json:"data,omitempty"`
}

// CreateDriveMemberPermissionOldResp ...
type CreateDriveMemberPermissionOldResp struct {
	IsAllSuccess bool                                           `json:"is_all_success,omitempty"` // 是否全部成功
	FailMembers  *CreateDriveMemberPermissionOldRespFailMembers `json:"fail_members,omitempty"`   // 添加权限失败的用户信息
}

// CreateDriveMemberPermissionOldRespFailMembers ...
type CreateDriveMemberPermissionOldRespFailMembers struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要增加的权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveMemberPermission 该接口用于根据 filetoken 移除文档协作者的权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/delete
func (r *DriveService) DeleteDriveMemberPermission(ctx context.Context, request *DeleteDriveMemberPermissionReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveDeleteDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveMemberPermission",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveMemberPermission mock DriveDeleteDriveMemberPermission method
func (r *Mock) MockDriveDeleteDriveMemberPermission(f func(ctx context.Context, request *DeleteDriveMemberPermissionReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveDeleteDriveMemberPermission = f
}

// UnMockDriveDeleteDriveMemberPermission un-mock DriveDeleteDriveMemberPermission method
func (r *Mock) UnMockDriveDeleteDriveMemberPermission() {
	r.mockDriveDeleteDriveMemberPermission = nil
}

// DeleteDriveMemberPermissionReq ...
type DeleteDriveMemberPermissionReq struct {
	Type       string `query:"type" json:"-"`        // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点（部分支持）, `bitable`：多维表格, `docx`：文档（暂不支持）
	MemberType string `query:"member_type" json:"-"` // 权限成员类型，放于query参数中，如：`?member_type=openid`, 示例值："openid", 可选值有: `email`：邮箱地址, `openid`：[开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`：[开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`：[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`：[用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)
	Token      string `path:"token" json:"-"`        // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	MemberID   string `path:"member_id" json:"-"`    // 权限成员的ID，与`member_type`相对应, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// deleteDriveMemberPermissionResp ...
type deleteDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDriveMemberPermissionResp `json:"data,omitempty"`
}

// DeleteDriveMemberPermissionResp ...
type DeleteDriveMemberPermissionResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDriveMemberPermissionOld 该接口用于根据 filetoken 移除文档协作者的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTN3UjL2UzN14iN1cTN
func (r *DriveService) DeleteDriveMemberPermissionOld(ctx context.Context, request *DeleteDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionOldResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteDriveMemberPermissionOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteDriveMemberPermissionOld mock enable")
		return r.cli.mock.mockDriveDeleteDriveMemberPermissionOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteDriveMemberPermissionOld",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteDriveMemberPermissionOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteDriveMemberPermissionOld mock DriveDeleteDriveMemberPermissionOld method
func (r *Mock) MockDriveDeleteDriveMemberPermissionOld(f func(ctx context.Context, request *DeleteDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*DeleteDriveMemberPermissionOldResp, *Response, error)) {
	r.mockDriveDeleteDriveMemberPermissionOld = f
}

// UnMockDriveDeleteDriveMemberPermissionOld un-mock DriveDeleteDriveMemberPermissionOld method
func (r *Mock) UnMockDriveDeleteDriveMemberPermissionOld() {
	r.mockDriveDeleteDriveMemberPermissionOld = nil
}

// DeleteDriveMemberPermissionOldReq ...
type DeleteDriveMemberPermissionOldReq struct {
	Token      string `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string `json:"type,omitempty"`        // 文档类型 "doc"  or  "sheet" or "bitable"  or "file"
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **"openid"、"openchat"、"userid"**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
}

// deleteDriveMemberPermissionOldResp ...
type deleteDriveMemberPermissionOldResp struct {
	Code int64                               `json:"code,omitempty"`
	Msg  string                              `json:"msg,omitempty"`
	Data *DeleteDriveMemberPermissionOldResp `json:"data,omitempty"`
}

// DeleteDriveMemberPermissionOldResp ...
type DeleteDriveMemberPermissionOldResp struct {
	IsSuccess bool `json:"is_success,omitempty"` // 是否操作成功
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDriveMemberPermissionList 该接口用于根据 filetoken 查询协作者，目前包括人("user")和群("chat") 。
//
// 你能获取到协作者列表的前提是你对该文档有分享权限
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATN3UjLwUzN14CM1cTN
func (r *DriveService) GetDriveMemberPermissionList(ctx context.Context, request *GetDriveMemberPermissionListReq, options ...MethodOptionFunc) (*GetDriveMemberPermissionListResp, *Response, error) {
	if r.cli.mock.mockDriveGetDriveMemberPermissionList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDriveMemberPermissionList mock enable")
		return r.cli.mock.mockDriveGetDriveMemberPermissionList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDriveMemberPermissionList",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDriveMemberPermissionListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDriveMemberPermissionList mock DriveGetDriveMemberPermissionList method
func (r *Mock) MockDriveGetDriveMemberPermissionList(f func(ctx context.Context, request *GetDriveMemberPermissionListReq, options ...MethodOptionFunc) (*GetDriveMemberPermissionListResp, *Response, error)) {
	r.mockDriveGetDriveMemberPermissionList = f
}

// UnMockDriveGetDriveMemberPermissionList un-mock DriveGetDriveMemberPermissionList method
func (r *Mock) UnMockDriveGetDriveMemberPermissionList() {
	r.mockDriveGetDriveMemberPermissionList = nil
}

// GetDriveMemberPermissionListReq ...
type GetDriveMemberPermissionListReq struct {
	Token string `json:"token,omitempty"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Type  string `json:"type,omitempty"`  // 文档类型   "doc"  or  "sheet" or "bitable"  or "file"
}

// getDriveMemberPermissionListResp ...
type getDriveMemberPermissionListResp struct {
	Code int64                             `json:"code,omitempty"`
	Msg  string                            `json:"msg,omitempty"`
	Data *GetDriveMemberPermissionListResp `json:"data,omitempty"`
}

// GetDriveMemberPermissionListResp ...
type GetDriveMemberPermissionListResp struct {
	Members []*GetDriveMemberPermissionListRespMember `json:"members,omitempty"` // 协作者列表
}

// GetDriveMemberPermissionListRespMember ...
type GetDriveMemberPermissionListRespMember struct {
	MemberType   string `json:"member_type,omitempty"`    // 协作者类型 "user" or "chat"
	MemberOpenID string `json:"member_open_id,omitempty"` // 协作者openid
	MemberUserID string `json:"member_user_id,omitempty"` // 协作者userid(仅当member_type="user"时有效)
	Perm         string `json:"perm,omitempty"`           // 协作者权限 (注意: **有"edit"权限的协作者一定有"view"权限**)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// TransferDriveMemberPermission 该接口用于根据文档信息和用户信息转移文档的所有者。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQzNzUjL0czM14CN3MTN
func (r *DriveService) TransferDriveMemberPermission(ctx context.Context, request *TransferDriveMemberPermissionReq, options ...MethodOptionFunc) (*TransferDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveTransferDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#TransferDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveTransferDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "TransferDriveMemberPermission",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/transfer",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(transferDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveTransferDriveMemberPermission mock DriveTransferDriveMemberPermission method
func (r *Mock) MockDriveTransferDriveMemberPermission(f func(ctx context.Context, request *TransferDriveMemberPermissionReq, options ...MethodOptionFunc) (*TransferDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveTransferDriveMemberPermission = f
}

// UnMockDriveTransferDriveMemberPermission un-mock DriveTransferDriveMemberPermission method
func (r *Mock) UnMockDriveTransferDriveMemberPermission() {
	r.mockDriveTransferDriveMemberPermission = nil
}

// TransferDriveMemberPermissionReq ...
type TransferDriveMemberPermissionReq struct {
	Token          string                                 `json:"token,omitempty"`            // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Type           string                                 `json:"type,omitempty"`             // 文档类型  "doc"  or  "sheet" or "bitable"  or "file"
	Owner          *TransferDriveMemberPermissionReqOwner `json:"owner,omitempty"`            // 要转移到的新的文档所有者
	RemoveOldOwner *bool                                  `json:"remove_old_owner,omitempty"` // true 为转移后删除旧 owner 的权限，默认为false
	CancelNotify   *bool                                  `json:"cancel_notify,omitempty"`    // true为不通知新owner，默认为false
}

// TransferDriveMemberPermissionReqOwner ...
type TransferDriveMemberPermissionReqOwner struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **email、openid、userid、unionid**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值，获取方式见 [如何获得 User ID、Open ID 和 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get)
}

// transferDriveMemberPermissionResp ...
type transferDriveMemberPermissionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *TransferDriveMemberPermissionResp `json:"data,omitempty"`
}

// TransferDriveMemberPermissionResp ...
type TransferDriveMemberPermissionResp struct {
	IsSuccess bool                                    `json:"is_success,omitempty"` // 请求是否成功
	Type      string                                  `json:"type,omitempty"`       // 文档类型 "doc" or "sheet" or "file"
	Token     string                                  `json:"token,omitempty"`      // 文档的 token
	Owner     *TransferDriveMemberPermissionRespOwner `json:"owner,omitempty"`      // 文档当前所有者
}

// TransferDriveMemberPermissionRespOwner ...
type TransferDriveMemberPermissionRespOwner struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，有 **email、openid、userid、unionid**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveMemberPermission 该接口用于根据 filetoken 更新文档协作者的权限。
//
// 该接口要求文档协作者已存在，如还未对文档协作者授权请先调用[「增加权限」 ](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/create)接口进行授权。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-member/update
func (r *DriveService) UpdateDriveMemberPermission(ctx context.Context, request *UpdateDriveMemberPermissionReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveMemberPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveMemberPermission mock enable")
		return r.cli.mock.mockDriveUpdateDriveMemberPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveMemberPermission",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveMemberPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveMemberPermission mock DriveUpdateDriveMemberPermission method
func (r *Mock) MockDriveUpdateDriveMemberPermission(f func(ctx context.Context, request *UpdateDriveMemberPermissionReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionResp, *Response, error)) {
	r.mockDriveUpdateDriveMemberPermission = f
}

// UnMockDriveUpdateDriveMemberPermission un-mock DriveUpdateDriveMemberPermission method
func (r *Mock) UnMockDriveUpdateDriveMemberPermission() {
	r.mockDriveUpdateDriveMemberPermission = nil
}

// UpdateDriveMemberPermissionReq ...
type UpdateDriveMemberPermissionReq struct {
	NeedNotification *bool  `query:"need_notification" json:"-"` // 更新权限后是否通知对方,**注意：** 使用`tenant_access_token`访问不支持该参数, 示例值：false, 默认值: `false`
	Type             string `query:"type" json:"-"`              // 文件类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点（部分支持）, `bitable`：多维表格, `docx`：文档（暂不支持）
	Token            string `path:"token" json:"-"`              // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	MemberID         string `path:"member_id" json:"-"`          // 权限成员的ID，与`member_type`相对应, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	MemberType       string `json:"member_type,omitempty"`       // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`, 示例值："openid"
	Perm             string `json:"perm,omitempty"`              // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限, 示例值："view"
}

// updateDriveMemberPermissionResp ...
type updateDriveMemberPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDriveMemberPermissionResp `json:"data,omitempty"`
}

// UpdateDriveMemberPermissionResp ...
type UpdateDriveMemberPermissionResp struct {
	Member *UpdateDriveMemberPermissionRespMember `json:"member,omitempty"` // 本次更新权限的用户信息
}

// UpdateDriveMemberPermissionRespMember ...
type UpdateDriveMemberPermissionRespMember struct {
	MemberType string `json:"member_type,omitempty"` // 用户类型，与请求体中的`member_id`要对应, 可选值有:  , `email`: 飞书邮箱, `openid`: [开放平台ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get), `openchat`: [开放平台群组](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), `opendepartmentid`:[开放平台部门ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), `userid`:  [用户自定义ID](https://open.feishu.cn/document/home/user-identity-introduction/how-to-get),**注意：** 使用`tenant_access_token`访问不支持添加`opendepartmentid`
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 需要更新的权限，可选值有：, `view`: 可阅读, `edit`: 可编辑, `full_access`: 所有权限
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDriveMemberPermissionOld 该接口用于根据 filetoken 更新文档协作者的权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucTN3UjL3UzN14yN1cTN
func (r *DriveService) UpdateDriveMemberPermissionOld(ctx context.Context, request *UpdateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionOldResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDriveMemberPermissionOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDriveMemberPermissionOld mock enable")
		return r.cli.mock.mockDriveUpdateDriveMemberPermissionOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDriveMemberPermissionOld",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/member/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDriveMemberPermissionOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDriveMemberPermissionOld mock DriveUpdateDriveMemberPermissionOld method
func (r *Mock) MockDriveUpdateDriveMemberPermissionOld(f func(ctx context.Context, request *UpdateDriveMemberPermissionOldReq, options ...MethodOptionFunc) (*UpdateDriveMemberPermissionOldResp, *Response, error)) {
	r.mockDriveUpdateDriveMemberPermissionOld = f
}

// UnMockDriveUpdateDriveMemberPermissionOld un-mock DriveUpdateDriveMemberPermissionOld method
func (r *Mock) UnMockDriveUpdateDriveMemberPermissionOld() {
	r.mockDriveUpdateDriveMemberPermissionOld = nil
}

// UpdateDriveMemberPermissionOldReq ...
type UpdateDriveMemberPermissionOldReq struct {
	Token      string `json:"token,omitempty"`       // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type       string `json:"type,omitempty"`        // 文档类型  "doc"  or  "sheet" or "file"
	MemberType string `json:"member_type,omitempty"` // 用户类型，可选 **"openid"、"openchat"、"userid"**
	MemberID   string `json:"member_id,omitempty"`   // 用户类型下的值
	Perm       string `json:"perm,omitempty"`        // 权限，"view" or "edit"
	NotifyLark bool   `json:"notify_lark,omitempty"` // 修改权限后是否飞书/lark通知对方<br>true 通知 or false 不通知
}

// updateDriveMemberPermissionOldResp ...
type updateDriveMemberPermissionOldResp struct {
	Code int64                               `json:"code,omitempty"`
	Msg  string                              `json:"msg,omitempty"`
	Data *UpdateDriveMemberPermissionOldResp `json:"data,omitempty"`
}

// UpdateDriveMemberPermissionOldResp ...
type UpdateDriveMemberPermissionOldResp struct {
	IsSuccess bool `json:"is_success,omitempty"` // 是否操作成功
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDrivePublicPermissionV2 该接口用于根据 filetoken 获取文档的公共设置。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITM3YjLyEzN24iMxcjN
func (r *DriveService) GetDrivePublicPermissionV2(ctx context.Context, request *GetDrivePublicPermissionV2Req, options ...MethodOptionFunc) (*GetDrivePublicPermissionV2Resp, *Response, error) {
	if r.cli.mock.mockDriveGetDrivePublicPermissionV2 != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetDrivePublicPermissionV2 mock enable")
		return r.cli.mock.mockDriveGetDrivePublicPermissionV2(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetDrivePublicPermissionV2",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/v2/public/",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDrivePublicPermissionV2Resp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetDrivePublicPermissionV2 mock DriveGetDrivePublicPermissionV2 method
func (r *Mock) MockDriveGetDrivePublicPermissionV2(f func(ctx context.Context, request *GetDrivePublicPermissionV2Req, options ...MethodOptionFunc) (*GetDrivePublicPermissionV2Resp, *Response, error)) {
	r.mockDriveGetDrivePublicPermissionV2 = f
}

// UnMockDriveGetDrivePublicPermissionV2 un-mock DriveGetDrivePublicPermissionV2 method
func (r *Mock) UnMockDriveGetDrivePublicPermissionV2() {
	r.mockDriveGetDrivePublicPermissionV2 = nil
}

// GetDrivePublicPermissionV2Req ...
type GetDrivePublicPermissionV2Req struct {
	Token string `json:"token,omitempty"` // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	Type  string `json:"type,omitempty"`  // 文档类型 "doc", "sheet" or "isv"
}

// getDrivePublicPermissionV2Resp ...
type getDrivePublicPermissionV2Resp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *GetDrivePublicPermissionV2Resp `json:"data,omitempty"`
}

// GetDrivePublicPermissionV2Resp ...
type GetDrivePublicPermissionV2Resp struct {
	SecurityEntity    string `json:"security_entity,omitempty"`    // 可创建副本/打印/导出/复制设置：<br>"anyone_can_view" - 所有可访问此文档的用户<br>"anyone_can_edit" - 有编辑权限的用户
	CommentEntity     string `json:"comment_entity,omitempty"`     // 可评论设置：<br>"anyone_can_view" - 所有可访问此文档的用户<br>"anyone_can_edit" - 有编辑权限的用户
	ShareEntity       string `json:"share_entity,omitempty"`       // 谁可以添加和管理协作者：<br>"anyone"-所有可阅读或编辑此文档的用户<br>"same_tenant"-组织内所有可阅读或编辑此文档的用户<br>"only_me"-只有我可以
	LinkShareEntity   string `json:"link_share_entity,omitempty"`  // 链接共享：<br>"tenant_readable" - 组织内获得链接的人可阅读<br>"tenant_editable" - 组织内获得链接的人可编辑<br>"anyone_readable" - 获得链接的任何人可阅读<br>"anyone_editable" - 获得链接的任何人可编辑
	ExternalAccess    bool   `json:"external_access,omitempty"`    // 是否允许分享到租户外开关
	InviteExternal    bool   `json:"invite_external,omitempty"`    // 非owner是否允许邀请外部人
	PermissionVersion string `json:"permission_version,omitempty"` // 权限版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDrivePublicPermission 该接口用于根据 filetoken 更新文档的公共设置。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/permission-public/patch
func (r *DriveService) UpdateDrivePublicPermission(ctx context.Context, request *UpdateDrivePublicPermissionReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDrivePublicPermission != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDrivePublicPermission mock enable")
		return r.cli.mock.mockDriveUpdateDrivePublicPermission(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDrivePublicPermission",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/permissions/:token/public",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDrivePublicPermissionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDrivePublicPermission mock DriveUpdateDrivePublicPermission method
func (r *Mock) MockDriveUpdateDrivePublicPermission(f func(ctx context.Context, request *UpdateDrivePublicPermissionReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionResp, *Response, error)) {
	r.mockDriveUpdateDrivePublicPermission = f
}

// UnMockDriveUpdateDrivePublicPermission un-mock DriveUpdateDrivePublicPermission method
func (r *Mock) UnMockDriveUpdateDrivePublicPermission() {
	r.mockDriveUpdateDrivePublicPermission = nil
}

// UpdateDrivePublicPermissionReq ...
type UpdateDrivePublicPermissionReq struct {
	Type            string  `query:"type" json:"-"`              // 权限客体类型，放于query参数中，如：`?type=doc`, 示例值："doc", 可选值有: `doc`：文档, `sheet`：电子表格, `file`：云空间文件, `wiki`：知识库节点（部分支持）, `bitable`：多维表格, `docx`：文档（暂不支持）
	Token           string  `path:"token" json:"-"`              // 文件的 token，获取方式见 [概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："doccnBKgoMyY5OMbUG6FioTXuBe"
	ExternalAccess  *bool   `json:"external_access,omitempty"`   // 是否允许分享到租户外开关, 示例值：true
	SecurityEntity  *string `json:"security_entity,omitempty"`   // 可创建副本/打印/导出/复制设置, 示例值："anyone_can_view", 可选值有: `anyone_can_view`：所有可访问此文档的用户, `anyone_can_edit`：有编辑权限的用户
	CommentEntity   *string `json:"comment_entity,omitempty"`    // 可评论设置, 示例值："anyone_can_view", 可选值有: `anyone_can_view`：所有可访问此文档的用户, `anyone_can_edit`：有编辑权限的用户
	ShareEntity     *string `json:"share_entity,omitempty"`      // 谁可以添加和管理协作者, 示例值："anyone", 可选值有: `anyone`：所有可阅读或编辑此文档的用户, `same_tenant`：组织内所有可阅读或编辑此文档的用户, `only_full_access`：只有所有权限者可以
	LinkShareEntity *string `json:"link_share_entity,omitempty"` // 链接共享, 示例值："tenant_readable", 可选值有: `tenant_readable`：组织内获得链接的人可阅读, `tenant_editable`：组织内获得链接的人可编辑, `anyone_readable`：获得链接的任何人可阅读（仅`external_access=true`时有效）, `anyone_editable`：获得链接的任何人可编辑（仅`external_access=true`时有效）, `closed`：关闭链接分享
	InviteExternal  *bool   `json:"invite_external,omitempty"`   // 非所有权限者/所有者是否允许邀请外部人, 示例值：true
}

// updateDrivePublicPermissionResp ...
type updateDrivePublicPermissionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDrivePublicPermissionResp `json:"data,omitempty"`
}

// UpdateDrivePublicPermissionResp ...
type UpdateDrivePublicPermissionResp struct {
	PermissionPublic *UpdateDrivePublicPermissionRespPermissionPublic `json:"permission_public,omitempty"` // 本次更新后的文档公共设置
}

// UpdateDrivePublicPermissionRespPermissionPublic ...
type UpdateDrivePublicPermissionRespPermissionPublic struct {
	ExternalAccess  bool   `json:"external_access,omitempty"`   // 是否允许分享到租户外开关
	SecurityEntity  string `json:"security_entity,omitempty"`   // 可创建副本/打印/导出/复制设置, 可选值有: `anyone_can_view`：所有可访问此文档的用户, `anyone_can_edit`：有编辑权限的用户
	CommentEntity   string `json:"comment_entity,omitempty"`    // 可评论设置, 可选值有: `anyone_can_view`：所有可访问此文档的用户, `anyone_can_edit`：有编辑权限的用户
	ShareEntity     string `json:"share_entity,omitempty"`      // 谁可以添加和管理协作者, 可选值有: `anyone`：所有可阅读或编辑此文档的用户, `same_tenant`：组织内所有可阅读或编辑此文档的用户, `only_full_access`：只有所有权限者可以
	LinkShareEntity string `json:"link_share_entity,omitempty"` // 链接共享, 可选值有: `tenant_readable`：组织内获得链接的人可阅读, `tenant_editable`：组织内获得链接的人可编辑, `anyone_readable`：获得链接的任何人可阅读（仅`external_access=true`时有效）, `anyone_editable`：获得链接的任何人可编辑（仅`external_access=true`时有效）, `closed`：关闭链接分享
	InviteExternal  bool   `json:"invite_external,omitempty"`   // 非所有权限者/所有者是否允许邀请外部人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDrivePublicPermissionV1Old 该接口用于根据 filetoken 更新文档的公共设置。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTM3UjL5EzN14SOxcTN
func (r *DriveService) UpdateDrivePublicPermissionV1Old(ctx context.Context, request *UpdateDrivePublicPermissionV1OldReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionV1OldResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDrivePublicPermissionV1Old != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDrivePublicPermissionV1Old mock enable")
		return r.cli.mock.mockDriveUpdateDrivePublicPermissionV1Old(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDrivePublicPermissionV1Old",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/public/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDrivePublicPermissionV1OldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDrivePublicPermissionV1Old mock DriveUpdateDrivePublicPermissionV1Old method
func (r *Mock) MockDriveUpdateDrivePublicPermissionV1Old(f func(ctx context.Context, request *UpdateDrivePublicPermissionV1OldReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionV1OldResp, *Response, error)) {
	r.mockDriveUpdateDrivePublicPermissionV1Old = f
}

// UnMockDriveUpdateDrivePublicPermissionV1Old un-mock DriveUpdateDrivePublicPermissionV1Old method
func (r *Mock) UnMockDriveUpdateDrivePublicPermissionV1Old() {
	r.mockDriveUpdateDrivePublicPermissionV1Old = nil
}

// UpdateDrivePublicPermissionV1OldReq ...
type UpdateDrivePublicPermissionV1OldReq struct {
	Token                 string  `json:"token,omitempty"`                    // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type                  string  `json:"type,omitempty"`                     // 文档类型  "doc"  or  "sheet"
	CopyPrintExportStatus *bool   `json:"copy_print_export_status,omitempty"` // 可创建副本/打印/导出/复制设置（不传则保持原值）：<br>true - 所有可访问此文档的用户<br>false - 有编辑权限的用户
	Comment               *bool   `json:"comment,omitempty"`                  // 可评论设置（不传则保持原值）：<br>true - 所有可访问此文档的用户<br>false - 有编辑权限的用户
	TenantShareable       *bool   `json:"tenant_shareable,omitempty"`         // 租户内用户是否有共享权限（不传则保持原值）
	LinkShareEntity       *string `json:"link_share_entity,omitempty"`        // 链接共享（不传则保持原值）：<br>"tenant_readable" - 组织内获得链接的人可阅读<br>"tenant_editable" - 组织内获得链接的人可编辑<br>"anyone_readable" - 获得链接的任何人可阅读<br>"anyone_editable" - 获得链接的任何人可编辑
	ExternalAccess        *bool   `json:"external_access,omitempty"`          // 是否允许分享到租户外开关（不传则保持原值）
	InviteExternal        *bool   `json:"invite_external,omitempty"`          // 非owner是否允许邀请外部人（不传则保持原值）
}

// updateDrivePublicPermissionV1OldResp ...
type updateDrivePublicPermissionV1OldResp struct {
	Code int64                                 `json:"code,omitempty"`
	Msg  string                                `json:"msg,omitempty"`
	Data *UpdateDrivePublicPermissionV1OldResp `json:"data,omitempty"`
}

// UpdateDrivePublicPermissionV1OldResp ...
type UpdateDrivePublicPermissionV1OldResp struct {
	IsSuccess bool `json:"is_success,omitempty"` // 是否成功
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDrivePublicPermissionV2Old 该接口用于根据 filetoken 更新文档的公共设置。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITN5UjLyUTO14iM1kTN
func (r *DriveService) UpdateDrivePublicPermissionV2Old(ctx context.Context, request *UpdateDrivePublicPermissionV2OldReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionV2OldResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateDrivePublicPermissionV2Old != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateDrivePublicPermissionV2Old mock enable")
		return r.cli.mock.mockDriveUpdateDrivePublicPermissionV2Old(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateDrivePublicPermissionV2Old",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/permission/v2/public/update/",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateDrivePublicPermissionV2OldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateDrivePublicPermissionV2Old mock DriveUpdateDrivePublicPermissionV2Old method
func (r *Mock) MockDriveUpdateDrivePublicPermissionV2Old(f func(ctx context.Context, request *UpdateDrivePublicPermissionV2OldReq, options ...MethodOptionFunc) (*UpdateDrivePublicPermissionV2OldResp, *Response, error)) {
	r.mockDriveUpdateDrivePublicPermissionV2Old = f
}

// UnMockDriveUpdateDrivePublicPermissionV2Old un-mock DriveUpdateDrivePublicPermissionV2Old method
func (r *Mock) UnMockDriveUpdateDrivePublicPermissionV2Old() {
	r.mockDriveUpdateDrivePublicPermissionV2Old = nil
}

// UpdateDrivePublicPermissionV2OldReq ...
type UpdateDrivePublicPermissionV2OldReq struct {
	Token           string  `json:"token,omitempty"`             // 文件的 token，获取方式见 [对接前说明](https://open.feishu.cn/document/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)的第 4 项
	Type            string  `json:"type,omitempty"`              // 文档类型  "doc"  or  "sheet" or "file"
	SecurityEntity  *string `json:"security_entity,omitempty"`   // 可创建副本/打印/导出/复制设置（不传则保持原值）：<br>"anyone_can_view" - 所有可访问此文档的用户<br>"anyone_can_edit" - 有编辑权限的用户
	CommentEntity   *string `json:"comment_entity,omitempty"`    // 可评论设置（不传则保持原值）：<br>"anyone_can_view" - 所有可访问此文档的用户<br>"anyone_can_edit" - 有编辑权限的用户
	ShareEntity     *string `json:"share_entity,omitempty"`      // 谁可以添加和管理协作者（不传则保持原值）：<br>"anyone"-所有可阅读或编辑此文档的用户<br>"same_tenant"-组织内所有可阅读或编辑此文档的用户<br>"off"-只有我可以
	LinkShareEntity *string `json:"link_share_entity,omitempty"` // 链接共享（不传则保持原值）：<br>"off" - 关闭链接分享<br>"tenant_readable" - 组织内获得链接的人可阅读<br>"tenant_editable" - 组织内获得链接的人可编辑<br>"anyone_readable" - 获得链接的任何人可阅读<br>"anyone_editable" - 获得链接的任何人可编辑
	ExternalAccess  *bool   `json:"external_access,omitempty"`   // 是否允许分享到租户外开关（不传则保持原值）
	InviteExternal  *bool   `json:"invite_external,omitempty"`   // 非owner是否允许邀请外部人（不传则保持原值）
}

// updateDrivePublicPermissionV2OldResp ...
type updateDrivePublicPermissionV2OldResp struct {
	Code int64                                 `json:"code,omitempty"`
	Msg  string                                `json:"msg,omitempty"`
	Data *UpdateDrivePublicPermissionV2OldResp `json:"data,omitempty"`
}

// UpdateDrivePublicPermissionV2OldResp ...
type UpdateDrivePublicPermissionV2OldResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchUpdateSheet
//
// 该接口用于根据 spreadsheetToken 操作表格，如增加工作表，复制工作表、删除工作表。
// 该接口和 [更新工作表属性](https://open.feishu.cn/document/ukTMukTMukTM/ugjMzUjL4IzM14COyMTN) 的请求地址相同，但参数不同，调用前请仔细阅读文档。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTMzUjL2EzM14iNxMTN
func (r *DriveService) BatchUpdateSheet(ctx context.Context, request *BatchUpdateSheetReq, options ...MethodOptionFunc) (*BatchUpdateSheetResp, *Response, error) {
	if r.cli.mock.mockDriveBatchUpdateSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchUpdateSheet mock enable")
		return r.cli.mock.mockDriveBatchUpdateSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchUpdateSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/sheets_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchUpdateSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchUpdateSheet mock DriveBatchUpdateSheet method
func (r *Mock) MockDriveBatchUpdateSheet(f func(ctx context.Context, request *BatchUpdateSheetReq, options ...MethodOptionFunc) (*BatchUpdateSheetResp, *Response, error)) {
	r.mockDriveBatchUpdateSheet = f
}

// UnMockDriveBatchUpdateSheet un-mock DriveBatchUpdateSheet method
func (r *Mock) UnMockDriveBatchUpdateSheet() {
	r.mockDriveBatchUpdateSheet = nil
}

// BatchUpdateSheetReq ...
type BatchUpdateSheetReq struct {
	SpreadSheetToken string                        `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Requests         []*BatchUpdateSheetReqRequest `json:"requests,omitempty"`        // 请求操作，支持增、删、复制工作表 ，三个操作选一个
}

// BatchUpdateSheetReqRequest ...
type BatchUpdateSheetReqRequest struct {
	UpdateSheet *BatchUpdateSheetReqRequestUpdateSheet `json:"updateSheet,omitempty"`
	AddSheet    *BatchUpdateSheetReqRequestAddSheet    `json:"addSheet,omitempty"`    // 增加工作表
	CopySheet   *BatchUpdateSheetReqRequestCopySheet   `json:"copySheet,omitempty"`   // 复制工作表
	DeleteSheet *BatchUpdateSheetReqRequestDeleteSheet `json:"deleteSheet,omitempty"` // 删除 sheet
}

// BatchUpdateSheetReqRequestUpdateSheet ...
type BatchUpdateSheetReqRequestUpdateSheet struct {
	Properties *BatchUpdateSheetReqRequestUpdateSheetProperties `json:"properties,omitempty"` // 工作表属性
}

// BatchUpdateSheetReqRequestUpdateSheetProperties ...
type BatchUpdateSheetReqRequestUpdateSheetProperties struct {
	SheetID        string                                                  `json:"sheetId,omitempty"`        // read-only ,作为表格唯一识别参数
	Title          *string                                                 `json:"title,omitempty"`          // 更改工作表标题
	Index          *int64                                                  `json:"index,omitempty"`          // 移动工作表的位置
	Hidden         *bool                                                   `json:"hidden,omitempty"`         // 隐藏表格，默认 false
	FrozenRowCount *int64                                                  `json:"frozenRowCount,omitempty"` // 冻结行数，小于等于工作表的最大行数，0表示取消冻结行
	FrozenColCount *int64                                                  `json:"frozenColCount,omitempty"` // 该 sheet 的冻结列数，小于等于工作表的最大列数，0表示取消冻结列
	Protect        *BatchUpdateSheetReqRequestUpdateSheetPropertiesProtect `json:"protect,omitempty"`        // 锁定表格
}

// BatchUpdateSheetReqRequestUpdateSheetPropertiesProtect ...
type BatchUpdateSheetReqRequestUpdateSheetPropertiesProtect struct {
	Lock     string   `json:"lock,omitempty"`     // LOCK 、UNLOCK 上锁/解锁
	LockInfo *string  `json:"lockInfo,omitempty"` // 锁定信息
	UserIDs  []string `json:"userIDs,omitempty"`  // 除了本人与所有者外，添加其他的可编辑人员,user_id_type不为空时使用该字段
}

// BatchUpdateSheetReqRequestAddSheet ...
type BatchUpdateSheetReqRequestAddSheet struct {
	Properties *BatchUpdateSheetReqRequestAddSheetProperties `json:"properties,omitempty"` // 工作表属性
}

// BatchUpdateSheetReqRequestAddSheetProperties ...
type BatchUpdateSheetReqRequestAddSheetProperties struct {
	Title string `json:"title,omitempty"` // 工作表标题
	Index *int64 `json:"index,omitempty"` // 新增工作表的位置，不填默认往前增加工作表
}

// BatchUpdateSheetReqRequestCopySheet ...
type BatchUpdateSheetReqRequestCopySheet struct {
	Source      *BatchUpdateSheetReqRequestCopySheetSource      `json:"source,omitempty"`      // 需要复制的工作表资源
	Destination *BatchUpdateSheetReqRequestCopySheetDestination `json:"destination,omitempty"` // 工作表 的属性
}

// BatchUpdateSheetReqRequestCopySheetSource ...
type BatchUpdateSheetReqRequestCopySheetSource struct {
	SheetID string `json:"sheetId,omitempty"` // 源 sheetId
}

// BatchUpdateSheetReqRequestCopySheetDestination ...
type BatchUpdateSheetReqRequestCopySheetDestination struct {
	Title *string `json:"title,omitempty"` // 目标工作表名称。不填为 old_title(副本_0)
}

// BatchUpdateSheetReqRequestDeleteSheet ...
type BatchUpdateSheetReqRequestDeleteSheet struct {
	SheetID string `json:"sheetId,omitempty"` // sheetId
}

// batchUpdateSheetResp ...
type batchUpdateSheetResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *BatchUpdateSheetResp `json:"data,omitempty"`
}

// BatchUpdateSheetResp ...
type BatchUpdateSheetResp struct {
	Replies []*BatchUpdateSheetRespReply `json:"replies,omitempty"` // 返回本次相关操作工作表的结果
}

// BatchUpdateSheetRespReply ...
type BatchUpdateSheetRespReply struct {
	AddSheet    *BatchUpdateSheetRespReplyAddSheet    `json:"addSheet,omitempty"`  // 增加/复制工作表的属性
	CopySheet   *BatchUpdateSheetRespReplyCopySheet   `json:"copySheet,omitempty"` // 增加/复制工作表的属性
	UpdateSheet *BatchUpdateSheetRespReplyUpdateSheet `json:"updateSheet,omitempty"`
	DeleteSheet *BatchUpdateSheetRespReplyDeleteSheet `json:"deleteSheet,omitempty"` // 删除工作表
}

// BatchUpdateSheetRespReplyAddSheet ...
type BatchUpdateSheetRespReplyAddSheet struct {
	Properties *BatchUpdateSheetRespReplyAddSheetProperties `json:"properties,omitempty"` // 表格属性
}

// BatchUpdateSheetRespReplyAddSheetProperties ...
type BatchUpdateSheetRespReplyAddSheetProperties struct {
	SheetID string `json:"sheetId,omitempty"` // sheetId
	Title   string `json:"title,omitempty"`   // 工作表标题
	Index   int64  `json:"index,omitempty"`   // 工作表位置
}

// BatchUpdateSheetRespReplyCopySheet ...
type BatchUpdateSheetRespReplyCopySheet struct {
	Properties *BatchUpdateSheetRespReplyCopySheetProperties `json:"properties,omitempty"` // 表格属性
}

// BatchUpdateSheetRespReplyCopySheetProperties ...
type BatchUpdateSheetRespReplyCopySheetProperties struct {
	SheetID string `json:"sheetId,omitempty"` // sheetId
	Title   string `json:"title,omitempty"`   // 工作表标题
	Index   int64  `json:"index,omitempty"`   // 工作表位置
}

// BatchUpdateSheetRespReplyUpdateSheet ...
type BatchUpdateSheetRespReplyUpdateSheet struct {
	Properties *BatchUpdateSheetRespReplyUpdateSheetProperties `json:"properties,omitempty"` // 工作表属性
}

// BatchUpdateSheetRespReplyUpdateSheetProperties ...
type BatchUpdateSheetRespReplyUpdateSheetProperties struct {
	SheetID        string                                                 `json:"sheetId,omitempty"`        // 表格的 sheetId
	Title          string                                                 `json:"title,omitempty"`          // 更新的工作表标题
	Index          int64                                                  `json:"index,omitempty"`          // 移动工作表的位置
	Hidden         bool                                                   `json:"hidden,omitempty"`         // 是否隐藏表格
	FrozenRowCount int64                                                  `json:"frozenRowCount,omitempty"` // 冻结行数
	FrozenColCount int64                                                  `json:"frozenColCount,omitempty"` // 冻结列数
	Protect        *BatchUpdateSheetRespReplyUpdateSheetPropertiesProtect `json:"protect,omitempty"`        // 保护工作表
}

// BatchUpdateSheetRespReplyUpdateSheetPropertiesProtect ...
type BatchUpdateSheetRespReplyUpdateSheetPropertiesProtect struct {
	Lock     string   `json:"lock,omitempty"`     // LOCK 、UNLOCK 上锁/解锁
	LockInfo string   `json:"lockInfo,omitempty"` // 锁定信息
	UserIDs  []string `json:"userIDs,omitempty"`  // 除了本人与所有者外，添加其他的可编辑人员,user_id_type不为空时使用该字段
}

// BatchUpdateSheetRespReplyDeleteSheet ...
type BatchUpdateSheetRespReplyDeleteSheet struct {
	Result  bool   `json:"result,omitempty"`  // 删除工作表是否成功
	SheetID string `json:"sheetId,omitempty"` // sheetId
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MergeSheetCell
//
// 该接口用于根据 spreadsheetToken 和维度信息合并单元格；单次操作不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukDNzUjL5QzM14SO0MTN
func (r *DriveService) MergeSheetCell(ctx context.Context, request *MergeSheetCellReq, options ...MethodOptionFunc) (*MergeSheetCellResp, *Response, error) {
	if r.cli.mock.mockDriveMergeSheetCell != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MergeSheetCell mock enable")
		return r.cli.mock.mockDriveMergeSheetCell(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MergeSheetCell",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/merge_cells",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(mergeSheetCellResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMergeSheetCell mock DriveMergeSheetCell method
func (r *Mock) MockDriveMergeSheetCell(f func(ctx context.Context, request *MergeSheetCellReq, options ...MethodOptionFunc) (*MergeSheetCellResp, *Response, error)) {
	r.mockDriveMergeSheetCell = f
}

// UnMockDriveMergeSheetCell un-mock DriveMergeSheetCell method
func (r *Mock) UnMockDriveMergeSheetCell() {
	r.mockDriveMergeSheetCell = nil
}

// MergeSheetCellReq ...
type MergeSheetCellReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range            string `json:"range,omitempty"`           // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	MergeType        string `json:"mergeType,omitempty"`       // 可选三个类型，"MERGE_ALL"  将所选区域直接合并、"MERGE_ROWS"  将所选区域按行合并、"MERGE_COLUMNS"  将所选区域按列合并响应
}

// mergeSheetCellResp ...
type mergeSheetCellResp struct {
	Code int64               `json:"code,omitempty"`
	Msg  string              `json:"msg,omitempty"`
	Data *MergeSheetCellResp `json:"data,omitempty"`
}

// MergeSheetCellResp ...
type MergeSheetCellResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnmergeSheetCell
//
// 该接口用于根据 spreadsheetToken 和维度信息拆分单元格；单次操作不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNzUjLwUzM14CM1MTN
func (r *DriveService) UnmergeSheetCell(ctx context.Context, request *UnmergeSheetCellReq, options ...MethodOptionFunc) (*UnmergeSheetCellResp, *Response, error) {
	if r.cli.mock.mockDriveUnmergeSheetCell != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UnmergeSheetCell mock enable")
		return r.cli.mock.mockDriveUnmergeSheetCell(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UnmergeSheetCell",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/unmerge_cells",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(unmergeSheetCellResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUnmergeSheetCell mock DriveUnmergeSheetCell method
func (r *Mock) MockDriveUnmergeSheetCell(f func(ctx context.Context, request *UnmergeSheetCellReq, options ...MethodOptionFunc) (*UnmergeSheetCellResp, *Response, error)) {
	r.mockDriveUnmergeSheetCell = f
}

// UnMockDriveUnmergeSheetCell un-mock DriveUnmergeSheetCell method
func (r *Mock) UnMockDriveUnmergeSheetCell() {
	r.mockDriveUnmergeSheetCell = nil
}

// UnmergeSheetCellReq ...
type UnmergeSheetCellReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range            string `json:"range,omitempty"`           // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// unmergeSheetCellResp ...
type unmergeSheetCellResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *UnmergeSheetCellResp `json:"data,omitempty"`
}

// UnmergeSheetCellResp ...
type UnmergeSheetCellResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetConditionFormat
//
// 该接口用于创建新的条件格式，单次最多支持增加10个条件格式，每个条件格式的设置会返回成功或者失败，失败的情况包括各种参数的校验。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-set
func (r *DriveService) CreateSheetConditionFormat(ctx context.Context, request *CreateSheetConditionFormatReq, options ...MethodOptionFunc) (*CreateSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveCreateSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetConditionFormat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetConditionFormat mock DriveCreateSheetConditionFormat method
func (r *Mock) MockDriveCreateSheetConditionFormat(f func(ctx context.Context, request *CreateSheetConditionFormatReq, options ...MethodOptionFunc) (*CreateSheetConditionFormatResp, *Response, error)) {
	r.mockDriveCreateSheetConditionFormat = f
}

// UnMockDriveCreateSheetConditionFormat un-mock DriveCreateSheetConditionFormat method
func (r *Mock) UnMockDriveCreateSheetConditionFormat() {
	r.mockDriveCreateSheetConditionFormat = nil
}

// CreateSheetConditionFormatReq ...
type CreateSheetConditionFormatReq struct {
	SpreadSheetToken      string                                               `path:"spreadsheetToken" json:"-"`         // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetConditionFormats []*CreateSheetConditionFormatReqSheetConditionFormat `json:"sheet_condition_formats,omitempty"` // 表格的条件格式信息
}

// CreateSheetConditionFormatReqSheetConditionFormat ...
type CreateSheetConditionFormatReqSheetConditionFormat struct {
	SheetID         string                                                            `json:"sheet_id,omitempty"`         // sheet的id
	ConditionFormat *CreateSheetConditionFormatReqSheetConditionFormatConditionFormat `json:"condition_format,omitempty"` // 一个条件格式的详细信息
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormat ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormat struct {
	Ranges   []string                                                                `json:"ranges,omitempty"`    // 条件格式应用的范围，支持：sheetId（整表）；sheetId!1:2（整行）；sheetId!A:B（整列）；sheetId!A1:B2（普通范围）；sheetId!A1:C（应用至最后一行）。应用范围不能超过表格的行总数和列总数，sheetId要与参数的sheetId一致
	RuleType string                                                                  `json:"rule_type,omitempty"` // 条件格式规则类型，目前只有7种：***containsBlanks（为空）、notContainsBlanks（不为空）、duplicateValues（重复值）、uniqueValues（唯一值）、cellIs（限定值范围）、containsText（包含内容）、timePeriod（日期）***
	Attrs    []*CreateSheetConditionFormatReqSheetConditionFormatConditionFormatAttr `json:"attrs,omitempty"`     // rule_type对应的具体属性信息，详见 [条件格式指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-guide)
	Style    *CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyle  `json:"style,omitempty"`     // 条件格式样式，只支持以下样式，以下样式每个参数都可选，但是不能设置空的style
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormatAttr ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormatAttr struct {
	Operator   *string  `json:"operator,omitempty"`    // 操作方法
	TimePeriod *string  `json:"time_period,omitempty"` // 时间范围
	Formula    []string `json:"formula,omitempty"`     // 格式
	Text       *string  `json:"text,omitempty"`        // 文本
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyle ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyle struct {
	Font           *CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyleFont `json:"font,omitempty"`            // 字体样式
	TextDecoration *int64                                                                     `json:"text_decoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	ForeColor      *string                                                                    `json:"fore_color,omitempty"`      // 字体颜色
	BackColor      *string                                                                    `json:"back_color,omitempty"`      // 背景颜色
}

// CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyleFont ...
type CreateSheetConditionFormatReqSheetConditionFormatConditionFormatStyleFont struct {
	Bold   *bool `json:"bold,omitempty"`   // 加粗
	Italic *bool `json:"italic,omitempty"` // 斜体
}

// createSheetConditionFormatResp ...
type createSheetConditionFormatResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *CreateSheetConditionFormatResp `json:"data,omitempty"`
}

// CreateSheetConditionFormatResp ...
type CreateSheetConditionFormatResp struct {
	Responses []*CreateSheetConditionFormatRespResponse `json:"responses,omitempty"` // 响应
}

// CreateSheetConditionFormatRespResponse ...
type CreateSheetConditionFormatRespResponse struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的Id
	CfID    string `json:"cf_id,omitempty"`    // 设置成功的条件格式id
	ResCode int64  `json:"res_code,omitempty"` // 条件格式设置状态码，0表示成功，非0表示失败
	ResMsg  string `json:"res_msg,omitempty"`  // 条件格式设置返回的状态信息，空表示成功，非空表示失败原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetConditionFormat
//
// 该接口用于删除已有的条件格式，单次最多支持删除10个条件格式，每个条件格式的删除会返回成功或者失败，失败的情况包括各种参数的校验。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-delete
func (r *DriveService) DeleteSheetConditionFormat(ctx context.Context, request *DeleteSheetConditionFormatReq, options ...MethodOptionFunc) (*DeleteSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveDeleteSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetConditionFormat",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetConditionFormat mock DriveDeleteSheetConditionFormat method
func (r *Mock) MockDriveDeleteSheetConditionFormat(f func(ctx context.Context, request *DeleteSheetConditionFormatReq, options ...MethodOptionFunc) (*DeleteSheetConditionFormatResp, *Response, error)) {
	r.mockDriveDeleteSheetConditionFormat = f
}

// UnMockDriveDeleteSheetConditionFormat un-mock DriveDeleteSheetConditionFormat method
func (r *Mock) UnMockDriveDeleteSheetConditionFormat() {
	r.mockDriveDeleteSheetConditionFormat = nil
}

// DeleteSheetConditionFormatReq ...
type DeleteSheetConditionFormatReq struct {
	SpreadSheetToken string                                   `path:"spreadsheetToken" json:"-"` // sheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetCfIDs       *DeleteSheetConditionFormatReqSheetCfIDs `json:"sheet_cf_ids,omitempty"`    // 表格条件格式id
}

// DeleteSheetConditionFormatReqSheetCfIDs ...
type DeleteSheetConditionFormatReqSheetCfIDs struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的id
	CfID    string `json:"cf_id,omitempty"`    // 条件格式id
}

// deleteSheetConditionFormatResp ...
type deleteSheetConditionFormatResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *DeleteSheetConditionFormatResp `json:"data,omitempty"`
}

// DeleteSheetConditionFormatResp ...
type DeleteSheetConditionFormatResp struct {
	Responses []*DeleteSheetConditionFormatRespResponse `json:"responses,omitempty"` // 响应
}

// DeleteSheetConditionFormatRespResponse ...
type DeleteSheetConditionFormatRespResponse struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的Id
	CfID    string `json:"cf_id,omitempty"`    // 条件格式id
	ResCode int64  `json:"res_code,omitempty"` // 条件格式删除状态码，0表示成功，非0表示失败
	ResMsg  string `json:"res_msg,omitempty"`  // 条件格式删除返回的状态信息，空表示成功，非空表示失败原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetConditionFormat
//
// 该接口用于根据sheetId查询详细的条件格式信息，最多支持同时查询10个sheetId。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-get
func (r *DriveService) GetSheetConditionFormat(ctx context.Context, request *GetSheetConditionFormatReq, options ...MethodOptionFunc) (*GetSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveGetSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetConditionFormat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetConditionFormat mock DriveGetSheetConditionFormat method
func (r *Mock) MockDriveGetSheetConditionFormat(f func(ctx context.Context, request *GetSheetConditionFormatReq, options ...MethodOptionFunc) (*GetSheetConditionFormatResp, *Response, error)) {
	r.mockDriveGetSheetConditionFormat = f
}

// UnMockDriveGetSheetConditionFormat un-mock DriveGetSheetConditionFormat method
func (r *Mock) UnMockDriveGetSheetConditionFormat() {
	r.mockDriveGetSheetConditionFormat = nil
}

// GetSheetConditionFormatReq ...
type GetSheetConditionFormatReq struct {
	SheetIDs         []string `query:"sheet_ids" join_sep:"," json:"-"` // 工作表ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN)接口获取，多个ID用逗号分隔，如xxxID1,xxxID2
	SpreadSheetToken string   `path:"spreadsheetToken" json:"-"`        // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetConditionFormatResp ...
type getSheetConditionFormatResp struct {
	Code int64                        `json:"code,omitempty"`
	Msg  string                       `json:"msg,omitempty"`
	Data *GetSheetConditionFormatResp `json:"data,omitempty"`
}

// GetSheetConditionFormatResp ...
type GetSheetConditionFormatResp struct {
	SheetConditionFormats []*GetSheetConditionFormatRespSheetConditionFormat `json:"sheet_condition_formats,omitempty"` // 表格的条件格式信息
}

// GetSheetConditionFormatRespSheetConditionFormat ...
type GetSheetConditionFormatRespSheetConditionFormat struct {
	SheetID         string                                                          `json:"sheet_id,omitempty"`         // sheet的id
	ConditionFormat *GetSheetConditionFormatRespSheetConditionFormatConditionFormat `json:"condition_format,omitempty"` // 一个条件格式的详细信息
}

// GetSheetConditionFormatRespSheetConditionFormatConditionFormat ...
type GetSheetConditionFormatRespSheetConditionFormatConditionFormat struct {
	CfID     string                                                               `json:"cf_id,omitempty"`     // 条件格式的id
	Ranges   []string                                                             `json:"ranges,omitempty"`    // 条件格式应用的范围，支持：sheetId（整表）；sheetId!1:2（整行）；sheetId!A:B（整列）；sheetId!A1:B2（普通范围）；sheetId!A1:C（应用至最后一行）。应用范围不能超过表格的行总数和列总数
	RuleType string                                                               `json:"rule_type,omitempty"` // 条件格式规则类型，目前只有7种：***containsBlanks（为空）、notContainsBlanks（不为空）、duplicateValues（重复值）、uniqueValues（唯一值）、cellIs（限定值范围）、containsText（包含内容）、timePeriod（日期）***
	Attrs    []*SheetRuleAttr                                                     `json:"attrs,omitempty"`     // rule_type对应的具体属性信息，详见 [条件格式指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-guide)
	Style    *GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyle `json:"style,omitempty"`     // 条件格式样式，只支持以下样式
}

// GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyle ...
type GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyle struct {
	Font           *GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyleFont `json:"font,omitempty"`            // 字体样式
	TextDecoration int64                                                                    `json:"text_decoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	ForeColor      string                                                                   `json:"fore_color,omitempty"`      // 字体颜色
	BackColor      string                                                                   `json:"back_color,omitempty"`      // 背景颜色
}

// GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyleFont ...
type GetSheetConditionFormatRespSheetConditionFormatConditionFormatStyleFont struct {
	Bold   bool `json:"bold,omitempty"`   // 加粗
	Italic bool `json:"italic,omitempty"` // 斜体
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetConditionFormat
//
// 该接口用于更新已有的条件格式，单次最多支持更新10个条件格式，每个条件格式的更新会返回成功或者失败，失败的情况包括各种参数的校验。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-update
func (r *DriveService) UpdateSheetConditionFormat(ctx context.Context, request *UpdateSheetConditionFormatReq, options ...MethodOptionFunc) (*UpdateSheetConditionFormatResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetConditionFormat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetConditionFormat mock enable")
		return r.cli.mock.mockDriveUpdateSheetConditionFormat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetConditionFormat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetConditionFormatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetConditionFormat mock DriveUpdateSheetConditionFormat method
func (r *Mock) MockDriveUpdateSheetConditionFormat(f func(ctx context.Context, request *UpdateSheetConditionFormatReq, options ...MethodOptionFunc) (*UpdateSheetConditionFormatResp, *Response, error)) {
	r.mockDriveUpdateSheetConditionFormat = f
}

// UnMockDriveUpdateSheetConditionFormat un-mock DriveUpdateSheetConditionFormat method
func (r *Mock) UnMockDriveUpdateSheetConditionFormat() {
	r.mockDriveUpdateSheetConditionFormat = nil
}

// UpdateSheetConditionFormatReq ...
type UpdateSheetConditionFormatReq struct {
	SpreadSheetToken      string                                              `path:"spreadsheetToken" json:"-"`         // sheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetConditionFormats *UpdateSheetConditionFormatReqSheetConditionFormats `json:"sheet_condition_formats,omitempty"` // 表格的条件格式信息
}

// UpdateSheetConditionFormatReqSheetConditionFormats ...
type UpdateSheetConditionFormatReqSheetConditionFormats struct {
	SheetID         string                                                             `json:"sheet_id,omitempty"`         // sheet的id
	ConditionFormat *UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormat `json:"condition_format,omitempty"` // 一个条件格式的详细信息
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormat ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormat struct {
	CfID     string                                                                   `json:"cf_id,omitempty"`     // 需要更新的条件格式id，会校验id是否存在
	Ranges   []string                                                                 `json:"ranges,omitempty"`    // 条件格式应用的范围，支持：sheetId（整表）；sheetId!1:2（整行）；sheetId!A:B（整列）；sheetId!A1:B2（普通范围）；sheetId!A1:C（应用至最后一行）。应用范围不能超过表格的行总数和列总数，sheetId要与参数的sheetId一致
	RuleType string                                                                   `json:"rule_type,omitempty"` // 条件格式规则类型，目前只有7种：***containsBlanks（为空）、notContainsBlanks（不为空）、duplicateValues（重复值）、uniqueValues（唯一值）、cellIs（限定值范围）、containsText（包含内容）、timePeriod（日期）***
	Attrs    []*UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatAttr `json:"attrs,omitempty"`     // rule_type对应的具体属性信息，详见 [条件格式指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/conditionformat/condition-format-guide)
	Style    *UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyle  `json:"style,omitempty"`     // 条件格式样式，只支持以下样式，以下样式每个参数都可选，但是不能设置空的style
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatAttr ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatAttr struct {
	Operator   *string  `json:"operator,omitempty"`    // 操作方法
	TimePeriod *string  `json:"time_period,omitempty"` // 时间范围
	Formula    []string `json:"formula,omitempty"`     // 格式
	Text       *string  `json:"text,omitempty"`        // 文本
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyle ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyle struct {
	Font           *UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyleFont `json:"font,omitempty"`            // 字体样式
	TextDecoration *int64                                                                      `json:"text_decoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	ForeColor      *string                                                                     `json:"fore_color,omitempty"`      // 字体颜色
	BackColor      *string                                                                     `json:"back_color,omitempty"`      // 背景颜色
}

// UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyleFont ...
type UpdateSheetConditionFormatReqSheetConditionFormatsConditionFormatStyleFont struct {
	Bold   *bool `json:"bold,omitempty"`   // 加粗
	Italic *bool `json:"italic,omitempty"` // 斜体
}

// updateSheetConditionFormatResp ...
type updateSheetConditionFormatResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *UpdateSheetConditionFormatResp `json:"data,omitempty"`
}

// UpdateSheetConditionFormatResp ...
type UpdateSheetConditionFormatResp struct {
	Responses []*UpdateSheetConditionFormatRespResponse `json:"responses,omitempty"` // 响应
}

// UpdateSheetConditionFormatRespResponse ...
type UpdateSheetConditionFormatRespResponse struct {
	SheetID string `json:"sheet_id,omitempty"` // sheet的Id
	CfID    string `json:"cf_id,omitempty"`    // 更新的条件格式id
	ResCode int64  `json:"res_code,omitempty"` // 条件格式更新状态码，0表示成功，非0表示失败
	ResMsg  string `json:"res_msg,omitempty"`  // 条件格式更新返回的状态信息，空表示成功，不空表示失败原因
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheet 使用该接口可以在指定的目录下创建在线表格。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet/create
func (r *DriveService) CreateSheet(ctx context.Context, request *CreateSheetReq, options ...MethodOptionFunc) (*CreateSheetResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheet mock enable")
		return r.cli.mock.mockDriveCreateSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheet mock DriveCreateSheet method
func (r *Mock) MockDriveCreateSheet(f func(ctx context.Context, request *CreateSheetReq, options ...MethodOptionFunc) (*CreateSheetResp, *Response, error)) {
	r.mockDriveCreateSheet = f
}

// UnMockDriveCreateSheet un-mock DriveCreateSheet method
func (r *Mock) UnMockDriveCreateSheet() {
	r.mockDriveCreateSheet = nil
}

// CreateSheetReq ...
type CreateSheetReq struct {
	Title       *string `json:"title,omitempty"`        // 表格标题, 示例值："title"
	FolderToken *string `json:"folder_token,omitempty"` // 文件夹token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction), 示例值："fldcnMsNb*****hIW9IjG1LVswg"
}

// createSheetResp ...
type createSheetResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetResp `json:"data,omitempty"`
}

// CreateSheetResp ...
type CreateSheetResp struct {
	Spreadsheet *CreateSheetRespSpreadsheet `json:"spreadsheet,omitempty"` // 表格
}

// CreateSheetRespSpreadsheet ...
type CreateSheetRespSpreadsheet struct {
	Title            string `json:"title,omitempty"`             // 表格标题
	FolderToken      string `json:"folder_token,omitempty"`      // 文件夹token，获取方式见[概述](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/files/guide/introduction)
	URL              string `json:"url,omitempty"`               // 文档url
	SpreadSheetToken string `json:"spreadsheet_token,omitempty"` // 表格token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、range 和下拉列表属性给单元格设置下拉列表规则；单次设置范围不超过5000行，100列。当一个数据区域中已有数据，支持将有效数据直接转为选项。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/set-dropdown
func (r *DriveService) CreateSheetDataValidationDropdown(ctx context.Context, request *CreateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*CreateSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveCreateSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetDataValidationDropdown",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetDataValidationDropdown mock DriveCreateSheetDataValidationDropdown method
func (r *Mock) MockDriveCreateSheetDataValidationDropdown(f func(ctx context.Context, request *CreateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*CreateSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveCreateSheetDataValidationDropdown = f
}

// UnMockDriveCreateSheetDataValidationDropdown un-mock DriveCreateSheetDataValidationDropdown method
func (r *Mock) UnMockDriveCreateSheetDataValidationDropdown() {
	r.mockDriveCreateSheetDataValidationDropdown = nil
}

// CreateSheetDataValidationDropdownReq ...
type CreateSheetDataValidationDropdownReq struct {
	SpreadSheetToken   string                                              `path:"spreadsheetToken" json:"-"`    // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range              string                                              `json:"range,omitempty"`              // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationType string                                              `json:"dataValidationType,omitempty"` // 下拉列表填"list"
	DataValidation     *CreateSheetDataValidationDropdownReqDataValidation `json:"dataValidation,omitempty"`     // 下拉列表规则属性
}

// CreateSheetDataValidationDropdownReqDataValidation ...
type CreateSheetDataValidationDropdownReqDataValidation struct {
	ConditionValues []string                                                   `json:"conditionValues,omitempty"` // 下拉列表选项值, 需为字符串,不能包含","，选项值最长100字符,选项个数最多500个
	Options         *CreateSheetDataValidationDropdownReqDataValidationOptions `json:"options,omitempty"`         // 可选属性
}

// CreateSheetDataValidationDropdownReqDataValidationOptions ...
type CreateSheetDataValidationDropdownReqDataValidationOptions struct {
	MultipleValues     *bool    `json:"multipleValues,omitempty"`     // 单选填false, 多选填true，不填默认为false
	HighlightValidData *bool    `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式, 不填默认为false
	Colors             []string `json:"colors,omitempty"`             // 当highlightValidData为true时，color需填颜色,与conditionValues中的值一一对应。需是RGB16进制格式,如"#fffd00"
}

// createSheetDataValidationDropdownResp ...
type createSheetDataValidationDropdownResp struct {
	Code int64                                  `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                                `json:"msg,omitempty"`  // 状态信息
	Data *CreateSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// CreateSheetDataValidationDropdownResp ...
type CreateSheetDataValidationDropdownResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、range 移除选定数据范围单元格的下拉列表设置，但保留选项文本。单个删除范围不超过5000单元格。单次请求range最大数量100个。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/delete-datavalidation
func (r *DriveService) DeleteSheetDataValidationDropdown(ctx context.Context, request *DeleteSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*DeleteSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveDeleteSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetDataValidationDropdown",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetDataValidationDropdown mock DriveDeleteSheetDataValidationDropdown method
func (r *Mock) MockDriveDeleteSheetDataValidationDropdown(f func(ctx context.Context, request *DeleteSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*DeleteSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveDeleteSheetDataValidationDropdown = f
}

// UnMockDriveDeleteSheetDataValidationDropdown un-mock DriveDeleteSheetDataValidationDropdown method
func (r *Mock) UnMockDriveDeleteSheetDataValidationDropdown() {
	r.mockDriveDeleteSheetDataValidationDropdown = nil
}

// DeleteSheetDataValidationDropdownReq ...
type DeleteSheetDataValidationDropdownReq struct {
	SpreadSheetToken     string                                                     `path:"spreadsheetToken" json:"-"`      // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationRanges []*DeleteSheetDataValidationDropdownReqDataValidationRange `json:"dataValidationRanges,omitempty"` // 范围数组，每个range 最大单元格数量5000，每个range独立执行，一个range的失败不影响其他range的执行。返回结果会返回每个range的执行结果
}

// DeleteSheetDataValidationDropdownReqDataValidationRange ...
type DeleteSheetDataValidationDropdownReqDataValidationRange struct {
	Range             string  `json:"range,omitempty"`             // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationIDs []int64 `json:"dataValidationIds,omitempty"` // 指定需要删除的dataValidationIds
}

// deleteSheetDataValidationDropdownResp ...
type deleteSheetDataValidationDropdownResp struct {
	Code int64                                  `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                                `json:"msg,omitempty"`  // 状态信息
	Data *DeleteSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// DeleteSheetDataValidationDropdownResp ...
type DeleteSheetDataValidationDropdownResp struct {
	RangeResults []*DeleteSheetDataValidationDropdownRespRangeResult `json:"rangeResults,omitempty"`
}

// DeleteSheetDataValidationDropdownRespRangeResult ...
type DeleteSheetDataValidationDropdownRespRangeResult struct {
	Range        string  `json:"range,omitempty"`        // 执行的range,与请求入参中的range 对应
	Msg          *string `json:"msg,omitempty"`          // 结果信息
	Success      bool    `json:"success,omitempty"`      // 执行结果
	UpdatedCells int64   `json:"updatedCells,omitempty"` // 影响的单元格数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、range 查询range内的下拉列表设置信息；单次查询范围不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/query-datavalidation
func (r *DriveService) GetSheetDataValidationDropdown(ctx context.Context, request *GetSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*GetSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveGetSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetDataValidationDropdown",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetDataValidationDropdown mock DriveGetSheetDataValidationDropdown method
func (r *Mock) MockDriveGetSheetDataValidationDropdown(f func(ctx context.Context, request *GetSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*GetSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveGetSheetDataValidationDropdown = f
}

// UnMockDriveGetSheetDataValidationDropdown un-mock DriveGetSheetDataValidationDropdown method
func (r *Mock) UnMockDriveGetSheetDataValidationDropdown() {
	r.mockDriveGetSheetDataValidationDropdown = nil
}

// GetSheetDataValidationDropdownReq ...
type GetSheetDataValidationDropdownReq struct {
	Range              string `query:"range" json:"-"`              // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	DataValidationType string `query:"dataValidationType" json:"-"` // 下拉列表填"list"
	SpreadSheetToken   string `path:"spreadsheetToken" json:"-"`    // spreadsheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetDataValidationDropdownResp ...
type getSheetDataValidationDropdownResp struct {
	Code int64                               `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                             `json:"msg,omitempty"`  // 状态信息
	Data *GetSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// GetSheetDataValidationDropdownResp ...
type GetSheetDataValidationDropdownResp struct {
	SpreadSheetToken string                                              `json:"spreadsheetToken,omitempty"` // spreadsheet的token
	SheetID          string                                              `json:"sheetId,omitempty"`          // 工作表 sheet 的 id
	Revision         int64                                               `json:"revision,omitempty"`         // 版本号
	DataValidations  []*GetSheetDataValidationDropdownRespDataValidation `json:"dataValidations,omitempty"`  // 下拉列表数组, 不存在时为空
}

// GetSheetDataValidationDropdownRespDataValidation ...
type GetSheetDataValidationDropdownRespDataValidation struct {
	DataValidationID   int64                                                    `json:"dataValidationId,omitempty"`   // 唯一标示id
	DataValidationType string                                                   `json:"dataValidationType,omitempty"` // 下拉列表为"list"
	ConditionValues    []string                                                 `json:"conditionValues,omitempty"`    // 下拉列表选项值
	Options            *GetSheetDataValidationDropdownRespDataValidationOptions `json:"options,omitempty"`            // 可选属性
}

// GetSheetDataValidationDropdownRespDataValidationOptions ...
type GetSheetDataValidationDropdownRespDataValidationOptions struct {
	MultipleValues     *bool             `json:"multipleValues,omitempty"`     // 单选填false, 多选填true
	HighlightValidData *bool             `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式
	ColorValueMap      map[string]string `json:"colorValueMap,omitempty"`      // 当highlightValidData为true时，colorValueMap的key与conditionValues中的值一一对应，value为对应的颜色参数。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetDataValidationDropdown
//
// 该接口根据 spreadsheetToken 、sheetId、dataValidationId 更新下拉列表的属性。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/datavalidation/update-datavalidation
func (r *DriveService) UpdateSheetDataValidationDropdown(ctx context.Context, request *UpdateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*UpdateSheetDataValidationDropdownResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetDataValidationDropdown != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetDataValidationDropdown mock enable")
		return r.cli.mock.mockDriveUpdateSheetDataValidationDropdown(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetDataValidationDropdown",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation/:sheetId/:dataValidationId",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetDataValidationDropdownResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetDataValidationDropdown mock DriveUpdateSheetDataValidationDropdown method
func (r *Mock) MockDriveUpdateSheetDataValidationDropdown(f func(ctx context.Context, request *UpdateSheetDataValidationDropdownReq, options ...MethodOptionFunc) (*UpdateSheetDataValidationDropdownResp, *Response, error)) {
	r.mockDriveUpdateSheetDataValidationDropdown = f
}

// UnMockDriveUpdateSheetDataValidationDropdown un-mock DriveUpdateSheetDataValidationDropdown method
func (r *Mock) UnMockDriveUpdateSheetDataValidationDropdown() {
	r.mockDriveUpdateSheetDataValidationDropdown = nil
}

// UpdateSheetDataValidationDropdownReq ...
type UpdateSheetDataValidationDropdownReq struct {
	SpreadSheetToken   string                                              `path:"spreadsheetToken" json:"-"`    // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	SheetID            string                                              `path:"sheetId" json:"-"`             // 子sheet唯一识别参数
	DataValidationID   int64                                               `path:"dataValidationId" json:"-"`    // sheet中下拉列表的唯一标示id
	DataValidationType string                                              `json:"dataValidationType,omitempty"` // 下拉列表填"list"
	DataValidation     *UpdateSheetDataValidationDropdownReqDataValidation `json:"dataValidation,omitempty"`     // 下拉列表规则属性
}

// UpdateSheetDataValidationDropdownReqDataValidation ...
type UpdateSheetDataValidationDropdownReqDataValidation struct {
	ConditionValues []string                                                   `json:"conditionValues,omitempty"` // 下拉列表选项值, 需为字符串,不能包含","，选项值最长100字符,选项个数最多500个
	Options         *UpdateSheetDataValidationDropdownReqDataValidationOptions `json:"options,omitempty"`         // 可选属性
}

// UpdateSheetDataValidationDropdownReqDataValidationOptions ...
type UpdateSheetDataValidationDropdownReqDataValidationOptions struct {
	MultipleValues     *bool    `json:"multipleValues,omitempty"`     // 单选填false, 多选填true，不填默认为false
	HighlightValidData *bool    `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式, 不填默认为false
	Colors             []string `json:"colors,omitempty"`             // 当highlightValidData为true时，color需填颜色,与conditionValues中的值一一对应。需是RGB16进制格式,如"#fffd00"
}

// updateSheetDataValidationDropdownResp ...
type updateSheetDataValidationDropdownResp struct {
	Code int64                                  `json:"code,omitempty"` // 状态码，0代表成功
	Msg  *string                                `json:"msg,omitempty"`  // 状态信息
	Data *UpdateSheetDataValidationDropdownResp `json:"data,omitempty"`
}

// UpdateSheetDataValidationDropdownResp ...
type UpdateSheetDataValidationDropdownResp struct {
	SpreadSheetToken string                                               `json:"spreadsheetToken,omitempty"` // spreadsheet的token
	SheetID          string                                               `json:"sheetId,omitempty"`          // 工作表 sheet 的 id
	DataValidation   *UpdateSheetDataValidationDropdownRespDataValidation `json:"dataValidation,omitempty"`
}

// UpdateSheetDataValidationDropdownRespDataValidation ...
type UpdateSheetDataValidationDropdownRespDataValidation struct {
	DataValidationID   int64                                                       `json:"dataValidationId,omitempty"`   // 唯一标示id
	DataValidationType string                                                      `json:"dataValidationType,omitempty"` // 下拉列表为"list"
	ConditionValues    []string                                                    `json:"conditionValues,omitempty"`    // 下拉列表选项值
	Options            *UpdateSheetDataValidationDropdownRespDataValidationOptions `json:"options,omitempty"`            // 可选属性
}

// UpdateSheetDataValidationDropdownRespDataValidationOptions ...
type UpdateSheetDataValidationDropdownRespDataValidationOptions struct {
	MultipleValues     *bool             `json:"multipleValues,omitempty"`     // 单选填false, 多选填true
	HighlightValidData *bool             `json:"highlightValidData,omitempty"` // 是否设置颜色和胶囊样式
	ColorValueMap      map[string]string `json:"colorValueMap,omitempty"`      // 当highlightValidData为true时，colorValueMap的key与conditionValues中的值一一对应，value为对应的颜色参数。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MoveSheetDimension 该接口用于移动行列，行列被移动到目标位置后，原本在目标位置的行列会对应右移或下移。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/move_dimension
func (r *DriveService) MoveSheetDimension(ctx context.Context, request *MoveSheetDimensionReq, options ...MethodOptionFunc) (*MoveSheetDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveMoveSheetDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveSheetDimension mock enable")
		return r.cli.mock.mockDriveMoveSheetDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveSheetDimension",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/move_dimension",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveSheetDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveSheetDimension mock DriveMoveSheetDimension method
func (r *Mock) MockDriveMoveSheetDimension(f func(ctx context.Context, request *MoveSheetDimensionReq, options ...MethodOptionFunc) (*MoveSheetDimensionResp, *Response, error)) {
	r.mockDriveMoveSheetDimension = f
}

// UnMockDriveMoveSheetDimension un-mock DriveMoveSheetDimension method
func (r *Mock) UnMockDriveMoveSheetDimension() {
	r.mockDriveMoveSheetDimension = nil
}

// MoveSheetDimensionReq ...
type MoveSheetDimensionReq struct {
	SpreadSheetToken string                       `path:"spreadsheet_token" json:"-"`  // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string                       `path:"sheet_id" json:"-"`           // 子表 id, 示例值："0b\**12"
	Source           *MoveSheetDimensionReqSource `json:"source,omitempty"`            // 移动源位置参数
	DestinationIndex *int64                       `json:"destination_index,omitempty"` // 移动的目标位置行或者列号, 示例值：4
}

// MoveSheetDimensionReqSource ...
type MoveSheetDimensionReqSource struct {
	MajorDimension *string `json:"major_dimension,omitempty"` // 操作行还是列，取值：ROWS、COLUMNS, 示例值："ROWS"
	StartIndex     *int64  `json:"start_index,omitempty"`     // 起始行或者列号, 示例值：0
	EndIndex       *int64  `json:"end_index,omitempty"`       // 结束行或者列号, 示例值：1
}

// moveSheetDimensionResp ...
type moveSheetDimensionResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *MoveSheetDimensionResp `json:"data,omitempty"`
}

// MoveSheetDimensionResp ...
type MoveSheetDimensionResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和长度，在末尾增加空行/列；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUjMzUjL1IzM14SNyMTN
func (r *DriveService) AddSheetDimensionRange(ctx context.Context, request *AddSheetDimensionRangeReq, options ...MethodOptionFunc) (*AddSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveAddSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#AddSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveAddSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "AddSheetDimensionRange",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(addSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveAddSheetDimensionRange mock DriveAddSheetDimensionRange method
func (r *Mock) MockDriveAddSheetDimensionRange(f func(ctx context.Context, request *AddSheetDimensionRangeReq, options ...MethodOptionFunc) (*AddSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveAddSheetDimensionRange = f
}

// UnMockDriveAddSheetDimensionRange un-mock DriveAddSheetDimensionRange method
func (r *Mock) UnMockDriveAddSheetDimensionRange() {
	r.mockDriveAddSheetDimensionRange = nil
}

// AddSheetDimensionRangeReq ...
type AddSheetDimensionRangeReq struct {
	SpreadSheetToken string                              `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension        *AddSheetDimensionRangeReqDimension `json:"dimension,omitempty"`       // 需要增加行列的维度信息
}

// AddSheetDimensionRangeReqDimension ...
type AddSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	Length         int64   `json:"length,omitempty"`         // 要增加的行/列数,0<length<5000
}

// addSheetDimensionRangeResp ...
type addSheetDimensionRangeResp struct {
	Code int64                       `json:"code,omitempty"`
	Msg  string                      `json:"msg,omitempty"`
	Data *AddSheetDimensionRangeResp `json:"data,omitempty"`
}

// AddSheetDimensionRangeResp ...
type AddSheetDimensionRangeResp struct {
	AddCount       int64  `json:"addCount,omitempty"`       // 增加的行/列数
	MajorDimension string `json:"majorDimension,omitempty"` // 插入维度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和维度信息删除行/列 。单次删除最大5000行/列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucjMzUjL3IzM14yNyMTN
func (r *DriveService) DeleteSheetDimensionRange(ctx context.Context, request *DeleteSheetDimensionRangeReq, options ...MethodOptionFunc) (*DeleteSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveDeleteSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetDimensionRange",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetDimensionRange mock DriveDeleteSheetDimensionRange method
func (r *Mock) MockDriveDeleteSheetDimensionRange(f func(ctx context.Context, request *DeleteSheetDimensionRangeReq, options ...MethodOptionFunc) (*DeleteSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveDeleteSheetDimensionRange = f
}

// UnMockDriveDeleteSheetDimensionRange un-mock DriveDeleteSheetDimensionRange method
func (r *Mock) UnMockDriveDeleteSheetDimensionRange() {
	r.mockDriveDeleteSheetDimensionRange = nil
}

// DeleteSheetDimensionRangeReq ...
type DeleteSheetDimensionRangeReq struct {
	SpreadSheetToken string                                 `path:"spreadsheetToken" json:"-"` // spreadsheet的token，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension        *DeleteSheetDimensionRangeReqDimension `json:"dimension,omitempty"`       // 需要删除行列的维度信息
}

// DeleteSheetDimensionRangeReqDimension ...
type DeleteSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// deleteSheetDimensionRangeResp ...
type deleteSheetDimensionRangeResp struct {
	Code int64                          `json:"code,omitempty"`
	Msg  string                         `json:"msg,omitempty"`
	Data *DeleteSheetDimensionRangeResp `json:"data,omitempty"`
}

// DeleteSheetDimensionRangeResp ...
type DeleteSheetDimensionRangeResp struct {
	DelCount       int64  `json:"delCount,omitempty"`       // 删除的行/列数
	MajorDimension string `json:"majorDimension,omitempty"` // 插入维度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// InsertSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和维度信息 插入空行/列。
// 如 startIndex=3, endIndex=7，则从第 4 行开始开始插入行列，一直到第 7 行，共插入 4 行；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQjMzUjL0IzM14CNyMTN
func (r *DriveService) InsertSheetDimensionRange(ctx context.Context, request *InsertSheetDimensionRangeReq, options ...MethodOptionFunc) (*InsertSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveInsertSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#InsertSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveInsertSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "InsertSheetDimensionRange",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/insert_dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(insertSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveInsertSheetDimensionRange mock DriveInsertSheetDimensionRange method
func (r *Mock) MockDriveInsertSheetDimensionRange(f func(ctx context.Context, request *InsertSheetDimensionRangeReq, options ...MethodOptionFunc) (*InsertSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveInsertSheetDimensionRange = f
}

// UnMockDriveInsertSheetDimensionRange un-mock DriveInsertSheetDimensionRange method
func (r *Mock) UnMockDriveInsertSheetDimensionRange() {
	r.mockDriveInsertSheetDimensionRange = nil
}

// InsertSheetDimensionRangeReq ...
type InsertSheetDimensionRangeReq struct {
	SpreadSheetToken string                                 `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension        *InsertSheetDimensionRangeReqDimension `json:"dimension,omitempty"`       // 需要插入行列的维度信息
	InheritStyle     *string                                `json:"inheritStyle,omitempty"`    // BEFORE 或 AFTER，不填为不继承 style
}

// InsertSheetDimensionRangeReqDimension ...
type InsertSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheet 的 Id
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// insertSheetDimensionRangeResp ...
type insertSheetDimensionRangeResp struct {
	Code int64                          `json:"code,omitempty"`
	Msg  string                         `json:"msg,omitempty"`
	Data *InsertSheetDimensionRangeResp `json:"data,omitempty"`
}

// InsertSheetDimensionRangeResp ...
type InsertSheetDimensionRangeResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetDimensionRange
//
// 该接口用于根据 spreadsheetToken 和维度信息更新隐藏行列、单元格大小；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYjMzUjL2IzM14iNyMTN
func (r *DriveService) UpdateSheetDimensionRange(ctx context.Context, request *UpdateSheetDimensionRangeReq, options ...MethodOptionFunc) (*UpdateSheetDimensionRangeResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetDimensionRange != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetDimensionRange mock enable")
		return r.cli.mock.mockDriveUpdateSheetDimensionRange(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetDimensionRange",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetDimensionRangeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetDimensionRange mock DriveUpdateSheetDimensionRange method
func (r *Mock) MockDriveUpdateSheetDimensionRange(f func(ctx context.Context, request *UpdateSheetDimensionRangeReq, options ...MethodOptionFunc) (*UpdateSheetDimensionRangeResp, *Response, error)) {
	r.mockDriveUpdateSheetDimensionRange = f
}

// UnMockDriveUpdateSheetDimensionRange un-mock DriveUpdateSheetDimensionRange method
func (r *Mock) UnMockDriveUpdateSheetDimensionRange() {
	r.mockDriveUpdateSheetDimensionRange = nil
}

// UpdateSheetDimensionRangeReq ...
type UpdateSheetDimensionRangeReq struct {
	SpreadSheetToken    string                                           `path:"spreadsheetToken" json:"-"`     // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Dimension           *UpdateSheetDimensionRangeReqDimension           `json:"dimension,omitempty"`           // 需要更新行列的维度信息
	DimensionProperties *UpdateSheetDimensionRangeReqDimensionProperties `json:"dimensionProperties,omitempty"` // 需要更新行列的属性
}

// UpdateSheetDimensionRangeReqDimension ...
type UpdateSheetDimensionRangeReqDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// UpdateSheetDimensionRangeReqDimensionProperties ...
type UpdateSheetDimensionRangeReqDimensionProperties struct {
	Visible   *bool  `json:"visible,omitempty"`   // true 为显示，false 为隐藏行列
	FixedSize *int64 `json:"fixedSize,omitempty"` // 行/列的大小
}

// updateSheetDimensionRangeResp ...
type updateSheetDimensionRangeResp struct {
	Code int64                          `json:"code,omitempty"`
	Msg  string                         `json:"msg,omitempty"`
	Data *UpdateSheetDimensionRangeResp `json:"data,omitempty"`
}

// UpdateSheetDimensionRangeResp ...
type UpdateSheetDimensionRangeResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFilter 在子表内创建筛选。
//
// 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/create
func (r *DriveService) CreateSheetFilter(ctx context.Context, request *CreateSheetFilterReq, options ...MethodOptionFunc) (*CreateSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFilter mock enable")
		return r.cli.mock.mockDriveCreateSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFilter",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFilter mock DriveCreateSheetFilter method
func (r *Mock) MockDriveCreateSheetFilter(f func(ctx context.Context, request *CreateSheetFilterReq, options ...MethodOptionFunc) (*CreateSheetFilterResp, *Response, error)) {
	r.mockDriveCreateSheetFilter = f
}

// UnMockDriveCreateSheetFilter un-mock DriveCreateSheetFilter method
func (r *Mock) UnMockDriveCreateSheetFilter() {
	r.mockDriveCreateSheetFilter = nil
}

// CreateSheetFilterReq ...
type CreateSheetFilterReq struct {
	SpreadSheetToken string                         `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string                         `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
	Range            string                         `json:"range,omitempty"`            // 筛选应用范围, 示例值："xxxxxx!C1:H14"
	Col              string                         `json:"col,omitempty"`              // 设置筛选条件的列, 示例值："E"
	Condition        *CreateSheetFilterReqCondition `json:"condition,omitempty"`        // 筛选的条件
}

// CreateSheetFilterReqCondition ...
type CreateSheetFilterReqCondition struct {
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型, 示例值："number"
	CompareType *string  `json:"compare_type,omitempty"` // 比较类型, 示例值："less"
	Expected    []string `json:"expected,omitempty"`     // 筛选参数, 示例值：6
}

// createSheetFilterResp ...
type createSheetFilterResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFilterResp `json:"data,omitempty"`
}

// CreateSheetFilterResp ...
type CreateSheetFilterResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFilter 删除子表的筛选
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/delete
func (r *DriveService) DeleteSheetFilter(ctx context.Context, request *DeleteSheetFilterReq, options ...MethodOptionFunc) (*DeleteSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFilter mock enable")
		return r.cli.mock.mockDriveDeleteSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFilter",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFilter mock DriveDeleteSheetFilter method
func (r *Mock) MockDriveDeleteSheetFilter(f func(ctx context.Context, request *DeleteSheetFilterReq, options ...MethodOptionFunc) (*DeleteSheetFilterResp, *Response, error)) {
	r.mockDriveDeleteSheetFilter = f
}

// UnMockDriveDeleteSheetFilter un-mock DriveDeleteSheetFilter method
func (r *Mock) UnMockDriveDeleteSheetFilter() {
	r.mockDriveDeleteSheetFilter = nil
}

// DeleteSheetFilterReq ...
type DeleteSheetFilterReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
}

// deleteSheetFilterResp ...
type deleteSheetFilterResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFilterResp `json:"data,omitempty"`
}

// DeleteSheetFilterResp ...
type DeleteSheetFilterResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFilter 获取子表的详细筛选信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/get
func (r *DriveService) GetSheetFilter(ctx context.Context, request *GetSheetFilterReq, options ...MethodOptionFunc) (*GetSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFilter mock enable")
		return r.cli.mock.mockDriveGetSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFilter",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFilter mock DriveGetSheetFilter method
func (r *Mock) MockDriveGetSheetFilter(f func(ctx context.Context, request *GetSheetFilterReq, options ...MethodOptionFunc) (*GetSheetFilterResp, *Response, error)) {
	r.mockDriveGetSheetFilter = f
}

// UnMockDriveGetSheetFilter un-mock DriveGetSheetFilter method
func (r *Mock) UnMockDriveGetSheetFilter() {
	r.mockDriveGetSheetFilter = nil
}

// GetSheetFilterReq ...
type GetSheetFilterReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
}

// getSheetFilterResp ...
type getSheetFilterResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFilterResp `json:"data,omitempty"`
}

// GetSheetFilterResp ...
type GetSheetFilterResp struct {
	SheetFilterInfo *GetSheetFilterRespSheetFilterInfo `json:"sheet_filter_info,omitempty"` // 筛选信息
}

// GetSheetFilterRespSheetFilterInfo ...
type GetSheetFilterRespSheetFilterInfo struct {
	Range           string                                         `json:"range,omitempty"`             // 筛选应用范围
	FilteredOutRows []int64                                        `json:"filtered_out_rows,omitempty"` // 筛选出来隐藏的行
	FilterInfos     []*GetSheetFilterRespSheetFilterInfoFilterInfo `json:"filter_infos,omitempty"`      // sheet的筛选条件
}

// GetSheetFilterRespSheetFilterInfoFilterInfo ...
type GetSheetFilterRespSheetFilterInfoFilterInfo struct {
	Col        string                                                  `json:"col,omitempty"`        // 设置了筛选条件的列
	Conditions []*GetSheetFilterRespSheetFilterInfoFilterInfoCondition `json:"conditions,omitempty"` // 筛选条件
}

// GetSheetFilterRespSheetFilterInfoFilterInfoCondition ...
type GetSheetFilterRespSheetFilterInfoFilterInfoCondition struct {
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFilter 更新子表筛选范围中的列筛选条件。
//
// 参数值可参考[筛选指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/filter-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter/update
func (r *DriveService) UpdateSheetFilter(ctx context.Context, request *UpdateSheetFilterReq, options ...MethodOptionFunc) (*UpdateSheetFilterResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFilter != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFilter mock enable")
		return r.cli.mock.mockDriveUpdateSheetFilter(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFilter",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFilterResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFilter mock DriveUpdateSheetFilter method
func (r *Mock) MockDriveUpdateSheetFilter(f func(ctx context.Context, request *UpdateSheetFilterReq, options ...MethodOptionFunc) (*UpdateSheetFilterResp, *Response, error)) {
	r.mockDriveUpdateSheetFilter = f
}

// UnMockDriveUpdateSheetFilter un-mock DriveUpdateSheetFilter method
func (r *Mock) UnMockDriveUpdateSheetFilter() {
	r.mockDriveUpdateSheetFilter = nil
}

// UpdateSheetFilterReq ...
type UpdateSheetFilterReq struct {
	SpreadSheetToken string                         `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA\*****yGehy8"
	SheetID          string                         `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b\**12"
	Col              string                         `json:"col,omitempty"`              // 更新筛选条件的列, 示例值："E"
	Condition        *UpdateSheetFilterReqCondition `json:"condition,omitempty"`        // 筛选条件
}

// UpdateSheetFilterReqCondition ...
type UpdateSheetFilterReqCondition struct {
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型, 示例值："number"
	CompareType *string  `json:"compare_type,omitempty"` // 比较类型, 示例值："less"
	Expected    []string `json:"expected,omitempty"`     // 筛选参数, 示例值：6
}

// updateSheetFilterResp ...
type updateSheetFilterResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFilterResp `json:"data,omitempty"`
}

// UpdateSheetFilterResp ...
type UpdateSheetFilterResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFilterViewCondition 在筛选视图的筛选范围的某一列创建筛选条件。
//
// 筛选条件参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/create
func (r *DriveService) CreateSheetFilterViewCondition(ctx context.Context, request *CreateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*CreateSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveCreateSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFilterViewCondition",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFilterViewCondition mock DriveCreateSheetFilterViewCondition method
func (r *Mock) MockDriveCreateSheetFilterViewCondition(f func(ctx context.Context, request *CreateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*CreateSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveCreateSheetFilterViewCondition = f
}

// UnMockDriveCreateSheetFilterViewCondition un-mock DriveCreateSheetFilterViewCondition method
func (r *Mock) UnMockDriveCreateSheetFilterViewCondition() {
	r.mockDriveCreateSheetFilterViewCondition = nil
}

// CreateSheetFilterViewConditionReq ...
type CreateSheetFilterViewConditionReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string   `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      *string  `json:"condition_id,omitempty"`     // 设置筛选条件的列，使用字母号, 示例值："E"
	FilterType       *string  `json:"filter_type,omitempty"`      // 筛选类型, 示例值："number"
	CompareType      *string  `json:"compare_type,omitempty"`     // 比较类型, 示例值："less"
	Expected         []string `json:"expected,omitempty"`         // 筛选参数, 示例值：6
}

// createSheetFilterViewConditionResp ...
type createSheetFilterViewConditionResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFilterViewConditionResp `json:"data,omitempty"`
}

// CreateSheetFilterViewConditionResp ...
type CreateSheetFilterViewConditionResp struct {
	Condition *CreateSheetFilterViewConditionRespCondition `json:"condition,omitempty"` // 创建的筛选条件
}

// CreateSheetFilterViewConditionRespCondition ...
type CreateSheetFilterViewConditionRespCondition struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFilterViewCondition 删除筛选视图的筛选范围某一列的筛选条件。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/delete
func (r *DriveService) DeleteSheetFilterViewCondition(ctx context.Context, request *DeleteSheetFilterViewConditionReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveDeleteSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFilterViewCondition",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFilterViewCondition mock DriveDeleteSheetFilterViewCondition method
func (r *Mock) MockDriveDeleteSheetFilterViewCondition(f func(ctx context.Context, request *DeleteSheetFilterViewConditionReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveDeleteSheetFilterViewCondition = f
}

// UnMockDriveDeleteSheetFilterViewCondition un-mock DriveDeleteSheetFilterViewCondition method
func (r *Mock) UnMockDriveDeleteSheetFilterViewCondition() {
	r.mockDriveDeleteSheetFilterViewCondition = nil
}

// DeleteSheetFilterViewConditionReq ...
type DeleteSheetFilterViewConditionReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      string `path:"condition_id" json:"-"`      // 筛选范围内的某列字母号, 示例值："E"
}

// deleteSheetFilterViewConditionResp ...
type deleteSheetFilterViewConditionResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFilterViewConditionResp `json:"data,omitempty"`
}

// DeleteSheetFilterViewConditionResp ...
type DeleteSheetFilterViewConditionResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFilterViewCondition 获取筛选视图某列的筛选条件信息。
//
// 筛选条件含义参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/get
func (r *DriveService) GetSheetFilterViewCondition(ctx context.Context, request *GetSheetFilterViewConditionReq, options ...MethodOptionFunc) (*GetSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveGetSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFilterViewCondition",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFilterViewCondition mock DriveGetSheetFilterViewCondition method
func (r *Mock) MockDriveGetSheetFilterViewCondition(f func(ctx context.Context, request *GetSheetFilterViewConditionReq, options ...MethodOptionFunc) (*GetSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveGetSheetFilterViewCondition = f
}

// UnMockDriveGetSheetFilterViewCondition un-mock DriveGetSheetFilterViewCondition method
func (r *Mock) UnMockDriveGetSheetFilterViewCondition() {
	r.mockDriveGetSheetFilterViewCondition = nil
}

// GetSheetFilterViewConditionReq ...
type GetSheetFilterViewConditionReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      string `path:"condition_id" json:"-"`      // 需要查询筛选条件的列字母号, 示例值："E"
}

// getSheetFilterViewConditionResp ...
type getSheetFilterViewConditionResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFilterViewConditionResp `json:"data,omitempty"`
}

// GetSheetFilterViewConditionResp ...
type GetSheetFilterViewConditionResp struct {
	Condition *GetSheetFilterViewConditionRespCondition `json:"condition,omitempty"` // 筛选的条件
}

// GetSheetFilterViewConditionRespCondition ...
type GetSheetFilterViewConditionRespCondition struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// QuerySheetFilterViewCondition 查询一个筛选视图的所有筛选条件，返回筛选视图的筛选范围内的筛选条件。
//
// 筛选条件含义可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/query
func (r *DriveService) QuerySheetFilterViewCondition(ctx context.Context, request *QuerySheetFilterViewConditionReq, options ...MethodOptionFunc) (*QuerySheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveQuerySheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#QuerySheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveQuerySheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "QuerySheetFilterViewCondition",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(querySheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveQuerySheetFilterViewCondition mock DriveQuerySheetFilterViewCondition method
func (r *Mock) MockDriveQuerySheetFilterViewCondition(f func(ctx context.Context, request *QuerySheetFilterViewConditionReq, options ...MethodOptionFunc) (*QuerySheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveQuerySheetFilterViewCondition = f
}

// UnMockDriveQuerySheetFilterViewCondition un-mock DriveQuerySheetFilterViewCondition method
func (r *Mock) UnMockDriveQuerySheetFilterViewCondition() {
	r.mockDriveQuerySheetFilterViewCondition = nil
}

// QuerySheetFilterViewConditionReq ...
type QuerySheetFilterViewConditionReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
}

// querySheetFilterViewConditionResp ...
type querySheetFilterViewConditionResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *QuerySheetFilterViewConditionResp `json:"data,omitempty"`
}

// QuerySheetFilterViewConditionResp ...
type QuerySheetFilterViewConditionResp struct {
	Items []*QuerySheetFilterViewConditionRespItem `json:"items,omitempty"` // 筛选视图设置的所有筛选条件
}

// QuerySheetFilterViewConditionRespItem ...
type QuerySheetFilterViewConditionRespItem struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFilterViewCondition 更新筛选视图范围的某列的筛选条件，condition id 即为列的字母号。
//
// 筛选条件参数可参考 [筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/update
func (r *DriveService) UpdateSheetFilterViewCondition(ctx context.Context, request *UpdateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewConditionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFilterViewCondition != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFilterViewCondition mock enable")
		return r.cli.mock.mockDriveUpdateSheetFilterViewCondition(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFilterViewCondition",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id/conditions/:condition_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFilterViewConditionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFilterViewCondition mock DriveUpdateSheetFilterViewCondition method
func (r *Mock) MockDriveUpdateSheetFilterViewCondition(f func(ctx context.Context, request *UpdateSheetFilterViewConditionReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewConditionResp, *Response, error)) {
	r.mockDriveUpdateSheetFilterViewCondition = f
}

// UnMockDriveUpdateSheetFilterViewCondition un-mock DriveUpdateSheetFilterViewCondition method
func (r *Mock) UnMockDriveUpdateSheetFilterViewCondition() {
	r.mockDriveUpdateSheetFilterViewCondition = nil
}

// UpdateSheetFilterViewConditionReq ...
type UpdateSheetFilterViewConditionReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string   `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	ConditionID      string   `path:"condition_id" json:"-"`      // 列字母号, 示例值："E"
	FilterType       *string  `json:"filter_type,omitempty"`      // 筛选类型, 示例值："number"
	CompareType      *string  `json:"compare_type,omitempty"`     // 比较类型, 示例值："less"
	Expected         []string `json:"expected,omitempty"`         // 筛选参数, 示例值：6
}

// updateSheetFilterViewConditionResp ...
type updateSheetFilterViewConditionResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFilterViewConditionResp `json:"data,omitempty"`
}

// UpdateSheetFilterViewConditionResp ...
type UpdateSheetFilterViewConditionResp struct {
	Condition *UpdateSheetFilterViewConditionRespCondition `json:"condition,omitempty"` // 更新后的筛选条件
}

// UpdateSheetFilterViewConditionRespCondition ...
type UpdateSheetFilterViewConditionRespCondition struct {
	ConditionID string   `json:"condition_id,omitempty"` // 设置筛选条件的列，使用字母号
	FilterType  string   `json:"filter_type,omitempty"`  // 筛选类型
	CompareType string   `json:"compare_type,omitempty"` // 比较类型
	Expected    []string `json:"expected,omitempty"`     // 筛选参数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFilterView 根据传入的参数创建一个筛选视图。Id 和 名字可选，不填的话会默认生成；range 必填。Id 长度为10，由 0-9、a-z、A-Z 组合生成。名字长度不超过100。单个子表内的筛选视图个数不超过 150。
//
// 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/create
func (r *DriveService) CreateSheetFilterView(ctx context.Context, request *CreateSheetFilterViewReq, options ...MethodOptionFunc) (*CreateSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFilterView mock enable")
		return r.cli.mock.mockDriveCreateSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFilterView",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFilterView mock DriveCreateSheetFilterView method
func (r *Mock) MockDriveCreateSheetFilterView(f func(ctx context.Context, request *CreateSheetFilterViewReq, options ...MethodOptionFunc) (*CreateSheetFilterViewResp, *Response, error)) {
	r.mockDriveCreateSheetFilterView = f
}

// UnMockDriveCreateSheetFilterView un-mock DriveCreateSheetFilterView method
func (r *Mock) UnMockDriveCreateSheetFilterView() {
	r.mockDriveCreateSheetFilterView = nil
}

// CreateSheetFilterViewReq ...
type CreateSheetFilterViewReq struct {
	SpreadSheetToken string  `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string  `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     *string `json:"filter_view_id,omitempty"`   // 筛选视图 id, 示例值："pH9hbVcCXA"
	FilterViewName   *string `json:"filter_view_name,omitempty"` // 筛选视图名字, 示例值："筛选视图 1"
	Range            *string `json:"range,omitempty"`            // 筛选视图的筛选范围, 示例值："0b**12!C1:H14"
}

// createSheetFilterViewResp ...
type createSheetFilterViewResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFilterViewResp `json:"data,omitempty"`
}

// CreateSheetFilterViewResp ...
type CreateSheetFilterViewResp struct {
	FilterView *CreateSheetFilterViewRespFilterView `json:"filter_view,omitempty"` // 创建的筛选视图的 id 、name、range
}

// CreateSheetFilterViewRespFilterView ...
type CreateSheetFilterViewRespFilterView struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFilterView 删除指定 id 对应的筛选视图。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/delete
func (r *DriveService) DeleteSheetFilterView(ctx context.Context, request *DeleteSheetFilterViewReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFilterView mock enable")
		return r.cli.mock.mockDriveDeleteSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFilterView",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFilterView mock DriveDeleteSheetFilterView method
func (r *Mock) MockDriveDeleteSheetFilterView(f func(ctx context.Context, request *DeleteSheetFilterViewReq, options ...MethodOptionFunc) (*DeleteSheetFilterViewResp, *Response, error)) {
	r.mockDriveDeleteSheetFilterView = f
}

// UnMockDriveDeleteSheetFilterView un-mock DriveDeleteSheetFilterView method
func (r *Mock) UnMockDriveDeleteSheetFilterView() {
	r.mockDriveDeleteSheetFilterView = nil
}

// DeleteSheetFilterViewReq ...
type DeleteSheetFilterViewReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
}

// deleteSheetFilterViewResp ...
type deleteSheetFilterViewResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFilterViewResp `json:"data,omitempty"`
}

// DeleteSheetFilterViewResp ...
type DeleteSheetFilterViewResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFilterView 获取指定筛选视图 id 的名字和筛选范围。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/get
func (r *DriveService) GetSheetFilterView(ctx context.Context, request *GetSheetFilterViewReq, options ...MethodOptionFunc) (*GetSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFilterView mock enable")
		return r.cli.mock.mockDriveGetSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFilterView",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFilterView mock DriveGetSheetFilterView method
func (r *Mock) MockDriveGetSheetFilterView(f func(ctx context.Context, request *GetSheetFilterViewReq, options ...MethodOptionFunc) (*GetSheetFilterViewResp, *Response, error)) {
	r.mockDriveGetSheetFilterView = f
}

// UnMockDriveGetSheetFilterView un-mock DriveGetSheetFilterView method
func (r *Mock) UnMockDriveGetSheetFilterView() {
	r.mockDriveGetSheetFilterView = nil
}

// GetSheetFilterViewReq ...
type GetSheetFilterViewReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
}

// getSheetFilterViewResp ...
type getSheetFilterViewResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFilterViewResp `json:"data,omitempty"`
}

// GetSheetFilterViewResp ...
type GetSheetFilterViewResp struct {
	FilterView *GetSheetFilterViewRespFilterView `json:"filter_view,omitempty"` // 筛选视图信息，包括 id、name、range
}

// GetSheetFilterViewRespFilterView ...
type GetSheetFilterViewRespFilterView struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// QuerySheetFilterView 查询子表内所有的筛选视图基本信息，包括 id、name 和 range
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/query
func (r *DriveService) QuerySheetFilterView(ctx context.Context, request *QuerySheetFilterViewReq, options ...MethodOptionFunc) (*QuerySheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveQuerySheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#QuerySheetFilterView mock enable")
		return r.cli.mock.mockDriveQuerySheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "QuerySheetFilterView",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(querySheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveQuerySheetFilterView mock DriveQuerySheetFilterView method
func (r *Mock) MockDriveQuerySheetFilterView(f func(ctx context.Context, request *QuerySheetFilterViewReq, options ...MethodOptionFunc) (*QuerySheetFilterViewResp, *Response, error)) {
	r.mockDriveQuerySheetFilterView = f
}

// UnMockDriveQuerySheetFilterView un-mock DriveQuerySheetFilterView method
func (r *Mock) UnMockDriveQuerySheetFilterView() {
	r.mockDriveQuerySheetFilterView = nil
}

// QuerySheetFilterViewReq ...
type QuerySheetFilterViewReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
}

// querySheetFilterViewResp ...
type querySheetFilterViewResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *QuerySheetFilterViewResp `json:"data,omitempty"`
}

// QuerySheetFilterViewResp ...
type QuerySheetFilterViewResp struct {
	Items []*QuerySheetFilterViewRespItem `json:"items,omitempty"` // 子表的所有筛选视图信息，id、name、range
}

// QuerySheetFilterViewRespItem ...
type QuerySheetFilterViewRespItem struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFilterView 更新筛选视图的名字或者筛选范围。名字长度不超过100，不能重复即子表内唯一；筛选范围不超过子表的最大范围。
//
// 筛选范围的设置参考：[筛选视图的筛选条件指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view-condition/filter-view-condition-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-filter_view/patch
func (r *DriveService) UpdateSheetFilterView(ctx context.Context, request *UpdateSheetFilterViewReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFilterView != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFilterView mock enable")
		return r.cli.mock.mockDriveUpdateSheetFilterView(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFilterView",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/filter_views/:filter_view_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFilterViewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFilterView mock DriveUpdateSheetFilterView method
func (r *Mock) MockDriveUpdateSheetFilterView(f func(ctx context.Context, request *UpdateSheetFilterViewReq, options ...MethodOptionFunc) (*UpdateSheetFilterViewResp, *Response, error)) {
	r.mockDriveUpdateSheetFilterView = f
}

// UnMockDriveUpdateSheetFilterView un-mock DriveUpdateSheetFilterView method
func (r *Mock) UnMockDriveUpdateSheetFilterView() {
	r.mockDriveUpdateSheetFilterView = nil
}

// UpdateSheetFilterViewReq ...
type UpdateSheetFilterViewReq struct {
	SpreadSheetToken string  `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string  `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FilterViewID     string  `path:"filter_view_id" json:"-"`    // 筛选视图 id, 示例值："pH9hbVcCXA"
	FilterViewName   *string `json:"filter_view_name,omitempty"` // 筛选视图名字, 示例值："筛选视图 1"
	Range            *string `json:"range,omitempty"`            // 筛选视图的筛选范围, 示例值："0b**12!C1:H14"
}

// updateSheetFilterViewResp ...
type updateSheetFilterViewResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFilterViewResp `json:"data,omitempty"`
}

// UpdateSheetFilterViewResp ...
type UpdateSheetFilterViewResp struct {
	FilterView *UpdateSheetFilterViewRespFilterView `json:"filter_view,omitempty"` // 更新后的筛选视图的 id 、name、range
}

// UpdateSheetFilterViewRespFilterView ...
type UpdateSheetFilterViewRespFilterView struct {
	FilterViewID   string `json:"filter_view_id,omitempty"`   // 筛选视图 id
	FilterViewName string `json:"filter_view_name,omitempty"` // 筛选视图名字
	Range          string `json:"range,omitempty"`            // 筛选视图的筛选范围
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// FindSheet 按照指定的条件查找子表的某个范围内的数据符合条件的单元格位置。请求体中的 range 和 find 字段为必填。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/find
func (r *DriveService) FindSheet(ctx context.Context, request *FindSheetReq, options ...MethodOptionFunc) (*FindSheetResp, *Response, error) {
	if r.cli.mock.mockDriveFindSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#FindSheet mock enable")
		return r.cli.mock.mockDriveFindSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "FindSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/find",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(findSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveFindSheet mock DriveFindSheet method
func (r *Mock) MockDriveFindSheet(f func(ctx context.Context, request *FindSheetReq, options ...MethodOptionFunc) (*FindSheetResp, *Response, error)) {
	r.mockDriveFindSheet = f
}

// UnMockDriveFindSheet un-mock DriveFindSheet method
func (r *Mock) UnMockDriveFindSheet() {
	r.mockDriveFindSheet = nil
}

// FindSheetReq ...
type FindSheetReq struct {
	SpreadSheetToken string                     `path:"spreadsheet_token" json:"-"` // 表格的 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string                     `path:"sheet_id" json:"-"`          // 子表的 id, 示例值："0b**12"
	FindCondition    *FindSheetReqFindCondition `json:"find_condition,omitempty"`   // 查找条件
	Find             string                     `json:"find,omitempty"`             // 查找的字符串, 示例值："hello"
}

// FindSheetReqFindCondition ...
type FindSheetReqFindCondition struct {
	Range           string `json:"range,omitempty"`             // 查找范围, 示例值："0b**12!A1:H10"
	MatchCase       *bool  `json:"match_case,omitempty"`        // 是否忽略大小写, 示例值：true
	MatchEntireCell *bool  `json:"match_entire_cell,omitempty"` // 是否匹配整个单元格, 示例值：false
	SearchByRegex   *bool  `json:"search_by_regex,omitempty"`   // 是否为正则匹配, 示例值：false
	IncludeFormulas *bool  `json:"include_formulas,omitempty"`  // 是否搜索公式内容, 示例值：false
}

// findSheetResp ...
type findSheetResp struct {
	Code int64          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string         `json:"msg,omitempty"`  // 错误描述
	Data *FindSheetResp `json:"data,omitempty"`
}

// FindSheetResp ...
type FindSheetResp struct {
	FindResult *FindSheetRespFindResult `json:"find_result,omitempty"` // 查找返回符合条件的信息
}

// FindSheetRespFindResult ...
type FindSheetRespFindResult struct {
	MatchedCells        []string `json:"matched_cells,omitempty"`         // 符合查找条件的单元格数组，不包含公式，例如["A1", "A2"...]
	MatchedFormulaCells []string `json:"matched_formula_cells,omitempty"` // 符合查找条件的含有公式的单元格数组，例如["B3", "H7"...]
	RowsCount           int64    `json:"rows_count,omitempty"`            // 符合查找条件的总行数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetFloatImage 根据传入的参数创建一张浮动图片。Float_image_token （[上传图片至表格后得到](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/media/upload_all)）和range（只支持一个单元格） 必填。Float_image_id 可选，不填的话会默认生成，长度为10，由 0-9、a-z、A-Z 组合生成。表格内不重复的图片（浮动图片+单元格图片）总数不超过4000。width 和 height 为图片展示的宽高，可选，不填的话会使用图片的真实宽高。offset_x 和 offset_y 为图片左上角距离所在单元格左上角的偏移，可选，默认为 0。
//
// 浮动图片的设置参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/create
func (r *DriveService) CreateSheetFloatImage(ctx context.Context, request *CreateSheetFloatImageReq, options ...MethodOptionFunc) (*CreateSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetFloatImage mock enable")
		return r.cli.mock.mockDriveCreateSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetFloatImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetFloatImage mock DriveCreateSheetFloatImage method
func (r *Mock) MockDriveCreateSheetFloatImage(f func(ctx context.Context, request *CreateSheetFloatImageReq, options ...MethodOptionFunc) (*CreateSheetFloatImageResp, *Response, error)) {
	r.mockDriveCreateSheetFloatImage = f
}

// UnMockDriveCreateSheetFloatImage un-mock DriveCreateSheetFloatImage method
func (r *Mock) UnMockDriveCreateSheetFloatImage() {
	r.mockDriveCreateSheetFloatImage = nil
}

// CreateSheetFloatImageReq ...
type CreateSheetFloatImageReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"`  // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`           // 子表 id, 示例值："0b**12"
	FloatImageID     *string  `json:"float_image_id,omitempty"`    // 浮动图片 id, 示例值："ye06SS14ph"
	FloatImageToken  *string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作, 示例值："boxbcbQsaSqIXsxxxxx1HCPJFbh"
	Range            *string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格, 示例值："0b**12!A1:A1"
	Width            *float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px, 示例值：100
	Height           *float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px, 示例值：100
	OffsetX          *float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度, 示例值：0
	OffsetY          *float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度, 示例值：0
}

// createSheetFloatImageResp ...
type createSheetFloatImageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateSheetFloatImageResp `json:"data,omitempty"`
}

// CreateSheetFloatImageResp ...
type CreateSheetFloatImageResp struct {
	FloatImage *CreateSheetFloatImageRespFloatImage `json:"float_image,omitempty"` // 浮动图片返回值
}

// CreateSheetFloatImageRespFloatImage ...
type CreateSheetFloatImageRespFloatImage struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetFloatImage 删除 float_image_id 对应的浮动图片。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/delete
func (r *DriveService) DeleteSheetFloatImage(ctx context.Context, request *DeleteSheetFloatImageReq, options ...MethodOptionFunc) (*DeleteSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetFloatImage mock enable")
		return r.cli.mock.mockDriveDeleteSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetFloatImage",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetFloatImage mock DriveDeleteSheetFloatImage method
func (r *Mock) MockDriveDeleteSheetFloatImage(f func(ctx context.Context, request *DeleteSheetFloatImageReq, options ...MethodOptionFunc) (*DeleteSheetFloatImageResp, *Response, error)) {
	r.mockDriveDeleteSheetFloatImage = f
}

// UnMockDriveDeleteSheetFloatImage un-mock DriveDeleteSheetFloatImage method
func (r *Mock) UnMockDriveDeleteSheetFloatImage() {
	r.mockDriveDeleteSheetFloatImage = nil
}

// DeleteSheetFloatImageReq ...
type DeleteSheetFloatImageReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FloatImageID     string `path:"float_image_id" json:"-"`    // 浮动图片 id, 示例值："ye06SS14ph"
}

// deleteSheetFloatImageResp ...
type deleteSheetFloatImageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteSheetFloatImageResp `json:"data,omitempty"`
}

// DeleteSheetFloatImageResp ...
type DeleteSheetFloatImageResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetFloatImage 根据 float_image_id 获取对应浮动图片的信息。
//
// 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/get
func (r *DriveService) GetSheetFloatImage(ctx context.Context, request *GetSheetFloatImageReq, options ...MethodOptionFunc) (*GetSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetFloatImage mock enable")
		return r.cli.mock.mockDriveGetSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetFloatImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetFloatImage mock DriveGetSheetFloatImage method
func (r *Mock) MockDriveGetSheetFloatImage(f func(ctx context.Context, request *GetSheetFloatImageReq, options ...MethodOptionFunc) (*GetSheetFloatImageResp, *Response, error)) {
	r.mockDriveGetSheetFloatImage = f
}

// UnMockDriveGetSheetFloatImage un-mock DriveGetSheetFloatImage method
func (r *Mock) UnMockDriveGetSheetFloatImage() {
	r.mockDriveGetSheetFloatImage = nil
}

// GetSheetFloatImageReq ...
type GetSheetFloatImageReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
	FloatImageID     string `path:"float_image_id" json:"-"`    // 浮动图片 id, 示例值："ye06SS14ph"
}

// getSheetFloatImageResp ...
type getSheetFloatImageResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetFloatImageResp `json:"data,omitempty"`
}

// GetSheetFloatImageResp ...
type GetSheetFloatImageResp struct {
	FloatImage *GetSheetFloatImageRespFloatImage `json:"float_image,omitempty"` // 浮动图片信息
}

// GetSheetFloatImageRespFloatImage ...
type GetSheetFloatImageRespFloatImage struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// QuerySheetFloatImage 返回子表内所有的浮动图片信息。
//
// 浮动图片参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/query
func (r *DriveService) QuerySheetFloatImage(ctx context.Context, request *QuerySheetFloatImageReq, options ...MethodOptionFunc) (*QuerySheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveQuerySheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#QuerySheetFloatImage mock enable")
		return r.cli.mock.mockDriveQuerySheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "QuerySheetFloatImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(querySheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveQuerySheetFloatImage mock DriveQuerySheetFloatImage method
func (r *Mock) MockDriveQuerySheetFloatImage(f func(ctx context.Context, request *QuerySheetFloatImageReq, options ...MethodOptionFunc) (*QuerySheetFloatImageResp, *Response, error)) {
	r.mockDriveQuerySheetFloatImage = f
}

// UnMockDriveQuerySheetFloatImage un-mock DriveQuerySheetFloatImage method
func (r *Mock) UnMockDriveQuerySheetFloatImage() {
	r.mockDriveQuerySheetFloatImage = nil
}

// QuerySheetFloatImageReq ...
type QuerySheetFloatImageReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string `path:"sheet_id" json:"-"`          // 子表 id, 示例值："0b**12"
}

// querySheetFloatImageResp ...
type querySheetFloatImageResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *QuerySheetFloatImageResp `json:"data,omitempty"`
}

// QuerySheetFloatImageResp ...
type QuerySheetFloatImageResp struct {
	Items []*QuerySheetFloatImageRespItem `json:"items,omitempty"` // 子表的所有浮动图片信息
}

// QuerySheetFloatImageRespItem ...
type QuerySheetFloatImageRespItem struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetFloatImage 更新已有的浮动图片位置和宽高，包括 range、width、height、offset_x 和 offset_y，不包括 float_image_id 和 float_image_token。
//
// 浮动图片更新参考：[浮动图片指南](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/float-image-user-guide)
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet-float_image/patch
func (r *DriveService) UpdateSheetFloatImage(ctx context.Context, request *UpdateSheetFloatImageReq, options ...MethodOptionFunc) (*UpdateSheetFloatImageResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetFloatImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetFloatImage mock enable")
		return r.cli.mock.mockDriveUpdateSheetFloatImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetFloatImage",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/float_images/:float_image_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetFloatImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetFloatImage mock DriveUpdateSheetFloatImage method
func (r *Mock) MockDriveUpdateSheetFloatImage(f func(ctx context.Context, request *UpdateSheetFloatImageReq, options ...MethodOptionFunc) (*UpdateSheetFloatImageResp, *Response, error)) {
	r.mockDriveUpdateSheetFloatImage = f
}

// UnMockDriveUpdateSheetFloatImage un-mock DriveUpdateSheetFloatImage method
func (r *Mock) UnMockDriveUpdateSheetFloatImage() {
	r.mockDriveUpdateSheetFloatImage = nil
}

// UpdateSheetFloatImageReq ...
type UpdateSheetFloatImageReq struct {
	SpreadSheetToken string   `path:"spreadsheet_token" json:"-"`  // 表格 token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string   `path:"sheet_id" json:"-"`           // 子表 id, 示例值："0b**12"
	FloatImageID     string   `path:"float_image_id" json:"-"`     // 浮动图片 id, 示例值："ye06SS14ph"
	FloatImageToken  *string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作, 示例值："boxbcbQsaSqIXsxxxxx1HCPJFbh"
	Range            *string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格, 示例值："0b**12!A1:A1"
	Width            *float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px, 示例值：100
	Height           *float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px, 示例值：100
	OffsetX          *float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度, 示例值：0
	OffsetY          *float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度, 示例值：0
}

// updateSheetFloatImageResp ...
type updateSheetFloatImageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *UpdateSheetFloatImageResp `json:"data,omitempty"`
}

// UpdateSheetFloatImageResp ...
type UpdateSheetFloatImageResp struct {
	FloatImage *UpdateSheetFloatImageRespFloatImage `json:"float_image,omitempty"` // 浮动图片信息
}

// UpdateSheetFloatImageRespFloatImage ...
type UpdateSheetFloatImageRespFloatImage struct {
	FloatImageID    string  `json:"float_image_id,omitempty"`    // 浮动图片 id
	FloatImageToken string  `json:"float_image_token,omitempty"` // 【更新时不用传，创建需要】浮动图片 token，需要先上传图片到表格获得此 token 之后再进行浮动图片的相关操作
	Range           string  `json:"range,omitempty"`             // 浮动图片的左上角单元格定位，只支持一个单元格
	Width           float64 `json:"width,omitempty"`             // 浮动图片的宽度，大于等于 20px
	Height          float64 `json:"height,omitempty"`            // 浮动图片的高度，大于等于 20px
	OffsetX         float64 `json:"offset_x,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的横向偏移，大于等于0且小于所在单元格的宽度
	OffsetY         float64 `json:"offset_y,omitempty"`          // 浮动图片左上角所在位置相对于所在单元格左上角的纵向偏移，大于等于0且小于所在单元格的高度
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetSheetValueImage
//
// 该接口用于根据 spreadsheetToken 和 range 向单个格子写入图片。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDNxYjL1QTM24SN0EjN
func (r *DriveService) SetSheetValueImage(ctx context.Context, request *SetSheetValueImageReq, options ...MethodOptionFunc) (*SetSheetValueImageResp, *Response, error) {
	if r.cli.mock.mockDriveSetSheetValueImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SetSheetValueImage mock enable")
		return r.cli.mock.mockDriveSetSheetValueImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "SetSheetValueImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_image",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setSheetValueImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSetSheetValueImage mock DriveSetSheetValueImage method
func (r *Mock) MockDriveSetSheetValueImage(f func(ctx context.Context, request *SetSheetValueImageReq, options ...MethodOptionFunc) (*SetSheetValueImageResp, *Response, error)) {
	r.mockDriveSetSheetValueImage = f
}

// UnMockDriveSetSheetValueImage un-mock DriveSetSheetValueImage method
func (r *Mock) UnMockDriveSetSheetValueImage() {
	r.mockDriveSetSheetValueImage = nil
}

// SetSheetValueImageReq ...
type SetSheetValueImageReq struct {
	SpreadSheetToken string `path:"spreadsheetToken" json:"-"` // spreadsheet的token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range            string `json:"range,omitempty"`           // 查询范围  range=<sheetId>!<开始格子>:<结束格子> 如：xxxx!A1:D5，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。此处限定为一个格子，如: xxxx!A1:A1
	Image            []byte `json:"image,omitempty"`           // 需要写入的图片二进制流，支持  "PNG", "JPEG", "JPG", "GIF", "BMP", "JFIF", "EXIF", "TIFF", "BPG", "WEBP", "HEIC" 等图片格式
	Name             string `json:"name,omitempty"`            // 写入的图片名字
}

// setSheetValueImageResp ...
type setSheetValueImageResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *SetSheetValueImageResp `json:"data,omitempty"`
}

// SetSheetValueImageResp ...
type SetSheetValueImageResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ImportSheet
//
// >  为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/import_task/import-user-guide)
// 该接口用于将本地表格导入到云空间上。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATO2YjLwkjN24CM5YjN
//
// Deprecated
func (r *DriveService) ImportSheet(ctx context.Context, request *ImportSheetReq, options ...MethodOptionFunc) (*ImportSheetResp, *Response, error) {
	if r.cli.mock.mockDriveImportSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#ImportSheet mock enable")
		return r.cli.mock.mockDriveImportSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "ImportSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/import",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(importSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveImportSheet mock DriveImportSheet method
func (r *Mock) MockDriveImportSheet(f func(ctx context.Context, request *ImportSheetReq, options ...MethodOptionFunc) (*ImportSheetResp, *Response, error)) {
	r.mockDriveImportSheet = f
}

// UnMockDriveImportSheet un-mock DriveImportSheet method
func (r *Mock) UnMockDriveImportSheet() {
	r.mockDriveImportSheet = nil
}

// ImportSheetReq ...
type ImportSheetReq struct {
	File        []byte  `json:"file,omitempty"`        // 需要导入的文件数据，转换成字节数组的形式，支持"xlsx","csv"格式，最大不超过20M
	Name        string  `json:"name,omitempty"`        // 文件名，带上文件拓展名，如"hello.csv"、"hello.xlsx"。导入后sheet的标题将去除文件拓展名，如"hello.xlsx"导入后标题为"hello"。
	FolderToken *string `json:"folderToken,omitempty"` // 导入的文件夹token，默认导入到根目录下
}

// importSheetResp ...
type importSheetResp struct {
	Code int64            `json:"code,omitempty"`
	Msg  string           `json:"msg,omitempty"`
	Data *ImportSheetResp `json:"data,omitempty"`
}

// ImportSheetResp ...
type ImportSheetResp struct {
	Ticket string `json:"ticket,omitempty"` // 与导入文件一一对应的凭证，用于查询文件导入的进度，详见[查询导入结果的接口](https://open.feishu.cn/document/ukTMukTMukTM/uETO2YjLxkjN24SM5YjN)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetMeta
//
// 该接口用于根据 spreadsheetToken 获取表格元数据。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN
func (r *DriveService) GetSheetMeta(ctx context.Context, request *GetSheetMetaReq, options ...MethodOptionFunc) (*GetSheetMetaResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetMeta != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetMeta mock enable")
		return r.cli.mock.mockDriveGetSheetMeta(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetMeta",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/metainfo",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetMeta mock DriveGetSheetMeta method
func (r *Mock) MockDriveGetSheetMeta(f func(ctx context.Context, request *GetSheetMetaReq, options ...MethodOptionFunc) (*GetSheetMetaResp, *Response, error)) {
	r.mockDriveGetSheetMeta = f
}

// UnMockDriveGetSheetMeta un-mock DriveGetSheetMeta method
func (r *Mock) UnMockDriveGetSheetMeta() {
	r.mockDriveGetSheetMeta = nil
}

// GetSheetMetaReq ...
type GetSheetMetaReq struct {
	ExtFields        *string `query:"extFields" json:"-"`       // 额外返回的字段，extFields=protectedRange时返回保护行列信息
	UserIDType       *IDType `query:"user_id_type" json:"-"`    // 返回的用户id类型，可选open_id,union_id
	SpreadSheetToken string  `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token；获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetMetaResp ...
type getSheetMetaResp struct {
	Code int64             `json:"code,omitempty"`
	Msg  string            `json:"msg,omitempty"`
	Data *GetSheetMetaResp `json:"data,omitempty"`
}

// GetSheetMetaResp ...
type GetSheetMetaResp struct {
	SpreadSheetToken string                      `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	Properties       *GetSheetMetaRespProperties `json:"properties,omitempty"`       // spreadsheet 的属性
	Sheets           []*GetSheetMetaRespSheet    `json:"sheets,omitempty"`           // spreadsheet 下的sheet列表
}

// GetSheetMetaRespProperties ...
type GetSheetMetaRespProperties struct {
	Title       string `json:"title,omitempty"`       // spreadsheet 的标题
	OwnerUser   int64  `json:"ownerUser,omitempty"`   // 所有者的 id
	OwnerUserID string `json:"ownerUserID,omitempty"` // 所有者的 id，取决于user_id_type的值，仅user_id_type不为空是返回该值
	SheetCount  int64  `json:"sheetCount,omitempty"`  // spreadsheet 下的 sheet 数
	Revision    int64  `json:"revision,omitempty"`    // 该 sheet 的版本
}

// GetSheetMetaRespSheet ...
type GetSheetMetaRespSheet struct {
	SheetID        string                               `json:"sheetId,omitempty"`        // sheet 的 id
	Title          string                               `json:"title,omitempty"`          // sheet 的标题
	Index          int64                                `json:"index,omitempty"`          // sheet 的位置
	RowCount       int64                                `json:"rowCount,omitempty"`       // sheet 的最大行数
	ColumnCount    int64                                `json:"columnCount,omitempty"`    // sheet 的最大列数
	FrozenRowCount int64                                `json:"frozenRowCount,omitempty"` // 该 sheet 的冻结行数，小于等于 sheet 的最大行数，0表示未设置冻结
	FrozenColCount int64                                `json:"frozenColCount,omitempty"` // 该 sheet 的冻结列数，小于等于 sheet 的最大列数，0表示未设置冻结
	Merges         []*GetSheetMetaRespSheetMerge        `json:"merges,omitempty"`         // 该 sheet 中合并单元格的范围
	ProtectedRange *GetSheetMetaRespSheetProtectedRange `json:"protectedRange,omitempty"` // 该 sheet 中保护范围
	BlockInfo      *GetSheetMetaRespSheetBlockInfo      `json:"blockInfo,omitempty"`      // 若含有该字段，则此工作表不为表格
}

// GetSheetMetaRespSheetMerge ...
type GetSheetMetaRespSheetMerge struct {
	StartRowIndex    int64 `json:"startRowIndex,omitempty"`    // 合并单元格范围的开始行下标，index 从 0 开始
	StartColumnIndex int64 `json:"startColumnIndex,omitempty"` // 合并单元格范围的开始列下标，index 从 0 开始
	RowCount         int64 `json:"rowCount,omitempty"`         // 合并单元格范围的行数量
	ColumnCount      int64 `json:"columnCount,omitempty"`      // 合并单元格范围的列数量
}

// GetSheetMetaRespSheetProtectedRange ...
type GetSheetMetaRespSheetProtectedRange struct {
	Dimension *GetSheetMetaRespSheetProtectedRangeDimension `json:"dimension,omitempty"` // 保护行列的信息，如果为保护工作表，则该字段为空
	ProtectID string                                        `json:"protectId,omitempty"` // 保护范围ID
	LockInfo  string                                        `json:"lockInfo,omitempty"`  // 保护说明
	SheetID   string                                        `json:"sheetId,omitempty"`   // 保护工作表 ID
}

// GetSheetMetaRespSheetProtectedRangeDimension ...
type GetSheetMetaRespSheetProtectedRangeDimension struct {
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列的起始位置，位置从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列的结束位置，位置从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 若为ROWS，则为保护行；为COLUMNS，则为保护列
	SheetID        string `json:"sheetId,omitempty"`        // 保护范围所在工作表 ID
}

// GetSheetMetaRespSheetBlockInfo ...
type GetSheetMetaRespSheetBlockInfo struct {
	BlockToken string `json:"blockToken,omitempty"` // block的token
	BlockType  string `json:"blockType,omitempty"`  // block的类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetProperty
//
// 该接口用于根据 spreadsheetToken 更新表格属性，如更新表格标题。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucTMzUjL3EzM14yNxMTN
func (r *DriveService) UpdateSheetProperty(ctx context.Context, request *UpdateSheetPropertyReq, options ...MethodOptionFunc) (*UpdateSheetPropertyResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetProperty != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetProperty mock enable")
		return r.cli.mock.mockDriveUpdateSheetProperty(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetProperty",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/properties",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetPropertyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetProperty mock DriveUpdateSheetProperty method
func (r *Mock) MockDriveUpdateSheetProperty(f func(ctx context.Context, request *UpdateSheetPropertyReq, options ...MethodOptionFunc) (*UpdateSheetPropertyResp, *Response, error)) {
	r.mockDriveUpdateSheetProperty = f
}

// UnMockDriveUpdateSheetProperty un-mock DriveUpdateSheetProperty method
func (r *Mock) UnMockDriveUpdateSheetProperty() {
	r.mockDriveUpdateSheetProperty = nil
}

// UpdateSheetPropertyReq ...
type UpdateSheetPropertyReq struct {
	SpreadSheetToken string                            `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Properties       *UpdateSheetPropertyReqProperties `json:"properties,omitempty"`      // spreadsheet 的属性
}

// UpdateSheetPropertyReqProperties ...
type UpdateSheetPropertyReqProperties struct {
	Title string `json:"title,omitempty"` // spreadsheet 的标题，最大长度100个字符
}

// updateSheetPropertyResp ...
type updateSheetPropertyResp struct {
	Code int64                    `json:"code,omitempty"`
	Msg  string                   `json:"msg,omitempty"`
	Data *UpdateSheetPropertyResp `json:"data,omitempty"`
}

// UpdateSheetPropertyResp ...
type UpdateSheetPropertyResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	Title            string `json:"title,omitempty"`            // spreadsheet 的标题
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateSheetProtectedDimension
//
// 该接口用于根据 spreadsheetToken 和维度信息增加多个保护范围；单次操作不超过5000行或列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDNzUjL4QzM14CO0MTN
func (r *DriveService) CreateSheetProtectedDimension(ctx context.Context, request *CreateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*CreateSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveCreateSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveCreateSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateSheetProtectedDimension",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_dimension",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateSheetProtectedDimension mock DriveCreateSheetProtectedDimension method
func (r *Mock) MockDriveCreateSheetProtectedDimension(f func(ctx context.Context, request *CreateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*CreateSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveCreateSheetProtectedDimension = f
}

// UnMockDriveCreateSheetProtectedDimension un-mock DriveCreateSheetProtectedDimension method
func (r *Mock) UnMockDriveCreateSheetProtectedDimension() {
	r.mockDriveCreateSheetProtectedDimension = nil
}

// CreateSheetProtectedDimensionReq ...
type CreateSheetProtectedDimensionReq struct {
	UserIDType            *IDType                                                  `query:"user_id_type" json:"-"`          // 请求的用户id类型，可选open_id,union_id
	SpreadSheetToken      string                                                   `path:"spreadsheetToken" json:"-"`       // spreadsheet 的 token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	AddProtectedDimension []*CreateSheetProtectedDimensionReqAddProtectedDimension `json:"addProtectedDimension,omitempty"` // 需要增加保护范围的维度信息，可多个范围
}

// CreateSheetProtectedDimensionReqAddProtectedDimension ...
type CreateSheetProtectedDimensionReqAddProtectedDimension struct {
	Dimension *CreateSheetProtectedDimensionReqAddProtectedDimensionDimension `json:"dimension,omitempty"` // 需要保护行列的维度信息
	Editors   []int64                                                         `json:"editors,omitempty"`   // 允许编辑保护范围的用户的 userID
	Users     []string                                                        `json:"users,omitempty"`     // 允许编辑保护范围的用户的id，id类型取决于user_id_type
	LockInfo  *string                                                         `json:"lockInfo,omitempty"`  // 保护范围的信息
}

// CreateSheetProtectedDimensionReqAddProtectedDimensionDimension ...
type CreateSheetProtectedDimensionReqAddProtectedDimensionDimension struct {
	SheetID        string  `json:"sheetId,omitempty"`        // sheetId
	MajorDimension *string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64   `json:"startIndex"`               // 开始的位置
	EndIndex       int64   `json:"endIndex,omitempty"`       // 结束的位置
}

// createSheetProtectedDimensionResp ...
type createSheetProtectedDimensionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *CreateSheetProtectedDimensionResp `json:"data,omitempty"`
}

// CreateSheetProtectedDimensionResp ...
type CreateSheetProtectedDimensionResp struct {
	AddProtectedDimension []*CreateSheetProtectedDimensionRespAddProtectedDimension `json:"addProtectedDimension,omitempty"` // 需要增加保护范围的维度信息，可多个范围
}

// CreateSheetProtectedDimensionRespAddProtectedDimension ...
type CreateSheetProtectedDimensionRespAddProtectedDimension struct {
	Dimension *CreateSheetProtectedDimensionRespAddProtectedDimensionDimension `json:"dimension,omitempty"` // 需要保护行列的维度信息
	Editors   []int64                                                          `json:"editors,omitempty"`   // 允许编辑保护范围的用户的 userID
	Users     []string                                                         `json:"users,omitempty"`     // 允许编辑保护范围的用户的id，id类型取决于user_id_type
	LockInfo  string                                                           `json:"lockInfo,omitempty"`  // 保护范围的信息
	ProtectID string                                                           `json:"protectId,omitempty"` // 保护区域的唯一 uid ，可用做后续解除保护
}

// CreateSheetProtectedDimensionRespAddProtectedDimensionDimension ...
type CreateSheetProtectedDimensionRespAddProtectedDimensionDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheetId
	MajorDimension string `json:"majorDimension,omitempty"` // 默认 ROWS ，可选 ROWS、COLUMNS
	StartIndex     int64  `json:"startIndex"`               // 开始的位置
	EndIndex       int64  `json:"endIndex,omitempty"`       // 结束的位置
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteSheetProtectedDimension
//
// 该接口用于根据保护范围ID删除保护范围，最多支持同时删除10个ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTM5YjL2ETO24iNxkjN
func (r *DriveService) DeleteSheetProtectedDimension(ctx context.Context, request *DeleteSheetProtectedDimensionReq, options ...MethodOptionFunc) (*DeleteSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveDeleteSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteSheetProtectedDimension",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_del",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteSheetProtectedDimension mock DriveDeleteSheetProtectedDimension method
func (r *Mock) MockDriveDeleteSheetProtectedDimension(f func(ctx context.Context, request *DeleteSheetProtectedDimensionReq, options ...MethodOptionFunc) (*DeleteSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveDeleteSheetProtectedDimension = f
}

// UnMockDriveDeleteSheetProtectedDimension un-mock DriveDeleteSheetProtectedDimension method
func (r *Mock) UnMockDriveDeleteSheetProtectedDimension() {
	r.mockDriveDeleteSheetProtectedDimension = nil
}

// DeleteSheetProtectedDimensionReq ...
type DeleteSheetProtectedDimensionReq struct {
	SpreadSheetToken string   `path:"spreadsheetToken" json:"-"` // sheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ProtectIDs       []string `json:"protectIds,omitempty"`      // 需要删除的保护范围ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN)接口获取
}

// deleteSheetProtectedDimensionResp ...
type deleteSheetProtectedDimensionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *DeleteSheetProtectedDimensionResp `json:"data,omitempty"`
}

// DeleteSheetProtectedDimensionResp ...
type DeleteSheetProtectedDimensionResp struct {
	DelProtectIDs []string `json:"delProtectIds,omitempty"` // 成功删除的保护范围ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetProtectedDimension
//
// 该接口用于根据保护范围ID查询详细的保护行列信息，最多支持同时查询5个ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTM5YjL0ETO24CNxkjN
func (r *DriveService) GetSheetProtectedDimension(ctx context.Context, request *GetSheetProtectedDimensionReq, options ...MethodOptionFunc) (*GetSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveGetSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetProtectedDimension",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetProtectedDimension mock DriveGetSheetProtectedDimension method
func (r *Mock) MockDriveGetSheetProtectedDimension(f func(ctx context.Context, request *GetSheetProtectedDimensionReq, options ...MethodOptionFunc) (*GetSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveGetSheetProtectedDimension = f
}

// UnMockDriveGetSheetProtectedDimension un-mock DriveGetSheetProtectedDimension method
func (r *Mock) UnMockDriveGetSheetProtectedDimension() {
	r.mockDriveGetSheetProtectedDimension = nil
}

// GetSheetProtectedDimensionReq ...
type GetSheetProtectedDimensionReq struct {
	ProtectIDs       []string `query:"protectIds" join_sep:"," json:"-"` // 保护范围ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN)接口获取，多个ID用逗号分隔，如xxxID1,xxxID2
	MemberType       *string  `query:"memberType" json:"-"`              // 返回的用户类型，可选userId,openId,unionId,默认使用userId
	SpreadSheetToken string   `path:"spreadsheetToken" json:"-"`         // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetProtectedDimensionResp ...
type getSheetProtectedDimensionResp struct {
	Code int64                           `json:"code,omitempty"`
	Msg  string                          `json:"msg,omitempty"`
	Data *GetSheetProtectedDimensionResp `json:"data,omitempty"`
}

// GetSheetProtectedDimensionResp ...
type GetSheetProtectedDimensionResp struct {
	ProtectedRange *GetSheetProtectedDimensionRespProtectedRange `json:"protectedRange,omitempty"` // 保护范围
}

// GetSheetProtectedDimensionRespProtectedRange ...
type GetSheetProtectedDimensionRespProtectedRange struct {
	ProtectID string                                                 `json:"protectId,omitempty"` // 保护范围ID
	Dimension *GetSheetProtectedDimensionRespProtectedRangeDimension `json:"dimension,omitempty"` // 保护范围，如果为空，则为保护子表
	SheetID   string                                                 `json:"sheetId,omitempty"`   // sheet的id
	LockInfo  string                                                 `json:"lockInfo,omitempty"`  // 保护说明
	Editors   *GetSheetProtectedDimensionRespProtectedRangeEditors   `json:"editors,omitempty"`   // 用户信息
}

// GetSheetProtectedDimensionRespProtectedRangeDimension ...
type GetSheetProtectedDimensionRespProtectedRangeDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheet 的 id
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列起始下标，下标从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列终止下标，下标从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 保护范围的维度，COLUMNS为保护列，ROWS为保护行
}

// GetSheetProtectedDimensionRespProtectedRangeEditors ...
type GetSheetProtectedDimensionRespProtectedRangeEditors struct {
	Users []*GetSheetProtectedDimensionRespProtectedRangeEditorsUser `json:"users,omitempty"` // 用户信息列表
}

// GetSheetProtectedDimensionRespProtectedRangeEditorsUser ...
type GetSheetProtectedDimensionRespProtectedRangeEditorsUser struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型
	MemberID   string `json:"memberId,omitempty"`   // 用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateSheetProtectedDimension
//
// 该接口用于根据保护范围ID修改保护范围，单次最多支持同时修改10个ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTM5YjL1ETO24SNxkjN
func (r *DriveService) UpdateSheetProtectedDimension(ctx context.Context, request *UpdateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*UpdateSheetProtectedDimensionResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateSheetProtectedDimension != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateSheetProtectedDimension mock enable")
		return r.cli.mock.mockDriveUpdateSheetProtectedDimension(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateSheetProtectedDimension",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateSheetProtectedDimensionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateSheetProtectedDimension mock DriveUpdateSheetProtectedDimension method
func (r *Mock) MockDriveUpdateSheetProtectedDimension(f func(ctx context.Context, request *UpdateSheetProtectedDimensionReq, options ...MethodOptionFunc) (*UpdateSheetProtectedDimensionResp, *Response, error)) {
	r.mockDriveUpdateSheetProtectedDimension = f
}

// UnMockDriveUpdateSheetProtectedDimension un-mock DriveUpdateSheetProtectedDimension method
func (r *Mock) UnMockDriveUpdateSheetProtectedDimension() {
	r.mockDriveUpdateSheetProtectedDimension = nil
}

// UpdateSheetProtectedDimensionReq ...
type UpdateSheetProtectedDimensionReq struct {
	SpreadSheetToken string                                    `path:"spreadsheetToken" json:"-"` // sheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Requests         *UpdateSheetProtectedDimensionReqRequests `json:"requests,omitempty"`        // 请求
}

// UpdateSheetProtectedDimensionReqRequests ...
type UpdateSheetProtectedDimensionReqRequests struct {
	ProtectID string                                             `json:"protectId,omitempty"` // 保护范围ID，可以通过[获取表格元数据](https://open.feishu.cn/document/ukTMukTMukTM/uETMzUjLxEzM14SMxMTN) 接口获取
	Dimension *UpdateSheetProtectedDimensionReqRequestsDimension `json:"dimension,omitempty"` // 行列保护信息
	Editors   *UpdateSheetProtectedDimensionReqRequestsEditors   `json:"editors,omitempty"`   // 可编辑保护范围的用户
	LockInfo  *string                                            `json:"lockInfo,omitempty"`  // 保护说明
}

// UpdateSheetProtectedDimensionReqRequestsDimension ...
type UpdateSheetProtectedDimensionReqRequestsDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheetId
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列起始下标，下标从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列终止下标，下标从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 保护范围ID对应的保护范围的维度，COLUMNS为保护列，ROWS为保护行
}

// UpdateSheetProtectedDimensionReqRequestsEditors ...
type UpdateSheetProtectedDimensionReqRequestsEditors struct {
	AddEditors *UpdateSheetProtectedDimensionReqRequestsEditorsAddEditors `json:"addEditors,omitempty"` // 需要增加的用户的列表，用户需要有文档的编辑权限
	DelEditors *UpdateSheetProtectedDimensionReqRequestsEditorsDelEditors `json:"delEditors,omitempty"` // 需要删除的用户的列表
}

// UpdateSheetProtectedDimensionReqRequestsEditorsAddEditors ...
type UpdateSheetProtectedDimensionReqRequestsEditorsAddEditors struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型，支持userId,openId,unionId
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// UpdateSheetProtectedDimensionReqRequestsEditorsDelEditors ...
type UpdateSheetProtectedDimensionReqRequestsEditorsDelEditors struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型，支持userId,openId,unionId
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// updateSheetProtectedDimensionResp ...
type updateSheetProtectedDimensionResp struct {
	Code int64                              `json:"code,omitempty"`
	Msg  string                             `json:"msg,omitempty"`
	Data *UpdateSheetProtectedDimensionResp `json:"data,omitempty"`
}

// UpdateSheetProtectedDimensionResp ...
type UpdateSheetProtectedDimensionResp struct {
	Replies []*UpdateSheetProtectedDimensionRespReply `json:"replies,omitempty"` // 响应
}

// UpdateSheetProtectedDimensionRespReply ...
type UpdateSheetProtectedDimensionRespReply struct {
	SheetID   string                                           `json:"sheetId,omitempty"`   // sheet的id
	Dimension *UpdateSheetProtectedDimensionRespReplyDimension `json:"dimension,omitempty"` // 成功修改的保护行列信息
	Editors   *UpdateSheetProtectedDimensionRespReplyEditors   `json:"editors,omitempty"`   // 可编辑保护范围的用户
	LockInfo  string                                           `json:"lockInfo,omitempty"`  // 成功修改的保护说明
}

// UpdateSheetProtectedDimensionRespReplyDimension ...
type UpdateSheetProtectedDimensionRespReplyDimension struct {
	SheetID        string `json:"sheetId,omitempty"`        // sheetId
	StartIndex     int64  `json:"startIndex,omitempty"`     // 保护行列起始下标，下标从1开始
	EndIndex       int64  `json:"endIndex,omitempty"`       // 保护行列终止下标，下标从1开始
	MajorDimension string `json:"majorDimension,omitempty"` // 保护范围的维度
}

// UpdateSheetProtectedDimensionRespReplyEditors ...
type UpdateSheetProtectedDimensionRespReplyEditors struct {
	AddEditors []*UpdateSheetProtectedDimensionRespReplyEditorsAddEditor `json:"addEditors,omitempty"` // 成功增加的用户的列表
	DelEditors []*UpdateSheetProtectedDimensionRespReplyEditorsDelEditor `json:"delEditors,omitempty"` // 成功删除的用户的列表
}

// UpdateSheetProtectedDimensionRespReplyEditorsAddEditor ...
type UpdateSheetProtectedDimensionRespReplyEditorsAddEditor struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// UpdateSheetProtectedDimensionRespReplyEditorsDelEditor ...
type UpdateSheetProtectedDimensionRespReplyEditorsDelEditor struct {
	MemberType string `json:"memberType,omitempty"` // 用户类型
	MemberID   string `json:"memberId,omitempty"`   // 用户类型对应的用户ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ReplaceSheet 按照指定的条件查找子表的某个范围内的数据符合条件的单元格并替换值，返回替换成功的单元格位置。一次请求最多允许替换5000个单元格，如果超过请将range缩小范围再操作。请求体中的 range、find、replaccement 字段必填。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/replace
func (r *DriveService) ReplaceSheet(ctx context.Context, request *ReplaceSheetReq, options ...MethodOptionFunc) (*ReplaceSheetResp, *Response, error) {
	if r.cli.mock.mockDriveReplaceSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#ReplaceSheet mock enable")
		return r.cli.mock.mockDriveReplaceSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "ReplaceSheet",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id/replace",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(replaceSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveReplaceSheet mock DriveReplaceSheet method
func (r *Mock) MockDriveReplaceSheet(f func(ctx context.Context, request *ReplaceSheetReq, options ...MethodOptionFunc) (*ReplaceSheetResp, *Response, error)) {
	r.mockDriveReplaceSheet = f
}

// UnMockDriveReplaceSheet un-mock DriveReplaceSheet method
func (r *Mock) UnMockDriveReplaceSheet() {
	r.mockDriveReplaceSheet = nil
}

// ReplaceSheetReq ...
type ReplaceSheetReq struct {
	SpreadSheetToken string                        `path:"spreadsheet_token" json:"-"` // Spreadsheet token, 示例值："shtcnmBA*****yGehy8"
	SheetID          string                        `path:"sheet_id" json:"-"`          // Sheet id, 示例值："0b**12"
	FindCondition    *ReplaceSheetReqFindCondition `json:"find_condition,omitempty"`   // 查找条件
	Find             string                        `json:"find,omitempty"`             // 查找的字符串, 示例值："hello"
	Replacement      string                        `json:"replacement,omitempty"`      // 替换的字符串, 示例值："world"
}

// ReplaceSheetReqFindCondition ...
type ReplaceSheetReqFindCondition struct {
	Range           string `json:"range,omitempty"`             // 查找范围, 示例值："0b**12!A1:H10"
	MatchCase       *bool  `json:"match_case,omitempty"`        // 是否忽略大小写, 示例值：true
	MatchEntireCell *bool  `json:"match_entire_cell,omitempty"` // 是否匹配整个单元格, 示例值：false
	SearchByRegex   *bool  `json:"search_by_regex,omitempty"`   // 是否为正则匹配, 示例值：false
	IncludeFormulas *bool  `json:"include_formulas,omitempty"`  // 是否搜索公式内容, 示例值：false
}

// replaceSheetResp ...
type replaceSheetResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *ReplaceSheetResp `json:"data,omitempty"`
}

// ReplaceSheetResp ...
type ReplaceSheetResp struct {
	ReplaceResult *ReplaceSheetRespReplaceResult `json:"replace_result,omitempty"` // 符合查找条件并替换的单元格信息
}

// ReplaceSheetRespReplaceResult ...
type ReplaceSheetRespReplaceResult struct {
	MatchedCells        []string `json:"matched_cells,omitempty"`         // 符合查找条件的单元格数组，不包含公式，例如["A1", "A2"...]
	MatchedFormulaCells []string `json:"matched_formula_cells,omitempty"` // 符合查找条件的含有公式的单元格数组，例如["B3", "H7"...]
	RowsCount           int64    `json:"rows_count,omitempty"`            // 符合查找条件的总行数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchSetSheetStyle
//
// 该接口用于根据 spreadsheetToken 、range和样式信息 批量更新单元格样式；单次写入不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAzMzUjLwMzM14CMzMTN
func (r *DriveService) BatchSetSheetStyle(ctx context.Context, request *BatchSetSheetStyleReq, options ...MethodOptionFunc) (*BatchSetSheetStyleResp, *Response, error) {
	if r.cli.mock.mockDriveBatchSetSheetStyle != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchSetSheetStyle mock enable")
		return r.cli.mock.mockDriveBatchSetSheetStyle(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchSetSheetStyle",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/styles_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchSetSheetStyleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchSetSheetStyle mock DriveBatchSetSheetStyle method
func (r *Mock) MockDriveBatchSetSheetStyle(f func(ctx context.Context, request *BatchSetSheetStyleReq, options ...MethodOptionFunc) (*BatchSetSheetStyleResp, *Response, error)) {
	r.mockDriveBatchSetSheetStyle = f
}

// UnMockDriveBatchSetSheetStyle un-mock DriveBatchSetSheetStyle method
func (r *Mock) UnMockDriveBatchSetSheetStyle() {
	r.mockDriveBatchSetSheetStyle = nil
}

// BatchSetSheetStyleReq ...
type BatchSetSheetStyleReq struct {
	SpreadSheetToken string                       `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Data             []*BatchSetSheetStyleReqData `json:"data,omitempty"`            // 请求数据
}

// BatchSetSheetStyleReqData ...
type BatchSetSheetStyleReqData struct {
	Ranges []string                        `json:"ranges,omitempty"` // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Style  *BatchSetSheetStyleReqDataStyle `json:"style,omitempty"`  // 需要更新的样式
}

// BatchSetSheetStyleReqDataStyle ...
type BatchSetSheetStyleReqDataStyle struct {
	Font           *BatchSetSheetStyleReqDataStyleFont `json:"font,omitempty"`           // 字体相关样式
	TextDecoration *int64                              `json:"textDecoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	Formatter      *string                             `json:"formatter,omitempty"`      // 数字格式，详见附录 [sheet支持数字格式类型](https://open.feishu.cn/document/ukTMukTMukTM/uMjM2UjLzIjN14yMyYTN)
	HAlign         *int64                              `json:"hAlign,omitempty"`         // 水平对齐，0 左对齐，1 中对齐，2 右对齐
	VAlign         *int64                              `json:"vAlign,omitempty"`         // 垂直对齐, 0 上对齐，1 中对齐, 2 下对齐
	ForeColor      *string                             `json:"foreColor,omitempty"`      // 字体颜色
	BackColor      *string                             `json:"backColor,omitempty"`      // 背景颜色
	BorderType     *string                             `json:"borderType,omitempty"`     // 边框类型，可选 "FULL_BORDER"，"OUTER_BORDER"，"INNER_BORDER"，"NO_BORDER"，"LEFT_BORDER"，"RIGHT_BORDER"，"TOP_BORDER"，"BOTTOM_BORDER"
	BorderColor    *string                             `json:"borderColor,omitempty"`    // 边框颜色
	Clean          *bool                               `json:"clean,omitempty"`          // 是否清除所有格式,默认 false
}

// BatchSetSheetStyleReqDataStyleFont ...
type BatchSetSheetStyleReqDataStyleFont struct {
	Bold     *bool   `json:"bold,omitempty"`     // 是否加粗
	Italic   *bool   `json:"italic,omitempty"`   // 是否斜体
	FontSize *string `json:"fontSize,omitempty"` // 字体大小 字号大小为9~36 行距固定为1.5，如:10pt/1.5
}

// batchSetSheetStyleResp ...
type batchSetSheetStyleResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *BatchSetSheetStyleResp `json:"data,omitempty"`
}

// BatchSetSheetStyleResp ...
type BatchSetSheetStyleResp struct {
	SpreadSheetToken    string                            `json:"spreadsheetToken,omitempty"`    // spreadsheet 的 token
	TotalUpdatedRows    int64                             `json:"totalUpdatedRows,omitempty"`    // 设置样式的总行数
	TotalUpdatedColumns int64                             `json:"totalUpdatedColumns,omitempty"` // 设置样式的总列数
	TotalUpdatedCells   int64                             `json:"totalUpdatedCells,omitempty"`   // 设置样式的单元格总数
	Revision            int64                             `json:"revision,omitempty"`            // sheet 的版本号
	Responses           []*BatchSetSheetStyleRespResponse `json:"responses,omitempty"`           // 各个范围的设置单元格样式的范围、行列数等
}

// BatchSetSheetStyleRespResponse ...
type BatchSetSheetStyleRespResponse struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 设置样式的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 设置样式的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 设置样式的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 设置样式的单元格数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetSheetStyle
//
// 该接口用于根据 spreadsheetToken 、range 和样式信息更新单元格样式；单次写入不超过5000行，100列。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukjMzUjL5IzM14SOyMTN
func (r *DriveService) SetSheetStyle(ctx context.Context, request *SetSheetStyleReq, options ...MethodOptionFunc) (*SetSheetStyleResp, *Response, error) {
	if r.cli.mock.mockDriveSetSheetStyle != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SetSheetStyle mock enable")
		return r.cli.mock.mockDriveSetSheetStyle(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "SetSheetStyle",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/style",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setSheetStyleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSetSheetStyle mock DriveSetSheetStyle method
func (r *Mock) MockDriveSetSheetStyle(f func(ctx context.Context, request *SetSheetStyleReq, options ...MethodOptionFunc) (*SetSheetStyleResp, *Response, error)) {
	r.mockDriveSetSheetStyle = f
}

// UnMockDriveSetSheetStyle un-mock DriveSetSheetStyle method
func (r *Mock) UnMockDriveSetSheetStyle() {
	r.mockDriveSetSheetStyle = nil
}

// SetSheetStyleReq ...
type SetSheetStyleReq struct {
	SpreadSheetToken string                       `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	AppendStyle      *SetSheetStyleReqAppendStyle `json:"appendStyle,omitempty"`     // 设置单元格样式
}

// SetSheetStyleReqAppendStyle ...
type SetSheetStyleReqAppendStyle struct {
	Range string                            `json:"range,omitempty"` // 查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Style *SetSheetStyleReqAppendStyleStyle `json:"style,omitempty"` // 需要更新的样式
}

// SetSheetStyleReqAppendStyleStyle ...
type SetSheetStyleReqAppendStyleStyle struct {
	Font           *SetSheetStyleReqAppendStyleStyleFont `json:"font,omitempty"`           // 字体相关样式
	TextDecoration *int64                                `json:"textDecoration,omitempty"` // 文本装饰 ，0 默认，1 下划线，2 删除线 ，3 下划线和删除线
	Formatter      *string                               `json:"formatter,omitempty"`      // 数字格式，详见附录 [sheet支持数字格式类型](https://open.feishu.cn/document/ukTMukTMukTM/uMjM2UjLzIjN14yMyYTN)
	HAlign         *int64                                `json:"hAlign,omitempty"`         // 水平对齐，0 左对齐，1 中对齐，2 右对齐
	VAlign         *int64                                `json:"vAlign,omitempty"`         // 垂直对齐, 0 上对齐，1 中对齐, 2 下对齐
	ForeColor      *string                               `json:"foreColor,omitempty"`      // 字体颜色
	BackColor      *string                               `json:"backColor,omitempty"`      // 背景颜色
	BorderType     *string                               `json:"borderType,omitempty"`     // 边框类型，可选 "FULL_BORDER"，"OUTER_BORDER"，"INNER_BORDER"，"NO_BORDER"，"LEFT_BORDER"，"RIGHT_BORDER"，"TOP_BORDER"，"BOTTOM_BORDER"
	BorderColor    *string                               `json:"borderColor,omitempty"`    // 边框颜色
	Clean          *bool                                 `json:"clean,omitempty"`          // 是否清除所有格式,默认 false
}

// SetSheetStyleReqAppendStyleStyleFont ...
type SetSheetStyleReqAppendStyleStyleFont struct {
	Bold     *bool   `json:"bold,omitempty"`     // 是否加粗
	Italic   *bool   `json:"italic,omitempty"`   // 是否斜体
	FontSize *string `json:"fontSize,omitempty"` // 字体大小 字号大小为9~36 行距固定为1.5，如:10pt/1.5
	Clean    *bool   `json:"clean,omitempty"`    // 清除 font 格式,默认 false
}

// setSheetStyleResp ...
type setSheetStyleResp struct {
	Code int64              `json:"code,omitempty"`
	Msg  string             `json:"msg,omitempty"`
	Data *SetSheetStyleResp `json:"data,omitempty"`
}

// SetSheetStyleResp ...
type SetSheetStyleResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 设置样式的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 设置样式的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 设置样式的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 设置样式的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AppendSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 遇到空行则进行覆盖追加或新增行追加数据。 空行：默认该行第一个格子是空，则认为是空行；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjMzUjLzIzM14yMyMTN
func (r *DriveService) AppendSheetValue(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveAppendSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#AppendSheetValue mock enable")
		return r.cli.mock.mockDriveAppendSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "AppendSheetValue",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(appendSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveAppendSheetValue mock DriveAppendSheetValue method
func (r *Mock) MockDriveAppendSheetValue(f func(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error)) {
	r.mockDriveAppendSheetValue = f
}

// UnMockDriveAppendSheetValue un-mock DriveAppendSheetValue method
func (r *Mock) UnMockDriveAppendSheetValue() {
	r.mockDriveAppendSheetValue = nil
}

// AppendSheetValueReq ...
type AppendSheetValueReq struct {
	InsertDataOption *string                        `query:"insertDataOption" json:"-"` // 遇到空行追加，默认 OVERWRITE，若空行的数量小于追加数据的行数，则会覆盖已有数据；可选 INSERT_ROWS ，会在插入足够数量的行后再进行数据追加
	SpreadSheetToken string                         `path:"spreadsheetToken" json:"-"`  // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *AppendSheetValueReqValueRange `json:"valueRange,omitempty"`       // 值与范围
}

// AppendSheetValueReqValueRange ...
type AppendSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // ⁣查询范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。range所表示的范围需要大于等于values占用的范围。
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// appendSheetValueResp ...
type appendSheetValueResp struct {
	Code int64                 `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *AppendSheetValueResp `json:"data,omitempty"`
}

// AppendSheetValueResp ...
type AppendSheetValueResp struct {
	SpreadSheetToken string                       `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	TableRange       string                       `json:"tableRange,omitempty"`       // 写入的范围
	Revision         int64                        `json:"revision,omitempty"`         // sheet 的版本号
	Updates          *AppendSheetValueRespUpdates `json:"updates,omitempty"`          // 插入数据的范围、行列数等
}

// AppendSheetValueRespUpdates ...
type AppendSheetValueRespUpdates struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 ranges 读取表格多个范围的值，返回数据限制为10M。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTMzUjL5EzM14SOxMTN
func (r *DriveService) BatchGetSheetValue(ctx context.Context, request *BatchGetSheetValueReq, options ...MethodOptionFunc) (*BatchGetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveBatchGetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchGetSheetValue mock enable")
		return r.cli.mock.mockDriveBatchGetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchGetSheetValue",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchGetSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchGetSheetValue mock DriveBatchGetSheetValue method
func (r *Mock) MockDriveBatchGetSheetValue(f func(ctx context.Context, request *BatchGetSheetValueReq, options ...MethodOptionFunc) (*BatchGetSheetValueResp, *Response, error)) {
	r.mockDriveBatchGetSheetValue = f
}

// UnMockDriveBatchGetSheetValue un-mock DriveBatchGetSheetValue method
func (r *Mock) UnMockDriveBatchGetSheetValue() {
	r.mockDriveBatchGetSheetValue = nil
}

// BatchGetSheetValueReq ...
type BatchGetSheetValueReq struct {
	Ranges               []string `query:"ranges" join_sep:"," json:"-"`  // 多个查询范围 如 url?ranges=range1,range2 ，⁣其中 range 包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRenderOption    *string  `query:"valueRenderOption" json:"-"`    // valueRenderOption=ToString 可返回纯文本的值(数值类型除外)；valueRenderOption=FormattedValue 计算并格式化单元格；valueRenderOption=Formula单元格中含有公式时返回公式本身；valueRenderOption=UnformattedValue计算但不对单元格进行格式化
	DateTimeRenderOption *string  `query:"dateTimeRenderOption" json:"-"` // dateTimeRenderOption=FormattedString 计算并将时间日期按照其格式进行格式化，但不会对数字进行格式化，返回格式化后的字符串。详见[电子表格常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/guide/sheets-faq)
	UserIDType           *IDType  `query:"user_id_type" json:"-"`         // 返回的用户id类型，可选open_id,union_id
	SpreadSheetToken     string   `path:"spreadsheetToken" json:"-"`      // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// batchGetSheetValueResp ...
type batchGetSheetValueResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *BatchGetSheetValueResp `json:"data,omitempty"`
}

// BatchGetSheetValueResp ...
type BatchGetSheetValueResp struct {
	Revision         int64                               `json:"revision,omitempty"`         // sheet 的版本号
	SpreadSheetToken string                              `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	TotalCells       int64                               `json:"totalCells,omitempty"`       // 读取的单元格总数
	ValueRanges      []*BatchGetSheetValueRespValueRange `json:"valueRanges,omitempty"`      // 值与范围
}

// BatchGetSheetValueRespValueRange ...
type BatchGetSheetValueRespValueRange struct {
	MajorDimension string           `json:"majorDimension,omitempty"` // 插入维度
	Range          string           `json:"range,omitempty"`          // 返回数据的范围，为空时表示查询范围没有数据
	Revision       int64            `json:"revision,omitempty"`       // sheet 的版本号
	Values         [][]SheetContent `json:"values,omitempty"`         // 查询得到的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchSetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 向多个范围写入数据，若范围内有数据，将被更新覆盖；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEjMzUjLxIzM14SMyMTN
func (r *DriveService) BatchSetSheetValue(ctx context.Context, request *BatchSetSheetValueReq, options ...MethodOptionFunc) (*BatchSetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveBatchSetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#BatchSetSheetValue mock enable")
		return r.cli.mock.mockDriveBatchSetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "BatchSetSheetValue",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(batchSetSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveBatchSetSheetValue mock DriveBatchSetSheetValue method
func (r *Mock) MockDriveBatchSetSheetValue(f func(ctx context.Context, request *BatchSetSheetValueReq, options ...MethodOptionFunc) (*BatchSetSheetValueResp, *Response, error)) {
	r.mockDriveBatchSetSheetValue = f
}

// UnMockDriveBatchSetSheetValue un-mock DriveBatchSetSheetValue method
func (r *Mock) UnMockDriveBatchSetSheetValue() {
	r.mockDriveBatchSetSheetValue = nil
}

// BatchSetSheetValueReq ...
type BatchSetSheetValueReq struct {
	SpreadSheetToken string                             `path:"spreadsheetToken" json:"-"` // spreadsheet 的 token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRanges      []*BatchSetSheetValueReqValueRange `json:"valueRanges,omitempty"`     // 需要更新的多个范围
}

// BatchSetSheetValueReqValueRange ...
type BatchSetSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // 更新范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)。range所表示的范围需要大于等于values占用的范围。
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// batchSetSheetValueResp ...
type batchSetSheetValueResp struct {
	Code int64                   `json:"code,omitempty"`
	Msg  string                  `json:"msg,omitempty"`
	Data *BatchSetSheetValueResp `json:"data,omitempty"`
}

// BatchSetSheetValueResp ...
type BatchSetSheetValueResp struct {
	Responses        []*BatchSetSheetValueRespResponse `json:"responses,omitempty"`        // 响应
	Revision         int64                             `json:"revision,omitempty"`         // sheet 的版本号
	SpreadSheetToken string                            `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
}

// BatchSetSheetValueRespResponse ...
type BatchSetSheetValueRespResponse struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 读取表格单个范围的值，返回数据限制为10M。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugTMzUjL4EzM14COxMTN
func (r *DriveService) GetSheetValue(ctx context.Context, request *GetSheetValueReq, options ...MethodOptionFunc) (*GetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheetValue mock enable")
		return r.cli.mock.mockDriveGetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheetValue",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values/:range",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheetValue mock DriveGetSheetValue method
func (r *Mock) MockDriveGetSheetValue(f func(ctx context.Context, request *GetSheetValueReq, options ...MethodOptionFunc) (*GetSheetValueResp, *Response, error)) {
	r.mockDriveGetSheetValue = f
}

// UnMockDriveGetSheetValue un-mock DriveGetSheetValue method
func (r *Mock) UnMockDriveGetSheetValue() {
	r.mockDriveGetSheetValue = nil
}

// GetSheetValueReq ...
type GetSheetValueReq struct {
	ValueRenderOption    *string `query:"valueRenderOption" json:"-"`    // valueRenderOption=ToString 可返回纯文本的值(数值类型除外)；valueRenderOption=FormattedValue 计算并格式化单元格；valueRenderOption=Formula单元格中含有公式时返回公式本身；valueRenderOption=UnformattedValue计算但不对单元格进行格式化。
	DateTimeRenderOption *string `query:"dateTimeRenderOption" json:"-"` // dateTimeRenderOption=FormattedString 计算并对时间日期按照其格式进行格式化，但不会对数字进行格式化，返回格式化后的字符串。详见[电子表格常见问题](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/guide/sheets-faq)
	UserIDType           *IDType `query:"user_id_type" json:"-"`         // 返回的用户id类型，可选open_id,union_id
	SpreadSheetToken     string  `path:"spreadsheetToken" json:"-"`      // spreadsheet 的 token，详见电子表格[概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	Range                string  `path:"range" json:"-"`                 // 查询范围，包含 sheetId 与单元格范围两部分，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
}

// getSheetValueResp ...
type getSheetValueResp struct {
	Code int64              `json:"code,omitempty"`
	Msg  string             `json:"msg,omitempty"`
	Data *GetSheetValueResp `json:"data,omitempty"`
}

// GetSheetValueResp ...
type GetSheetValueResp struct {
	Revision         int64                        `json:"revision,omitempty"`         // sheet 的版本号
	SpreadSheetToken string                       `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token，详见电子表格[概述](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *GetSheetValueRespValueRange `json:"valueRange,omitempty"`       // 值与范围
}

// GetSheetValueRespValueRange ...
type GetSheetValueRespValueRange struct {
	MajorDimension string           `json:"majorDimension,omitempty"` // 插入维度
	Range          string           `json:"range,omitempty"`          // 返回数据的范围，为空时表示查询范围没有数据
	Revision       int64            `json:"revision,omitempty"`       // sheet 的版本号
	Values         [][]SheetContent `json:"values,omitempty"`         // 查询得到的值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PrependSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 向范围之前增加相应数据的行和相应的数据，相当于数组的插入操作；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjMzUjLyIzM14iMyMTN
func (r *DriveService) PrependSheetValue(ctx context.Context, request *PrependSheetValueReq, options ...MethodOptionFunc) (*PrependSheetValueResp, *Response, error) {
	if r.cli.mock.mockDrivePrependSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#PrependSheetValue mock enable")
		return r.cli.mock.mockDrivePrependSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "PrependSheetValue",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_prepend",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(prependSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDrivePrependSheetValue mock DrivePrependSheetValue method
func (r *Mock) MockDrivePrependSheetValue(f func(ctx context.Context, request *PrependSheetValueReq, options ...MethodOptionFunc) (*PrependSheetValueResp, *Response, error)) {
	r.mockDrivePrependSheetValue = f
}

// UnMockDrivePrependSheetValue un-mock DrivePrependSheetValue method
func (r *Mock) UnMockDrivePrependSheetValue() {
	r.mockDrivePrependSheetValue = nil
}

// PrependSheetValueReq ...
type PrependSheetValueReq struct {
	SpreadSheetToken string                          `path:"spreadsheetToken" json:"-"` // sheet的token，获取方式见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *PrependSheetValueReqValueRange `json:"valueRange,omitempty"`      // 值与范围
}

// PrependSheetValueReqValueRange ...
type PrependSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // ⁣插入范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见 [在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)，range所表示的范围需要大于等于values占用的范围。
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// prependSheetValueResp ...
type prependSheetValueResp struct {
	Code int64                  `json:"code,omitempty"`
	Msg  string                 `json:"msg,omitempty"`
	Data *PrependSheetValueResp `json:"data,omitempty"`
}

// PrependSheetValueResp ...
type PrependSheetValueResp struct {
	SpreadSheetToken string                        `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	TableRange       string                        `json:"tableRange,omitempty"`       // 写入的范围
	Revision         int64                         `json:"revision,omitempty"`         // sheet 的版本号
	Updates          *PrependSheetValueRespUpdates `json:"updates,omitempty"`          // 插入数据的范围、行列数等
}

// PrependSheetValueRespUpdates ...
type PrependSheetValueRespUpdates struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SetSheetValue
//
// 该接口用于根据 spreadsheetToken 和 range 向单个范围写入数据，若范围内有数据，将被更新覆盖；单次写入不超过5000行，100列，每个格子不超过5万字符。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAjMzUjLwIzM14CMyMTN
func (r *DriveService) SetSheetValue(ctx context.Context, request *SetSheetValueReq, options ...MethodOptionFunc) (*SetSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveSetSheetValue != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#SetSheetValue mock enable")
		return r.cli.mock.mockDriveSetSheetValue(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "SetSheetValue",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(setSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveSetSheetValue mock DriveSetSheetValue method
func (r *Mock) MockDriveSetSheetValue(f func(ctx context.Context, request *SetSheetValueReq, options ...MethodOptionFunc) (*SetSheetValueResp, *Response, error)) {
	r.mockDriveSetSheetValue = f
}

// UnMockDriveSetSheetValue un-mock DriveSetSheetValue method
func (r *Mock) UnMockDriveSetSheetValue() {
	r.mockDriveSetSheetValue = nil
}

// SetSheetValueReq ...
type SetSheetValueReq struct {
	SpreadSheetToken string                      `path:"spreadsheetToken" json:"-"` // spreadsheet的token，获取方式见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)
	ValueRange       *SetSheetValueReqValueRange `json:"valueRange,omitempty"`      // 值与范围
}

// SetSheetValueReqValueRange ...
type SetSheetValueReqValueRange struct {
	Range  string           `json:"range,omitempty"`  // 更新范围，包含 sheetId 与单元格范围两部分，目前支持三种索引方式，详见[在线表格开发指南](https://open.feishu.cn/document/ukTMukTMukTM/uATMzUjLwEzM14CMxMTN/overview)，range所表示的范围需要大于等于values占用的范围
	Values [][]SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、email、@人等，可详看附录[sheet 支持写入数据类型](https://open.feishu.cn/document/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

// setSheetValueResp ...
type setSheetValueResp struct {
	Code int64              `json:"code,omitempty"`
	Msg  string             `json:"msg,omitempty"`
	Data *SetSheetValueResp `json:"data,omitempty"`
}

// SetSheetValueResp ...
type SetSheetValueResp struct {
	SpreadSheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int64  `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int64  `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int64  `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int64  `json:"revision,omitempty"`         // sheet 的版本号
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MoveDocsToWiki 该接口允许添加已有云文档至知识库，并挂载在指定父页面下
//
// ### 移动操作 ###
// 移动后，文档将从“我的空间”或“共享空间”转移至“知识库”，并将从以下功能入口消失：
// - 云空间主页：最近访问、快速访问
// - 我的空间
// - 共享空间
// - 收藏
// ### 权限变更 ###
// 移动后，文档会向所有可查看“页面树”的用户显示，默认继承父页面的权限设置。
// </md-alert
// 仅支持文档所有者发起请求
// 此接口为异步接口。若移动已完成（或节点已在Wiki中），则直接返回结果（Wiki token）。若尚未完成，则返回task id。请使用[获取任务结果](https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get)接口进行查询。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move_docs_to_wiki
func (r *DriveService) MoveDocsToWiki(ctx context.Context, request *MoveDocsToWikiReq, options ...MethodOptionFunc) (*MoveDocsToWikiResp, *Response, error) {
	if r.cli.mock.mockDriveMoveDocsToWiki != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveDocsToWiki mock enable")
		return r.cli.mock.mockDriveMoveDocsToWiki(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveDocsToWiki",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes/move_docs_to_wiki",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveDocsToWikiResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveDocsToWiki mock DriveMoveDocsToWiki method
func (r *Mock) MockDriveMoveDocsToWiki(f func(ctx context.Context, request *MoveDocsToWikiReq, options ...MethodOptionFunc) (*MoveDocsToWikiResp, *Response, error)) {
	r.mockDriveMoveDocsToWiki = f
}

// UnMockDriveMoveDocsToWiki un-mock DriveMoveDocsToWiki method
func (r *Mock) UnMockDriveMoveDocsToWiki() {
	r.mockDriveMoveDocsToWiki = nil
}

// MoveDocsToWikiReq ...
type MoveDocsToWikiReq struct {
	SpaceID         string `path:"space_id" json:"-"`           // 知识库id, 示例值："1565676577122621"
	ParentWikiToken string `json:"parent_wiki_token,omitempty"` // 节点的父亲token, 示例值："wikbcOHIFxB0PJS2UTd2kF2SP6c"
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型, 示例值："doc", 可选值有: `doc`：doc（文档）, `sheet`：sheet（表格）, `bitable`：bitable（多维表格）, `mindnote`：mindnote（思维导图）
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token, 示例值："docbc6e1qBqt1O5mCBVA1QUKVEg"
}

// moveDocsToWikiResp ...
type moveDocsToWikiResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *MoveDocsToWikiResp `json:"data,omitempty"`
}

// MoveDocsToWikiResp ...
type MoveDocsToWikiResp struct {
	WikiToken string `json:"wiki_token,omitempty"` // 移动后的知识库token
	TaskID    string `json:"task_id,omitempty"`    // 任务id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateWikiNode 此接口用于在知识库里创建节点
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/create
func (r *DriveService) CreateWikiNode(ctx context.Context, request *CreateWikiNodeReq, options ...MethodOptionFunc) (*CreateWikiNodeResp, *Response, error) {
	if r.cli.mock.mockDriveCreateWikiNode != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateWikiNode mock enable")
		return r.cli.mock.mockDriveCreateWikiNode(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateWikiNode",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createWikiNodeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateWikiNode mock DriveCreateWikiNode method
func (r *Mock) MockDriveCreateWikiNode(f func(ctx context.Context, request *CreateWikiNodeReq, options ...MethodOptionFunc) (*CreateWikiNodeResp, *Response, error)) {
	r.mockDriveCreateWikiNode = f
}

// UnMockDriveCreateWikiNode un-mock DriveCreateWikiNode method
func (r *Mock) UnMockDriveCreateWikiNode() {
	r.mockDriveCreateWikiNode = nil
}

// CreateWikiNodeReq ...
type CreateWikiNodeReq struct {
	SpaceID         string  `path:"space_id" json:"-"`           // 知识空间id, 示例值："6704147935988285963"
	ObjType         string  `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 示例值："doc/sheet/mindnote", 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken *string `json:"parent_node_token,omitempty"` // 节点的父亲token, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
	NodeType        string  `json:"node_type,omitempty"`         // 节点类型, 示例值："origin/shortcut", 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken *string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
}

// createWikiNodeResp ...
type createWikiNodeResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *CreateWikiNodeResp `json:"data,omitempty"`
}

// CreateWikiNodeResp ...
type CreateWikiNodeResp struct {
	Node *CreateWikiNodeRespNode `json:"node,omitempty"` // 节点
}

// CreateWikiNodeRespNode ...
type CreateWikiNodeRespNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiNode 获取节点信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get_node
func (r *DriveService) GetWikiNode(ctx context.Context, request *GetWikiNodeReq, options ...MethodOptionFunc) (*GetWikiNodeResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiNode != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiNode mock enable")
		return r.cli.mock.mockDriveGetWikiNode(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiNode",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/get_node",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiNodeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiNode mock DriveGetWikiNode method
func (r *Mock) MockDriveGetWikiNode(f func(ctx context.Context, request *GetWikiNodeReq, options ...MethodOptionFunc) (*GetWikiNodeResp, *Response, error)) {
	r.mockDriveGetWikiNode = f
}

// UnMockDriveGetWikiNode un-mock DriveGetWikiNode method
func (r *Mock) UnMockDriveGetWikiNode() {
	r.mockDriveGetWikiNode = nil
}

// GetWikiNodeReq ...
type GetWikiNodeReq struct {
	Token string `query:"token" json:"-"` // 文档的wiki token, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
}

// getWikiNodeResp ...
type getWikiNodeResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiNodeResp `json:"data,omitempty"`
}

// GetWikiNodeResp ...
type GetWikiNodeResp struct {
	Node *GetWikiNodeRespNode `json:"node,omitempty"` // 节点信息
}

// GetWikiNodeRespNode ...
type GetWikiNodeRespNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiNodeList 此接口用于分页获取Wiki节点的子节点列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/list
func (r *DriveService) GetWikiNodeList(ctx context.Context, request *GetWikiNodeListReq, options ...MethodOptionFunc) (*GetWikiNodeListResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiNodeList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiNodeList mock enable")
		return r.cli.mock.mockDriveGetWikiNodeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiNodeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiNodeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiNodeList mock DriveGetWikiNodeList method
func (r *Mock) MockDriveGetWikiNodeList(f func(ctx context.Context, request *GetWikiNodeListReq, options ...MethodOptionFunc) (*GetWikiNodeListResp, *Response, error)) {
	r.mockDriveGetWikiNodeList = f
}

// UnMockDriveGetWikiNodeList un-mock DriveGetWikiNodeList method
func (r *Mock) UnMockDriveGetWikiNodeList() {
	r.mockDriveGetWikiNodeList = nil
}

// GetWikiNodeListReq ...
type GetWikiNodeListReq struct {
	PageSize        *int64  `query:"page_size" json:"-"`         // 分页大小, 示例值：10, 最大值：`50`
	PageToken       *string `query:"page_token" json:"-"`        // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6946843325487456878"
	ParentNodeToken *string `query:"parent_node_token" json:"-"` // 父节点token, 示例值："wikcnKQ1k3pcuo5uSK4t8VN6kVf"
	SpaceID         string  `path:"space_id" json:"-"`           // 知识空间id, 示例值："6946843325487906839"
}

// getWikiNodeListResp ...
type getWikiNodeListResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiNodeListResp `json:"data,omitempty"`
}

// GetWikiNodeListResp ...
type GetWikiNodeListResp struct {
	Items     []*GetWikiNodeListRespItem `json:"items,omitempty"`      // 数据列表
	PageToken string                     `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                       `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetWikiNodeListRespItem ...
type GetWikiNodeListRespItem struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// MoveWikiNode 此方法用于在Wiki内移动节点，支持跨知识空间移动
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-node/move
func (r *DriveService) MoveWikiNode(ctx context.Context, request *MoveWikiNodeReq, options ...MethodOptionFunc) (*MoveWikiNodeResp, *Response, error) {
	if r.cli.mock.mockDriveMoveWikiNode != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#MoveWikiNode mock enable")
		return r.cli.mock.mockDriveMoveWikiNode(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "MoveWikiNode",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/nodes/:node_token/move",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(moveWikiNodeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveMoveWikiNode mock DriveMoveWikiNode method
func (r *Mock) MockDriveMoveWikiNode(f func(ctx context.Context, request *MoveWikiNodeReq, options ...MethodOptionFunc) (*MoveWikiNodeResp, *Response, error)) {
	r.mockDriveMoveWikiNode = f
}

// UnMockDriveMoveWikiNode un-mock DriveMoveWikiNode method
func (r *Mock) UnMockDriveMoveWikiNode() {
	r.mockDriveMoveWikiNode = nil
}

// MoveWikiNodeReq ...
type MoveWikiNodeReq struct {
	SpaceID           string `path:"space_id" json:"-"`             // 知识空间id, 示例值："7008061636015554580"
	NodeToken         string `path:"node_token" json:"-"`           // 需要迁移的节点token, 示例值："wikbcd6ydSUyOEzbdlt1BfpA5Yc"
	TargetParentToken string `json:"target_parent_token,omitempty"` // 移动到的父节点token, 示例值："wikbcd6ydSUyOEzbdlt1BfpA5Yc"
}

// moveWikiNodeResp ...
type moveWikiNodeResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *MoveWikiNodeResp `json:"data,omitempty"`
}

// MoveWikiNodeResp ...
type MoveWikiNodeResp struct {
	Node *MoveWikiNodeRespNode `json:"node,omitempty"` // 移动后的节点信息
}

// MoveWikiNodeRespNode ...
type MoveWikiNodeRespNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateWikiSpace 此接口用于创建知识空间
//
// 此接口不支持应用身份访问
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/create
func (r *DriveService) CreateWikiSpace(ctx context.Context, request *CreateWikiSpaceReq, options ...MethodOptionFunc) (*CreateWikiSpaceResp, *Response, error) {
	if r.cli.mock.mockDriveCreateWikiSpace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateWikiSpace mock enable")
		return r.cli.mock.mockDriveCreateWikiSpace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Drive",
		API:                 "CreateWikiSpace",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/wiki/v2/spaces",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(createWikiSpaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateWikiSpace mock DriveCreateWikiSpace method
func (r *Mock) MockDriveCreateWikiSpace(f func(ctx context.Context, request *CreateWikiSpaceReq, options ...MethodOptionFunc) (*CreateWikiSpaceResp, *Response, error)) {
	r.mockDriveCreateWikiSpace = f
}

// UnMockDriveCreateWikiSpace un-mock DriveCreateWikiSpace method
func (r *Mock) UnMockDriveCreateWikiSpace() {
	r.mockDriveCreateWikiSpace = nil
}

// CreateWikiSpaceReq ...
type CreateWikiSpaceReq struct {
	Name        *string `json:"name,omitempty"`        // 知识空间名称, 示例值："知识空间"
	Description *string `json:"description,omitempty"` // 知识空间描述, 示例值："知识空间描述"
}

// createWikiSpaceResp ...
type createWikiSpaceResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *CreateWikiSpaceResp `json:"data,omitempty"`
}

// CreateWikiSpaceResp ...
type CreateWikiSpaceResp struct {
	Space *CreateWikiSpaceRespSpace `json:"space,omitempty"` // 知识空间
}

// CreateWikiSpaceRespSpace ...
type CreateWikiSpaceRespSpace struct {
	Name        string `json:"name,omitempty"`        // 知识空间名称
	Description string `json:"description,omitempty"` // 知识空间描述
	SpaceID     string `json:"space_id,omitempty"`    // 知识空间id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiSpace 此接口用于根据知识空间ID来查询知识空间的信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/get
func (r *DriveService) GetWikiSpace(ctx context.Context, request *GetWikiSpaceReq, options ...MethodOptionFunc) (*GetWikiSpaceResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiSpace != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiSpace mock enable")
		return r.cli.mock.mockDriveGetWikiSpace(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiSpace",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiSpaceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiSpace mock DriveGetWikiSpace method
func (r *Mock) MockDriveGetWikiSpace(f func(ctx context.Context, request *GetWikiSpaceReq, options ...MethodOptionFunc) (*GetWikiSpaceResp, *Response, error)) {
	r.mockDriveGetWikiSpace = f
}

// UnMockDriveGetWikiSpace un-mock DriveGetWikiSpace method
func (r *Mock) UnMockDriveGetWikiSpace() {
	r.mockDriveGetWikiSpace = nil
}

// GetWikiSpaceReq ...
type GetWikiSpaceReq struct {
	SpaceID string `path:"space_id" json:"-"` // 知识空间id, 示例值："6870403571079249922"
}

// getWikiSpaceResp ...
type getWikiSpaceResp struct {
	Code int64             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiSpaceResp `json:"data,omitempty"`
}

// GetWikiSpaceResp ...
type GetWikiSpaceResp struct {
	Space *GetWikiSpaceRespSpace `json:"space,omitempty"` // 知识空间
}

// GetWikiSpaceRespSpace ...
type GetWikiSpaceRespSpace struct {
	Name        string `json:"name,omitempty"`        // 知识空间名称
	Description string `json:"description,omitempty"` // 知识空间描述
	SpaceID     string `json:"space_id,omitempty"`    // 知识空间id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiSpaceList 此接口用于获取有权限访问的知识空间列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space/list
func (r *DriveService) GetWikiSpaceList(ctx context.Context, request *GetWikiSpaceListReq, options ...MethodOptionFunc) (*GetWikiSpaceListResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiSpaceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiSpaceList mock enable")
		return r.cli.mock.mockDriveGetWikiSpaceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiSpaceList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiSpaceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiSpaceList mock DriveGetWikiSpaceList method
func (r *Mock) MockDriveGetWikiSpaceList(f func(ctx context.Context, request *GetWikiSpaceListReq, options ...MethodOptionFunc) (*GetWikiSpaceListResp, *Response, error)) {
	r.mockDriveGetWikiSpaceList = f
}

// UnMockDriveGetWikiSpaceList un-mock DriveGetWikiSpaceList method
func (r *Mock) UnMockDriveGetWikiSpaceList() {
	r.mockDriveGetWikiSpaceList = nil
}

// GetWikiSpaceListReq ...
type GetWikiSpaceListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1565676577122621"
}

// getWikiSpaceListResp ...
type getWikiSpaceListResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiSpaceListResp `json:"data,omitempty"`
}

// GetWikiSpaceListResp ...
type GetWikiSpaceListResp struct {
	Items     []*GetWikiSpaceListRespItem `json:"items,omitempty"`      // 数据列表
	PageToken string                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetWikiSpaceListRespItem ...
type GetWikiSpaceListRespItem struct {
	Name        string `json:"name,omitempty"`        // 知识空间名称
	Description string `json:"description,omitempty"` // 知识空间描述
	SpaceID     string `json:"space_id,omitempty"`    // 知识空间id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddWikiSpaceMember 添加知识空间成员
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/create
func (r *DriveService) AddWikiSpaceMember(ctx context.Context, request *AddWikiSpaceMemberReq, options ...MethodOptionFunc) (*AddWikiSpaceMemberResp, *Response, error) {
	if r.cli.mock.mockDriveAddWikiSpaceMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#AddWikiSpaceMember mock enable")
		return r.cli.mock.mockDriveAddWikiSpaceMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "AddWikiSpaceMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(addWikiSpaceMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveAddWikiSpaceMember mock DriveAddWikiSpaceMember method
func (r *Mock) MockDriveAddWikiSpaceMember(f func(ctx context.Context, request *AddWikiSpaceMemberReq, options ...MethodOptionFunc) (*AddWikiSpaceMemberResp, *Response, error)) {
	r.mockDriveAddWikiSpaceMember = f
}

// UnMockDriveAddWikiSpaceMember un-mock DriveAddWikiSpaceMember method
func (r *Mock) UnMockDriveAddWikiSpaceMember() {
	r.mockDriveAddWikiSpaceMember = nil
}

// AddWikiSpaceMemberReq ...
type AddWikiSpaceMemberReq struct {
	NeedNotification *bool   `query:"need_notification" json:"-"` // 添加权限后是否通知对方, 示例值：true/fasle
	SpaceID          string  `path:"space_id" json:"-"`           // 知识空间id, 示例值："1565676577122621"
	MemberType       *string `json:"member_type,omitempty"`       // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid, 示例值："userid"
	MemberID         *string `json:"member_id,omitempty"`         // 用户id, 示例值："1565676577122621"
	MemberRole       *string `json:"member_role,omitempty"`       // 角色:,“admin” - 管理员,“member” - 成员, 示例值："admin"
}

// addWikiSpaceMemberResp ...
type addWikiSpaceMemberResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *AddWikiSpaceMemberResp `json:"data,omitempty"`
}

// AddWikiSpaceMemberResp ...
type AddWikiSpaceMemberResp struct {
	Member *AddWikiSpaceMemberRespMember `json:"member,omitempty"` // 知识空间成员
}

// AddWikiSpaceMemberRespMember ...
type AddWikiSpaceMemberRespMember struct {
	MemberType string `json:"member_type,omitempty"` // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid
	MemberID   string `json:"member_id,omitempty"`   // 用户id
	MemberRole string `json:"member_role,omitempty"` // 角色:,“admin” - 管理员,“member” - 成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteWikiSpaceMember 此接口用于删除知识空间成员
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-member/delete
func (r *DriveService) DeleteWikiSpaceMember(ctx context.Context, request *DeleteWikiSpaceMemberReq, options ...MethodOptionFunc) (*DeleteWikiSpaceMemberResp, *Response, error) {
	if r.cli.mock.mockDriveDeleteWikiSpaceMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#DeleteWikiSpaceMember mock enable")
		return r.cli.mock.mockDriveDeleteWikiSpaceMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "DeleteWikiSpaceMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/members/:member_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteWikiSpaceMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveDeleteWikiSpaceMember mock DriveDeleteWikiSpaceMember method
func (r *Mock) MockDriveDeleteWikiSpaceMember(f func(ctx context.Context, request *DeleteWikiSpaceMemberReq, options ...MethodOptionFunc) (*DeleteWikiSpaceMemberResp, *Response, error)) {
	r.mockDriveDeleteWikiSpaceMember = f
}

// UnMockDriveDeleteWikiSpaceMember un-mock DriveDeleteWikiSpaceMember method
func (r *Mock) UnMockDriveDeleteWikiSpaceMember() {
	r.mockDriveDeleteWikiSpaceMember = nil
}

// DeleteWikiSpaceMemberReq ...
type DeleteWikiSpaceMemberReq struct {
	SpaceID    string  `path:"space_id" json:"-"`     // 知识空间id, 示例值："7008061636015554580"
	MemberID   string  `path:"member_id" json:"-"`    // 成员id, 示例值："g64fb7g7"
	MemberType *string `json:"member_type,omitempty"` // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid, 示例值："userid"
	MemberRole *string `json:"member_role,omitempty"` // 角色:,“admin” - 管理员,“member” - 成员, 示例值："admin"
}

// deleteWikiSpaceMemberResp ...
type deleteWikiSpaceMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *DeleteWikiSpaceMemberResp `json:"data,omitempty"`
}

// DeleteWikiSpaceMemberResp ...
type DeleteWikiSpaceMemberResp struct {
	Member *DeleteWikiSpaceMemberRespMember `json:"member,omitempty"` // 成员信息
}

// DeleteWikiSpaceMemberRespMember ...
type DeleteWikiSpaceMemberRespMember struct {
	MemberType string `json:"member_type,omitempty"` // “openchat” - 群id ,“userid” - 用户id ,“departmentid” - 部门id,“openid” - 应用openid,“unionid” - unionid
	MemberID   string `json:"member_id,omitempty"`   // 用户id
	MemberRole string `json:"member_role,omitempty"` // 角色:,“admin” - 管理员,“member” - 成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateWikiSpaceSetting 根据space_id更新知识空间公共设置
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/space-setting/update
func (r *DriveService) UpdateWikiSpaceSetting(ctx context.Context, request *UpdateWikiSpaceSettingReq, options ...MethodOptionFunc) (*UpdateWikiSpaceSettingResp, *Response, error) {
	if r.cli.mock.mockDriveUpdateWikiSpaceSetting != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#UpdateWikiSpaceSetting mock enable")
		return r.cli.mock.mockDriveUpdateWikiSpaceSetting(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "UpdateWikiSpaceSetting",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/spaces/:space_id/setting",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateWikiSpaceSettingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveUpdateWikiSpaceSetting mock DriveUpdateWikiSpaceSetting method
func (r *Mock) MockDriveUpdateWikiSpaceSetting(f func(ctx context.Context, request *UpdateWikiSpaceSettingReq, options ...MethodOptionFunc) (*UpdateWikiSpaceSettingResp, *Response, error)) {
	r.mockDriveUpdateWikiSpaceSetting = f
}

// UnMockDriveUpdateWikiSpaceSetting un-mock DriveUpdateWikiSpaceSetting method
func (r *Mock) UnMockDriveUpdateWikiSpaceSetting() {
	r.mockDriveUpdateWikiSpaceSetting = nil
}

// UpdateWikiSpaceSettingReq ...
type UpdateWikiSpaceSettingReq struct {
	SpaceID         string  `path:"space_id" json:"-"`          // 知识空间id, 示例值："1565676577122621"
	CreateSetting   *string `json:"create_setting,omitempty"`   // 谁可以创建空间的一级页面： "admin_and_member" = 管理员和成员 "admin"  - 仅管理员, 示例值："admin/admin_and_member"
	SecuritySetting *string `json:"security_setting,omitempty"` // 可阅读用户可否创建副本/打印/导出/复制： "allow" - 允许 "not_allow" - 不允许, 示例值："allow/not_allow"
	CommentSetting  *string `json:"comment_setting,omitempty"`  // 可阅读用户可否评论： "allow" - 允许 "not_allow" - 不允许, 示例值："allow/not_allow"
}

// updateWikiSpaceSettingResp ...
type updateWikiSpaceSettingResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateWikiSpaceSettingResp `json:"data,omitempty"`
}

// UpdateWikiSpaceSettingResp ...
type UpdateWikiSpaceSettingResp struct {
	Setting *UpdateWikiSpaceSettingRespSetting `json:"setting,omitempty"` // 知识空间设置
}

// UpdateWikiSpaceSettingRespSetting ...
type UpdateWikiSpaceSettingRespSetting struct {
	CreateSetting   string `json:"create_setting,omitempty"`   // 谁可以创建空间的一级页面： "admin_and_member" = 管理员和成员 "admin"  - 仅管理员
	SecuritySetting string `json:"security_setting,omitempty"` // 可阅读用户可否创建副本/打印/导出/复制： "allow" - 允许 "not_allow" - 不允许
	CommentSetting  string `json:"comment_setting,omitempty"`  // 可阅读用户可否评论： "allow" - 允许 "not_allow" - 不允许
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetWikiTask 该方法用于获取wiki异步任务的结果
//
// 仅发起任务的用户（或应用）可以查询任务结果。否则会返回权限报错。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/wiki-v2/task/get
func (r *DriveService) GetWikiTask(ctx context.Context, request *GetWikiTaskReq, options ...MethodOptionFunc) (*GetWikiTaskResp, *Response, error) {
	if r.cli.mock.mockDriveGetWikiTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetWikiTask mock enable")
		return r.cli.mock.mockDriveGetWikiTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetWikiTask",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/wiki/v2/tasks/:task_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getWikiTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetWikiTask mock DriveGetWikiTask method
func (r *Mock) MockDriveGetWikiTask(f func(ctx context.Context, request *GetWikiTaskReq, options ...MethodOptionFunc) (*GetWikiTaskResp, *Response, error)) {
	r.mockDriveGetWikiTask = f
}

// UnMockDriveGetWikiTask un-mock DriveGetWikiTask method
func (r *Mock) UnMockDriveGetWikiTask() {
	r.mockDriveGetWikiTask = nil
}

// GetWikiTaskReq ...
type GetWikiTaskReq struct {
	TaskType string `query:"task_type" json:"-"` // 任务类型, 示例值："move", 可选值有: `move`：MoveDocsToWiki任务
	TaskID   string `path:"task_id" json:"-"`    // 任务id, 示例值："7037044037068177428-075c9481e6a0007c1df689dfbe5b55a08b6b06f7"
}

// getWikiTaskResp ...
type getWikiTaskResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetWikiTaskResp `json:"data,omitempty"`
}

// GetWikiTaskResp ...
type GetWikiTaskResp struct {
	Task *GetWikiTaskRespTask `json:"task,omitempty"` // 任务结果
}

// GetWikiTaskRespTask ...
type GetWikiTaskRespTask struct {
	TaskID     string                         `json:"task_id,omitempty"`     // 任务id
	MoveResult *GetWikiTaskRespTaskMoveResult `json:"move_result,omitempty"` // MoveDocsToWiki任务结果
}

// GetWikiTaskRespTaskMoveResult ...
type GetWikiTaskRespTaskMoveResult struct {
	Node      *GetWikiTaskRespTaskMoveResultNode `json:"node,omitempty"`       // 移动完成的节点信息
	Status    int64                              `json:"status,omitempty"`     // 节点移动状态码
	StatusMsg string                             `json:"status_msg,omitempty"` // 节点移动状态信息
}

// GetWikiTaskRespTaskMoveResultNode ...
type GetWikiTaskRespTaskMoveResultNode struct {
	SpaceID         string `json:"space_id,omitempty"`          // 知识库id
	NodeToken       string `json:"node_token,omitempty"`        // 节点token
	ObjToken        string `json:"obj_token,omitempty"`         // 文档token，可以根据obj_type判断是属于doc、sheet还是mindnote的token(对于快捷方式，该字段是对应的实体的obj_token)
	ObjType         string `json:"obj_type,omitempty"`          // 文档类型，对于快捷方式，该字段是对应的实体的obj_type, 可选值有: `doc`：doc, `sheet`：sheet, `mindnote`：mindnote, `bitable`：bitable, `file`：file, `docx`：docx
	ParentNodeToken string `json:"parent_node_token,omitempty"` // 节点的父亲token
	NodeType        string `json:"node_type,omitempty"`         // 节点类型, 可选值有: `origin`：实体, `shortcut`：快捷方式
	OriginNodeToken string `json:"origin_node_token,omitempty"` // 快捷方式对应的实体node_token，当创建节点为快捷方式时，需要传该值
	OriginSpaceID   string `json:"origin_space_id,omitempty"`   // 快捷方式对应的实体所在的spaceid
	HasChild        bool   `json:"has_child,omitempty"`         // 是否有子节点
	Title           string `json:"title,omitempty"`             // 文档标题
	ObjCreateTime   string `json:"obj_create_time,omitempty"`   // 文档创建时间
	ObjEditTime     string `json:"obj_edit_time,omitempty"`     // 文档最近编辑时间
	NodeCreateTime  string `json:"node_create_time,omitempty"`  // 节点创建时间
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadEHRAttachments
//
// 根据文件 token 下载文件。
// 调用 「批量获取员工花名册信息」接口的返回值中，「文件」类型的字段 id，即是文件 token
// ![image.png](//sf1-ttcdn-tos.pstatp.com/obj/open-platform-opendoc/bed391d2a8ce6ed2d5985ea69bf92850_9GY1mnuDXP.png)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/ehr/ehr-v1/attachment/get
func (r *EHRService) DownloadEHRAttachments(ctx context.Context, request *DownloadEHRAttachmentsReq, options ...MethodOptionFunc) (*DownloadEHRAttachmentsResp, *Response, error) {
	if r.cli.mock.mockEHRDownloadEHRAttachments != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] EHR#DownloadEHRAttachments mock enable")
		return r.cli.mock.mockEHRDownloadEHRAttachments(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "EHR",
		API:                   "DownloadEHRAttachments",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/ehr/v1/attachments/:token",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadEHRAttachmentsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockEHRDownloadEHRAttachments mock EHRDownloadEHRAttachments method
func (r *Mock) MockEHRDownloadEHRAttachments(f func(ctx context.Context, request *DownloadEHRAttachmentsReq, options ...MethodOptionFunc) (*DownloadEHRAttachmentsResp, *Response, error)) {
	r.mockEHRDownloadEHRAttachments = f
}

// UnMockEHRDownloadEHRAttachments un-mock EHRDownloadEHRAttachments method
func (r *Mock) UnMockEHRDownloadEHRAttachments() {
	r.mockEHRDownloadEHRAttachments = nil
}

// DownloadEHRAttachmentsReq ...
type DownloadEHRAttachmentsReq struct {
	Token string `path:"token" json:"-"` // 文件 token, 示例值："09bf7b924f9a4a69875788891b5970d8"
}

// downloadEHRAttachmentsResp ...
type downloadEHRAttachmentsResp struct {
	IsFile bool                        `json:"is_file,omitempty"`
	Code   int64                       `json:"code,omitempty"`
	Msg    string                      `json:"msg,omitempty"`
	Data   *DownloadEHRAttachmentsResp `json:"data,omitempty"`
}

func (r *downloadEHRAttachmentsResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadEHRAttachmentsResp{}
	}
	r.Data.File = file
}

// DownloadEHRAttachmentsResp ...
type DownloadEHRAttachmentsResp struct {
	File io.Reader `json:"file,omitempty"`
}
