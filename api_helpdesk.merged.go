// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// UpdateHelpdeskAgent 更新客服状态等信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/patch
func (r *HelpdeskService) UpdateHelpdeskAgent(ctx context.Context, request *UpdateHelpdeskAgentReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgent mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgent",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskAgent mock HelpdeskUpdateHelpdeskAgent method
func (r *Mock) MockHelpdeskUpdateHelpdeskAgent(f func(ctx context.Context, request *UpdateHelpdeskAgentReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgent = f
}

// UnMockHelpdeskUpdateHelpdeskAgent un-mock HelpdeskUpdateHelpdeskAgent method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgent() {
	r.mockHelpdeskUpdateHelpdeskAgent = nil
}

// UpdateHelpdeskAgentReq ...
type UpdateHelpdeskAgentReq struct {
	AgentID string `path:"agent_id" json:"-"` // 客服id, 示例值："ou_14777d82ffef0f707de5a8c7ff2c5ebe"
	Status  *int64 `json:"status,omitempty"`  // agent status, 示例值：1：在线；2：离线
}

// updateHelpdeskAgentResp ...
type updateHelpdeskAgentResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentResp `json:"data,omitempty"`
}

// UpdateHelpdeskAgentResp ...
type UpdateHelpdeskAgentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskAgentSchedule 该接口用于创建客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/create
func (r *HelpdeskService) CreateHelpdeskAgentSchedule(ctx context.Context, request *CreateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskAgentSchedule",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskAgentSchedule mock HelpdeskCreateHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskCreateHelpdeskAgentSchedule(f func(ctx context.Context, request *CreateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskAgentSchedule = f
}

// UnMockHelpdeskCreateHelpdeskAgentSchedule un-mock HelpdeskCreateHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskCreateHelpdeskAgentSchedule() {
	r.mockHelpdeskCreateHelpdeskAgentSchedule = nil
}

// CreateHelpdeskAgentScheduleReq ...
type CreateHelpdeskAgentScheduleReq struct {
	AgentSchedules []*CreateHelpdeskAgentScheduleReqAgentSchedule `json:"agent_schedules,omitempty"` // 新客服日程
}

// CreateHelpdeskAgentScheduleReqAgentSchedule ...
type CreateHelpdeskAgentScheduleReqAgentSchedule struct {
	AgentID       *string                                              `json:"agent_id,omitempty"`        // 客服id, 示例值："agent-id"
	Schedule      *CreateHelpdeskAgentScheduleReqAgentScheduleSchedule `json:"schedule,omitempty"`        // 工作日程列表
	AgentSkillIDs []string                                             `json:"agent_skill_ids,omitempty"` // 客服技能 ids
}

// CreateHelpdeskAgentScheduleReqAgentScheduleSchedule ...
type CreateHelpdeskAgentScheduleReqAgentScheduleSchedule struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59, 示例值："00:00"
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59, 示例值："24:00"
	Weekday   *int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend, 示例值：9
}

// createHelpdeskAgentScheduleResp ...
type createHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// CreateHelpdeskAgentScheduleResp ...
type CreateHelpdeskAgentScheduleResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskAgentSchedule 该接口用于删除客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/delete
func (r *HelpdeskService) DeleteHelpdeskAgentSchedule(ctx context.Context, request *DeleteHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskAgentSchedule",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskAgentSchedule mock HelpdeskDeleteHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskDeleteHelpdeskAgentSchedule(f func(ctx context.Context, request *DeleteHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskAgentSchedule = f
}

// UnMockHelpdeskDeleteHelpdeskAgentSchedule un-mock HelpdeskDeleteHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskAgentSchedule() {
	r.mockHelpdeskDeleteHelpdeskAgentSchedule = nil
}

// DeleteHelpdeskAgentScheduleReq ...
type DeleteHelpdeskAgentScheduleReq struct {
	AgentID string `path:"agent_id" json:"-"` // agent user id, 示例值："12345"
}

// deleteHelpdeskAgentScheduleResp ...
type deleteHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// DeleteHelpdeskAgentScheduleResp ...
type DeleteHelpdeskAgentScheduleResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSchedule 该接口用于获取客服信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/get
func (r *HelpdeskService) GetHelpdeskAgentSchedule(ctx context.Context, request *GetHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSchedule",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSchedule mock HelpdeskGetHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSchedule(f func(ctx context.Context, request *GetHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSchedule = f
}

// UnMockHelpdeskGetHelpdeskAgentSchedule un-mock HelpdeskGetHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSchedule() {
	r.mockHelpdeskGetHelpdeskAgentSchedule = nil
}

// GetHelpdeskAgentScheduleReq ...
type GetHelpdeskAgentScheduleReq struct {
	AgentID string `path:"agent_id" json:"-"` // 客服 id, 示例值："	客服 id"
}

// getHelpdeskAgentScheduleResp ...
type getHelpdeskAgentScheduleResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// GetHelpdeskAgentScheduleResp ...
type GetHelpdeskAgentScheduleResp struct {
	AgentSchedule *GetHelpdeskAgentScheduleRespAgentSchedule `json:"agent_schedule,omitempty"` // 客服日程
}

// GetHelpdeskAgentScheduleRespAgentSchedule ...
type GetHelpdeskAgentScheduleRespAgentSchedule struct {
	Status      int64                                                  `json:"status,omitempty"`       // 客服状态, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)自动处于非服务时间段
	Agent       *GetHelpdeskAgentScheduleRespAgentScheduleAgent        `json:"agent,omitempty"`        // 客服信息
	Schedule    *GetHelpdeskAgentScheduleRespAgentScheduleSchedule     `json:"schedule,omitempty"`     // 工作日程列表
	AgentSkills []*GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill `json:"agent_skills,omitempty"` // 客服技能
}

// GetHelpdeskAgentScheduleRespAgentScheduleAgent ...
type GetHelpdeskAgentScheduleRespAgentScheduleAgent struct {
	ID          string `json:"id,omitempty"`           // 客服 id
	AvatarURL   string `json:"avatar_url,omitempty"`   // avatar url
	Name        string `json:"name,omitempty"`         // 客服名字
	Email       string `json:"email,omitempty"`        // email
	Department  string `json:"department,omitempty"`   // 部门
	CompanyName string `json:"company_name,omitempty"` // 公司名
}

// GetHelpdeskAgentScheduleRespAgentScheduleSchedule ...
type GetHelpdeskAgentScheduleRespAgentScheduleSchedule struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59
	EndTime   string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59
	Weekday   int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend
}

// GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill ...
type GetHelpdeskAgentScheduleRespAgentScheduleAgentSkill struct {
	ID        string `json:"id,omitempty"`         // 客服技能 id
	Name      string `json:"name,omitempty"`       // 客服技能名
	IsDefault bool   `json:"is_default,omitempty"` // 是默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentScheduleList 该接口用于获取所有客服信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_schedule/list
func (r *HelpdeskService) GetHelpdeskAgentScheduleList(ctx context.Context, request *GetHelpdeskAgentScheduleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentScheduleList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentScheduleList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentScheduleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentScheduleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_schedules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentScheduleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentScheduleList mock HelpdeskGetHelpdeskAgentScheduleList method
func (r *Mock) MockHelpdeskGetHelpdeskAgentScheduleList(f func(ctx context.Context, request *GetHelpdeskAgentScheduleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentScheduleListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentScheduleList = f
}

// UnMockHelpdeskGetHelpdeskAgentScheduleList un-mock HelpdeskGetHelpdeskAgentScheduleList method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentScheduleList() {
	r.mockHelpdeskGetHelpdeskAgentScheduleList = nil
}

// GetHelpdeskAgentScheduleListReq ...
type GetHelpdeskAgentScheduleListReq struct {
	Status []int64 `query:"status" json:"-"` // 筛选条件, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)客服, 4 - 移除客服
}

// getHelpdeskAgentScheduleListResp ...
type getHelpdeskAgentScheduleListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentScheduleListResp `json:"data,omitempty"`
}

// GetHelpdeskAgentScheduleListResp ...
type GetHelpdeskAgentScheduleListResp struct {
	AgentSchedules []*GetHelpdeskAgentScheduleListRespAgentSchedule `json:"agent_schedules,omitempty"` // 客服列表
}

// GetHelpdeskAgentScheduleListRespAgentSchedule ...
type GetHelpdeskAgentScheduleListRespAgentSchedule struct {
	Status      int64                                                      `json:"status,omitempty"`       // 客服状态, 1 - online客服, 2 - offline(手动)客服, 3 - off duty(下班)自动处于非服务时间段
	Agent       *GetHelpdeskAgentScheduleListRespAgentScheduleAgent        `json:"agent,omitempty"`        // 客服信息
	Schedule    *GetHelpdeskAgentScheduleListRespAgentScheduleSchedule     `json:"schedule,omitempty"`     // 工作日程列表
	AgentSkills []*GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill `json:"agent_skills,omitempty"` // 客服技能
}

// GetHelpdeskAgentScheduleListRespAgentScheduleAgent ...
type GetHelpdeskAgentScheduleListRespAgentScheduleAgent struct {
	ID          string `json:"id,omitempty"`           // 客服 id
	AvatarURL   string `json:"avatar_url,omitempty"`   // avatar url
	Name        string `json:"name,omitempty"`         // 客服名字
	Email       string `json:"email,omitempty"`        // email
	Department  string `json:"department,omitempty"`   // 部门
	CompanyName string `json:"company_name,omitempty"` // 公司名
}

// GetHelpdeskAgentScheduleListRespAgentScheduleSchedule ...
type GetHelpdeskAgentScheduleListRespAgentScheduleSchedule struct {
	StartTime string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59
	EndTime   string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59
	Weekday   int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend
}

// GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill ...
type GetHelpdeskAgentScheduleListRespAgentScheduleAgentSkill struct {
	ID        string `json:"id,omitempty"`         // 客服技能 id
	Name      string `json:"name,omitempty"`       // 客服技能名
	IsDefault bool   `json:"is_default,omitempty"` // 是默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskAgentSchedule 该接口用于更新客服
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent-schedules/patch
func (r *HelpdeskService) UpdateHelpdeskAgentSchedule(ctx context.Context, request *UpdateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentScheduleResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSchedule != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgentSchedule mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSchedule(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgentSchedule",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agents/:agent_id/schedules",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentScheduleResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskAgentSchedule mock HelpdeskUpdateHelpdeskAgentSchedule method
func (r *Mock) MockHelpdeskUpdateHelpdeskAgentSchedule(f func(ctx context.Context, request *UpdateHelpdeskAgentScheduleReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentScheduleResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgentSchedule = f
}

// UnMockHelpdeskUpdateHelpdeskAgentSchedule un-mock HelpdeskUpdateHelpdeskAgentSchedule method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgentSchedule() {
	r.mockHelpdeskUpdateHelpdeskAgentSchedule = nil
}

// UpdateHelpdeskAgentScheduleReq ...
type UpdateHelpdeskAgentScheduleReq struct {
	AgentID       string                                       `path:"agent_id" json:"-"`        // 客服 id, 示例值："123456"
	AgentSchedule *UpdateHelpdeskAgentScheduleReqAgentSchedule `json:"agent_schedule,omitempty"` // 工作日程列表
}

// UpdateHelpdeskAgentScheduleReqAgentSchedule ...
type UpdateHelpdeskAgentScheduleReqAgentSchedule struct {
	Schedule      *UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule `json:"schedule,omitempty"`        // 工作日程列表
	AgentSkillIDs []string                                             `json:"agent_skill_ids,omitempty"` // 客服技能 ids
}

// UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule ...
type UpdateHelpdeskAgentScheduleReqAgentScheduleSchedule struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间, format 00:00 - 23:59, 示例值："00:00"
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间, format 00:00 - 23:59, 示例值："24:00"
	Weekday   *int64  `json:"weekday,omitempty"`    // 星期几, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday, 7 - Sunday, 9 - Everday, 10 - Weekday, 11 - Weekend, 示例值：9
}

// updateHelpdeskAgentScheduleResp ...
type updateHelpdeskAgentScheduleResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentScheduleResp `json:"data,omitempty"`
}

// UpdateHelpdeskAgentScheduleResp ...
type UpdateHelpdeskAgentScheduleResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskAgentSkill 该接口用于创建客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/create
func (r *HelpdeskService) CreateHelpdeskAgentSkill(ctx context.Context, request *CreateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskAgentSkill",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskAgentSkill mock HelpdeskCreateHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskCreateHelpdeskAgentSkill(f func(ctx context.Context, request *CreateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*CreateHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskAgentSkill = f
}

// UnMockHelpdeskCreateHelpdeskAgentSkill un-mock HelpdeskCreateHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskCreateHelpdeskAgentSkill() {
	r.mockHelpdeskCreateHelpdeskAgentSkill = nil
}

// CreateHelpdeskAgentSkillReq ...
type CreateHelpdeskAgentSkillReq struct {
	Name     *string                            `json:"name,omitempty"`      // 技能名, 示例值："test-skill"
	Rules    []*CreateHelpdeskAgentSkillReqRule `json:"rules,omitempty"`     // 技能rules
	AgentIDs []string                           `json:"agent_ids,omitempty"` // 客服 ids
}

// CreateHelpdeskAgentSkillReqRule ...
type CreateHelpdeskAgentSkillReqRule struct {
	ID               *string `json:"id,omitempty"`                // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options, 示例值："test-skill-id"
	SelectedOperator *int64  `json:"selected_operator,omitempty"` // 运算符compare, 看[客服技能运算符options](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options), 示例值：3
	Operand          *string `json:"operand,omitempty"`           // rule操作数value, 示例值："    {,                    "selected": ["6883005079188668418"],,                    "options": [,                        {,                            "id": "6883005079188668418",,                            "name": {,                                "en_us": "小程序及应用",,                                "ja_jp": "小程序及应用",,                                "zh_cn": "小程序及应用",                            },                        },,                        {,                            "children": [,                                {,                                    "id": "6883005086914625538",,                                    "name": {,                                        "en_us": "消息提醒",,                                        "ja_jp": "消息提醒",,                                        "zh_cn": "消息提醒",                                    },                                },,                                {,                                    "id": "6883005092723802114",,                                    "name": {,                                        "en_us": "其他",,                                        "ja_jp": "其他",,                                        "zh_cn": "其他",                                    },                                },                            ],,                            "id": "6883005085605986306",,                            "name": {,                                "en_us": "聊天和群组",,                                "ja_jp": "聊天和群组",,                                "zh_cn": "聊天和群组",                            },                        },,                    ],,                }"
	Category         *int64  `json:"category,omitempty"`          // rule type，1-知识库，2-工单信息，3-用户飞书信息, 示例值：1
}

// createHelpdeskAgentSkillResp ...
type createHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// CreateHelpdeskAgentSkillResp ...
type CreateHelpdeskAgentSkillResp struct {
	AgentSkillID string `json:"agent_skill_id,omitempty"` // 客服技能id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskAgentSkill 该接口用于删除客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/delete
func (r *HelpdeskService) DeleteHelpdeskAgentSkill(ctx context.Context, request *DeleteHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskAgentSkill",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskAgentSkill mock HelpdeskDeleteHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskDeleteHelpdeskAgentSkill(f func(ctx context.Context, request *DeleteHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*DeleteHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskAgentSkill = f
}

// UnMockHelpdeskDeleteHelpdeskAgentSkill un-mock HelpdeskDeleteHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskAgentSkill() {
	r.mockHelpdeskDeleteHelpdeskAgentSkill = nil
}

// DeleteHelpdeskAgentSkillReq ...
type DeleteHelpdeskAgentSkillReq struct {
	AgentSkillID string `path:"agent_skill_id" json:"-"` // agent group id, 示例值："test-skill-id"
}

// deleteHelpdeskAgentSkillResp ...
type deleteHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// DeleteHelpdeskAgentSkillResp ...
type DeleteHelpdeskAgentSkillResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkill 该接口用于获取客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/get
func (r *HelpdeskService) GetHelpdeskAgentSkill(ctx context.Context, request *GetHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkill",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSkill mock HelpdeskGetHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSkill(f func(ctx context.Context, request *GetHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkill = f
}

// UnMockHelpdeskGetHelpdeskAgentSkill un-mock HelpdeskGetHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkill() {
	r.mockHelpdeskGetHelpdeskAgentSkill = nil
}

// GetHelpdeskAgentSkillReq ...
type GetHelpdeskAgentSkillReq struct {
	AgentSkillID string `path:"agent_skill_id" json:"-"` // agent skill id, 示例值："6941215891786825756"
}

// getHelpdeskAgentSkillResp ...
type getHelpdeskAgentSkillResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// GetHelpdeskAgentSkillResp ...
type GetHelpdeskAgentSkillResp struct {
	AgentSkill *GetHelpdeskAgentSkillRespAgentSkill `json:"agent_skill,omitempty"` // 技能
}

// GetHelpdeskAgentSkillRespAgentSkill ...
type GetHelpdeskAgentSkillRespAgentSkill struct {
	ID        string                                      `json:"id,omitempty"`         // 技能id
	Name      string                                      `json:"name,omitempty"`       // 技能名
	Rules     []*GetHelpdeskAgentSkillRespAgentSkillRule  `json:"rules,omitempty"`      // 技能rules
	AgentIDs  []string                                    `json:"agent_ids,omitempty"`  // 具有此技能的客服ids
	IsDefault bool                                        `json:"is_default,omitempty"` // 默认技能
	Agents    []*GetHelpdeskAgentSkillRespAgentSkillAgent `json:"agents,omitempty"`     // 客服 info
}

// GetHelpdeskAgentSkillRespAgentSkillRule ...
type GetHelpdeskAgentSkillRespAgentSkillRule struct {
	ID               string  `json:"id,omitempty"`                // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options
	SelectedOperator int64   `json:"selected_operator,omitempty"` // 运算符compare, 看[客服技能运算符options](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	OperatorOptions  []int64 `json:"operator_options,omitempty"`  // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand          string  `json:"operand,omitempty"`           // rule操作数value
	Category         int64   `json:"category,omitempty"`          // rule type，1-知识库，2-工单信息，3-用户飞书信息
	DisplayName      string  `json:"display_name,omitempty"`      // rule 名
}

// GetHelpdeskAgentSkillRespAgentSkillAgent ...
type GetHelpdeskAgentSkillRespAgentSkillAgent struct {
	ID        string `json:"id,omitempty"`         // user id
	AvatarURL string `json:"avatar_url,omitempty"` // user avatar url
	Name      string `json:"name,omitempty"`       // user name
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkillList 获取全部客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/list
func (r *HelpdeskService) GetHelpdeskAgentSkillList(ctx context.Context, request *GetHelpdeskAgentSkillListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkillList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkillList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSkillList mock HelpdeskGetHelpdeskAgentSkillList method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSkillList(f func(ctx context.Context, request *GetHelpdeskAgentSkillListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkillList = f
}

// UnMockHelpdeskGetHelpdeskAgentSkillList un-mock HelpdeskGetHelpdeskAgentSkillList method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkillList() {
	r.mockHelpdeskGetHelpdeskAgentSkillList = nil
}

// GetHelpdeskAgentSkillListReq ...
type GetHelpdeskAgentSkillListReq struct{}

// getHelpdeskAgentSkillListResp ...
type getHelpdeskAgentSkillListResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillListResp `json:"data,omitempty"`
}

// GetHelpdeskAgentSkillListResp ...
type GetHelpdeskAgentSkillListResp struct {
	AgentSkills []*GetHelpdeskAgentSkillListRespAgentSkill `json:"agent_skills,omitempty"` // 客服技能列表
}

// GetHelpdeskAgentSkillListRespAgentSkill ...
type GetHelpdeskAgentSkillListRespAgentSkill struct {
	ID        string   `json:"id,omitempty"`         // 技能id
	Name      string   `json:"name,omitempty"`       // 技能名
	AgentIDs  []string `json:"agent_ids,omitempty"`  // 具有此技能的客服ids
	IsDefault bool     `json:"is_default,omitempty"` // 默认技能
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentSkillRuleList 该接口用于获取全部客服技能。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill_rule/list
func (r *HelpdeskService) GetHelpdeskAgentSkillRuleList(ctx context.Context, request *GetHelpdeskAgentSkillRuleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillRuleListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillRuleList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentSkillRuleList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentSkillRuleList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentSkillRuleList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skill_rules",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentSkillRuleListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentSkillRuleList mock HelpdeskGetHelpdeskAgentSkillRuleList method
func (r *Mock) MockHelpdeskGetHelpdeskAgentSkillRuleList(f func(ctx context.Context, request *GetHelpdeskAgentSkillRuleListReq, options ...MethodOptionFunc) (*GetHelpdeskAgentSkillRuleListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentSkillRuleList = f
}

// UnMockHelpdeskGetHelpdeskAgentSkillRuleList un-mock HelpdeskGetHelpdeskAgentSkillRuleList method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentSkillRuleList() {
	r.mockHelpdeskGetHelpdeskAgentSkillRuleList = nil
}

// GetHelpdeskAgentSkillRuleListReq ...
type GetHelpdeskAgentSkillRuleListReq struct{}

// getHelpdeskAgentSkillRuleListResp ...
type getHelpdeskAgentSkillRuleListResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentSkillRuleListResp `json:"data,omitempty"`
}

// GetHelpdeskAgentSkillRuleListResp ...
type GetHelpdeskAgentSkillRuleListResp struct {
	Rules []*GetHelpdeskAgentSkillRuleListRespRule `json:"rules,omitempty"` // rules列表
}

// GetHelpdeskAgentSkillRuleListRespRule ...
type GetHelpdeskAgentSkillRuleListRespRule struct {
	ID              string  `json:"id,omitempty"`               // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options
	OperatorOptions []int64 `json:"operator_options,omitempty"` // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand         string  `json:"operand,omitempty"`          // rule操作数value
	Category        int64   `json:"category,omitempty"`         // rule type，1-知识库，2-工单信息，3-用户飞书信息
	DisplayName     string  `json:"display_name,omitempty"`     // rule 名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskAgentSkill 该接口用于更新客服技能
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent_skill/patch
func (r *HelpdeskService) UpdateHelpdeskAgentSkill(ctx context.Context, request *UpdateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentSkillResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSkill != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskAgentSkill mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskAgentSkill(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskAgentSkill",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_skills/:agent_skill_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskAgentSkillResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskAgentSkill mock HelpdeskUpdateHelpdeskAgentSkill method
func (r *Mock) MockHelpdeskUpdateHelpdeskAgentSkill(f func(ctx context.Context, request *UpdateHelpdeskAgentSkillReq, options ...MethodOptionFunc) (*UpdateHelpdeskAgentSkillResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskAgentSkill = f
}

// UnMockHelpdeskUpdateHelpdeskAgentSkill un-mock HelpdeskUpdateHelpdeskAgentSkill method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskAgentSkill() {
	r.mockHelpdeskUpdateHelpdeskAgentSkill = nil
}

// UpdateHelpdeskAgentSkillReq ...
type UpdateHelpdeskAgentSkillReq struct {
	AgentSkillID string                                 `path:"agent_skill_id" json:"-"` // agent skill id, 示例值："test-skill-id"
	AgentSkill   *UpdateHelpdeskAgentSkillReqAgentSkill `json:"agent_skill,omitempty"`   // 更新技能
}

// UpdateHelpdeskAgentSkillReqAgentSkill ...
type UpdateHelpdeskAgentSkillReqAgentSkill struct {
	Name     *string                                     `json:"name,omitempty"`      // 技能名, 示例值："skill-name"
	Rules    *UpdateHelpdeskAgentSkillReqAgentSkillRules `json:"rules,omitempty"`     // 技能rules
	AgentIDs []string                                    `json:"agent_ids,omitempty"` // 具有此技能的客服ids
}

// UpdateHelpdeskAgentSkillReqAgentSkillRules ...
type UpdateHelpdeskAgentSkillReqAgentSkillRules struct {
	ID               *string `json:"id,omitempty"`                // rule id, 看[获取客服技能rules](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/list-agent-skill-rules) 用于获取rules options, 示例值："test-skill-id"
	SelectedOperator *int64  `json:"selected_operator,omitempty"` // 运算符compare, 看[客服技能运算符options](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options), 示例值：3
	OperatorOptions  []int64 `json:"operator_options,omitempty"`  // rule操作数value，[客服技能及运算符](https://open.feishu.cn/document/ukTMukTMukTM/ucDOyYjL3gjM24yN4IjN/operator-options)
	Operand          *string `json:"operand,omitempty"`           // rule操作数value, 示例值："    {,                    "selected": ["6883005079188668418"],,                    "options": [,                        {,                            "id": "6883005079188668418",,                            "name": {,                                "en_us": "小程序及应用",,                                "ja_jp": "小程序及应用",,                                "zh_cn": "小程序及应用",                            },                        },,                        {,                            "children": [,                                {,                                    "id": "6883005086914625538",,                                    "name": {,                                        "en_us": "消息提醒",,                                        "ja_jp": "消息提醒",,                                        "zh_cn": "消息提醒",                                    },                                },,                                {,                                    "id": "6883005092723802114",,                                    "name": {,                                        "en_us": "其他",,                                        "ja_jp": "其他",,                                        "zh_cn": "其他",                                    },                                },                            ],,                            "id": "6883005085605986306",,                            "name": {,                                "en_us": "聊天和群组",,                                "ja_jp": "聊天和群组",,                                "zh_cn": "聊天和群组",                            },                        },,                    ],,                }"
}

// updateHelpdeskAgentSkillResp ...
type updateHelpdeskAgentSkillResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskAgentSkillResp `json:"data,omitempty"`
}

// UpdateHelpdeskAgentSkillResp ...
type UpdateHelpdeskAgentSkillResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskCategory 该接口用于创建知识库分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/create
func (r *HelpdeskService) CreateHelpdeskCategory(ctx context.Context, request *CreateHelpdeskCategoryReq, options ...MethodOptionFunc) (*CreateHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskCategory",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskCategory mock HelpdeskCreateHelpdeskCategory method
func (r *Mock) MockHelpdeskCreateHelpdeskCategory(f func(ctx context.Context, request *CreateHelpdeskCategoryReq, options ...MethodOptionFunc) (*CreateHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskCategory = f
}

// UnMockHelpdeskCreateHelpdeskCategory un-mock HelpdeskCreateHelpdeskCategory method
func (r *Mock) UnMockHelpdeskCreateHelpdeskCategory() {
	r.mockHelpdeskCreateHelpdeskCategory = nil
}

// CreateHelpdeskCategoryReq ...
type CreateHelpdeskCategoryReq struct {
	Name     string  `json:"name,omitempty"`      // 名称, 示例值："创建团队和邀请成员"
	ParentID string  `json:"parent_id,omitempty"` // 父知识库分类ID, 示例值："0"
	Language *string `json:"language,omitempty"`  // 语言, 示例值："zh_cn"
}

// createHelpdeskCategoryResp ...
type createHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskCategoryResp `json:"data,omitempty"`
}

// CreateHelpdeskCategoryResp ...
type CreateHelpdeskCategoryResp struct {
	Category *HelpdeskCategory `json:"category,omitempty"` // 知识库分类
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskCategory 该接口用于删除知识库分类详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/delete
func (r *HelpdeskService) DeleteHelpdeskCategory(ctx context.Context, request *DeleteHelpdeskCategoryReq, options ...MethodOptionFunc) (*DeleteHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskCategory",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskCategory mock HelpdeskDeleteHelpdeskCategory method
func (r *Mock) MockHelpdeskDeleteHelpdeskCategory(f func(ctx context.Context, request *DeleteHelpdeskCategoryReq, options ...MethodOptionFunc) (*DeleteHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskCategory = f
}

// UnMockHelpdeskDeleteHelpdeskCategory un-mock HelpdeskDeleteHelpdeskCategory method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskCategory() {
	r.mockHelpdeskDeleteHelpdeskCategory = nil
}

// DeleteHelpdeskCategoryReq ...
type DeleteHelpdeskCategoryReq struct {
	ID string `path:"id" json:"-"` // 知识库分类ID, 示例值："6948728206392295444"
}

// deleteHelpdeskCategoryResp ...
type deleteHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskCategoryResp `json:"data,omitempty"`
}

// DeleteHelpdeskCategoryResp ...
type DeleteHelpdeskCategoryResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskCategory 该接口用于获取知识库分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/get
func (r *HelpdeskService) GetHelpdeskCategory(ctx context.Context, request *GetHelpdeskCategoryReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskCategory",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskCategory mock HelpdeskGetHelpdeskCategory method
func (r *Mock) MockHelpdeskGetHelpdeskCategory(f func(ctx context.Context, request *GetHelpdeskCategoryReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskCategory = f
}

// UnMockHelpdeskGetHelpdeskCategory un-mock HelpdeskGetHelpdeskCategory method
func (r *Mock) UnMockHelpdeskGetHelpdeskCategory() {
	r.mockHelpdeskGetHelpdeskCategory = nil
}

// GetHelpdeskCategoryReq ...
type GetHelpdeskCategoryReq struct {
	ID string `path:"id" json:"-"` // 知识库分类ID, 示例值："6948728206392295444"
}

// getHelpdeskCategoryResp ...
type getHelpdeskCategoryResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskCategoryResp `json:"data,omitempty"`
}

// GetHelpdeskCategoryResp ...
type GetHelpdeskCategoryResp struct {
	CategoryID string `json:"category_id,omitempty"` // 知识库分类ID
	ID         string `json:"id,omitempty"`          // 知识库分类ID，（旧版，请使用category_id）
	Name       string `json:"name,omitempty"`        // 名称
	HelpdeskID string `json:"helpdesk_id,omitempty"` // 服务台ID
	Language   string `json:"language,omitempty"`    // 语言
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskCategoryList
//
// 该接口用于获取服务台知识库所有分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/list-categories
func (r *HelpdeskService) GetHelpdeskCategoryList(ctx context.Context, request *GetHelpdeskCategoryListReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskCategoryList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskCategoryList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskCategoryList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskCategoryList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskCategoryListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskCategoryList mock HelpdeskGetHelpdeskCategoryList method
func (r *Mock) MockHelpdeskGetHelpdeskCategoryList(f func(ctx context.Context, request *GetHelpdeskCategoryListReq, options ...MethodOptionFunc) (*GetHelpdeskCategoryListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskCategoryList = f
}

// UnMockHelpdeskGetHelpdeskCategoryList un-mock HelpdeskGetHelpdeskCategoryList method
func (r *Mock) UnMockHelpdeskGetHelpdeskCategoryList() {
	r.mockHelpdeskGetHelpdeskCategoryList = nil
}

// GetHelpdeskCategoryListReq ...
type GetHelpdeskCategoryListReq struct {
	Lang    *string `query:"lang" json:"-"`     // 知识库分类语言, 示例值："zh_cn"
	OrderBy *int64  `query:"order_by" json:"-"` // 排序键。1: 根据知识库分类更新时间排序, 示例值：1
	Asc     *bool   `query:"asc" json:"-"`      // 顺序。true: 正序；false：反序, 示例值：true
}

// getHelpdeskCategoryListResp ...
type getHelpdeskCategoryListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskCategoryListResp `json:"data,omitempty"`
}

// GetHelpdeskCategoryListResp ...
type GetHelpdeskCategoryListResp struct {
	Categories []*HelpdeskCategory `json:"categories,omitempty"` // 知识库分类列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskCategory 该接口用于更新知识库分类详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/patch
func (r *HelpdeskService) UpdateHelpdeskCategory(ctx context.Context, request *UpdateHelpdeskCategoryReq, options ...MethodOptionFunc) (*UpdateHelpdeskCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskCategory mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskCategory(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskCategory",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/categories/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskCategory mock HelpdeskUpdateHelpdeskCategory method
func (r *Mock) MockHelpdeskUpdateHelpdeskCategory(f func(ctx context.Context, request *UpdateHelpdeskCategoryReq, options ...MethodOptionFunc) (*UpdateHelpdeskCategoryResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskCategory = f
}

// UnMockHelpdeskUpdateHelpdeskCategory un-mock HelpdeskUpdateHelpdeskCategory method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskCategory() {
	r.mockHelpdeskUpdateHelpdeskCategory = nil
}

// UpdateHelpdeskCategoryReq ...
type UpdateHelpdeskCategoryReq struct {
	ID       string  `path:"id" json:"-"`         // category id, 示例值："6948728206392295444"
	Name     *string `json:"name,omitempty"`      // 名称, 示例值："创建团队和邀请成员"
	ParentID *string `json:"parent_id,omitempty"` // 父知识库分类ID, 示例值："0"
}

// updateHelpdeskCategoryResp ...
type updateHelpdeskCategoryResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskCategoryResp `json:"data,omitempty"`
}

// UpdateHelpdeskCategoryResp ...
type UpdateHelpdeskCategoryResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeHelpdeskEvent 用于订阅服务台事件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/subscribe
func (r *HelpdeskService) SubscribeHelpdeskEvent(ctx context.Context, request *SubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*SubscribeHelpdeskEventResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSubscribeHelpdeskEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SubscribeHelpdeskEvent mock enable")
		return r.cli.mock.mockHelpdeskSubscribeHelpdeskEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SubscribeHelpdeskEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/events/subscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(subscribeHelpdeskEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSubscribeHelpdeskEvent mock HelpdeskSubscribeHelpdeskEvent method
func (r *Mock) MockHelpdeskSubscribeHelpdeskEvent(f func(ctx context.Context, request *SubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*SubscribeHelpdeskEventResp, *Response, error)) {
	r.mockHelpdeskSubscribeHelpdeskEvent = f
}

// UnMockHelpdeskSubscribeHelpdeskEvent un-mock HelpdeskSubscribeHelpdeskEvent method
func (r *Mock) UnMockHelpdeskSubscribeHelpdeskEvent() {
	r.mockHelpdeskSubscribeHelpdeskEvent = nil
}

// SubscribeHelpdeskEventReq ...
type SubscribeHelpdeskEventReq struct {
	Events []*SubscribeHelpdeskEventReqEvent `json:"events,omitempty"` // 可订阅的事件列表
}

// SubscribeHelpdeskEventReqEvent ...
type SubscribeHelpdeskEventReqEvent struct {
	Type    string `json:"type,omitempty"`    // 事件类型, 示例值："helpdesk.ticket_message"
	Subtype string `json:"subtype,omitempty"` // 事件子类型, 示例值："ticket_message.created_v1"
}

// subscribeHelpdeskEventResp ...
type subscribeHelpdeskEventResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *SubscribeHelpdeskEventResp `json:"data,omitempty"`
}

// SubscribeHelpdeskEventResp ...
type SubscribeHelpdeskEventResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnsubscribeHelpdeskEvent 用于取消订阅服务台事件
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/event/unsubscribe
func (r *HelpdeskService) UnsubscribeHelpdeskEvent(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UnsubscribeHelpdeskEvent mock enable")
		return r.cli.mock.mockHelpdeskUnsubscribeHelpdeskEvent(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "UnsubscribeHelpdeskEvent",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/events/unsubscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(unsubscribeHelpdeskEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUnsubscribeHelpdeskEvent mock HelpdeskUnsubscribeHelpdeskEvent method
func (r *Mock) MockHelpdeskUnsubscribeHelpdeskEvent(f func(ctx context.Context, request *UnsubscribeHelpdeskEventReq, options ...MethodOptionFunc) (*UnsubscribeHelpdeskEventResp, *Response, error)) {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = f
}

// UnMockHelpdeskUnsubscribeHelpdeskEvent un-mock HelpdeskUnsubscribeHelpdeskEvent method
func (r *Mock) UnMockHelpdeskUnsubscribeHelpdeskEvent() {
	r.mockHelpdeskUnsubscribeHelpdeskEvent = nil
}

// UnsubscribeHelpdeskEventReq ...
type UnsubscribeHelpdeskEventReq struct {
	Events []*UnsubscribeHelpdeskEventReqEvent `json:"events,omitempty"` // event list to unsubscribe
}

// UnsubscribeHelpdeskEventReqEvent ...
type UnsubscribeHelpdeskEventReqEvent struct {
	Type    string `json:"type,omitempty"`    // 事件类型, 示例值："helpdesk.ticket_message"
	Subtype string `json:"subtype,omitempty"` // 事件子类型, 示例值："ticket_message.created_v1"
}

// unsubscribeHelpdeskEventResp ...
type unsubscribeHelpdeskEventResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UnsubscribeHelpdeskEventResp `json:"data,omitempty"`
}

// UnsubscribeHelpdeskEventResp ...
type UnsubscribeHelpdeskEventResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskFAQ 该接口用于创建知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/create
func (r *HelpdeskService) CreateHelpdeskFAQ(ctx context.Context, request *CreateHelpdeskFAQReq, options ...MethodOptionFunc) (*CreateHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskFAQ",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskFAQ mock HelpdeskCreateHelpdeskFAQ method
func (r *Mock) MockHelpdeskCreateHelpdeskFAQ(f func(ctx context.Context, request *CreateHelpdeskFAQReq, options ...MethodOptionFunc) (*CreateHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskFAQ = f
}

// UnMockHelpdeskCreateHelpdeskFAQ un-mock HelpdeskCreateHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskCreateHelpdeskFAQ() {
	r.mockHelpdeskCreateHelpdeskFAQ = nil
}

// CreateHelpdeskFAQReq ...
type CreateHelpdeskFAQReq struct {
	FAQ *CreateHelpdeskFAQReqFAQ `json:"faq,omitempty"` // 知识库详情
}

// CreateHelpdeskFAQReqFAQ ...
type CreateHelpdeskFAQReqFAQ struct {
	CategoryID     *string  `json:"category_id,omitempty"`     // 知识库分类ID, 示例值："6836004780707807251"
	Question       string   `json:"question,omitempty"`        // 问题, 示例值："问题"
	Answer         *string  `json:"answer,omitempty"`          // 答案, 示例值："答案"
	AnswerRichtext *string  `json:"answer_richtext,omitempty"` // 富文本答案和答案必须有一个必填。Json Array格式，富文本结构请见[了解更多: 富文本](https://open.feishu.cn/document/ukTMukTMukTM/uITM0YjLyEDN24iMxQjN), 示例值："[{,                        "content": "这只是一个测试，医保问题",,                        "type": "text",                    }]"
	Tags           []string `json:"tags,omitempty"`            // 相似问
}

// createHelpdeskFAQResp ...
type createHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskFAQResp `json:"data,omitempty"`
}

// CreateHelpdeskFAQResp ...
type CreateHelpdeskFAQResp struct {
	FAQ *CreateHelpdeskFAQRespFAQ `json:"faq,omitempty"` // 知识库详情
}

// CreateHelpdeskFAQRespFAQ ...
type CreateHelpdeskFAQRespFAQ struct {
	FAQID          string                              `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                              `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                              `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                              `json:"question,omitempty"`        // 问题
	Answer         string                              `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                              `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                               `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                               `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                 `json:"categories,omitempty"`      // 分类
	Tags           []string                            `json:"tags,omitempty"`            // 相似问列表
	ExpireTime     int64                               `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *CreateHelpdeskFAQRespFAQUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *CreateHelpdeskFAQRespFAQCreateUser `json:"create_user,omitempty"`     // 创建用户
}

// CreateHelpdeskFAQRespFAQUpdateUser ...
type CreateHelpdeskFAQRespFAQUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// CreateHelpdeskFAQRespFAQCreateUser ...
type CreateHelpdeskFAQRespFAQCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskFAQ 该接口用于删除知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/delete
func (r *HelpdeskService) DeleteHelpdeskFAQ(ctx context.Context, request *DeleteHelpdeskFAQReq, options ...MethodOptionFunc) (*DeleteHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskFAQ",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskFAQ mock HelpdeskDeleteHelpdeskFAQ method
func (r *Mock) MockHelpdeskDeleteHelpdeskFAQ(f func(ctx context.Context, request *DeleteHelpdeskFAQReq, options ...MethodOptionFunc) (*DeleteHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskFAQ = f
}

// UnMockHelpdeskDeleteHelpdeskFAQ un-mock HelpdeskDeleteHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskFAQ() {
	r.mockHelpdeskDeleteHelpdeskFAQ = nil
}

// DeleteHelpdeskFAQReq ...
type DeleteHelpdeskFAQReq struct {
	ID string `path:"id" json:"-"` // id, 示例值："12345"
}

// deleteHelpdeskFAQResp ...
type deleteHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskFAQResp `json:"data,omitempty"`
}

// DeleteHelpdeskFAQResp ...
type DeleteHelpdeskFAQResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQ 该接口用于获取服务台知识库详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/get
func (r *HelpdeskService) GetHelpdeskFAQ(ctx context.Context, request *GetHelpdeskFAQReq, options ...MethodOptionFunc) (*GetHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQ",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskFAQ mock HelpdeskGetHelpdeskFAQ method
func (r *Mock) MockHelpdeskGetHelpdeskFAQ(f func(ctx context.Context, request *GetHelpdeskFAQReq, options ...MethodOptionFunc) (*GetHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQ = f
}

// UnMockHelpdeskGetHelpdeskFAQ un-mock HelpdeskGetHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskGetHelpdeskFAQ() {
	r.mockHelpdeskGetHelpdeskFAQ = nil
}

// GetHelpdeskFAQReq ...
type GetHelpdeskFAQReq struct {
	ID string `path:"id" json:"-"` // 知识库ID, 示例值："6856395634652479491"
}

// getHelpdeskFAQResp ...
type getHelpdeskFAQResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskFAQResp `json:"data,omitempty"`
}

// GetHelpdeskFAQResp ...
type GetHelpdeskFAQResp struct {
	FAQ *GetHelpdeskFAQRespFAQ `json:"faq,omitempty"` // 知识库详情
}

// GetHelpdeskFAQRespFAQ ...
type GetHelpdeskFAQRespFAQ struct {
	FAQID          string                           `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                           `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                           `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                           `json:"question,omitempty"`        // 问题
	Answer         string                           `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                           `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                            `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                            `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory              `json:"categories,omitempty"`      // 分类
	Tags           []string                         `json:"tags,omitempty"`            // 相似问列表
	ExpireTime     int64                            `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *GetHelpdeskFAQRespFAQUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *GetHelpdeskFAQRespFAQCreateUser `json:"create_user,omitempty"`     // 创建用户
}

// GetHelpdeskFAQRespFAQUpdateUser ...
type GetHelpdeskFAQRespFAQUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// GetHelpdeskFAQRespFAQCreateUser ...
type GetHelpdeskFAQRespFAQCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQImage 该接口用于获取知识库图像。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/faq_image
func (r *HelpdeskService) GetHelpdeskFAQImage(ctx context.Context, request *GetHelpdeskFAQImageReq, options ...MethodOptionFunc) (*GetHelpdeskFAQImageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQImage mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id/image/:image_key",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskFAQImage mock HelpdeskGetHelpdeskFAQImage method
func (r *Mock) MockHelpdeskGetHelpdeskFAQImage(f func(ctx context.Context, request *GetHelpdeskFAQImageReq, options ...MethodOptionFunc) (*GetHelpdeskFAQImageResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQImage = f
}

// UnMockHelpdeskGetHelpdeskFAQImage un-mock HelpdeskGetHelpdeskFAQImage method
func (r *Mock) UnMockHelpdeskGetHelpdeskFAQImage() {
	r.mockHelpdeskGetHelpdeskFAQImage = nil
}

// GetHelpdeskFAQImageReq ...
type GetHelpdeskFAQImageReq struct {
	ID       string `path:"id" json:"-"`        // 知识库ID, 示例值："12345"
	ImageKey string `path:"image_key" json:"-"` // 图像key, 示例值："img_b07ffac0-19c1-48a3-afca-599f8ea825fj"
}

// getHelpdeskFAQImageResp ...
type getHelpdeskFAQImageResp struct {
	IsFile bool                     `json:"is_file,omitempty"`
	Code   int64                    `json:"code,omitempty"`
	Msg    string                   `json:"msg,omitempty"`
	Data   *GetHelpdeskFAQImageResp `json:"data,omitempty"`
}

func (r *getHelpdeskFAQImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &GetHelpdeskFAQImageResp{}
	}
	r.Data.File = file
}

// GetHelpdeskFAQImageResp ...
type GetHelpdeskFAQImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskFAQList 该接口用于获取服务台知识库详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/list
func (r *HelpdeskService) GetHelpdeskFAQList(ctx context.Context, request *GetHelpdeskFAQListReq, options ...MethodOptionFunc) (*GetHelpdeskFAQListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskFAQList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskFAQList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskFAQList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskFAQList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskFAQListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskFAQList mock HelpdeskGetHelpdeskFAQList method
func (r *Mock) MockHelpdeskGetHelpdeskFAQList(f func(ctx context.Context, request *GetHelpdeskFAQListReq, options ...MethodOptionFunc) (*GetHelpdeskFAQListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskFAQList = f
}

// UnMockHelpdeskGetHelpdeskFAQList un-mock HelpdeskGetHelpdeskFAQList method
func (r *Mock) UnMockHelpdeskGetHelpdeskFAQList() {
	r.mockHelpdeskGetHelpdeskFAQList = nil
}

// GetHelpdeskFAQListReq ...
type GetHelpdeskFAQListReq struct {
	CategoryID *string `query:"category_id" json:"-"` // 知识库分类ID, 示例值："6856395522433908739"
	Status     *string `query:"status" json:"-"`      // 搜索条件: 知识库状态 1:在线 0:删除，可恢复 2：删除，不可恢复	, 示例值："1"
	Search     *string `query:"search" json:"-"`      // 搜索条件: 关键词，匹配问题标题，问题关键字，用户姓名	, 示例值："点餐"
	PageToken  *string `query:"page_token" json:"-"`  // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6856395634652479491"
	PageSize   *int64  `query:"page_size" json:"-"`   // 分页大小, 示例值：10, 最大值：`100`
}

// getHelpdeskFAQListResp ...
type getHelpdeskFAQListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskFAQListResp `json:"data,omitempty"`
}

// GetHelpdeskFAQListResp ...
type GetHelpdeskFAQListResp struct {
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                        `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	PageSize  int64                         `json:"page_size,omitempty"`  // 实际返回的FAQ数量
	Total     int64                         `json:"total,omitempty"`      // 总数
	Items     []*GetHelpdeskFAQListRespItem `json:"items,omitempty"`      // 知识库列表
}

// GetHelpdeskFAQListRespItem ...
type GetHelpdeskFAQListRespItem struct {
	FAQID          string                                `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                                `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                                `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                                `json:"question,omitempty"`        // 问题
	Answer         string                                `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                                `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                                 `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                                 `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                   `json:"categories,omitempty"`      // 分类
	Tags           []string                              `json:"tags,omitempty"`            // 相似问列表
	ExpireTime     int64                                 `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *GetHelpdeskFAQListRespItemUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *GetHelpdeskFAQListRespItemCreateUser `json:"create_user,omitempty"`     // 创建用户
}

// GetHelpdeskFAQListRespItemUpdateUser ...
type GetHelpdeskFAQListRespItemUpdateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// GetHelpdeskFAQListRespItemCreateUser ...
type GetHelpdeskFAQListRespItemCreateUser struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchHelpdeskFAQ 该接口用于搜索服务台知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/search
func (r *HelpdeskService) SearchHelpdeskFAQ(ctx context.Context, request *SearchHelpdeskFAQReq, options ...MethodOptionFunc) (*SearchHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSearchHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SearchHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskSearchHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SearchHelpdeskFAQ",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(searchHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSearchHelpdeskFAQ mock HelpdeskSearchHelpdeskFAQ method
func (r *Mock) MockHelpdeskSearchHelpdeskFAQ(f func(ctx context.Context, request *SearchHelpdeskFAQReq, options ...MethodOptionFunc) (*SearchHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskSearchHelpdeskFAQ = f
}

// UnMockHelpdeskSearchHelpdeskFAQ un-mock HelpdeskSearchHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskSearchHelpdeskFAQ() {
	r.mockHelpdeskSearchHelpdeskFAQ = nil
}

// SearchHelpdeskFAQReq ...
type SearchHelpdeskFAQReq struct {
	Query     string  `query:"query" json:"-"`      // 搜索query,，query内容如果不是英文，包含中文空格等有两种编码策略：1. url编码 2. base64编码，同时加上base64=true参数, 示例值："wifi"
	Base64    *string `query:"base64" json:"-"`     // 是否转换为base64,输入true表示是，不填写表示否，中文需要转换为base64, 示例值："5bel5Y2V"
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6936004780707807251"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
}

// searchHelpdeskFAQResp ...
type searchHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *SearchHelpdeskFAQResp `json:"data,omitempty"`
}

// SearchHelpdeskFAQResp ...
type SearchHelpdeskFAQResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*SearchHelpdeskFAQRespItem `json:"items,omitempty"`      // 知识库列表
}

// SearchHelpdeskFAQRespItem ...
type SearchHelpdeskFAQRespItem struct {
	FAQID          string                               `json:"faq_id,omitempty"`          // 知识库ID
	ID             string                               `json:"id,omitempty"`              // 知识库旧版ID，请使用faq_id
	HelpdeskID     string                               `json:"helpdesk_id,omitempty"`     // 服务台ID
	Question       string                               `json:"question,omitempty"`        // 问题
	Answer         string                               `json:"answer,omitempty"`          // 答案
	AnswerRichtext string                               `json:"answer_richtext,omitempty"` // 富文本答案
	CreateTime     int64                                `json:"create_time,omitempty"`     // 创建时间
	UpdateTime     int64                                `json:"update_time,omitempty"`     // 修改时间
	Categories     []*HelpdeskCategory                  `json:"categories,omitempty"`      // 分类
	Tags           []string                             `json:"tags,omitempty"`            // 相似问列表
	ExpireTime     int64                                `json:"expire_time,omitempty"`     // 失效时间
	UpdateUser     *SearchHelpdeskFAQRespItemUpdateUser `json:"update_user,omitempty"`     // 更新用户
	CreateUser     *SearchHelpdeskFAQRespItemCreateUser `json:"create_user,omitempty"`     // 创建用户
}

// SearchHelpdeskFAQRespItemUpdateUser ...
type SearchHelpdeskFAQRespItemUpdateUser struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Department string `json:"department,omitempty"` // 所在部门名称
}

// SearchHelpdeskFAQRespItemCreateUser ...
type SearchHelpdeskFAQRespItemCreateUser struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Department string `json:"department,omitempty"` // 所在部门名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskFAQ 该接口用于修改知识库。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/faq/patch
func (r *HelpdeskService) UpdateHelpdeskFAQ(ctx context.Context, request *UpdateHelpdeskFAQReq, options ...MethodOptionFunc) (*UpdateHelpdeskFAQResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskFAQ != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskFAQ mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskFAQ(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskFAQ",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/faqs/:id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskFAQResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskFAQ mock HelpdeskUpdateHelpdeskFAQ method
func (r *Mock) MockHelpdeskUpdateHelpdeskFAQ(f func(ctx context.Context, request *UpdateHelpdeskFAQReq, options ...MethodOptionFunc) (*UpdateHelpdeskFAQResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskFAQ = f
}

// UnMockHelpdeskUpdateHelpdeskFAQ un-mock HelpdeskUpdateHelpdeskFAQ method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskFAQ() {
	r.mockHelpdeskUpdateHelpdeskFAQ = nil
}

// UpdateHelpdeskFAQReq ...
type UpdateHelpdeskFAQReq struct {
	ID  string                   `path:"id" json:"-"`   // 知识库ID, 示例值："6856395634652479491"
	FAQ *UpdateHelpdeskFAQReqFAQ `json:"faq,omitempty"` // 修改的知识库内容
}

// UpdateHelpdeskFAQReqFAQ ...
type UpdateHelpdeskFAQReqFAQ struct {
	CategoryID     *string  `json:"category_id,omitempty"`     // 知识库分类ID, 示例值："6836004780707807251"
	Question       string   `json:"question,omitempty"`        // 问题, 示例值："问题"
	Answer         *string  `json:"answer,omitempty"`          // 答案, 示例值："答案"
	AnswerRichtext *string  `json:"answer_richtext,omitempty"` // 富文本答案和答案必须有一个必填。Json Array格式，富文本结构请见[了解更多: 富文本](https://open.feishu.cn/document/ukTMukTMukTM/uITM0YjLyEDN24iMxQjN), 示例值："[{,                        "content": "这只是一个测试，医保问题",,                        "type": "text",                    }]"
	Tags           []string `json:"tags,omitempty"`            // 相似问
}

// updateHelpdeskFAQResp ...
type updateHelpdeskFAQResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskFAQResp `json:"data,omitempty"`
}

// UpdateHelpdeskFAQResp ...
type UpdateHelpdeskFAQResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendHelpdeskMessage 通过服务台机器人给指定用户的服务台专属群或私聊发送消息，支持文本、富文本、卡片、图片。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/bot-message/create
func (r *HelpdeskService) SendHelpdeskMessage(ctx context.Context, request *SendHelpdeskMessageReq, options ...MethodOptionFunc) (*SendHelpdeskMessageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSendHelpdeskMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendHelpdeskMessage mock enable")
		return r.cli.mock.mockHelpdeskSendHelpdeskMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SendHelpdeskMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/message",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(sendHelpdeskMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSendHelpdeskMessage mock HelpdeskSendHelpdeskMessage method
func (r *Mock) MockHelpdeskSendHelpdeskMessage(f func(ctx context.Context, request *SendHelpdeskMessageReq, options ...MethodOptionFunc) (*SendHelpdeskMessageResp, *Response, error)) {
	r.mockHelpdeskSendHelpdeskMessage = f
}

// UnMockHelpdeskSendHelpdeskMessage un-mock HelpdeskSendHelpdeskMessage method
func (r *Mock) UnMockHelpdeskSendHelpdeskMessage() {
	r.mockHelpdeskSendHelpdeskMessage = nil
}

// SendHelpdeskMessageReq ...
type SendHelpdeskMessageReq struct {
	UserIDType  *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	MsgType     MsgType `json:"msg_type,omitempty"`     // 消息类型, 示例值："post", 可选值有: `text`：普通文本, `post`：富文本, `image`：图片, `interactive`：卡片消息
	Content     string  `json:"content,omitempty"`      // 消息内容，json格式结构序列化成string。格式说明参考: [发送消息content说明](https://open.feishu.cn/document/ukTMukTMukTM/uUjNz4SN2MjL1YzM), 示例值："{\"post\":{\"zh_cn\":{\"title\":\"some title\",\"content\":[[{\"tag\":\"text\",\"text\":\"some content\"}]]}}}"
	ReceiverID  string  `json:"receiver_id,omitempty"`  // 接收消息用户id, 示例值："ou_7346484524"
	ReceiveType *string `json:"receive_type,omitempty"` // 接收消息方式，chat(服务台专属服务群)或user(服务台机器人私聊)。若选择专属服务群，用户有正在处理的工单将会发送失败。默认以chat方式发送。, 示例值："chat", 可选值有: `chat`：通过服务台专属群发送, `user`：通过服务台机器人私聊发送
}

// sendHelpdeskMessageResp ...
type sendHelpdeskMessageResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *SendHelpdeskMessageResp `json:"data,omitempty"`
}

// SendHelpdeskMessageResp ...
type SendHelpdeskMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // chat消息open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CancelApproveHelpdeskNotification 提交审核后，如果需要取消审核，则调用此接口
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_approve
func (r *HelpdeskService) CancelApproveHelpdeskNotification(ctx context.Context, request *CancelApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelApproveHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCancelApproveHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CancelApproveHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskCancelApproveHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CancelApproveHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/cancel_approve",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(cancelApproveHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCancelApproveHelpdeskNotification mock HelpdeskCancelApproveHelpdeskNotification method
func (r *Mock) MockHelpdeskCancelApproveHelpdeskNotification(f func(ctx context.Context, request *CancelApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelApproveHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskCancelApproveHelpdeskNotification = f
}

// UnMockHelpdeskCancelApproveHelpdeskNotification un-mock HelpdeskCancelApproveHelpdeskNotification method
func (r *Mock) UnMockHelpdeskCancelApproveHelpdeskNotification() {
	r.mockHelpdeskCancelApproveHelpdeskNotification = nil
}

// CancelApproveHelpdeskNotificationReq ...
type CancelApproveHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 唯一ID, 示例值："6981801914270744596"
}

// cancelApproveHelpdeskNotificationResp ...
type cancelApproveHelpdeskNotificationResp struct {
	Code int64                                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                 `json:"msg,omitempty"`  // 错误描述
	Data *CancelApproveHelpdeskNotificationResp `json:"data,omitempty"`
}

// CancelApproveHelpdeskNotificationResp ...
type CancelApproveHelpdeskNotificationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CancelSendHelpdeskNotification 取消推送接口，审核通过后待调度可以调用，发送过程中可以调用（会撤回已发送的消息），发送完成后可以需要推送（会撤回所有已发送的消息）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/cancel_send
func (r *HelpdeskService) CancelSendHelpdeskNotification(ctx context.Context, request *CancelSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelSendHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCancelSendHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CancelSendHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskCancelSendHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CancelSendHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/cancel_send",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(cancelSendHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCancelSendHelpdeskNotification mock HelpdeskCancelSendHelpdeskNotification method
func (r *Mock) MockHelpdeskCancelSendHelpdeskNotification(f func(ctx context.Context, request *CancelSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*CancelSendHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskCancelSendHelpdeskNotification = f
}

// UnMockHelpdeskCancelSendHelpdeskNotification un-mock HelpdeskCancelSendHelpdeskNotification method
func (r *Mock) UnMockHelpdeskCancelSendHelpdeskNotification() {
	r.mockHelpdeskCancelSendHelpdeskNotification = nil
}

// CancelSendHelpdeskNotificationReq ...
type CancelSendHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 唯一ID, 示例值："6981801914270744596"
	IsRecall       bool   `json:"is_recall,omitempty"`      // 是否召回已发送的消息,新人入职消息同样适用, 示例值：true
}

// cancelSendHelpdeskNotificationResp ...
type cancelSendHelpdeskNotificationResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *CancelSendHelpdeskNotificationResp `json:"data,omitempty"`
}

// CancelSendHelpdeskNotificationResp ...
type CancelSendHelpdeskNotificationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskNotification 调用接口创建推送，创建成功后为草稿状态
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/create
func (r *HelpdeskService) CreateHelpdeskNotification(ctx context.Context, request *CreateHelpdeskNotificationReq, options ...MethodOptionFunc) (*CreateHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskNotification mock HelpdeskCreateHelpdeskNotification method
func (r *Mock) MockHelpdeskCreateHelpdeskNotification(f func(ctx context.Context, request *CreateHelpdeskNotificationReq, options ...MethodOptionFunc) (*CreateHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskNotification = f
}

// UnMockHelpdeskCreateHelpdeskNotification un-mock HelpdeskCreateHelpdeskNotification method
func (r *Mock) UnMockHelpdeskCreateHelpdeskNotification() {
	r.mockHelpdeskCreateHelpdeskNotification = nil
}

// CreateHelpdeskNotificationReq ...
type CreateHelpdeskNotificationReq struct {
	UserIDType                  *IDType                                                 `query:"user_id_type" json:"-"`                    // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	ID                          *string                                                 `json:"id,omitempty"`                              // 非必填，创建成功后返回, 示例值："6981801914270744596"
	JobName                     *string                                                 `json:"job_name,omitempty"`                        // 必填，任务名称, 示例值："测试推送任务"
	Status                      *int64                                                  `json:"status,omitempty"`                          // 非必填，创建成功后返回, 示例值：0
	CreateUser                  *CreateHelpdeskNotificationReqCreateUser                `json:"create_user,omitempty"`                     // 非必填，创建人
	CreatedAt                   *string                                                 `json:"created_at,omitempty"`                      // 非必填，创建时间（毫秒时间戳）, 示例值："1626332244719"
	UpdateUser                  *CreateHelpdeskNotificationReqUpdateUser                `json:"update_user,omitempty"`                     // 非必填，更新用户
	UpdatedAt                   *string                                                 `json:"updated_at,omitempty"`                      // 非必填，更新时间（毫秒时间戳）, 示例值："1626332244719"
	TargetUserCount             *int64                                                  `json:"target_user_count,omitempty"`               // 非必填，目标推送用户总数, 示例值：1
	SentUserCount               *int64                                                  `json:"sent_user_count,omitempty"`                 // 非必填，已推送用户总数, 示例值：1
	ReadUserCount               *int64                                                  `json:"read_user_count,omitempty"`                 // 非必填，已读用户总数, 示例值：1
	SendAt                      *string                                                 `json:"send_at,omitempty"`                         // 非必填，推送任务触发时间（毫秒时间戳）, 示例值："1626332244719"
	PushContent                 *string                                                 `json:"push_content,omitempty"`                    // 必填，推送内容，详见：https://open.feishu.cn/tool/cardbuilder?from=howtoguide, 示例值："{   \"config\": {     \"wide_screen_mode\": true   },   \"elements\": [     {       \"tag\": \"div\",       \"text\": {         \"tag\": \"lark_md\",         \"content\": \"[飞书](https://www.feishu.cn)整合即时沟通、日历、音视频会议、云文档、云盘、工作台等功能于一体，成就组织和个人，更高效、更愉悦。\"       }     }   ] }"
	PushType                    *int64                                                  `json:"push_type,omitempty"`                       // 必填，,0（定时推送：push_scope不能等于3） 1（新人入职推送：push_scope必须等于1或者3；new_staff_scope_type不能为空）, 示例值：0
	PushScopeType               *int64                                                  `json:"push_scope_type,omitempty"`                 // 必填，,推送范围（服务台私信） 0：组织内全部成员（user_list和department_list必须为空） 1：不推送任何成员（user_list和department_list必须为空，chat_list不可为空） 2：推送到部分成员（user_list或department_list不能为空） 3：入职新人 以上四种状态，chat_list都相对独立，只有在推送范围为1时，必须需要设置chat_list, 示例值：0
	NewStaffScopeType           *int64                                                  `json:"new_staff_scope_type,omitempty"`            // 非必填，,新人入职范围类型（push_type为1时生效） 0：组织内所有新人 1：组织内特定的部门（new_staff_scope_department_list 字段不能为空）, 示例值：0
	NewStaffScopeDepartmentList []*CreateHelpdeskNotificationReqNewStaffScopeDepartment `json:"new_staff_scope_department_list,omitempty"` // 非必填，新人入职生效部门列表
	UserList                    []*CreateHelpdeskNotificationReqUser                    `json:"user_list,omitempty"`                       // 非必填，push推送到成员列表
	DepartmentList              []*CreateHelpdeskNotificationReqDepartment              `json:"department_list,omitempty"`                 // 非必填，push推送到的部门信息列表
	ChatList                    []*CreateHelpdeskNotificationReqChat                    `json:"chat_list,omitempty"`                       // 非必填，push推送到的会话列表(群)
	Ext                         *string                                                 `json:"ext,omitempty"`                             // 非必填，预留扩展字段, 示例值："{}"
}

// CreateHelpdeskNotificationReqCreateUser ...
type CreateHelpdeskNotificationReqCreateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// CreateHelpdeskNotificationReqUpdateUser ...
type CreateHelpdeskNotificationReqUpdateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// CreateHelpdeskNotificationReqNewStaffScopeDepartment ...
type CreateHelpdeskNotificationReqNewStaffScopeDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// CreateHelpdeskNotificationReqUser ...
type CreateHelpdeskNotificationReqUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// CreateHelpdeskNotificationReqDepartment ...
type CreateHelpdeskNotificationReqDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// CreateHelpdeskNotificationReqChat ...
type CreateHelpdeskNotificationReqChat struct {
	ChatID *string `json:"chat_id,omitempty"` // 非必填，会话ID, 示例值："oc_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name   *string `json:"name,omitempty"`    // 非必填，会话名称, 示例值："测试群聊"
}

// createHelpdeskNotificationResp ...
type createHelpdeskNotificationResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskNotificationResp `json:"data,omitempty"`
}

// CreateHelpdeskNotificationResp ...
type CreateHelpdeskNotificationResp struct {
	NotificationID string `json:"notification_id,omitempty"` // 创建成功后的唯一id
	Status         int64  `json:"status,omitempty"`          // 当前状态
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ExecuteSendHelpdeskNotification 审核通过后调用此接口设置推送时间，等待调度系统调度，发送消息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/execute_send
func (r *HelpdeskService) ExecuteSendHelpdeskNotification(ctx context.Context, request *ExecuteSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*ExecuteSendHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskExecuteSendHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#ExecuteSendHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskExecuteSendHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "ExecuteSendHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/execute_send",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(executeSendHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskExecuteSendHelpdeskNotification mock HelpdeskExecuteSendHelpdeskNotification method
func (r *Mock) MockHelpdeskExecuteSendHelpdeskNotification(f func(ctx context.Context, request *ExecuteSendHelpdeskNotificationReq, options ...MethodOptionFunc) (*ExecuteSendHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskExecuteSendHelpdeskNotification = f
}

// UnMockHelpdeskExecuteSendHelpdeskNotification un-mock HelpdeskExecuteSendHelpdeskNotification method
func (r *Mock) UnMockHelpdeskExecuteSendHelpdeskNotification() {
	r.mockHelpdeskExecuteSendHelpdeskNotification = nil
}

// ExecuteSendHelpdeskNotificationReq ...
type ExecuteSendHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 创建接口返回的唯一id, 示例值："6985032626234982420"
	SendAt         string `json:"send_at,omitempty"`        // 发送时间戳(毫秒), 示例值："1624326025000"
}

// executeSendHelpdeskNotificationResp ...
type executeSendHelpdeskNotificationResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                               `json:"msg,omitempty"`  // 错误描述
	Data *ExecuteSendHelpdeskNotificationResp `json:"data,omitempty"`
}

// ExecuteSendHelpdeskNotificationResp ...
type ExecuteSendHelpdeskNotificationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskNotification 查询推送详情
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/get
func (r *HelpdeskService) GetHelpdeskNotification(ctx context.Context, request *GetHelpdeskNotificationReq, options ...MethodOptionFunc) (*GetHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskNotification",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskNotification mock HelpdeskGetHelpdeskNotification method
func (r *Mock) MockHelpdeskGetHelpdeskNotification(f func(ctx context.Context, request *GetHelpdeskNotificationReq, options ...MethodOptionFunc) (*GetHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskNotification = f
}

// UnMockHelpdeskGetHelpdeskNotification un-mock HelpdeskGetHelpdeskNotification method
func (r *Mock) UnMockHelpdeskGetHelpdeskNotification() {
	r.mockHelpdeskGetHelpdeskNotification = nil
}

// GetHelpdeskNotificationReq ...
type GetHelpdeskNotificationReq struct {
	UserIDType     *IDType `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NotificationID string  `path:"notification_id" json:"-"` // 唯一ID, 示例值："1624326025000"
}

// getHelpdeskNotificationResp ...
type getHelpdeskNotificationResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskNotificationResp `json:"data,omitempty"`
}

// GetHelpdeskNotificationResp ...
type GetHelpdeskNotificationResp struct {
	Notification    *GetHelpdeskNotificationRespNotification `json:"notification,omitempty"`      // push任务详情
	ApprovalAppLink string                                   `json:"approval_app_link,omitempty"` // 审批链接
}

// GetHelpdeskNotificationRespNotification ...
type GetHelpdeskNotificationRespNotification struct {
	ID                          string                                                            `json:"id,omitempty"`                              // 非必填，创建成功后返回
	JobName                     string                                                            `json:"job_name,omitempty"`                        // 必填，任务名称
	Status                      int64                                                             `json:"status,omitempty"`                          // 非必填，创建成功后返回
	CreateUser                  *GetHelpdeskNotificationRespNotificationCreateUser                `json:"create_user,omitempty"`                     // 非必填，创建人
	CreatedAt                   string                                                            `json:"created_at,omitempty"`                      // 非必填，创建时间（毫秒时间戳）
	UpdateUser                  *GetHelpdeskNotificationRespNotificationUpdateUser                `json:"update_user,omitempty"`                     // 非必填，更新用户
	UpdatedAt                   string                                                            `json:"updated_at,omitempty"`                      // 非必填，更新时间（毫秒时间戳）
	TargetUserCount             int64                                                             `json:"target_user_count,omitempty"`               // 非必填，目标推送用户总数
	SentUserCount               int64                                                             `json:"sent_user_count,omitempty"`                 // 非必填，已推送用户总数
	ReadUserCount               int64                                                             `json:"read_user_count,omitempty"`                 // 非必填，已读用户总数
	SendAt                      string                                                            `json:"send_at,omitempty"`                         // 非必填，推送任务触发时间（毫秒时间戳）
	PushContent                 string                                                            `json:"push_content,omitempty"`                    // 必填，推送内容，详见：https://open.feishu.cn/tool/cardbuilder?from=howtoguide
	PushType                    int64                                                             `json:"push_type,omitempty"`                       // 必填，,0（定时推送：push_scope不能等于3） 1（新人入职推送：push_scope必须等于1或者3；new_staff_scope_type不能为空）
	PushScopeType               int64                                                             `json:"push_scope_type,omitempty"`                 // 必填，,推送范围（服务台私信） 0：组织内全部成员（user_list和department_list必须为空） 1：不推送任何成员（user_list和department_list必须为空，chat_list不可为空） 2：推送到部分成员（user_list或department_list不能为空） 3：入职新人 以上四种状态，chat_list都相对独立，只有在推送范围为1时，必须需要设置chat_list
	NewStaffScopeType           int64                                                             `json:"new_staff_scope_type,omitempty"`            // 非必填，,新人入职范围类型（push_type为1时生效） 0：组织内所有新人 1：组织内特定的部门（new_staff_scope_department_list 字段不能为空）
	NewStaffScopeDepartmentList []*GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment `json:"new_staff_scope_department_list,omitempty"` // 非必填，新人入职生效部门列表
	UserList                    []*GetHelpdeskNotificationRespNotificationUser                    `json:"user_list,omitempty"`                       // 非必填，push推送到成员列表
	DepartmentList              []*GetHelpdeskNotificationRespNotificationDepartment              `json:"department_list,omitempty"`                 // 非必填，push推送到的部门信息列表
	ChatList                    []*GetHelpdeskNotificationRespNotificationChat                    `json:"chat_list,omitempty"`                       // 非必填，push推送到的会话列表(群)
	Ext                         string                                                            `json:"ext,omitempty"`                             // 非必填，预留扩展字段
}

// GetHelpdeskNotificationRespNotificationCreateUser ...
type GetHelpdeskNotificationRespNotificationCreateUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填，用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填，头像地址
	Name      string `json:"name,omitempty"`       // 非必填，用户名称
}

// GetHelpdeskNotificationRespNotificationUpdateUser ...
type GetHelpdeskNotificationRespNotificationUpdateUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填，用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填，头像地址
	Name      string `json:"name,omitempty"`       // 非必填，用户名称
}

// GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment ...
type GetHelpdeskNotificationRespNotificationNewStaffScopeDepartment struct {
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
	Name         string `json:"name,omitempty"`          // 非必填，部门名称
}

// GetHelpdeskNotificationRespNotificationUser ...
type GetHelpdeskNotificationRespNotificationUser struct {
	UserID    string `json:"user_id,omitempty"`    // 非必填，用户id
	AvatarURL string `json:"avatar_url,omitempty"` // 非必填，头像地址
	Name      string `json:"name,omitempty"`       // 非必填，用户名称
}

// GetHelpdeskNotificationRespNotificationDepartment ...
type GetHelpdeskNotificationRespNotificationDepartment struct {
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
	Name         string `json:"name,omitempty"`          // 非必填，部门名称
}

// GetHelpdeskNotificationRespNotificationChat ...
type GetHelpdeskNotificationRespNotificationChat struct {
	ChatID string `json:"chat_id,omitempty"` // 非必填，会话ID
	Name   string `json:"name,omitempty"`    // 非必填，会话名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PreviewHelpdeskNotification 在正式执行推送之前是可以调用此接口预览设置的推送内容
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/preview
func (r *HelpdeskService) PreviewHelpdeskNotification(ctx context.Context, request *PreviewHelpdeskNotificationReq, options ...MethodOptionFunc) (*PreviewHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskPreviewHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#PreviewHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskPreviewHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "PreviewHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/preview",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(previewHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskPreviewHelpdeskNotification mock HelpdeskPreviewHelpdeskNotification method
func (r *Mock) MockHelpdeskPreviewHelpdeskNotification(f func(ctx context.Context, request *PreviewHelpdeskNotificationReq, options ...MethodOptionFunc) (*PreviewHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskPreviewHelpdeskNotification = f
}

// UnMockHelpdeskPreviewHelpdeskNotification un-mock HelpdeskPreviewHelpdeskNotification method
func (r *Mock) UnMockHelpdeskPreviewHelpdeskNotification() {
	r.mockHelpdeskPreviewHelpdeskNotification = nil
}

// PreviewHelpdeskNotificationReq ...
type PreviewHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 创建推送接口成功后返回的唯一id, 示例值："6985032626234982420"
}

// previewHelpdeskNotificationResp ...
type previewHelpdeskNotificationResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *PreviewHelpdeskNotificationResp `json:"data,omitempty"`
}

// PreviewHelpdeskNotificationResp ...
type PreviewHelpdeskNotificationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubmitApproveHelpdeskNotification 正常情况下调用创建推送接口后，就可以调用提交审核接口，如果创建人是服务台owner则会自动审核通过，否则会通知服务台owner审核此推送信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/submit_approve
func (r *HelpdeskService) SubmitApproveHelpdeskNotification(ctx context.Context, request *SubmitApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*SubmitApproveHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSubmitApproveHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SubmitApproveHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskSubmitApproveHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "SubmitApproveHelpdeskNotification",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id/submit_approve",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(submitApproveHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSubmitApproveHelpdeskNotification mock HelpdeskSubmitApproveHelpdeskNotification method
func (r *Mock) MockHelpdeskSubmitApproveHelpdeskNotification(f func(ctx context.Context, request *SubmitApproveHelpdeskNotificationReq, options ...MethodOptionFunc) (*SubmitApproveHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskSubmitApproveHelpdeskNotification = f
}

// UnMockHelpdeskSubmitApproveHelpdeskNotification un-mock HelpdeskSubmitApproveHelpdeskNotification method
func (r *Mock) UnMockHelpdeskSubmitApproveHelpdeskNotification() {
	r.mockHelpdeskSubmitApproveHelpdeskNotification = nil
}

// SubmitApproveHelpdeskNotificationReq ...
type SubmitApproveHelpdeskNotificationReq struct {
	NotificationID string `path:"notification_id" json:"-"` // 创建接口返回的唯一id, 示例值："6985032626234982420"
	Reason         string `json:"reason,omitempty"`         // 提交审批理由, 示例值："测试发送消息"
}

// submitApproveHelpdeskNotificationResp ...
type submitApproveHelpdeskNotificationResp struct {
	Code int64                                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                 `json:"msg,omitempty"`  // 错误描述
	Data *SubmitApproveHelpdeskNotificationResp `json:"data,omitempty"`
}

// SubmitApproveHelpdeskNotificationResp ...
type SubmitApproveHelpdeskNotificationResp struct {
	HasAccess bool `json:"has_access,omitempty"` // 是否有权限创建或者管理审批流程 （有两种情况会导致没有权限： 1：用户没有安装服务台小程序，需要在https://app.feishu.cn/app/cli_9f9f8825d53b900d或者https://ftest.feishu.cn/admin/appCenter/manage/cli_9f9f8825d53b900d?lang=zh-CN 安装小程序 2：用户安装的服务台小程序版本过低）
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskNotification 更新推送信息，只有在草稿状态下才可以调用此接口进行更新
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/notification/patch
func (r *HelpdeskService) UpdateHelpdeskNotification(ctx context.Context, request *UpdateHelpdeskNotificationReq, options ...MethodOptionFunc) (*UpdateHelpdeskNotificationResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskNotification != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskNotification mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskNotification(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskNotification",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/notifications/:notification_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskNotificationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskNotification mock HelpdeskUpdateHelpdeskNotification method
func (r *Mock) MockHelpdeskUpdateHelpdeskNotification(f func(ctx context.Context, request *UpdateHelpdeskNotificationReq, options ...MethodOptionFunc) (*UpdateHelpdeskNotificationResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskNotification = f
}

// UnMockHelpdeskUpdateHelpdeskNotification un-mock HelpdeskUpdateHelpdeskNotification method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskNotification() {
	r.mockHelpdeskUpdateHelpdeskNotification = nil
}

// UpdateHelpdeskNotificationReq ...
type UpdateHelpdeskNotificationReq struct {
	UserIDType                  *IDType                                                 `query:"user_id_type" json:"-"`                    // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	NotificationID              string                                                  `path:"notification_id" json:"-"`                  // push任务唯一id, 示例值："6985032626234982420"
	ID                          *string                                                 `json:"id,omitempty"`                              // 非必填，创建成功后返回, 示例值："6981801914270744596"
	JobName                     *string                                                 `json:"job_name,omitempty"`                        // 必填，任务名称, 示例值："测试推送任务"
	Status                      *int64                                                  `json:"status,omitempty"`                          // 非必填，创建成功后返回, 示例值：0
	CreateUser                  *UpdateHelpdeskNotificationReqCreateUser                `json:"create_user,omitempty"`                     // 非必填，创建人
	CreatedAt                   *string                                                 `json:"created_at,omitempty"`                      // 非必填，创建时间（毫秒时间戳）, 示例值："1626332244719"
	UpdateUser                  *UpdateHelpdeskNotificationReqUpdateUser                `json:"update_user,omitempty"`                     // 非必填，更新用户
	UpdatedAt                   *string                                                 `json:"updated_at,omitempty"`                      // 非必填，更新时间（毫秒时间戳）, 示例值："1626332244719"
	TargetUserCount             *int64                                                  `json:"target_user_count,omitempty"`               // 非必填，目标推送用户总数, 示例值：1
	SentUserCount               *int64                                                  `json:"sent_user_count,omitempty"`                 // 非必填，已推送用户总数, 示例值：1
	ReadUserCount               *int64                                                  `json:"read_user_count,omitempty"`                 // 非必填，已读用户总数, 示例值：1
	SendAt                      *string                                                 `json:"send_at,omitempty"`                         // 非必填，推送任务触发时间（毫秒时间戳）, 示例值："1626332244719"
	PushContent                 *string                                                 `json:"push_content,omitempty"`                    // 必填，推送内容，详见：https://open.feishu.cn/tool/cardbuilder?from=howtoguide, 示例值："{   \"config\": {     \"wide_screen_mode\": true   },   \"elements\": [     {       \"tag\": \"div\",       \"text\": {         \"tag\": \"lark_md\",         \"content\": \"[飞书](https://www.feishu.cn)整合即时沟通、日历、音视频会议、云文档、云盘、工作台等功能于一体，成就组织和个人，更高效、更愉悦。\"       }     }   ] }"
	PushType                    *int64                                                  `json:"push_type,omitempty"`                       // 必填，,0（定时推送：push_scope不能等于3） 1（新人入职推送：push_scope必须等于1或者3；new_staff_scope_type不能为空）, 示例值：0
	PushScopeType               *int64                                                  `json:"push_scope_type,omitempty"`                 // 必填，,推送范围（服务台私信） 0：组织内全部成员（user_list和department_list必须为空） 1：不推送任何成员（user_list和department_list必须为空，chat_list不可为空） 2：推送到部分成员（user_list或department_list不能为空） 3：入职新人 以上四种状态，chat_list都相对独立，只有在推送范围为1时，必须需要设置chat_list, 示例值：0
	NewStaffScopeType           *int64                                                  `json:"new_staff_scope_type,omitempty"`            // 非必填，,新人入职范围类型（push_type为1时生效） 0：组织内所有新人 1：组织内特定的部门（new_staff_scope_department_list 字段不能为空）, 示例值：0
	NewStaffScopeDepartmentList []*UpdateHelpdeskNotificationReqNewStaffScopeDepartment `json:"new_staff_scope_department_list,omitempty"` // 非必填，新人入职生效部门列表
	UserList                    []*UpdateHelpdeskNotificationReqUser                    `json:"user_list,omitempty"`                       // 非必填，push推送到成员列表
	DepartmentList              []*UpdateHelpdeskNotificationReqDepartment              `json:"department_list,omitempty"`                 // 非必填，push推送到的部门信息列表
	ChatList                    []*UpdateHelpdeskNotificationReqChat                    `json:"chat_list,omitempty"`                       // 非必填，push推送到的会话列表(群)
	Ext                         *string                                                 `json:"ext,omitempty"`                             // 非必填，预留扩展字段, 示例值："{}"
}

// UpdateHelpdeskNotificationReqCreateUser ...
type UpdateHelpdeskNotificationReqCreateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// UpdateHelpdeskNotificationReqUpdateUser ...
type UpdateHelpdeskNotificationReqUpdateUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// UpdateHelpdeskNotificationReqNewStaffScopeDepartment ...
type UpdateHelpdeskNotificationReqNewStaffScopeDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// UpdateHelpdeskNotificationReqUser ...
type UpdateHelpdeskNotificationReqUser struct {
	UserID    *string `json:"user_id,omitempty"`    // 非必填，用户id, 示例值："ou_7277fd1262bfafc363d5b2a1f9c2ac90"
	AvatarURL *string `json:"avatar_url,omitempty"` // 非必填，头像地址, 示例值："http://*.com/*.png"
	Name      *string `json:"name,omitempty"`       // 非必填，用户名称, 示例值："test"
}

// UpdateHelpdeskNotificationReqDepartment ...
type UpdateHelpdeskNotificationReqDepartment struct {
	DepartmentID *string `json:"department_id,omitempty"` // 部门ID, 示例值："od_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name         *string `json:"name,omitempty"`          // 非必填，部门名称, 示例值："测试部门"
}

// UpdateHelpdeskNotificationReqChat ...
type UpdateHelpdeskNotificationReqChat struct {
	ChatID *string `json:"chat_id,omitempty"` // 非必填，会话ID, 示例值："oc_7277fd1262bfafc363d5b2a1f9c2ac90"
	Name   *string `json:"name,omitempty"`    // 非必填，会话名称, 示例值："测试群聊"
}

// updateHelpdeskNotificationResp ...
type updateHelpdeskNotificationResp struct {
	Code int64                           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskNotificationResp `json:"data,omitempty"`
}

// UpdateHelpdeskNotificationResp ...
type UpdateHelpdeskNotificationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// StartHelpdeskService 该接口用于创建服务台对话。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/start_service
func (r *HelpdeskService) StartHelpdeskService(ctx context.Context, request *StartHelpdeskServiceReq, options ...MethodOptionFunc) (*StartHelpdeskServiceResp, *Response, error) {
	if r.cli.mock.mockHelpdeskStartHelpdeskService != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#StartHelpdeskService mock enable")
		return r.cli.mock.mockHelpdeskStartHelpdeskService(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "StartHelpdeskService",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/start_service",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(startHelpdeskServiceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskStartHelpdeskService mock HelpdeskStartHelpdeskService method
func (r *Mock) MockHelpdeskStartHelpdeskService(f func(ctx context.Context, request *StartHelpdeskServiceReq, options ...MethodOptionFunc) (*StartHelpdeskServiceResp, *Response, error)) {
	r.mockHelpdeskStartHelpdeskService = f
}

// UnMockHelpdeskStartHelpdeskService un-mock HelpdeskStartHelpdeskService method
func (r *Mock) UnMockHelpdeskStartHelpdeskService() {
	r.mockHelpdeskStartHelpdeskService = nil
}

// StartHelpdeskServiceReq ...
type StartHelpdeskServiceReq struct {
	HumanService    *bool    `json:"human_service,omitempty"`    // 是否直接进入人工(若appointed_agents填写了，该值为必填), 示例值：false
	AppointedAgents []string `json:"appointed_agents,omitempty"` // 客服 open ids (获取方式参考[获取单个用户信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get))，human_service需要为true, 示例值：[ou_7dab8a3d3cdcc9da365777c7ad535d62]
	OpenID          string   `json:"open_id,omitempty"`          // 用户 open id,(获取方式参考[获取单个用户信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get)), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	CustomizedInfo  *string  `json:"customized_info,omitempty"`  // 工单来源自定义信息，长度限制1024字符，如设置，[获取工单详情](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get)会返回此信息, 示例值："test customized info"
}

// startHelpdeskServiceResp ...
type startHelpdeskServiceResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *StartHelpdeskServiceResp `json:"data,omitempty"`
}

// StartHelpdeskServiceResp ...
type StartHelpdeskServiceResp struct {
	ChatID string `json:"chat_id,omitempty"` // 客服群open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AnswerHelpdeskTicketUserQuery 该接口用于回复用户提问结果至工单，需要工单仍处于进行中且未接入人工状态。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/answer_user_query
func (r *HelpdeskService) AnswerHelpdeskTicketUserQuery(ctx context.Context, request *AnswerHelpdeskTicketUserQueryReq, options ...MethodOptionFunc) (*AnswerHelpdeskTicketUserQueryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskAnswerHelpdeskTicketUserQuery != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#AnswerHelpdeskTicketUserQuery mock enable")
		return r.cli.mock.mockHelpdeskAnswerHelpdeskTicketUserQuery(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "AnswerHelpdeskTicketUserQuery",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/answer_user_query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(answerHelpdeskTicketUserQueryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskAnswerHelpdeskTicketUserQuery mock HelpdeskAnswerHelpdeskTicketUserQuery method
func (r *Mock) MockHelpdeskAnswerHelpdeskTicketUserQuery(f func(ctx context.Context, request *AnswerHelpdeskTicketUserQueryReq, options ...MethodOptionFunc) (*AnswerHelpdeskTicketUserQueryResp, *Response, error)) {
	r.mockHelpdeskAnswerHelpdeskTicketUserQuery = f
}

// UnMockHelpdeskAnswerHelpdeskTicketUserQuery un-mock HelpdeskAnswerHelpdeskTicketUserQuery method
func (r *Mock) UnMockHelpdeskAnswerHelpdeskTicketUserQuery() {
	r.mockHelpdeskAnswerHelpdeskTicketUserQuery = nil
}

// AnswerHelpdeskTicketUserQueryReq ...
type AnswerHelpdeskTicketUserQueryReq struct {
	TicketID string                                 `path:"ticket_id" json:"-"` // 工单ID, 示例值："6945345902185807891"
	EventID  string                                 `json:"event_id,omitempty"` // 事件ID,可从订阅事件中提取, 示例值："abcd"
	Faqs     []*AnswerHelpdeskTicketUserQueryReqFAQ `json:"faqs,omitempty"`     // faq结果列表
}

// AnswerHelpdeskTicketUserQueryReqFAQ ...
type AnswerHelpdeskTicketUserQueryReqFAQ struct {
	ID    *string  `json:"id,omitempty"`    // faq服务台内唯一标识, 示例值："12345"
	Score *float64 `json:"score,omitempty"` // faq匹配得分, 示例值：0.9
}

// answerHelpdeskTicketUserQueryResp ...
type answerHelpdeskTicketUserQueryResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 错误描述
	Data *AnswerHelpdeskTicketUserQueryResp `json:"data,omitempty"`
}

// AnswerHelpdeskTicketUserQueryResp ...
type AnswerHelpdeskTicketUserQueryResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHelpdeskTicketCustomizedField
//
// 该接口用于创建自定义字段
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/create-ticket-customized-field
func (r *HelpdeskService) CreateHelpdeskTicketCustomizedField(ctx context.Context, request *CreateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*CreateHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskCreateHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#CreateHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskCreateHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "CreateHelpdeskTicketCustomizedField",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(createHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskCreateHelpdeskTicketCustomizedField mock HelpdeskCreateHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskCreateHelpdeskTicketCustomizedField(f func(ctx context.Context, request *CreateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*CreateHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskCreateHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskCreateHelpdeskTicketCustomizedField un-mock HelpdeskCreateHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskCreateHelpdeskTicketCustomizedField() {
	r.mockHelpdeskCreateHelpdeskTicketCustomizedField = nil
}

// CreateHelpdeskTicketCustomizedFieldReq ...
type CreateHelpdeskTicketCustomizedFieldReq struct {
	HelpdeskID            string                  `json:"helpdesk_id,omitempty"`             // 服务台ID, 示例值："1542164574896126"
	KeyName               string                  `json:"key_name,omitempty"`                // 键名, 示例值："test dropdown"
	DisplayName           string                  `json:"display_name,omitempty"`            // 名称, 示例值："test dropdown"
	Position              string                  `json:"position,omitempty"`                // 字段在列表后台管理列表中的位置, 示例值："3"
	FieldType             string                  `json:"field_type,omitempty"`              // 类型,string - 单行文本,multiline - 多行文本,dropdown - 下拉列表,dropdown_nested - 级联下拉,      , 示例值："dropdown"
	Description           string                  `json:"description,omitempty"`             // 描述, 示例值："下拉示例"
	Visible               bool                    `json:"visible,omitempty"`                 // 是否可见, 示例值：true
	Editable              bool                    `json:"editable,omitempty"`                // 是否可以修改, 示例值：true
	Required              bool                    `json:"required,omitempty"`                // 是否必填, 示例值：false
	DropdownOptions       *HelpdeskDropdownOption `json:"dropdown_options,omitempty"`        // 下拉列表选项
	DropdownAllowMultiple *bool                   `json:"dropdown_allow_multiple,omitempty"` // 是否支持多选，仅在字段类型是dropdown的时候有效, 示例值：true
}

// createHelpdeskTicketCustomizedFieldResp ...
type createHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *CreateHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// CreateHelpdeskTicketCustomizedFieldResp ...
type CreateHelpdeskTicketCustomizedFieldResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteHelpdeskTicketCustomizedField 该接口用于删除工单自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/delete
func (r *HelpdeskService) DeleteHelpdeskTicketCustomizedField(ctx context.Context, request *DeleteHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*DeleteHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDeleteHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DeleteHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskDeleteHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "DeleteHelpdeskTicketCustomizedField",
		Method:              "DELETE",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(deleteHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDeleteHelpdeskTicketCustomizedField mock HelpdeskDeleteHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskDeleteHelpdeskTicketCustomizedField(f func(ctx context.Context, request *DeleteHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*DeleteHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskDeleteHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskDeleteHelpdeskTicketCustomizedField un-mock HelpdeskDeleteHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskDeleteHelpdeskTicketCustomizedField() {
	r.mockHelpdeskDeleteHelpdeskTicketCustomizedField = nil
}

// DeleteHelpdeskTicketCustomizedFieldReq ...
type DeleteHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
}

// deleteHelpdeskTicketCustomizedFieldResp ...
type deleteHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *DeleteHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// DeleteHelpdeskTicketCustomizedFieldResp ...
type DeleteHelpdeskTicketCustomizedFieldResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketCustomizedField
//
// 该接口用于获取工单自定义字段详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/get-ticket-customized-field
func (r *HelpdeskService) GetHelpdeskTicketCustomizedField(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketCustomizedField",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketCustomizedField mock HelpdeskGetHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskGetHelpdeskTicketCustomizedField(f func(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskGetHelpdeskTicketCustomizedField un-mock HelpdeskGetHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketCustomizedField() {
	r.mockHelpdeskGetHelpdeskTicketCustomizedField = nil
}

// GetHelpdeskTicketCustomizedFieldReq ...
type GetHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
}

// getHelpdeskTicketCustomizedFieldResp ...
type getHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// GetHelpdeskTicketCustomizedFieldResp ...
type GetHelpdeskTicketCustomizedFieldResp struct {
	TicketCustomizedFieldID string                                         `json:"ticket_customized_field_id,omitempty"` // 工单自定义字段ID
	HelpdeskID              string                                         `json:"helpdesk_id,omitempty"`                // 服务台ID
	KeyName                 string                                         `json:"key_name,omitempty"`                   // 键名
	DisplayName             string                                         `json:"display_name,omitempty"`               // 名称
	Position                string                                         `json:"position,omitempty"`                   // 字段在列表后台管理列表中的位置
	FieldType               string                                         `json:"field_type,omitempty"`                 // 类型
	Description             string                                         `json:"description,omitempty"`                // 描述
	Visible                 bool                                           `json:"visible,omitempty"`                    // 是否可见
	Editable                bool                                           `json:"editable,omitempty"`                   // 是否可以修改
	Required                bool                                           `json:"required,omitempty"`                   // 是否必填
	CreatedAt               string                                         `json:"created_at,omitempty"`                 // 创建时间
	UpdatedAt               string                                         `json:"updated_at,omitempty"`                 // 更新时间
	CreatedBy               *GetHelpdeskTicketCustomizedFieldRespCreatedBy `json:"created_by,omitempty"`                 // 创建用户
	UpdatedBy               *GetHelpdeskTicketCustomizedFieldRespUpdatedBy `json:"updated_by,omitempty"`                 // 更新用户
	DropdownAllowMultiple   bool                                           `json:"dropdown_allow_multiple,omitempty"`    // 是否支持多选，仅在字段类型是dropdown的时候有效
}

// GetHelpdeskTicketCustomizedFieldRespCreatedBy ...
type GetHelpdeskTicketCustomizedFieldRespCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// GetHelpdeskTicketCustomizedFieldRespUpdatedBy ...
type GetHelpdeskTicketCustomizedFieldRespUpdatedBy struct {
	ID              string                  `json:"id,omitempty"`               // 用户ID
	AvatarURL       string                  `json:"avatar_url,omitempty"`       // 用户头像url
	Name            string                  `json:"name,omitempty"`             // 用户名
	Email           string                  `json:"email,omitempty"`            // 用户邮箱
	DropdownOptions *HelpdeskDropdownOption `json:"dropdown_options,omitempty"` // 下拉列表选项
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketCustomizedFieldList
//
// 该接口用于获取全部工单自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list-ticket-customized-fields
func (r *HelpdeskService) GetHelpdeskTicketCustomizedFieldList(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFieldList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketCustomizedFieldList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketCustomizedFieldList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketCustomizedFieldList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketCustomizedFieldListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketCustomizedFieldList mock HelpdeskGetHelpdeskTicketCustomizedFieldList method
func (r *Mock) MockHelpdeskGetHelpdeskTicketCustomizedFieldList(f func(ctx context.Context, request *GetHelpdeskTicketCustomizedFieldListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketCustomizedFieldListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFieldList = f
}

// UnMockHelpdeskGetHelpdeskTicketCustomizedFieldList un-mock HelpdeskGetHelpdeskTicketCustomizedFieldList method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketCustomizedFieldList() {
	r.mockHelpdeskGetHelpdeskTicketCustomizedFieldList = nil
}

// GetHelpdeskTicketCustomizedFieldListReq ...
type GetHelpdeskTicketCustomizedFieldListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："6948728206392295444"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10；默认为20, 最大值：`100`
	Visible   *bool   `json:"visible,omitempty"`    // 是否可见, 示例值：true
}

// getHelpdeskTicketCustomizedFieldListResp ...
type getHelpdeskTicketCustomizedFieldListResp struct {
	Code int64                                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                    `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketCustomizedFieldListResp `json:"data,omitempty"`
}

// GetHelpdeskTicketCustomizedFieldListResp ...
type GetHelpdeskTicketCustomizedFieldListResp struct {
	HasMore       bool                                            `json:"has_more,omitempty"`        // 是否还有更多项
	NextPageToken string                                          `json:"next_page_token,omitempty"` // 下一分页标识
	Items         []*GetHelpdeskTicketCustomizedFieldListRespItem `json:"items,omitempty"`           // 工单自定义字段列表
}

// GetHelpdeskTicketCustomizedFieldListRespItem ...
type GetHelpdeskTicketCustomizedFieldListRespItem struct {
	TicketCustomizedFieldID string                                                 `json:"ticket_customized_field_id,omitempty"` // 工单自定义字段ID
	HelpdeskID              string                                                 `json:"helpdesk_id,omitempty"`                // 服务台ID
	KeyName                 string                                                 `json:"key_name,omitempty"`                   // 键名
	DisplayName             string                                                 `json:"display_name,omitempty"`               // 名称
	Position                string                                                 `json:"position,omitempty"`                   // 字段在列表后台管理列表中的位置
	FieldType               string                                                 `json:"field_type,omitempty"`                 // 类型
	Description             string                                                 `json:"description,omitempty"`                // 描述
	Visible                 bool                                                   `json:"visible,omitempty"`                    // 是否可见
	Editable                bool                                                   `json:"editable,omitempty"`                   // 是否可以修改
	Required                bool                                                   `json:"required,omitempty"`                   // 是否必填
	CreatedAt               string                                                 `json:"created_at,omitempty"`                 // 创建时间
	UpdatedAt               string                                                 `json:"updated_at,omitempty"`                 // 更新时间
	CreatedBy               *GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy `json:"created_by,omitempty"`                 // 创建用户
	UpdatedBy               *GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy `json:"updated_by,omitempty"`                 // 更新用户
	DropdownOptions         *HelpdeskDropdownOption                                `json:"dropdown_options,omitempty"`           // 下拉列表选项
	DropdownAllowMultiple   bool                                                   `json:"dropdown_allow_multiple,omitempty"`    // 是否支持多选，仅在字段类型是dropdown的时候有效
}

// GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy ...
type GetHelpdeskTicketCustomizedFieldListRespItemCreatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy ...
type GetHelpdeskTicketCustomizedFieldListRespItemUpdatedBy struct {
	ID        string `json:"id,omitempty"`         // 用户ID
	AvatarURL string `json:"avatar_url,omitempty"` // 用户头像url
	Name      string `json:"name,omitempty"`       // 用户名
	Email     string `json:"email,omitempty"`      // 用户邮箱
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskTicketCustomizedField
//
// 该接口用于更新自定义字段。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/update-ticket-customized-field
func (r *HelpdeskService) UpdateHelpdeskTicketCustomizedField(ctx context.Context, request *UpdateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketCustomizedFieldResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskTicketCustomizedField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskTicketCustomizedField mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskTicketCustomizedField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskTicketCustomizedField",
		Method:              "PATCH",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_customized_fields/:ticket_customized_field_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskTicketCustomizedFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskTicketCustomizedField mock HelpdeskUpdateHelpdeskTicketCustomizedField method
func (r *Mock) MockHelpdeskUpdateHelpdeskTicketCustomizedField(f func(ctx context.Context, request *UpdateHelpdeskTicketCustomizedFieldReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketCustomizedFieldResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskTicketCustomizedField = f
}

// UnMockHelpdeskUpdateHelpdeskTicketCustomizedField un-mock HelpdeskUpdateHelpdeskTicketCustomizedField method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskTicketCustomizedField() {
	r.mockHelpdeskUpdateHelpdeskTicketCustomizedField = nil
}

// UpdateHelpdeskTicketCustomizedFieldReq ...
type UpdateHelpdeskTicketCustomizedFieldReq struct {
	TicketCustomizedFieldID string                  `path:"ticket_customized_field_id" json:"-"` // 工单自定义字段ID, 示例值："6948728206392295444"
	DisplayName             *string                 `json:"display_name,omitempty"`              // 名称, 示例值："test dropdown"
	Position                *string                 `json:"position,omitempty"`                  // 字段在列表后台管理列表中的位置, 示例值："3"
	Description             *string                 `json:"description,omitempty"`               // 描述, 示例值："下拉示例"
	Visible                 *bool                   `json:"visible,omitempty"`                   // 是否可见, 示例值：true
	Required                *bool                   `json:"required,omitempty"`                  // 是否必填, 示例值：false
	DropdownOptions         *HelpdeskDropdownOption `json:"dropdown_options,omitempty"`          // 下拉列表选项
}

// updateHelpdeskTicketCustomizedFieldResp ...
type updateHelpdeskTicketCustomizedFieldResp struct {
	Code int64                                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                                   `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskTicketCustomizedFieldResp `json:"data,omitempty"`
}

// UpdateHelpdeskTicketCustomizedFieldResp ...
type UpdateHelpdeskTicketCustomizedFieldResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicket 该接口用于获取单个服务台工单详情。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/get
func (r *HelpdeskService) GetHelpdeskTicket(ctx context.Context, request *GetHelpdeskTicketReq, options ...MethodOptionFunc) (*GetHelpdeskTicketResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicket mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicket",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicket mock HelpdeskGetHelpdeskTicket method
func (r *Mock) MockHelpdeskGetHelpdeskTicket(f func(ctx context.Context, request *GetHelpdeskTicketReq, options ...MethodOptionFunc) (*GetHelpdeskTicketResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicket = f
}

// UnMockHelpdeskGetHelpdeskTicket un-mock HelpdeskGetHelpdeskTicket method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicket() {
	r.mockHelpdeskGetHelpdeskTicket = nil
}

// GetHelpdeskTicketReq ...
type GetHelpdeskTicketReq struct {
	TicketID string `path:"ticket_id" json:"-"` // ticket id, 示例值："123456"
}

// getHelpdeskTicketResp ...
type getHelpdeskTicketResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketResp `json:"data,omitempty"`
}

// GetHelpdeskTicketResp ...
type GetHelpdeskTicketResp struct {
	Ticket *GetHelpdeskTicketRespTicket `json:"ticket,omitempty"` // 工单详情
}

// GetHelpdeskTicketRespTicket ...
type GetHelpdeskTicketRespTicket struct {
	TicketID                   string                                        `json:"ticket_id,omitempty"`                     // 工单ID,[可以从工单列表里面取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list),[也可以订阅工单创建事件获取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/events/created)
	HelpdeskID                 string                                        `json:"helpdesk_id,omitempty"`                   // 服务台ID
	Guest                      *GetHelpdeskTicketRespTicketGuest             `json:"guest,omitempty"`                         // 工单创建用户
	Comments                   *GetHelpdeskTicketRespTicketComments          `json:"comments,omitempty"`                      // 备注
	TicketType                 int64                                         `json:"ticket_type,omitempty"`                   // 工单阶段：1. 机器人 2. 人工
	Status                     int64                                         `json:"status,omitempty"`                        // 工单状态，1：已创建 2: 处理中 3: 排队中 4：待定 5：待用户响应 50: 被机器人关闭 51: 被客服关闭 52: 用户自己关闭
	Score                      int64                                         `json:"score,omitempty"`                         // 工单评分，1：不满意，2:一般，3:满意
	CreatedAt                  int64                                         `json:"created_at,omitempty"`                    // 工单创建时间
	UpdatedAt                  int64                                         `json:"updated_at,omitempty"`                    // 工单更新时间，没有值时为-1
	ClosedAt                   int64                                         `json:"closed_at,omitempty"`                     // 工单结束时间
	DissatisfactionReason      []string                                      `json:"dissatisfaction_reason,omitempty"`        // 不满意原因
	Agents                     []*GetHelpdeskTicketRespTicketAgent           `json:"agents,omitempty"`                        // 工单客服
	Channel                    int64                                         `json:"channel,omitempty"`                       // 工单渠道，描述：,9：Open API 2：二维码 14：分享 13：搜索 其他数字：其他渠道
	Solve                      int64                                         `json:"solve,omitempty"`                         // 工单是否解决 1:没解决 2:已解决
	ClosedBy                   *GetHelpdeskTicketRespTicketClosedBy          `json:"closed_by,omitempty"`                     // 关单用户ID
	Collaborators              []*GetHelpdeskTicketRespTicketCollaborator    `json:"collaborators,omitempty"`                 // 工单协作者
	CustomizedFields           []*GetHelpdeskTicketRespTicketCustomizedField `json:"customized_fields,omitempty"`             // 自定义字段列表，没有值时不设置  ,下拉菜单的value对应工单字段里面的children.display_name,[获取全部工单自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list-ticket-customized-fields)
	AgentServiceDuration       float64                                       `json:"agent_service_duration,omitempty"`        // 客服服务时长，客服最后一次回复时间距离客服进入时间间隔，单位分钟
	AgentFirstResponseDuration int64                                         `json:"agent_first_response_duration,omitempty"` // 客服首次回复时间距离客服进入时间的间隔(秒)
	BotServiceDuration         int64                                         `json:"bot_service_duration,omitempty"`          // 机器人服务时间：客服进入时间距离工单创建时间的间隔，单位秒
	AgentResolutionTime        int64                                         `json:"agent_resolution_time,omitempty"`         // 客服解决时长，关单时间距离客服进入时间的间隔，单位秒
	ActualProcessingTime       int64                                         `json:"actual_processing_time,omitempty"`        // 工单实际处理时间：从客服进入到关单，单位秒
	AgentEntryTime             int64                                         `json:"agent_entry_time,omitempty"`              // 客服进入时间，单位毫秒
	AgentFirstResponseTime     int64                                         `json:"agent_first_response_time,omitempty"`     // 客服首次回复时间，单位毫秒
	AgentLastResponseTime      int64                                         `json:"agent_last_response_time,omitempty"`      // 客服最后回复时间，单位毫秒
}

// GetHelpdeskTicketRespTicketGuest ...
type GetHelpdeskTicketRespTicketGuest struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketComments ...
type GetHelpdeskTicketRespTicketComments struct {
	Content       string `json:"content,omitempty"`         // 备注
	CreatedAt     int64  `json:"created_at,omitempty"`      // 备注时间，单位毫秒
	ID            int64  `json:"id,omitempty"`              // 备注ID
	UserAvatarURL string `json:"user_avatar_url,omitempty"` // 备注人头像
	UserName      string `json:"user_name,omitempty"`       // 备注人姓名
	UserID        int64  `json:"user_id,omitempty"`         // 备注人ID
}

// GetHelpdeskTicketRespTicketAgent ...
type GetHelpdeskTicketRespTicketAgent struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketClosedBy ...
type GetHelpdeskTicketRespTicketClosedBy struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketCollaborator ...
type GetHelpdeskTicketRespTicketCollaborator struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketRespTicketCustomizedField ...
type GetHelpdeskTicketRespTicketCustomizedField struct {
	ID          string `json:"id,omitempty"`           // 自定义字段ID
	Value       string `json:"value,omitempty"`        // 自定义字段值
	KeyName     string `json:"key_name,omitempty"`     // 键名
	DisplayName string `json:"display_name,omitempty"` // 展示名称
	Position    int64  `json:"position,omitempty"`     // 展示位置
	Required    bool   `json:"required,omitempty"`     // 是否必填
	Editable    bool   `json:"editable,omitempty"`     // 是否可修改
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketList 该接口用于获取全部工单详情。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list
func (r *HelpdeskService) GetHelpdeskTicketList(ctx context.Context, request *GetHelpdeskTicketListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketList mock HelpdeskGetHelpdeskTicketList method
func (r *Mock) MockHelpdeskGetHelpdeskTicketList(f func(ctx context.Context, request *GetHelpdeskTicketListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketList = f
}

// UnMockHelpdeskGetHelpdeskTicketList un-mock HelpdeskGetHelpdeskTicketList method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketList() {
	r.mockHelpdeskGetHelpdeskTicketList = nil
}

// GetHelpdeskTicketListReq ...
type GetHelpdeskTicketListReq struct {
	TicketID        *string  `query:"ticket_id" json:"-"`         // 搜索条件：工单ID, 示例值："123456"
	AgentID         *string  `query:"agent_id" json:"-"`          // 搜索条件: 客服id, 示例值："ou_b5de90429xxx"
	ClosedByID      *string  `query:"closed_by_id" json:"-"`      // 搜索条件: 关单客服id, 示例值："ou_b5de90429xxx"
	Type            *int64   `query:"type" json:"-"`              // 搜索条件: 工单类型 1:bot 2:人工, 示例值：1
	Channel         *int64   `query:"channel" json:"-"`           // 搜索条件: 工单渠道, 示例值：0
	Solved          *int64   `query:"solved" json:"-"`            // 搜索条件: 工单是否解决 1:没解决 2:已解决, 示例值：1
	Score           *int64   `query:"score" json:"-"`             // 搜索条件: 工单评分, 示例值：1
	StatusList      []int64  `query:"status_list" json:"-"`       // 搜索条件: 工单状态列表, 示例值：1
	GuestName       *string  `query:"guest_name" json:"-"`        // 搜索条件: 用户名称, 示例值："abc"
	GuestID         *string  `query:"guest_id" json:"-"`          // 搜索条件: 用户id, 示例值："ou_b5de90429xxx"
	Tags            []string `query:"tags" json:"-"`              // 搜索条件: 用户标签列表, 示例值：备注
	Page            *int64   `query:"page" json:"-"`              // 页数, 从1开始, 默认为1, 示例值：1
	PageSize        *int64   `query:"page_size" json:"-"`         // 当前页大小，最大为200, 默认为20。分页查询最多累计返回一万条数据，超过一万条请更改查询条件，推荐通过时间查询。, 示例值：20
	CreateTimeStart *int64   `query:"create_time_start" json:"-"` // 搜索条件: 工单创建起始时间 ms (也需要填上create_time_end)，相当于>=create_time_start, 示例值：1616920429000
	CreateTimeEnd   *int64   `query:"create_time_end" json:"-"`   // 搜索条件: 工单创建结束时间 ms (也需要填上create_time_start)，相当于<=create_time_end, 示例值：1616920429000
	UpdateTimeStart *int64   `query:"update_time_start" json:"-"` // 搜索条件: 工单修改起始时间 ms (也需要填上update_time_end), 示例值：1616920429000
	UpdateTimeEnd   *int64   `query:"update_time_end" json:"-"`   // 搜索条件: 工单修改结束时间 ms(也需要填上update_time_start), 示例值：1616920429000
}

// getHelpdeskTicketListResp ...
type getHelpdeskTicketListResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketListResp `json:"data,omitempty"`
}

// GetHelpdeskTicketListResp ...
type GetHelpdeskTicketListResp struct {
	Total   int64                              `json:"total,omitempty"`   // 工单总数 (单次请求最大为10000条)
	Tickets []*GetHelpdeskTicketListRespTicket `json:"tickets,omitempty"` // 工单
}

// GetHelpdeskTicketListRespTicket ...
type GetHelpdeskTicketListRespTicket struct {
	TicketID                   string                                            `json:"ticket_id,omitempty"`                     // 工单ID,[可以从工单列表里面取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/list),[也可以订阅工单创建事件获取](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/events/created)
	HelpdeskID                 string                                            `json:"helpdesk_id,omitempty"`                   // 服务台ID
	Guest                      *GetHelpdeskTicketListRespTicketGuest             `json:"guest,omitempty"`                         // 工单创建用户
	Comments                   *GetHelpdeskTicketListRespTicketComments          `json:"comments,omitempty"`                      // 备注
	TicketType                 int64                                             `json:"ticket_type,omitempty"`                   // 工单阶段：1. 机器人 2. 人工
	Status                     int64                                             `json:"status,omitempty"`                        // 工单状态，1：已创建 2: 处理中 3: 排队中 4：待定 5：待用户响应 50: 被机器人关闭 51: 被客服关闭 52: 用户自己关闭
	Score                      int64                                             `json:"score,omitempty"`                         // 工单评分，1：不满意，2:一般，3:满意
	CreatedAt                  int64                                             `json:"created_at,omitempty"`                    // 工单创建时间
	UpdatedAt                  int64                                             `json:"updated_at,omitempty"`                    // 工单更新时间，没有值时为-1
	ClosedAt                   int64                                             `json:"closed_at,omitempty"`                     // 工单结束时间
	DissatisfactionReason      []string                                          `json:"dissatisfaction_reason,omitempty"`        // 不满意原因
	Agents                     []*GetHelpdeskTicketListRespTicketAgent           `json:"agents,omitempty"`                        // 工单客服
	Channel                    int64                                             `json:"channel,omitempty"`                       // 工单渠道，描述：,9：Open API 2：二维码 14：分享 13：搜索 其他数字：其他渠道
	Solve                      int64                                             `json:"solve,omitempty"`                         // 工单是否解决 1:没解决 2:已解决
	ClosedBy                   *GetHelpdeskTicketListRespTicketClosedBy          `json:"closed_by,omitempty"`                     // 关单用户ID
	Collaborators              []*GetHelpdeskTicketListRespTicketCollaborator    `json:"collaborators,omitempty"`                 // 工单协作者
	CustomizedFields           []*GetHelpdeskTicketListRespTicketCustomizedField `json:"customized_fields,omitempty"`             // 自定义字段列表，没有值时不设置  ,下拉菜单的value对应工单字段里面的children.display_name,[获取全部工单自定义字段](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket_customized_field/list-ticket-customized-fields)
	AgentServiceDuration       float64                                           `json:"agent_service_duration,omitempty"`        // 客服服务时长，客服最后一次回复时间距离客服进入时间间隔，单位分钟
	AgentFirstResponseDuration int64                                             `json:"agent_first_response_duration,omitempty"` // 客服首次回复时间距离客服进入时间的间隔(秒)
	BotServiceDuration         int64                                             `json:"bot_service_duration,omitempty"`          // 机器人服务时间：客服进入时间距离工单创建时间的间隔，单位秒
	AgentResolutionTime        int64                                             `json:"agent_resolution_time,omitempty"`         // 客服解决时长，关单时间距离客服进入时间的间隔，单位秒
	ActualProcessingTime       int64                                             `json:"actual_processing_time,omitempty"`        // 工单实际处理时间：从客服进入到关单，单位秒
	AgentEntryTime             int64                                             `json:"agent_entry_time,omitempty"`              // 客服进入时间，单位毫秒
	AgentFirstResponseTime     int64                                             `json:"agent_first_response_time,omitempty"`     // 客服首次回复时间，单位毫秒
	AgentLastResponseTime      int64                                             `json:"agent_last_response_time,omitempty"`      // 客服最后回复时间，单位毫秒
}

// GetHelpdeskTicketListRespTicketGuest ...
type GetHelpdeskTicketListRespTicketGuest struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketComments ...
type GetHelpdeskTicketListRespTicketComments struct {
	Content       string `json:"content,omitempty"`         // 备注
	CreatedAt     int64  `json:"created_at,omitempty"`      // 备注时间，单位毫秒
	ID            int64  `json:"id,omitempty"`              // 备注ID
	UserAvatarURL string `json:"user_avatar_url,omitempty"` // 备注人头像
	UserName      string `json:"user_name,omitempty"`       // 备注人姓名
	UserID        int64  `json:"user_id,omitempty"`         // 备注人ID
}

// GetHelpdeskTicketListRespTicketAgent ...
type GetHelpdeskTicketListRespTicketAgent struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketClosedBy ...
type GetHelpdeskTicketListRespTicketClosedBy struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketCollaborator ...
type GetHelpdeskTicketListRespTicketCollaborator struct {
	ID         string `json:"id,omitempty"`         // 用户ID
	AvatarURL  string `json:"avatar_url,omitempty"` // 用户头像url
	Name       string `json:"name,omitempty"`       // 用户名
	Email      string `json:"email,omitempty"`      // 用户邮箱
	Department string `json:"department,omitempty"` // 所在部门名称
	City       string `json:"city,omitempty"`       // 城市
	Country    string `json:"country,omitempty"`    // 国家代号(CountryCode)，参考：http://www.mamicode.com/info-detail-2186501.html
}

// GetHelpdeskTicketListRespTicketCustomizedField ...
type GetHelpdeskTicketListRespTicketCustomizedField struct {
	ID          string `json:"id,omitempty"`           // 自定义字段ID
	Value       string `json:"value,omitempty"`        // 自定义字段值
	KeyName     string `json:"key_name,omitempty"`     // 键名
	DisplayName string `json:"display_name,omitempty"` // 展示名称
	Position    int64  `json:"position,omitempty"`     // 展示位置
	Required    bool   `json:"required,omitempty"`     // 是否必填
	Editable    bool   `json:"editable,omitempty"`     // 是否可修改
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadHelpdeskTicketImage 该接口用于获取服务台工单消息图象。仅支持自建应用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/ticket_image
func (r *HelpdeskService) DownloadHelpdeskTicketImage(ctx context.Context, request *DownloadHelpdeskTicketImageReq, options ...MethodOptionFunc) (*DownloadHelpdeskTicketImageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskDownloadHelpdeskTicketImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#DownloadHelpdeskTicketImage mock enable")
		return r.cli.mock.mockHelpdeskDownloadHelpdeskTicketImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "DownloadHelpdeskTicketImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/ticket_images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(downloadHelpdeskTicketImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskDownloadHelpdeskTicketImage mock HelpdeskDownloadHelpdeskTicketImage method
func (r *Mock) MockHelpdeskDownloadHelpdeskTicketImage(f func(ctx context.Context, request *DownloadHelpdeskTicketImageReq, options ...MethodOptionFunc) (*DownloadHelpdeskTicketImageResp, *Response, error)) {
	r.mockHelpdeskDownloadHelpdeskTicketImage = f
}

// UnMockHelpdeskDownloadHelpdeskTicketImage un-mock HelpdeskDownloadHelpdeskTicketImage method
func (r *Mock) UnMockHelpdeskDownloadHelpdeskTicketImage() {
	r.mockHelpdeskDownloadHelpdeskTicketImage = nil
}

// DownloadHelpdeskTicketImageReq ...
type DownloadHelpdeskTicketImageReq struct {
	TicketID string `query:"ticket_id" json:"-"` // 工单ID, 示例值："12345"
	MsgID    string `query:"msg_id" json:"-"`    // 消息ID,[查询消息ID](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list), 示例值："12345"
	Index    *int64 `query:"index" json:"-"`     // index，当消息类型为post时，需指定图片index，index从0开始。当消息类型为img时，无需index, 示例值：0
}

// downloadHelpdeskTicketImageResp ...
type downloadHelpdeskTicketImageResp struct {
	IsFile bool                             `json:"is_file,omitempty"`
	Code   int64                            `json:"code,omitempty"`
	Msg    string                           `json:"msg,omitempty"`
	Data   *DownloadHelpdeskTicketImageResp `json:"data,omitempty"`
}

func (r *downloadHelpdeskTicketImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadHelpdeskTicketImageResp{}
	}
	r.Data.File = file
}

// DownloadHelpdeskTicketImageResp ...
type DownloadHelpdeskTicketImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskTicketMessageList 该接口用于获取服务台工单消息详情。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/list
func (r *HelpdeskService) GetHelpdeskTicketMessageList(ctx context.Context, request *GetHelpdeskTicketMessageListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketMessageListResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskTicketMessageList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskTicketMessageList mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskTicketMessageList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskTicketMessageList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskTicketMessageListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskTicketMessageList mock HelpdeskGetHelpdeskTicketMessageList method
func (r *Mock) MockHelpdeskGetHelpdeskTicketMessageList(f func(ctx context.Context, request *GetHelpdeskTicketMessageListReq, options ...MethodOptionFunc) (*GetHelpdeskTicketMessageListResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskTicketMessageList = f
}

// UnMockHelpdeskGetHelpdeskTicketMessageList un-mock HelpdeskGetHelpdeskTicketMessageList method
func (r *Mock) UnMockHelpdeskGetHelpdeskTicketMessageList() {
	r.mockHelpdeskGetHelpdeskTicketMessageList = nil
}

// GetHelpdeskTicketMessageListReq ...
type GetHelpdeskTicketMessageListReq struct {
	TimeStart *int64 `query:"time_start" json:"-"` // 起始时间, 示例值：1617960686000
	TimeEnd   *int64 `query:"time_end" json:"-"`   // 结束时间, 示例值：1617960687000
	Page      *int64 `query:"page" json:"-"`       // 页数ID, 示例值：1
	PageSize  *int64 `query:"page_size" json:"-"`  // 消息数量，最大200，默认20, 示例值：10
	TicketID  string `path:"ticket_id" json:"-"`   // 工单ID, 示例值："6948728206392295444"
}

// getHelpdeskTicketMessageListResp ...
type getHelpdeskTicketMessageListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskTicketMessageListResp `json:"data,omitempty"`
}

// GetHelpdeskTicketMessageListResp ...
type GetHelpdeskTicketMessageListResp struct {
	Messages []*GetHelpdeskTicketMessageListRespMessage `json:"messages,omitempty"` // 工单消息列表
	Total    int64                                      `json:"total,omitempty"`    // 消息总数
}

// GetHelpdeskTicketMessageListRespMessage ...
type GetHelpdeskTicketMessageListRespMessage struct {
	ID          string  `json:"id,omitempty"`           // 工单消息ID
	MessageID   string  `json:"message_id,omitempty"`   // chat消息ID
	MessageType MsgType `json:"message_type,omitempty"` // 消息类型；text：纯文本；post：富文本
	CreatedAt   int64   `json:"created_at,omitempty"`   // 创建时间
	Content     string  `json:"content,omitempty"`      // 内容
	UserName    string  `json:"user_name,omitempty"`    // 用户名
	AvatarURL   string  `json:"avatar_url,omitempty"`   // 用户图片url
	UserID      string  `json:"user_id,omitempty"`      // 用户open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SendHelpdeskTicketMessage 该接口用于工单发送消息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket-message/create
func (r *HelpdeskService) SendHelpdeskTicketMessage(ctx context.Context, request *SendHelpdeskTicketMessageReq, options ...MethodOptionFunc) (*SendHelpdeskTicketMessageResp, *Response, error) {
	if r.cli.mock.mockHelpdeskSendHelpdeskTicketMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#SendHelpdeskTicketMessage mock enable")
		return r.cli.mock.mockHelpdeskSendHelpdeskTicketMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "SendHelpdeskTicketMessage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id/messages",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(sendHelpdeskTicketMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskSendHelpdeskTicketMessage mock HelpdeskSendHelpdeskTicketMessage method
func (r *Mock) MockHelpdeskSendHelpdeskTicketMessage(f func(ctx context.Context, request *SendHelpdeskTicketMessageReq, options ...MethodOptionFunc) (*SendHelpdeskTicketMessageResp, *Response, error)) {
	r.mockHelpdeskSendHelpdeskTicketMessage = f
}

// UnMockHelpdeskSendHelpdeskTicketMessage un-mock HelpdeskSendHelpdeskTicketMessage method
func (r *Mock) UnMockHelpdeskSendHelpdeskTicketMessage() {
	r.mockHelpdeskSendHelpdeskTicketMessage = nil
}

// SendHelpdeskTicketMessageReq ...
type SendHelpdeskTicketMessageReq struct {
	TicketID string  `path:"ticket_id" json:"-"` // 工单ID, 示例值："6948728206392295444"
	MsgType  MsgType `json:"msg_type,omitempty"` // 消息类型；text：纯文本；post：富文本, 示例值："post"
	Content  string  `json:"content,omitempty"`  // - 纯文本，参考[发送文本消息](https://open.feishu.cn/document/ukTMukTMukTM/uUjNz4SN2MjL1YzM)中的content；, 富文本，参考[发送富文本消息](https://open.feishu.cn/document/ukTMukTMukTM/uMDMxEjLzATMx4yMwETM)中的content, 示例值："{,    "msg_type": "post",,    "content": {,        "post": {,            "zh_cn": {,                "title": "this is title",,                "content": [,                    [,                        {,                            "tag": "text",,                            "un_escape": true,,                            "text": "第一行&nbsp;:",                        },,                        {,                            "tag": "a",,                            "text": "超链接",,                            "href": "http://www.feishu.cn",                        },                    ],,                    [,                        {,                            "tag": "text",,                            "text": "第二行 :",                        },,                        {,                            "tag": "text",,                            "text": "文本测试",                        },                    ],                ],            },        },    },}"
}

// sendHelpdeskTicketMessageResp ...
type sendHelpdeskTicketMessageResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *SendHelpdeskTicketMessageResp `json:"data,omitempty"`
}

// SendHelpdeskTicketMessageResp ...
type SendHelpdeskTicketMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // chat消息open ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateHelpdeskTicket 该接口用于更新服务台工单详情。只会更新数据，不会触发相关操作。如修改工单状态到关单，不会关闭聊天页面。仅支持自建应用。要更新的工单字段必须至少输入一项。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/ticket/update
func (r *HelpdeskService) UpdateHelpdeskTicket(ctx context.Context, request *UpdateHelpdeskTicketReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketResp, *Response, error) {
	if r.cli.mock.mockHelpdeskUpdateHelpdeskTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#UpdateHelpdeskTicket mock enable")
		return r.cli.mock.mockHelpdeskUpdateHelpdeskTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Helpdesk",
		API:                 "UpdateHelpdeskTicket",
		Method:              "PUT",
		URL:                 r.cli.openBaseURL + "/open-apis/helpdesk/v1/tickets/:ticket_id",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
		NeedHelpdeskAuth:    true,
	}
	resp := new(updateHelpdeskTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskUpdateHelpdeskTicket mock HelpdeskUpdateHelpdeskTicket method
func (r *Mock) MockHelpdeskUpdateHelpdeskTicket(f func(ctx context.Context, request *UpdateHelpdeskTicketReq, options ...MethodOptionFunc) (*UpdateHelpdeskTicketResp, *Response, error)) {
	r.mockHelpdeskUpdateHelpdeskTicket = f
}

// UnMockHelpdeskUpdateHelpdeskTicket un-mock HelpdeskUpdateHelpdeskTicket method
func (r *Mock) UnMockHelpdeskUpdateHelpdeskTicket() {
	r.mockHelpdeskUpdateHelpdeskTicket = nil
}

// UpdateHelpdeskTicketReq ...
type UpdateHelpdeskTicketReq struct {
	TicketID         string                                    `path:"ticket_id" json:"-"`          // 工单ID, 示例值："6945345902185807891"
	Status           *int64                                    `json:"status,omitempty"`            // new status, 1: 已创建, 2: 处理中, 3: 排队中, 5: 待定, 50: 机器人关闭工单, 51: 关闭工单, 示例值：1
	TagNames         []string                                  `json:"tag_names,omitempty"`         // 新标签名
	Comment          *string                                   `json:"comment,omitempty"`           // 新评论, 示例值："good"
	CustomizedFields []*UpdateHelpdeskTicketReqCustomizedField `json:"customized_fields,omitempty"` // 自定义字段
	TicketType       *int64                                    `json:"ticket_type,omitempty"`       // ticket stage, 示例值：1
	Solved           *int64                                    `json:"solved,omitempty"`            // 工单是否解决，1: 未解决, 2: 已解决, 示例值：1
	Channel          *int64                                    `json:"channel,omitempty"`           // 工单来源渠道ID, 示例值：1
}

// UpdateHelpdeskTicketReqCustomizedField ...
type UpdateHelpdeskTicketReqCustomizedField struct {
	ID      *string `json:"id,omitempty"`       // 自定义字段ID, 示例值："123"
	Value   *string `json:"value,omitempty"`    // 自定义字段值, 示例值："value"
	KeyName *string `json:"key_name,omitempty"` // 键名, 示例值："key"
}

// updateHelpdeskTicketResp ...
type updateHelpdeskTicketResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateHelpdeskTicketResp `json:"data,omitempty"`
}

// UpdateHelpdeskTicketResp ...
type UpdateHelpdeskTicketResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateHireApplication 根据人才 ID 和职位 ID 创建投递
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzM1YjLzMTN24yMzUjN/hire-v1/application/create
func (r *HireService) CreateHireApplication(ctx context.Context, request *CreateHireApplicationReq, options ...MethodOptionFunc) (*CreateHireApplicationResp, *Response, error) {
	if r.cli.mock.mockHireCreateHireApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Hire#CreateHireApplication mock enable")
		return r.cli.mock.mockHireCreateHireApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Hire",
		API:                   "CreateHireApplication",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/hire/v1/applications",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createHireApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHireCreateHireApplication mock HireCreateHireApplication method
func (r *Mock) MockHireCreateHireApplication(f func(ctx context.Context, request *CreateHireApplicationReq, options ...MethodOptionFunc) (*CreateHireApplicationResp, *Response, error)) {
	r.mockHireCreateHireApplication = f
}

// UnMockHireCreateHireApplication un-mock HireCreateHireApplication method
func (r *Mock) UnMockHireCreateHireApplication() {
	r.mockHireCreateHireApplication = nil
}

// CreateHireApplicationReq ...
type CreateHireApplicationReq struct {
	TalentID string `json:"talent_id,omitempty"` // 人才ID, 示例值："12312312312"
	JobID    string `json:"job_id,omitempty"`    // 职位ID, 示例值："12312312312"
}

// createHireApplicationResp ...
type createHireApplicationResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *CreateHireApplicationResp `json:"data,omitempty"`
}

// CreateHireApplicationResp ...
type CreateHireApplicationResp struct {
	ID string `json:"id,omitempty"` // 投递ID
}
