// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// CreateApprovalCarbonCopy
//
// 通过接口可以将当前审批实例抄送给其他人。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADOzYjLwgzM24CM4MjN
func (r *ApprovalService) CreateApprovalCarbonCopy(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error) {
	if r.cli.mock.mockApprovalCreateApprovalCarbonCopy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CreateApprovalCarbonCopy mock enable")
		return r.cli.mock.mockApprovalCreateApprovalCarbonCopy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CreateApprovalCarbonCopy",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/cc",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createApprovalCarbonCopyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCreateApprovalCarbonCopy mock ApprovalCreateApprovalCarbonCopy method
func (r *Mock) MockApprovalCreateApprovalCarbonCopy(f func(ctx context.Context, request *CreateApprovalCarbonCopyReq, options ...MethodOptionFunc) (*CreateApprovalCarbonCopyResp, *Response, error)) {
	r.mockApprovalCreateApprovalCarbonCopy = f
}

// UnMockApprovalCreateApprovalCarbonCopy un-mock ApprovalCreateApprovalCarbonCopy method
func (r *Mock) UnMockApprovalCreateApprovalCarbonCopy() {
	r.mockApprovalCreateApprovalCarbonCopy = nil
}

// CreateApprovalCarbonCopyReq ...
type CreateApprovalCarbonCopyReq struct {
	ApprovalCode string   `json:"approval_code,omitempty"` // 审批定义 code
	InstanceCode string   `json:"instance_code,omitempty"` // 审批实例 code
	UserID       *string  `json:"user_id,omitempty"`       // 发起抄送的人的 user_id
	OpenID       *string  `json:"open_id,omitempty"`       // 发起抄送的人的 open_id，如果传了 user_id 则优先使用 user_id，二者不能同时为空
	CcUserIDs    []string `json:"cc_user_ids,omitempty"`   // 被抄送人的 user_id 列表
	CcOpenIDs    []string `json:"cc_open_ids,omitempty"`   // 被抄送人的 open_id 列表，与 cc_user_ids 不可同时为空
	Comment      *string  `json:"comment,omitempty"`       // 抄送留言
}

// createApprovalCarbonCopyResp ...
type createApprovalCarbonCopyResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *CreateApprovalCarbonCopyResp `json:"data,omitempty"`
}

// CreateApprovalCarbonCopyResp ...
type CreateApprovalCarbonCopyResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchApprovalCarbonCopy
//
// 该接口通过不同条件查询审批系统中符合条件的审批抄送列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUjMxYjL1ITM24SNyEjN
func (r *ApprovalService) SearchApprovalCarbonCopy(ctx context.Context, request *SearchApprovalCarbonCopyReq, options ...MethodOptionFunc) (*SearchApprovalCarbonCopyResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalCarbonCopy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalCarbonCopy mock enable")
		return r.cli.mock.mockApprovalSearchApprovalCarbonCopy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalCarbonCopy",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/cc/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalCarbonCopyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalCarbonCopy mock ApprovalSearchApprovalCarbonCopy method
func (r *Mock) MockApprovalSearchApprovalCarbonCopy(f func(ctx context.Context, request *SearchApprovalCarbonCopyReq, options ...MethodOptionFunc) (*SearchApprovalCarbonCopyResp, *Response, error)) {
	r.mockApprovalSearchApprovalCarbonCopy = f
}

// UnMockApprovalSearchApprovalCarbonCopy un-mock ApprovalSearchApprovalCarbonCopy method
func (r *Mock) UnMockApprovalSearchApprovalCarbonCopy() {
	r.mockApprovalSearchApprovalCarbonCopy = nil
}

// SearchApprovalCarbonCopyReq ...
type SearchApprovalCarbonCopyReq struct {
	UserID             *string `json:"user_id,omitempty"`              // 用户 id
	ApprovalCode       *string `json:"approval_code,omitempty"`        // 审批定义 code
	InstanceCode       *string `json:"instance_code,omitempty"`        // 审批实例 code
	InstanceExternalID *string `json:"instance_external_id,omitempty"` // 审批实例第三方 id<br>注：和 approval_code 取并集
	GroupExternalID    *string `json:"group_external_id,omitempty"`    // 审批定义分组第三方 id<br>注：和 instance_code 取并集
	CcTitle            *string `json:"cc_title,omitempty"`             // 审批抄送标题（只有第三方审批有）
	ReadStatus         *string `json:"read_status,omitempty"`          // 审批抄送状态<br>READ:  已读<br>UNREAD: 未读<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	CcStartTimeFrom    *int64  `json:"cc_start_time_from,omitempty"`   // 抄送查询开始时间 (unix毫秒时间戳)
	CcStartTimeTo      *int64  `json:"cc_start_time_to,omitempty"`     // 抄送查询结束时间 (unix毫秒时间戳)
	Locale             *string `json:"locale,omitempty"`               // 地区 （zh-CN、en-US、ja-JP）
	Offset             *int64  `json:"offset,omitempty"`               // 查询偏移量<br>注：不得超过10000
	Limit              *int64  `json:"limit,omitempty"`                // 查询限制量<br>注：不得超过200<br>不设置默认查询10条数据
}

// searchApprovalCarbonCopyResp ...
type searchApprovalCarbonCopyResp struct {
	Code int64                         `json:"code,omitempty"` // 是
	Msg  string                        `json:"msg,omitempty"`  // 是
	Data *SearchApprovalCarbonCopyResp `json:"data,omitempty"` // 返回业务信息
}

// SearchApprovalCarbonCopyResp ...
type SearchApprovalCarbonCopyResp struct{}

// SearchApprovalCarbonCopyRespApproval ...
type SearchApprovalCarbonCopyRespApproval struct {
	Code       string                                        `json:"code,omitempty"`        // 审批定义 code
	Name       string                                        `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                          `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalCarbonCopyRespApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalCarbonCopyRespApprovalExternal ...
type SearchApprovalCarbonCopyRespApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalCarbonCopyRespGroup ...
type SearchApprovalCarbonCopyRespGroup struct {
	ExternalID string `json:"external_id,omitempty"` // 审批定义分组外部 id
	Name       string `json:"name,omitempty"`        // 审批定义分组名称
}

// SearchApprovalCarbonCopyRespInstance ...
type SearchApprovalCarbonCopyRespInstance struct {
	Code       string                                    `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                    `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                    `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                     `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                     `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                    `json:"status,omitempty"`      // 审批实例状态
	Title      string                                    `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                    `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                    `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalCarbonCopyRespInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalCarbonCopyRespInstanceLink ...
type SearchApprovalCarbonCopyRespInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

// SearchApprovalCarbonCopyRespCc ...
type SearchApprovalCarbonCopyRespCc struct {
	UserID     string                              `json:"user_id,omitempty"`     // 审批抄送发起人 id
	CreateTime int64                               `json:"create_time,omitempty"` // 审批抄送开始时间
	ReadStatus string                              `json:"read_status,omitempty"` // 审批抄送状态
	Title      string                              `json:"title,omitempty"`       // 审批抄送名称
	Extra      string                              `json:"extra,omitempty"`       // 审批抄送扩展字段
	Link       *SearchApprovalCarbonCopyRespCcLink `json:"link,omitempty"`        // 审批抄送链接
}

// SearchApprovalCarbonCopyRespCcLink ...
type SearchApprovalCarbonCopyRespCcLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批抄送 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批抄送移动端链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadApprovalFile
//
// 当审批表单中有图片或附件控件时，开发者需在创建审批实例前通过审批上传文件接口将文件上传到审批系统。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDOyUjL1gjM14SN4ITN
func (r *ApprovalService) UploadApprovalFile(ctx context.Context, request *UploadApprovalFileReq, options ...MethodOptionFunc) (*UploadApprovalFileResp, *Response, error) {
	if r.cli.mock.mockApprovalUploadApprovalFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#UploadApprovalFile mock enable")
		return r.cli.mock.mockApprovalUploadApprovalFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "UploadApprovalFile",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/file/upload",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadApprovalFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalUploadApprovalFile mock ApprovalUploadApprovalFile method
func (r *Mock) MockApprovalUploadApprovalFile(f func(ctx context.Context, request *UploadApprovalFileReq, options ...MethodOptionFunc) (*UploadApprovalFileResp, *Response, error)) {
	r.mockApprovalUploadApprovalFile = f
}

// UnMockApprovalUploadApprovalFile un-mock ApprovalUploadApprovalFile method
func (r *Mock) UnMockApprovalUploadApprovalFile() {
	r.mockApprovalUploadApprovalFile = nil
}

// UploadApprovalFileReq ...
type UploadApprovalFileReq struct {
	Name    string    `json:"name,omitempty"`    // 文件名（需包含文件扩展名，如“文件.doc”
	Type    string    `json:"type,omitempty"`    // 文件类型（image 或 attachment）
	Content io.Reader `json:"content,omitempty"` // 文件
}

// uploadApprovalFileResp ...
type uploadApprovalFileResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                  `json:"msg,omitempty"`  // 返回码的描述
	Data *UploadApprovalFileResp `json:"data,omitempty"` // 返回业务信息
}

// UploadApprovalFileResp ...
type UploadApprovalFileResp struct {
	Code     string `json:"code,omitempty"`      // 文件标识码（用于创建审批实例）
	URL      string `json:"url,omitempty"`       // 文件 url
	XExpires string `json:"x-expires,omitempty"` // 时间有效期
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApprovalUserTaskList 根据用户和任务分组查询任务列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/query
func (r *ApprovalService) GetApprovalUserTaskList(ctx context.Context, request *GetApprovalUserTaskListReq, options ...MethodOptionFunc) (*GetApprovalUserTaskListResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalUserTaskList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalUserTaskList mock enable")
		return r.cli.mock.mockApprovalGetApprovalUserTaskList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalUserTaskList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getApprovalUserTaskListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalUserTaskList mock ApprovalGetApprovalUserTaskList method
func (r *Mock) MockApprovalGetApprovalUserTaskList(f func(ctx context.Context, request *GetApprovalUserTaskListReq, options ...MethodOptionFunc) (*GetApprovalUserTaskListResp, *Response, error)) {
	r.mockApprovalGetApprovalUserTaskList = f
}

// UnMockApprovalGetApprovalUserTaskList un-mock ApprovalGetApprovalUserTaskList method
func (r *Mock) UnMockApprovalGetApprovalUserTaskList() {
	r.mockApprovalGetApprovalUserTaskList = nil
}

// GetApprovalUserTaskListReq ...
type GetApprovalUserTaskListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：100, 最大值：`200`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："1"
	UserID     string  `query:"user_id" json:"-"`      // 需要查询的 User ID, 示例值："example_user_id"
	Topic      string  `query:"topic" json:"-"`        // 需要查询的任务分组主题，如「待办」、「已办」等, 示例值："1", 可选值有: `1`：待办审批, `2`：已办审批, `3`：已发起审批, `17`：未读知会, `18`：已读知会
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// getApprovalUserTaskListResp ...
type getApprovalUserTaskListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetApprovalUserTaskListResp `json:"data,omitempty"`
}

// GetApprovalUserTaskListResp ...
type GetApprovalUserTaskListResp struct {
	Tasks     []*GetApprovalUserTaskListRespTask `json:"tasks,omitempty"`      // 任务列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
	Count     *GetApprovalUserTaskListRespCount  `json:"count,omitempty"`      // 列表计数，只在分页第一页返回
}

// GetApprovalUserTaskListRespTask ...
type GetApprovalUserTaskListRespTask struct {
	Topic               string                               `json:"topic,omitempty"`                 // 任务所属的任务分组，如「待办」、「已办」等, 可选值有: `1`：待办审批, `2`：已办审批, `3`：已发起审批, `17`：未读知会, `18`：已读知会
	UserID              string                               `json:"user_id,omitempty"`               // 任务所属的用户 ID
	Title               string                               `json:"title,omitempty"`                 // 任务题目
	URLs                *GetApprovalUserTaskListRespTaskURLs `json:"urls,omitempty"`                  // 任务相关 URL
	ProcessExternalID   string                               `json:"process_external_id,omitempty"`   // 流程三方 ID，仅第三方流程，需要在当前租户、当前 APP 内唯一
	TaskExternalID      string                               `json:"task_external_id,omitempty"`      // 任务三方 ID，仅第三方流程，需要在当前流程实例内唯一
	Status              string                               `json:"status,omitempty"`                // 任务状态, 可选值有: `1`：待办, `2`：已办, `17`：未读, `18`：已读, `33`：处理中，标记完成用, `34`：撤回
	ProcessStatus       string                               `json:"process_status,omitempty"`        // 流程实例状态, 可选值有: `0`：无流程状态，不展示对应标签, `1`：流程实例流转中, `2`：已通过, `3`：已拒绝, `4`：已撤销, `5`：已终止
	DefinitionCode      string                               `json:"definition_code,omitempty"`       // 流程定义 Code
	Initiators          []string                             `json:"initiators,omitempty"`            // 发起人 ID 列表
	InitiatorNames      []string                             `json:"initiator_names,omitempty"`       // 发起人姓名列表
	TaskID              string                               `json:"task_id,omitempty"`               // 任务 ID，全局唯一
	ProcessID           string                               `json:"process_id,omitempty"`            // 流程 ID，全局唯一
	ProcessCode         string                               `json:"process_code,omitempty"`          // 流程 Code
	DefinitionGroupID   string                               `json:"definition_group_id,omitempty"`   // 流程定义分组 ID
	DefinitionGroupName string                               `json:"definition_group_name,omitempty"` // 流程定义分组名称
	DefinitionID        string                               `json:"definition_id,omitempty"`         // 流程定义 ID
	DefinitionName      string                               `json:"definition_name,omitempty"`       // 流程定义名称
}

// GetApprovalUserTaskListRespTaskURLs ...
type GetApprovalUserTaskListRespTaskURLs struct {
	Helpdesk string `json:"helpdesk,omitempty"` // 帮助服务台 URL
	Mobile   string `json:"mobile,omitempty"`   // 移动端 URL
	Pc       string `json:"pc,omitempty"`       // PC 端 URL
}

// GetApprovalUserTaskListRespCount ...
type GetApprovalUserTaskListRespCount struct {
	Total   int64 `json:"total,omitempty"`    // 总数，大于等于 1000 个项目时将返回 999
	HasMore bool  `json:"has_more,omitempty"` // 还有更多，当大于等于 1000 时将返回 true
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddApprovalInstanceSign
//
// 对于单个审批任务进行加签操作。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-task-addsign
func (r *ApprovalService) AddApprovalInstanceSign(ctx context.Context, request *AddApprovalInstanceSignReq, options ...MethodOptionFunc) (*AddApprovalInstanceSignResp, *Response, error) {
	if r.cli.mock.mockApprovalAddApprovalInstanceSign != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#AddApprovalInstanceSign mock enable")
		return r.cli.mock.mockApprovalAddApprovalInstanceSign(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "AddApprovalInstanceSign",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/add_sign",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(addApprovalInstanceSignResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalAddApprovalInstanceSign mock ApprovalAddApprovalInstanceSign method
func (r *Mock) MockApprovalAddApprovalInstanceSign(f func(ctx context.Context, request *AddApprovalInstanceSignReq, options ...MethodOptionFunc) (*AddApprovalInstanceSignResp, *Response, error)) {
	r.mockApprovalAddApprovalInstanceSign = f
}

// UnMockApprovalAddApprovalInstanceSign un-mock ApprovalAddApprovalInstanceSign method
func (r *Mock) UnMockApprovalAddApprovalInstanceSign() {
	r.mockApprovalAddApprovalInstanceSign = nil
}

// AddApprovalInstanceSignReq ...
type AddApprovalInstanceSignReq struct {
	ApprovalCode   string   `json:"approval_code,omitempty"`     // 审批定义 Code
	InstanceCode   string   `json:"instance_code,omitempty"`     // 审批实例 Code
	UserID         string   `json:"user_id,omitempty"`           // 操作用户
	TaskID         string   `json:"task_id,omitempty"`           // 任务 ID
	Comment        *string  `json:"comment,omitempty"`           // 意见
	AddSignUserIDs []string `json:"add_sign_user_ids,omitempty"` // 被加签人id
	AddSignType    string   `json:"add_sign_type,omitempty"`     // 1/2/3分别代表前加签/后加签/并加签
	ApprovalMethod *string  `json:"approval_method,omitempty"`   // 仅在前加签、后加签时需要填写，1/2 分别代表或签/会签
}

// addApprovalInstanceSignResp ...
type addApprovalInstanceSignResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *AddApprovalInstanceSignResp `json:"data,omitempty"`
}

// AddApprovalInstanceSignResp ...
type AddApprovalInstanceSignResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ApproveApprovalInstance
//
// 对于单个审批任务进行同意操作。同意后审批流程会流转到下一个审批人。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMDNyUjLzQjM14yM0ITN
func (r *ApprovalService) ApproveApprovalInstance(ctx context.Context, request *ApproveApprovalInstanceReq, options ...MethodOptionFunc) (*ApproveApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalApproveApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#ApproveApprovalInstance mock enable")
		return r.cli.mock.mockApprovalApproveApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "ApproveApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/approve",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(approveApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalApproveApprovalInstance mock ApprovalApproveApprovalInstance method
func (r *Mock) MockApprovalApproveApprovalInstance(f func(ctx context.Context, request *ApproveApprovalInstanceReq, options ...MethodOptionFunc) (*ApproveApprovalInstanceResp, *Response, error)) {
	r.mockApprovalApproveApprovalInstance = f
}

// UnMockApprovalApproveApprovalInstance un-mock ApprovalApproveApprovalInstance method
func (r *Mock) UnMockApprovalApproveApprovalInstance() {
	r.mockApprovalApproveApprovalInstance = nil
}

// ApproveApprovalInstanceReq ...
type ApproveApprovalInstanceReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code
	OpenID       *string `json:"open_id,omitempty"`       // 用户open_id，如果没有user_id，必须要有open_id
	UserID       string  `json:"user_id,omitempty"`       // 操作用户
	TaskID       string  `json:"task_id,omitempty"`       // 任务 ID
	Comment      *string `json:"comment,omitempty"`       // 意见
}

// approveApprovalInstanceResp ...
type approveApprovalInstanceResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *ApproveApprovalInstanceResp `json:"data,omitempty"`
}

// ApproveApprovalInstanceResp ...
type ApproveApprovalInstanceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CancelApprovalInstance
//
// 对于状态为“审批中”的单个审批实例进行撤销操作，撤销后审批流程结束
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDNyUjL2QjM14iN0ITN
func (r *ApprovalService) CancelApprovalInstance(ctx context.Context, request *CancelApprovalInstanceReq, options ...MethodOptionFunc) (*CancelApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalCancelApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CancelApprovalInstance mock enable")
		return r.cli.mock.mockApprovalCancelApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CancelApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/cancel",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(cancelApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCancelApprovalInstance mock ApprovalCancelApprovalInstance method
func (r *Mock) MockApprovalCancelApprovalInstance(f func(ctx context.Context, request *CancelApprovalInstanceReq, options ...MethodOptionFunc) (*CancelApprovalInstanceResp, *Response, error)) {
	r.mockApprovalCancelApprovalInstance = f
}

// UnMockApprovalCancelApprovalInstance un-mock ApprovalCancelApprovalInstance method
func (r *Mock) UnMockApprovalCancelApprovalInstance() {
	r.mockApprovalCancelApprovalInstance = nil
}

// CancelApprovalInstanceReq ...
type CancelApprovalInstanceReq struct {
	ApprovalCode  string `json:"approval_code,omitempty"` // 审批定义Code
	InstanceCode  string `json:"instance_code,omitempty"` // 审批实例Code
	UserID        string `json:"user_id,omitempty"`       // 操作用户
	OpenID        string `json:"open_id,omitempty"`       // 某个应用下用户的唯一标识，根据userID、openID、TenantId获得Lark用户。
	NotifyStarter *bool  `json:"notifyStarter,omitempty"` // 如果为true，撤回实例的时候会收到一条消息提醒。
}

// cancelApprovalInstanceResp ...
type cancelApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *CancelApprovalInstanceResp `json:"data,omitempty"`
}

// CancelApprovalInstanceResp ...
type CancelApprovalInstanceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateApprovalInstance
//
// 创建一个审批实例，调用方需对审批定义的表单有详细了解，将按照定义的表单结构，将表单 Value 通过接口传入。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIDNyUjLyQjM14iM0ITN
func (r *ApprovalService) CreateApprovalInstance(ctx context.Context, request *CreateApprovalInstanceReq, options ...MethodOptionFunc) (*CreateApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalCreateApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CreateApprovalInstance mock enable")
		return r.cli.mock.mockApprovalCreateApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CreateApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCreateApprovalInstance mock ApprovalCreateApprovalInstance method
func (r *Mock) MockApprovalCreateApprovalInstance(f func(ctx context.Context, request *CreateApprovalInstanceReq, options ...MethodOptionFunc) (*CreateApprovalInstanceResp, *Response, error)) {
	r.mockApprovalCreateApprovalInstance = f
}

// UnMockApprovalCreateApprovalInstance un-mock ApprovalCreateApprovalInstance method
func (r *Mock) UnMockApprovalCreateApprovalInstance() {
	r.mockApprovalCreateApprovalInstance = nil
}

// CreateApprovalInstanceReq ...
type CreateApprovalInstanceReq struct {
	ApprovalCode           string              `json:"approval_code,omitempty"`              // 审批定义 code
	UserID                 *string             `json:"user_id,omitempty"`                    // 发起审批用户
	TenantID               *string             `json:"tenant_id,omitempty"`                  // 平台租户ID
	OpenID                 string              `json:"open_id,omitempty"`                    // 发起审批用户 open id, 如果传了 user_id 则优先使用 user_id
	DepartmentID           *string             `json:"department_id,omitempty"`              // 发起审批用户部门id，如果用户只属于一个部门，可以不填。如果属于多个部门，默认会选择部门列表第一个部门
	Form                   ApprovalWidgetList  `json:"form,omitempty"`                       // json 数组，**控件值**
	NodeApproverUserIDList map[string][]string `json:"node_approver_user_id_list,omitempty"` // 如果有发起人自选节点，则需要填写对应节点的审批人<br>key:  node id 或 custom node id , 通过 [查看审批定义](https://open.feishu.cn/document/ukTMukTMukTM/uADNyUjLwQjM14CM0ITN) 获取<br> value: 审批人列表
	NodeApproverOpenIDList map[string][]string `json:"node_approver_open_id_list,omitempty"` // 审批人发起人自选 open id
	NodeCcUserIDList       map[string][]string `json:"node_cc_user_id_list,omitempty"`       // 如果有发起人自选节点，则可填写对应节点的抄送人<br>key:  node id 或 custom node id , 通过 [查看审批定义](https://open.feishu.cn/document/ukTMukTMukTM/uADNyUjLwQjM14CM0ITN) 获取<br> value: 审批人列表<br>单个节点最多选择20位抄送人
	NodeCcOpenIDList       map[string][]string `json:"node_cc_open_id_list,omitempty"`       // 抄送人发起人自选 open id<br>单个节点最多选择20位抄送人
	UUID                   *string             `json:"uuid,omitempty"`                       // 审批实例 uuid，用于幂等操作, 每个租户下面的唯一key，同一个 uuid 只能用于创建一个审批实例，如果冲突，返回错误码 60012 ，格式建议为 XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX，不区分大小写
}

// createApprovalInstanceResp ...
type createApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *CreateApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// CreateApprovalInstanceResp ...
type CreateApprovalInstanceResp struct {
	InstanceCode string `json:"instance_code,omitempty"` // 审批实例 Code
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApprovalInstance
//
// 通过审批实例 Instance Code  获取审批实例详情。Instance Code 由 [批量获取审批实例](https://open.feishu.cn/document/ukTMukTMukTM/uQDOyUjL0gjM14CN4ITN) 接口获取。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEDNyUjLxQjM14SM0ITN
func (r *ApprovalService) GetApprovalInstance(ctx context.Context, request *GetApprovalInstanceReq, options ...MethodOptionFunc) (*GetApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalInstance mock enable")
		return r.cli.mock.mockApprovalGetApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalInstance mock ApprovalGetApprovalInstance method
func (r *Mock) MockApprovalGetApprovalInstance(f func(ctx context.Context, request *GetApprovalInstanceReq, options ...MethodOptionFunc) (*GetApprovalInstanceResp, *Response, error)) {
	r.mockApprovalGetApprovalInstance = f
}

// UnMockApprovalGetApprovalInstance un-mock ApprovalGetApprovalInstance method
func (r *Mock) UnMockApprovalGetApprovalInstance() {
	r.mockApprovalGetApprovalInstance = nil
}

// GetApprovalInstanceReq ...
type GetApprovalInstanceReq struct {
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code, 若在创建的时候穿了uuid, 也可以通过传uuid获取
	Locale       *string `json:"locale,omitempty"`        // zh-CN - 中文<br>en-US - 英文<br>ja-JP - 日文
	UserID       *string `json:"user_id,omitempty"`       // 发起审批用户,平台级审批时使用
	OpenID       *string `json:"open_id,omitempty"`       // 发起审批用户 open id
}

// getApprovalInstanceResp ...
type getApprovalInstanceResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// GetApprovalInstanceResp ...
type GetApprovalInstanceResp struct {
	ApprovalCode string                             `json:"approval_code,omitempty"` // 审批定义 Code
	ApprovalName string                             `json:"approval_name,omitempty"` // 审批名称
	StartTime    int64                              `json:"start_time,omitempty"`    // 审批创建时间
	EndTime      int64                              `json:"end_time,omitempty"`      // 审批完成时间，未完成为 0
	UserID       string                             `json:"user_id,omitempty"`       // 发起审批用户
	OpenID       string                             `json:"open_id,omitempty"`       // 发起审批用户 open id
	SerialNumber string                             `json:"serial_number,omitempty"` // 审批单编号
	DepartmentID string                             `json:"department_id,omitempty"` // 发起审批用户所在部门
	Status       string                             `json:"status,omitempty"`        // 审批实例状态<br>PENDING    - 审批中<br>APPROVED - 通过<br>REJECTED  - 拒绝<br>CANCELED -  撤回<br>DELETED    -  删除
	UUID         string                             `json:"uuid,omitempty"`          // 用户的唯一标识id
	Form         ApprovalWidgetList                 `json:"form,omitempty"`          // json字符串，**控件值**
	TaskList     []*GetApprovalInstanceRespTask     `json:"task_list,omitempty"`     // 审批任务列表
	CommentList  []*GetApprovalInstanceRespComment  `json:"comment_list,omitempty"`  // 评论列表
	Timeline     []*GetApprovalInstanceRespTimeline `json:"timeline,omitempty"`      // 审批动态
}

// GetApprovalInstanceRespTask ...
type GetApprovalInstanceRespTask struct {
	ID           string  `json:"id,omitempty"`             // task id
	UserID       *string `json:"user_id,omitempty"`        // 审批人<br>自动通过、自动拒绝 task user_id 为空
	OpenID       *string `json:"open_id,omitempty"`        // 审批人 open id
	Status       string  `json:"status,omitempty"`         // 任务状态<br>PENDING - 审批中<br>APPROVED - 同意<br>REJECTED  - 拒绝<br>TRANSFERRED - 已转交<br>DONE -  完成
	NodeID       *string `json:"node_id,omitempty"`        // task 所属节点 id
	NodeName     *string `json:"node_name,omitempty"`      // task 所属节点名称
	CustomNodeID *string `json:"custom_node_id,omitempty"` // task 所属节点自定义 id, 如果没设置自定义 id, 则不返回该字段
	Type         string  `json:"type,omitempty"`           // 审批方式<br>AND -会签<br>OR - 或签<br>AUTO_PASS -自动通过<br>AUTO_REJECT - 自动拒绝<br>SEQUENTIAL - 按顺序
	StartTime    int64   `json:"start_time,omitempty"`     // task 开始时间
	EndTime      int64   `json:"end_time,omitempty"`       // task 完成时间, 未完成为 0
}

// GetApprovalInstanceRespComment ...
type GetApprovalInstanceRespComment struct {
	ID         string `json:"id,omitempty"`          // comment id
	UserID     string `json:"user_id,omitempty"`     // 发表评论用户
	OpenID     string `json:"open_id,omitempty"`     // 发表评论用户 open id
	Comment    string `json:"comment,omitempty"`     // 评论内容
	CreateTime int64  `json:"create_time,omitempty"` // 评论时间
}

// GetApprovalInstanceRespTimeline ...
type GetApprovalInstanceRespTimeline struct {
	Type       string                                   `json:"type,omitempty"`         // 动态类型，不同类型 ext 内的 user_id_list 含义不一样<br>START - 审批开始<br>PASS - 通过<br>REJECT  - 拒绝<br>AUTO_PASS -  自动通过<br>AUTO_REJECT - 自动拒绝<br>REMOVE_REPEAT - 去重<br>TRANSFER - 转交 <br>ADD_APPROVER_BEFORE  - 前加签<br>ADD_APPROVER -  并加签<br>ADD_APPROVER_AFTER -  后加签 <br>DELETE_APPROVER  - 减签<br>ROLLBACK_SELECTED -  指定回退<br>ROLLBACK - 全部回退<br>CANCEL -  撤回<br>DELETE - 删除<br>CC - 抄送
	CreateTime int64                                    `json:"create_time,omitempty"`  // 发生时间
	UserID     *string                                  `json:"user_id,omitempty"`      // 动态产生用户
	OpenID     *string                                  `json:"open_id,omitempty"`      // 动态产生用户 open id
	UserIDList []string                                 `json:"user_id_list,omitempty"` // 被抄送人列表
	OpenIDList []string                                 `json:"open_id_list,omitempty"` // 被抄送人列表
	TaskID     *string                                  `json:"task_id,omitempty"`      // 产生动态关联的task_id
	Comment    *string                                  `json:"comment,omitempty"`      // 理由
	CcUserList []*GetApprovalInstanceRespTimelineCcUser `json:"cc_user_list,omitempty"` // 抄送人列表
	Ext        *GetApprovalInstanceRespTimelineExt      `json:"ext,omitempty"`          // 动态其他信息，目前包括 user_id_list, user_id
	NodeKey    *string                                  `json:"node_key,omitempty"`     // 产生task的节点key
}

// GetApprovalInstanceRespTimelineCcUser ...
type GetApprovalInstanceRespTimelineCcUser struct {
	UserID *string `json:"user_id,omitempty"` // 抄送人 user id
	CcID   *string `json:"cc_id,omitempty"`   // 审批实例内抄送唯一标识
	OpenID *string `json:"open_id,omitempty"` // 抄送人 open id
}

// GetApprovalInstanceRespTimelineExt ...
type GetApprovalInstanceRespTimelineExt struct {
	UserIDList []string `json:"user_id_list,omitempty"` // **type类型** - **user_id_list 含义**<br>TRANSFER - 被转交人 <br>ADD_APPROVER_BEFORE  -  被加签人<br>ADD_APPROVER -   被加签人<br>ADD_APPROVER_AFTER -   被加签人 <br>DELETE_APPROVER  - 被减签人
	OpenIDList []string `json:"open_id_list,omitempty"` // user_id_list 对应的 open id
	UserID     *string  `json:"user_id,omitempty"`      // **type类型** - **user_id 含义**<br>CC - 抄送人
	OpenID     *string  `json:"open_id,omitempty"`      // user_id 对应的 open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApprovalInstanceList
//
// 根据 approval_code 批量获取审批实例的 instance_code，用于拉取租户下某个审批定义的全部审批实例。
// 默认以审批创建时间排序。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQDOyUjL0gjM14CN4ITN
func (r *ApprovalService) GetApprovalInstanceList(ctx context.Context, request *GetApprovalInstanceListReq, options ...MethodOptionFunc) (*GetApprovalInstanceListResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalInstanceList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalInstanceList mock enable")
		return r.cli.mock.mockApprovalGetApprovalInstanceList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalInstanceList",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalInstanceListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalInstanceList mock ApprovalGetApprovalInstanceList method
func (r *Mock) MockApprovalGetApprovalInstanceList(f func(ctx context.Context, request *GetApprovalInstanceListReq, options ...MethodOptionFunc) (*GetApprovalInstanceListResp, *Response, error)) {
	r.mockApprovalGetApprovalInstanceList = f
}

// UnMockApprovalGetApprovalInstanceList un-mock ApprovalGetApprovalInstanceList method
func (r *Mock) UnMockApprovalGetApprovalInstanceList() {
	r.mockApprovalGetApprovalInstanceList = nil
}

// GetApprovalInstanceListReq ...
type GetApprovalInstanceListReq struct {
	ApprovalCode string `json:"approval_code,omitempty"` // 审批定义唯一标识
	StartTime    int64  `json:"start_time,omitempty"`    // 审批实例创建时间区间（毫秒）
	EndTime      int64  `json:"end_time,omitempty"`      // 审批实例创建时间区间（毫秒）
	Offset       int64  `json:"offset,omitempty"`        // 查询偏移量
	Limit        int64  `json:"limit,omitempty"`         // 查询限制量 注:不得大于100
}

// getApprovalInstanceListResp ...
type getApprovalInstanceListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalInstanceListResp `json:"data,omitempty"` // 返回业务信息
}

// GetApprovalInstanceListResp ...
type GetApprovalInstanceListResp struct {
	InstanceCodeList []string `json:"instance_code_list,omitempty"` // 审批实例 Code
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// PreviewApprovalInstance
//
// 提交审批前，预览审批流程。或者发起审批后，在某一审批节点预览后续流程
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-preview
func (r *ApprovalService) PreviewApprovalInstance(ctx context.Context, request *PreviewApprovalInstanceReq, options ...MethodOptionFunc) (*PreviewApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalPreviewApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#PreviewApprovalInstance mock enable")
		return r.cli.mock.mockApprovalPreviewApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "PreviewApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/preview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(previewApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalPreviewApprovalInstance mock ApprovalPreviewApprovalInstance method
func (r *Mock) MockApprovalPreviewApprovalInstance(f func(ctx context.Context, request *PreviewApprovalInstanceReq, options ...MethodOptionFunc) (*PreviewApprovalInstanceResp, *Response, error)) {
	r.mockApprovalPreviewApprovalInstance = f
}

// UnMockApprovalPreviewApprovalInstance un-mock ApprovalPreviewApprovalInstance method
func (r *Mock) UnMockApprovalPreviewApprovalInstance() {
	r.mockApprovalPreviewApprovalInstance = nil
}

// PreviewApprovalInstanceReq ...
type PreviewApprovalInstanceReq struct {
	UserIDType   *IDType                         `query:"user_id_type" json:"-"`  // 默认为open_id, 对于open_id(ou_开头)类型，user_id_type为open_id, 对于employeeID(8位字符串，如f7cb567e)类型，user_id_type为user_id
	ApprovalCode *string                         `json:"approval_code,omitempty"` // 审批定义 Code
	UserID       string                          `json:"user_id,omitempty"`       // 发起审批用户，employeid或者openid
	DepartmentID *string                         `json:"department_id,omitempty"` // 发起审批用户部门，如果用户只属于一个部门，可以不填，如果属于多个部门，必须填其中一个部门
	Form         *PreviewApprovalInstanceReqForm `json:"form,omitempty"`          // JSON字符串，控件值。提交审批之前，查看预览流程时，该字段必填
	InstanceCode *string                         `json:"instance_code,omitempty"` // 审批实例code
	TaskID       *string                         `json:"task_id,omitempty"`       // 若审批实例已存在，则传递当前审批任务对应的task_id, 并且user_id需要传task的指派人
}

// PreviewApprovalInstanceReqForm ...
type PreviewApprovalInstanceReqForm struct {
	ID    string `json:"id,omitempty"`    // 控件ID，也可以使用自定义 ID custom_id 的值
	Type  string `json:"type,omitempty"`  // 控件类型
	Value string `json:"value,omitempty"` // 控件值，不同类型的值格式不一样
}

// previewApprovalInstanceResp ...
type previewApprovalInstanceResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *PreviewApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// PreviewApprovalInstanceResp ...
type PreviewApprovalInstanceResp struct {
	PreviewNodes       []string `json:"preview_nodes,omitempty"`         // 预览节点信息
	UserIDList         []string `json:"user_id_list,omitempty"`          // 审批人id列表
	EndCcIDList        []string `json:"end_cc_id_list,omitempty"`        // 审批结束抄送人id列表
	NodeID             string   `json:"node_id,omitempty"`               // 节点id
	NodeName           string   `json:"node_name,omitempty"`             // 节点名称
	NodeType           string   `json:"node_type,omitempty"`             // 节点类型：<br>AND：会签<br>OR: 或签
	CustomNodeID       string   `json:"custom_node_id,omitempty"`        // 用户自定义节点id
	Comments           []string `json:"comments,omitempty"`              // 节点的说明信息
	IsEmptyLogic       bool     `json:"is_empty_logic,omitempty"`        // 审批人是否为空，若为空，则user_id_list为兜底审批人id列表
	IsApproverTypeFree bool     `json:"is_approver_type_free,omitempty"` // 是否发起人自选节点
	HasCcTypeFree      bool     `json:"has_cc_type_free,omitempty"`      // 节点是否支持抄送人自选
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RejectApprovalInstance
//
// 对于单个审批任务进行拒绝操作。拒绝后审批流程结束。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQDNyUjL0QjM14CN0ITN
func (r *ApprovalService) RejectApprovalInstance(ctx context.Context, request *RejectApprovalInstanceReq, options ...MethodOptionFunc) (*RejectApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalRejectApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#RejectApprovalInstance mock enable")
		return r.cli.mock.mockApprovalRejectApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "RejectApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/reject",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(rejectApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalRejectApprovalInstance mock ApprovalRejectApprovalInstance method
func (r *Mock) MockApprovalRejectApprovalInstance(f func(ctx context.Context, request *RejectApprovalInstanceReq, options ...MethodOptionFunc) (*RejectApprovalInstanceResp, *Response, error)) {
	r.mockApprovalRejectApprovalInstance = f
}

// UnMockApprovalRejectApprovalInstance un-mock ApprovalRejectApprovalInstance method
func (r *Mock) UnMockApprovalRejectApprovalInstance() {
	r.mockApprovalRejectApprovalInstance = nil
}

// RejectApprovalInstanceReq ...
type RejectApprovalInstanceReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	InstanceCode string  `json:"instance_code,omitempty"` // 审批实例 Code
	OpenID       string  `json:"open_id,omitempty"`       // 用户open_id，如果没有user_id，必须要有open_id
	UserID       string  `json:"user_id,omitempty"`       // 操作用户
	TaskID       string  `json:"task_id,omitempty"`       // 任务 ID
	Comment      *string `json:"comment,omitempty"`       // 意见
}

// rejectApprovalInstanceResp ...
type rejectApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *RejectApprovalInstanceResp `json:"data,omitempty"`
}

// RejectApprovalInstanceResp ...
type RejectApprovalInstanceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// RollbackApprovalInstance
//
// 从当前审批任务，退回到已审批的一个或多个任务节点。退回后，已审批节点重新生成审批任务
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukTM5UjL5ETO14SOxkTN/approval-task-return
func (r *ApprovalService) RollbackApprovalInstance(ctx context.Context, request *RollbackApprovalInstanceReq, options ...MethodOptionFunc) (*RollbackApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalRollbackApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#RollbackApprovalInstance mock enable")
		return r.cli.mock.mockApprovalRollbackApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "RollbackApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/instances/specified_rollback",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(rollbackApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalRollbackApprovalInstance mock ApprovalRollbackApprovalInstance method
func (r *Mock) MockApprovalRollbackApprovalInstance(f func(ctx context.Context, request *RollbackApprovalInstanceReq, options ...MethodOptionFunc) (*RollbackApprovalInstanceResp, *Response, error)) {
	r.mockApprovalRollbackApprovalInstance = f
}

// UnMockApprovalRollbackApprovalInstance un-mock ApprovalRollbackApprovalInstance method
func (r *Mock) UnMockApprovalRollbackApprovalInstance() {
	r.mockApprovalRollbackApprovalInstance = nil
}

// RollbackApprovalInstanceReq ...
type RollbackApprovalInstanceReq struct {
	UserIDType     *IDType  `query:"user_id_type" json:"-"`      // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`,, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	TaskID         string   `json:"task_id,omitempty"`           // 当前审批任务ID，从实例详情中获取task_list中获取，必须是PENDING的任务id
	UserID         string   `json:"user_id,omitempty"`           // 当前审批任务审批人open_id，从实例详情中获取task_list中获取，必须是PENDING的任务的审批人open_id
	Reason         string   `json:"reason,omitempty"`            // 退回原因
	TaskDefKeyList []string `json:"task_def_key_list,omitempty"` // 指定退回的任务node_key，从实例详情中获取timeline中获取，必须是PASS的任务node_key
}

// rollbackApprovalInstanceResp ...
type rollbackApprovalInstanceResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *RollbackApprovalInstanceResp `json:"data,omitempty"`
}

// RollbackApprovalInstanceResp ...
type RollbackApprovalInstanceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchApprovalInstance
//
// 该接口通过不同条件查询审批系统中符合条件的审批实例列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQjMxYjL0ITM24CNyEjN
func (r *ApprovalService) SearchApprovalInstance(ctx context.Context, request *SearchApprovalInstanceReq, options ...MethodOptionFunc) (*SearchApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalInstance mock enable")
		return r.cli.mock.mockApprovalSearchApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalInstance mock ApprovalSearchApprovalInstance method
func (r *Mock) MockApprovalSearchApprovalInstance(f func(ctx context.Context, request *SearchApprovalInstanceReq, options ...MethodOptionFunc) (*SearchApprovalInstanceResp, *Response, error)) {
	r.mockApprovalSearchApprovalInstance = f
}

// UnMockApprovalSearchApprovalInstance un-mock ApprovalSearchApprovalInstance method
func (r *Mock) UnMockApprovalSearchApprovalInstance() {
	r.mockApprovalSearchApprovalInstance = nil
}

// SearchApprovalInstanceReq ...
type SearchApprovalInstanceReq struct {
	UserID                *string `json:"user_id,omitempty"`                  // 用户 id
	ApprovalCode          *string `json:"approval_code,omitempty"`            // 审批定义 code
	InstanceCode          *string `json:"instance_code,omitempty"`            // 审批实例 code
	InstanceExternalID    *string `json:"instance_external_id,omitempty"`     // 审批实例第三方 id <br>注：和 approval_code 取并集
	GroupExternalID       *string `json:"group_external_id,omitempty"`        // 审批定义分组第三方 id <br>注：和 instance_code 取并集
	InstanceTitle         *string `json:"instance_title,omitempty"`           // 审批实例标题（只有第三方审批有）
	InstanceStatus        *string `json:"instance_status,omitempty"`          // 审批实例状态<br>REJECT：拒绝<br>PENDING：审批中<br>RECALL：撤回<br>DELETED： 已删除<br>APPROVED：通过<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	InstanceStartTimeFrom *int64  `json:"instance_start_time_from,omitempty"` // 实例查询开始时间（unix毫秒时间戳）
	InstanceStartTimeTo   *int64  `json:"instance_start_time_to,omitempty"`   // 实例查询结束时间  (unix毫秒时间戳)
	Locale                *string `json:"locale,omitempty"`                   // 地区 （zh-CN、en-US、ja-JP）
	Offset                *int64  `json:"offset,omitempty"`                   // 查询偏移量 <br>注：不得超过10000
	Limit                 *int64  `json:"limit,omitempty"`                    // 查询限制量 <br>注：不得超过200<br>不设置默认查询10条数据
}

// searchApprovalInstanceResp ...
type searchApprovalInstanceResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *SearchApprovalInstanceResp `json:"data,omitempty"` // 返回业务信息
}

// SearchApprovalInstanceResp ...
type SearchApprovalInstanceResp struct {
	Count        int64                                 `json:"count,omitempty"`         // 查询返回条数
	InstanceList []*SearchApprovalInstanceRespInstance `json:"instance_list,omitempty"` // 审批实例列表
}

// SearchApprovalInstanceRespInstance ...
type SearchApprovalInstanceRespInstance struct {
	Approval *SearchApprovalInstanceRespInstanceApproval `json:"approval,omitempty"` // 审批定义
	Group    *SearchApprovalInstanceRespInstanceGroup    `json:"group,omitempty"`    // 审批定义分组
	Instance *SearchApprovalInstanceRespInstanceInstance `json:"instance,omitempty"` // 审批实例信息
}

// SearchApprovalInstanceRespInstanceApproval ...
type SearchApprovalInstanceRespInstanceApproval struct {
	Code       string                                              `json:"code,omitempty"`        // 审批定义 code
	Name       string                                              `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                                `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalInstanceRespInstanceApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalInstanceRespInstanceApprovalExternal ...
type SearchApprovalInstanceRespInstanceApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalInstanceRespInstanceGroup ...
type SearchApprovalInstanceRespInstanceGroup struct {
	ExternalID *SearchApprovalInstanceRespInstanceGroupExternalID `json:"external_id,omitempty"` // 审批定义分组外部 id
}

// SearchApprovalInstanceRespInstanceGroupExternalID ...
type SearchApprovalInstanceRespInstanceGroupExternalID struct {
	Name string `json:"name,omitempty"` // 审批定义分组名称
}

// SearchApprovalInstanceRespInstanceInstance ...
type SearchApprovalInstanceRespInstanceInstance struct {
	Code       string                                          `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                          `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                          `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                           `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                           `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                          `json:"status,omitempty"`      // 审批实例状态
	Title      string                                          `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                          `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                          `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalInstanceRespInstanceInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalInstanceRespInstanceInstanceLink ...
type SearchApprovalInstanceRespInstanceInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// TransferApprovalInstance
//
// 对于单个审批任务进行转交操作。转交后审批流程流转给被转交人。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDNyUjL1QjM14SN0ITN
func (r *ApprovalService) TransferApprovalInstance(ctx context.Context, request *TransferApprovalInstanceReq, options ...MethodOptionFunc) (*TransferApprovalInstanceResp, *Response, error) {
	if r.cli.mock.mockApprovalTransferApprovalInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#TransferApprovalInstance mock enable")
		return r.cli.mock.mockApprovalTransferApprovalInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "TransferApprovalInstance",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/instance/transfer",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(transferApprovalInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalTransferApprovalInstance mock ApprovalTransferApprovalInstance method
func (r *Mock) MockApprovalTransferApprovalInstance(f func(ctx context.Context, request *TransferApprovalInstanceReq, options ...MethodOptionFunc) (*TransferApprovalInstanceResp, *Response, error)) {
	r.mockApprovalTransferApprovalInstance = f
}

// UnMockApprovalTransferApprovalInstance un-mock ApprovalTransferApprovalInstance method
func (r *Mock) UnMockApprovalTransferApprovalInstance() {
	r.mockApprovalTransferApprovalInstance = nil
}

// TransferApprovalInstanceReq ...
type TransferApprovalInstanceReq struct {
	ApprovalCode   string  `json:"approval_code,omitempty"`    // 审批定义 Code
	InstanceCode   string  `json:"instance_code,omitempty"`    // 审批实例 Code
	UserID         string  `json:"user_id,omitempty"`          // 操作用户
	TaskID         string  `json:"task_id,omitempty"`          // 任务 ID
	Comment        *string `json:"comment,omitempty"`          // 意见
	TransferUserID string  `json:"transfer_user_id,omitempty"` // 被转交人唯一 ID
	OpenID         *string `json:"open_id,omitempty"`          // 用户open_id <br>如果没有user_id，必须要有open_id
	TransferOpenID *string `json:"transfer_open_id,omitempty"` // 被转交人open_id <br>如果没有transfer_user_id，必须要有transfer_open_id
}

// transferApprovalInstanceResp ...
type transferApprovalInstanceResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *TransferApprovalInstanceResp `json:"data,omitempty"`
}

// TransferApprovalInstanceResp ...
type TransferApprovalInstanceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApprovalMessage
//
// 此接口可以根据审批bot消息id及相应状态，更新相应的审批bot消息，只可用于更新待审批模板的bot消息。例如，给用户推送了审批待办消息，当用户处理该消息后，可以将之前推送的Bot消息更新为已审批。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uAjNyYjLwYjM24CM2IjN
func (r *ApprovalService) UpdateApprovalMessage(ctx context.Context, request *UpdateApprovalMessageReq, options ...MethodOptionFunc) (*UpdateApprovalMessageResp, *Response, error) {
	if r.cli.mock.mockApprovalUpdateApprovalMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#UpdateApprovalMessage mock enable")
		return r.cli.mock.mockApprovalUpdateApprovalMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "UpdateApprovalMessage",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v1/message/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApprovalMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalUpdateApprovalMessage mock ApprovalUpdateApprovalMessage method
func (r *Mock) MockApprovalUpdateApprovalMessage(f func(ctx context.Context, request *UpdateApprovalMessageReq, options ...MethodOptionFunc) (*UpdateApprovalMessageResp, *Response, error)) {
	r.mockApprovalUpdateApprovalMessage = f
}

// UnMockApprovalUpdateApprovalMessage un-mock ApprovalUpdateApprovalMessage method
func (r *Mock) UnMockApprovalUpdateApprovalMessage() {
	r.mockApprovalUpdateApprovalMessage = nil
}

// UpdateApprovalMessageReq ...
type UpdateApprovalMessageReq struct {
	MessageID string `json:"message_id,omitempty"` // 卡片 id，发送卡片时会拿到
	Status    string `json:"status,omitempty"`     // 状态类型，用于更新第一个action文字内容，枚举：<br> APPROVED:-已同意<br>REJECTED:-已拒绝<br>CANCELLED:-已撤回<br>FORWARDED:-已转交<br>ROLLBACK:-已回退<br>ADD:-已加签<br>DELETED:-已删除<br>PROCESSED:-已处理
}

// updateApprovalMessageResp ...
type updateApprovalMessageResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述
	Data *UpdateApprovalMessageResp `json:"data,omitempty"` // 返回业务信息
}

// UpdateApprovalMessageResp ...
type UpdateApprovalMessageResp struct {
	MessageID string `json:"message_id,omitempty"` // 消息 id ，用于卡片更新、撤回
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SubscribeApprovalSubscription
//
// 应用订阅 approval_code 后，该应用就可以收到该审批定义对应实例的事件通知。同一应用只需要订阅一次，无需重复订阅。
// 当应用不希望再收到审批事件时，可以使用取消订阅接口进行取消，取消后将不再给应用推送消息。
// 订阅和取消订阅都是应用维度的，多个应用可以同时订阅同一个 approval_code，每个应用都能收到审批事件。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucDOyUjL3gjM14yN4ITN
func (r *ApprovalService) SubscribeApprovalSubscription(ctx context.Context, request *SubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*SubscribeApprovalSubscriptionResp, *Response, error) {
	if r.cli.mock.mockApprovalSubscribeApprovalSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SubscribeApprovalSubscription mock enable")
		return r.cli.mock.mockApprovalSubscribeApprovalSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SubscribeApprovalSubscription",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/subscription/subscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(subscribeApprovalSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSubscribeApprovalSubscription mock ApprovalSubscribeApprovalSubscription method
func (r *Mock) MockApprovalSubscribeApprovalSubscription(f func(ctx context.Context, request *SubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*SubscribeApprovalSubscriptionResp, *Response, error)) {
	r.mockApprovalSubscribeApprovalSubscription = f
}

// UnMockApprovalSubscribeApprovalSubscription un-mock ApprovalSubscribeApprovalSubscription method
func (r *Mock) UnMockApprovalSubscribeApprovalSubscription() {
	r.mockApprovalSubscribeApprovalSubscription = nil
}

// SubscribeApprovalSubscriptionReq ...
type SubscribeApprovalSubscriptionReq struct {
	ApprovalCode string `json:"approval_code,omitempty"` // 审批定义唯一标识
}

// subscribeApprovalSubscriptionResp ...
type subscribeApprovalSubscriptionResp struct {
	Code int64                              `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                             `json:"msg,omitempty"`  // 返回码的描述
	Data *SubscribeApprovalSubscriptionResp `json:"data,omitempty"`
}

// SubscribeApprovalSubscriptionResp ...
type SubscribeApprovalSubscriptionResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnsubscribeApprovalSubscription
//
// 取消订阅 approval_code 后，无法再收到该审批定义对应实例的事件通知。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugDOyUjL4gjM14CO4ITN
func (r *ApprovalService) UnsubscribeApprovalSubscription(ctx context.Context, request *UnsubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*UnsubscribeApprovalSubscriptionResp, *Response, error) {
	if r.cli.mock.mockApprovalUnsubscribeApprovalSubscription != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#UnsubscribeApprovalSubscription mock enable")
		return r.cli.mock.mockApprovalUnsubscribeApprovalSubscription(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "UnsubscribeApprovalSubscription",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/subscription/unsubscribe",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(unsubscribeApprovalSubscriptionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalUnsubscribeApprovalSubscription mock ApprovalUnsubscribeApprovalSubscription method
func (r *Mock) MockApprovalUnsubscribeApprovalSubscription(f func(ctx context.Context, request *UnsubscribeApprovalSubscriptionReq, options ...MethodOptionFunc) (*UnsubscribeApprovalSubscriptionResp, *Response, error)) {
	r.mockApprovalUnsubscribeApprovalSubscription = f
}

// UnMockApprovalUnsubscribeApprovalSubscription un-mock ApprovalUnsubscribeApprovalSubscription method
func (r *Mock) UnMockApprovalUnsubscribeApprovalSubscription() {
	r.mockApprovalUnsubscribeApprovalSubscription = nil
}

// UnsubscribeApprovalSubscriptionReq ...
type UnsubscribeApprovalSubscriptionReq struct {
	ApprovalCode string `json:"approval_code,omitempty"` // 审批定义唯一标识
}

// unsubscribeApprovalSubscriptionResp ...
type unsubscribeApprovalSubscriptionResp struct {
	Code int64                                `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                               `json:"msg,omitempty"`  // 返回码的描述
	Data *UnsubscribeApprovalSubscriptionResp `json:"data,omitempty"`
}

// UnsubscribeApprovalSubscriptionResp ...
type UnsubscribeApprovalSubscriptionResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchApprovalTask
//
// 该接口通过不同条件查询审批系统中符合条件的审批任务列表
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYjMxYjL2ITM24iNyEjN
func (r *ApprovalService) SearchApprovalTask(ctx context.Context, request *SearchApprovalTaskReq, options ...MethodOptionFunc) (*SearchApprovalTaskResp, *Response, error) {
	if r.cli.mock.mockApprovalSearchApprovalTask != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#SearchApprovalTask mock enable")
		return r.cli.mock.mockApprovalSearchApprovalTask(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "SearchApprovalTask",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/task/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(searchApprovalTaskResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalSearchApprovalTask mock ApprovalSearchApprovalTask method
func (r *Mock) MockApprovalSearchApprovalTask(f func(ctx context.Context, request *SearchApprovalTaskReq, options ...MethodOptionFunc) (*SearchApprovalTaskResp, *Response, error)) {
	r.mockApprovalSearchApprovalTask = f
}

// UnMockApprovalSearchApprovalTask un-mock ApprovalSearchApprovalTask method
func (r *Mock) UnMockApprovalSearchApprovalTask() {
	r.mockApprovalSearchApprovalTask = nil
}

// SearchApprovalTaskReq ...
type SearchApprovalTaskReq struct {
	UserID             *string `json:"user_id,omitempty"`              // 用户 id
	ApprovalCode       *string `json:"approval_code,omitempty"`        // 审批定义 code
	InstanceCode       *string `json:"instance_code,omitempty"`        // 审批实例 code
	InstanceExternalID *string `json:"instance_external_id,omitempty"` // 审批实例第三方 id<br>注：和 approval_code 取并集
	GroupExternalID    *string `json:"group_external_id,omitempty"`    // 审批定义分组第三方 id<br>注：和 instance_code 取并集
	TaskTitle          *string `json:"task_title,omitempty"`           // 审批任务标题（只有第三方审批有）
	TaskStatus         *string `json:"task_status,omitempty"`          // 审批任务状态<br>PENDING:   审批中<br>APPROVED:   通过<br>REJECTED:   拒绝<br>TRANSFERRED:转交<br> DONE:      已完成<br>RM_REPEAT:  去重<br> PROCESSED:  已处理<br>注：若不设置，查询全部状态<br>若不在集合中，报错
	TaskStartTimeFrom  *int64  `json:"task_start_time_from,omitempty"` // 任务查询开始时间 (unix毫秒时间戳)
	TaskStartTimeTo    *int64  `json:"task_start_time_to,omitempty"`   // 任务查询结束时间 (unix毫秒时间戳)
	Locale             *string `json:"locale,omitempty"`               // 地区（zh-CN、en-US、ja-JP）
	Offset             *int64  `json:"offset,omitempty"`               // 查询偏移量<br>注：不得超过10000
	Limit              *int64  `json:"limit,omitempty"`                // 查询限制量<br>注：不得超过200<br>不设置默认查询10条数据
}

// searchApprovalTaskResp ...
type searchApprovalTaskResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非0表示失败
	Msg  string                  `json:"msg,omitempty"`  // 返回码的描述
	Data *SearchApprovalTaskResp `json:"data,omitempty"` // 返回业务信息
}

// SearchApprovalTaskResp ...
type SearchApprovalTaskResp struct {
	Count    int64                         `json:"count,omitempty"`     // 查询返回条数
	TaskList []*SearchApprovalTaskRespTask `json:"task_list,omitempty"` // 审批任务列表
}

// SearchApprovalTaskRespTask ...
type SearchApprovalTaskRespTask struct {
	Approval *SearchApprovalTaskRespTaskApproval `json:"approval,omitempty"` // 审批定义
	Group    *SearchApprovalTaskRespTaskGroup    `json:"group,omitempty"`    // 审批定义分组
	Instance *SearchApprovalTaskRespTaskInstance `json:"instance,omitempty"` // 审批实例信息
	Task     *SearchApprovalTaskRespTaskTask     `json:"task,omitempty"`     // 审批任务
}

// SearchApprovalTaskRespTaskApproval ...
type SearchApprovalTaskRespTaskApproval struct {
	Code       string                                      `json:"code,omitempty"`        // 审批定义 code
	Name       string                                      `json:"name,omitempty"`        // 审批定义名称
	IsExternal bool                                        `json:"is_external,omitempty"` // 是否为第三方审批
	External   *SearchApprovalTaskRespTaskApprovalExternal `json:"external,omitempty"`    // 第三方审批信息
}

// SearchApprovalTaskRespTaskApprovalExternal ...
type SearchApprovalTaskRespTaskApprovalExternal struct {
	BatchCcRead bool `json:"batch_cc_read,omitempty"` // 是否支持批量读
}

// SearchApprovalTaskRespTaskGroup ...
type SearchApprovalTaskRespTaskGroup struct {
	ExternalID string `json:"external_id,omitempty"` // 审批定义分组外部 id
	Name       string `json:"name,omitempty"`        // 审批定义分组名称
}

// SearchApprovalTaskRespTaskInstance ...
type SearchApprovalTaskRespTaskInstance struct {
	Code       string                                  `json:"code,omitempty"`        // 审批实例 code
	ExternalID string                                  `json:"external_id,omitempty"` // 审批实例外部 id
	UserID     string                                  `json:"user_id,omitempty"`     // 审批实例发起人 id
	StartTime  int64                                   `json:"start_time,omitempty"`  // 审批实例开始时间
	EndTime    int64                                   `json:"end_time,omitempty"`    // 审批实例结束时间
	Status     string                                  `json:"status,omitempty"`      // 审批实例状态
	Title      string                                  `json:"title,omitempty"`       // 审批实例名称（只有第三方审批有）
	Extra      string                                  `json:"extra,omitempty"`       // 审批实例扩展字段
	SerialID   string                                  `json:"serial_id,omitempty"`   // 审批流水号
	Link       *SearchApprovalTaskRespTaskInstanceLink `json:"link,omitempty"`        // 审批实例链接（只有第三方审批有）
}

// SearchApprovalTaskRespTaskInstanceLink ...
type SearchApprovalTaskRespTaskInstanceLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批实例 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批实例移动端链接
}

// SearchApprovalTaskRespTaskTask ...
type SearchApprovalTaskRespTaskTask struct {
	StartTime int64                               `json:"start_time,omitempty"` // 审批任务开始时间
	UserID    string                              `json:"user_id,omitempty"`    // 审批任务发起人 id
	EndTime   int64                               `json:"end_time,omitempty"`   // 审批任务结束时间
	Title     string                              `json:"title,omitempty"`      // 审批任务名称
	Status    string                              `json:"status,omitempty"`     // 审批任务状态
	Extra     string                              `json:"extra,omitempty"`      // 审批任务扩展字段
	Link      *SearchApprovalTaskRespTaskTaskLink `json:"link,omitempty"`       // 审批任务链接
}

// SearchApprovalTaskRespTaskTaskLink ...
type SearchApprovalTaskRespTaskTaskLink struct {
	PcLink     string `json:"pc_link,omitempty"`     // 审批任务 pc 端链接
	MobileLink string `json:"mobile_link,omitempty"` // 审批任务移动端链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DownloadAttendanceFile 通过文件 ID 下载指定的文件。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/attendance-v1/file/download
func (r *AttendanceService) DownloadAttendanceFile(ctx context.Context, request *DownloadAttendanceFileReq, options ...MethodOptionFunc) (*DownloadAttendanceFileResp, *Response, error) {
	if r.cli.mock.mockAttendanceDownloadAttendanceFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#DownloadAttendanceFile mock enable")
		return r.cli.mock.mockAttendanceDownloadAttendanceFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Attendance",
		API:                   "DownloadAttendanceFile",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/attendance/v1/files/:file_id/download",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadAttendanceFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAttendanceDownloadAttendanceFile mock AttendanceDownloadAttendanceFile method
func (r *Mock) MockAttendanceDownloadAttendanceFile(f func(ctx context.Context, request *DownloadAttendanceFileReq, options ...MethodOptionFunc) (*DownloadAttendanceFileResp, *Response, error)) {
	r.mockAttendanceDownloadAttendanceFile = f
}

// UnMockAttendanceDownloadAttendanceFile un-mock AttendanceDownloadAttendanceFile method
func (r *Mock) UnMockAttendanceDownloadAttendanceFile() {
	r.mockAttendanceDownloadAttendanceFile = nil
}

// DownloadAttendanceFileReq ...
type DownloadAttendanceFileReq struct {
	FileID string `path:"file_id" json:"-"` // 文件 ID, 示例值："xxxxxb306842b1c189bc5212eefxxxxx"
}

// downloadAttendanceFileResp ...
type downloadAttendanceFileResp struct {
	IsFile bool                        `json:"is_file,omitempty"`
	Code   int64                       `json:"code,omitempty"`
	Msg    string                      `json:"msg,omitempty"`
	Data   *DownloadAttendanceFileResp `json:"data,omitempty"`
}

func (r *downloadAttendanceFileResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadAttendanceFileResp{}
	}
	r.Data.File = file
}

// DownloadAttendanceFileResp ...
type DownloadAttendanceFileResp struct {
	File io.Reader `json:"file,omitempty"`
}
