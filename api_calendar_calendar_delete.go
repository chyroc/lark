// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteCalendar
//
// 该接口用于以当前身份（应用 / 用户）删除一个共享日历。
// 身份由 Header Authorization 的 Token 类型决定。
// 当前身份必须对日历具有 owner 权限。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/calendar/delete
func (r *CalendarService) DeleteCalendar(ctx context.Context, request *DeleteCalendarReq, options ...MethodOptionFunc) (*DeleteCalendarResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendar != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendar mock enable")
		return r.cli.mock.mockCalendarDeleteCalendar(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Calendar#DeleteCalendar call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendar request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "DELETE",
		URL:                   "https://open.feishu.cn/open-apis/calendar/v4/calendars/:calendar_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,

		NeedUserAccessToken: true,
	}
	resp := new(deleteCalendarResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Calendar#DeleteCalendar DELETE https://open.feishu.cn/open-apis/calendar/v4/calendars/:calendar_id failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Calendar#DeleteCalendar DELETE https://open.feishu.cn/open-apis/calendar/v4/calendars/:calendar_id failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Calendar", "DeleteCalendar", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Calendar#DeleteCalendar success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockCalendarDeleteCalendar(f func(ctx context.Context, request *DeleteCalendarReq, options ...MethodOptionFunc) (*DeleteCalendarResp, *Response, error)) {
	r.mockCalendarDeleteCalendar = f
}

func (r *Mock) UnMockCalendarDeleteCalendar() {
	r.mockCalendarDeleteCalendar = nil
}

type DeleteCalendarReq struct {
	CalendarID string `path:"calendar_id" json:"-"` // 日历ID, 示例值："feishu.cn_xxxxxxxxxx@group.calendar.feishu.cn"
}

type deleteCalendarResp struct {
	Code int                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarResp `json:"data,omitempty"`
}

type DeleteCalendarResp struct{}
