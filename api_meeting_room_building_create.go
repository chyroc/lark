// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateBuilding 该接口对应管理后台的添加建筑，添加楼层的功能，可用于创建建筑物和建筑物的楼层信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNwYjLwUDM24CM1AjN
func (r *MeetingRoomService) CreateBuilding(ctx context.Context, request *CreateBuildingReq, options ...MethodOptionFunc) (*CreateBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomCreateBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateBuilding mock enable")
		return r.cli.mock.mockMeetingRoomCreateBuilding(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] MeetingRoom#CreateBuilding call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateBuilding request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/meeting_room/building/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] MeetingRoom#CreateBuilding POST https://open.feishu.cn/open-apis/meeting_room/building/create failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] MeetingRoom#CreateBuilding POST https://open.feishu.cn/open-apis/meeting_room/building/create failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("MeetingRoom", "CreateBuilding", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateBuilding success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockMeetingRoomCreateBuilding(f func(ctx context.Context, request *CreateBuildingReq, options ...MethodOptionFunc) (*CreateBuildingResp, *Response, error)) {
	r.mockMeetingRoomCreateBuilding = f
}

func (r *Mock) UnMockMeetingRoomCreateBuilding() {
	r.mockMeetingRoomCreateBuilding = nil
}

type CreateBuildingReq struct {
	Name             string   `json:"name,omitempty"`               // 建筑名称
	Floors           []string `json:"floors,omitempty"`             // 楼层列表
	CountryID        string   `json:"country_id,omitempty"`         // 国家/地区ID
	DistrictID       string   `json:"district_id,omitempty"`        // 城市ID
	CustomBuildingID *string  `json:"custom_building_id,omitempty"` // 租户自定义建筑ID
}

type createBuildingResp struct {
	Code int                 `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *CreateBuildingResp `json:"data,omitempty"` // 返回业务信息
}

type CreateBuildingResp struct {
	BuildingID string `json:"building_id,omitempty"` // 成功创建的建筑ID
}
