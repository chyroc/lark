// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateDepartment 该接口用于向通讯录中创建部门。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 只可在应用的通讯录权限范围内的部门下创建部门。若需要在根部门下创建子部门，则应用通讯录权限范围需要设置为“全部成员”。应用商店应用无权限调用此接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/create
func (r *ContactService) CreateDepartment(ctx context.Context, request *CreateDepartmentReq, options ...MethodOptionFunc) (*CreateDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactCreateDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateDepartment mock enable")
		return r.cli.mock.mockContactCreateDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateDepartment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateDepartment mock ContactCreateDepartment method
func (r *Mock) MockContactCreateDepartment(f func(ctx context.Context, request *CreateDepartmentReq, options ...MethodOptionFunc) (*CreateDepartmentResp, *Response, error)) {
	r.mockContactCreateDepartment = f
}

// UnMockContactCreateDepartment un-mock ContactCreateDepartment method
func (r *Mock) UnMockContactCreateDepartment() {
	r.mockContactCreateDepartment = nil
}

// CreateDepartmentReq ...
type CreateDepartmentReq struct {
	UserIDType         *IDType                      `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	DepartmentIDType   *DepartmentIDType            `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	ClientToken        *string                      `query:"client_token" json:"-"`         // 根据client_token是否一致来判断是否为同一请求, 示例值："473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E"
	Name               string                       `json:"name,omitempty"`                 // 部门名称, 示例值："DemoName", 最小长度：`1` 字符
	I18nName           *CreateDepartmentReqI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称
	ParentDepartmentID string                       `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”, 示例值："D067"
	DepartmentID       *string                      `json:"department_id,omitempty"`        // 本部门的自定义部门ID, 示例值："D096", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
	LeaderUserID       *string                      `json:"leader_user_id,omitempty"`       // 部门主管用户ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Order              *string                      `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序, 示例值："100"
	UnitIDs            []string                     `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个, 示例值：custom_unit_id
	CreateGroupChat    *bool                        `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建, 示例值：false
}

// CreateDepartmentReqI18nName ...
type CreateDepartmentReqI18nName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 部门的中文名, 示例值："Demo名称"
	JaJp *string `json:"ja_jp,omitempty"` // 部门的日文名, 示例值："デモ名"
	EnUs *string `json:"en_us,omitempty"` // 部门的英文名, 示例值："Demo Name"
}

// createDepartmentResp ...
type createDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *CreateDepartmentResp `json:"data,omitempty"`
}

// CreateDepartmentResp ...
type CreateDepartmentResp struct {
	Department *CreateDepartmentRespDepartment `json:"department,omitempty"` // 部门信息
}

// CreateDepartmentRespDepartment ...
type CreateDepartmentRespDepartment struct {
	Name               string                                  `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	I18nName           *CreateDepartmentRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	ParentDepartmentID string                                  `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	DepartmentID       string                                  `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	OpenDepartmentID   string                                  `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                  `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	ChatID             string                                  `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
	Order              string                                  `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	UnitIDs            []string                                `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	MemberCount        int64                                   `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：, 获取部门组织架构信息, 以应用身份读取通讯录
	Status             *CreateDepartmentRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：, 获取部门基础信息, 以应用身份读取通讯录
}

// CreateDepartmentRespDepartmentI18nName ...
type CreateDepartmentRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// CreateDepartmentRespDepartmentStatus ...
type CreateDepartmentRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteDepartment 该接口用于向通讯录中删除部门。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 应用需要同时拥有待删除部门及其父部门的通讯录授权。应用商店应用无权限调用该接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/delete
func (r *ContactService) DeleteDepartment(ctx context.Context, request *DeleteDepartmentReq, options ...MethodOptionFunc) (*DeleteDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactDeleteDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteDepartment mock enable")
		return r.cli.mock.mockContactDeleteDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteDepartment",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteDepartment mock ContactDeleteDepartment method
func (r *Mock) MockContactDeleteDepartment(f func(ctx context.Context, request *DeleteDepartmentReq, options ...MethodOptionFunc) (*DeleteDepartmentResp, *Response, error)) {
	r.mockContactDeleteDepartment = f
}

// UnMockContactDeleteDepartment un-mock ContactDeleteDepartment method
func (r *Mock) UnMockContactDeleteDepartment() {
	r.mockContactDeleteDepartment = nil
}

// DeleteDepartmentReq ...
type DeleteDepartmentReq struct {
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     string            `path:"department_id" json:"-"`       // 部门ID，需要与查询参数中传入的department_id_type类型保持一致。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
}

// deleteDepartmentResp ...
type deleteDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *DeleteDepartmentResp `json:"data,omitempty"`
}

// DeleteDepartmentResp ...
type DeleteDepartmentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDepartment 该接口用于向通讯录获取单个部门信息。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 使用tenant_access_token时，应用需要拥有待查询部门的通讯录授权。如果需要获取根部门信息，则需要拥有全员权限。
// 使用user_access_token时，用户需要有待查询部门的可见性，如果需要获取根部门信息，则要求员工可见所有人。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/get
func (r *ContactService) GetDepartment(ctx context.Context, request *GetDepartmentReq, options ...MethodOptionFunc) (*GetDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactGetDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetDepartment mock enable")
		return r.cli.mock.mockContactGetDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetDepartment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetDepartment mock ContactGetDepartment method
func (r *Mock) MockContactGetDepartment(f func(ctx context.Context, request *GetDepartmentReq, options ...MethodOptionFunc) (*GetDepartmentResp, *Response, error)) {
	r.mockContactGetDepartment = f
}

// UnMockContactGetDepartment un-mock ContactGetDepartment method
func (r *Mock) UnMockContactGetDepartment() {
	r.mockContactGetDepartment = nil
}

// GetDepartmentReq ...
type GetDepartmentReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     string            `path:"department_id" json:"-"`       // 需要获取的部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
}

// getDepartmentResp ...
type getDepartmentResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *GetDepartmentResp `json:"data,omitempty"`
}

// GetDepartmentResp ...
type GetDepartmentResp struct {
	Department *GetDepartmentRespDepartment `json:"department,omitempty"` // 部门信息
}

// GetDepartmentRespDepartment ...
type GetDepartmentRespDepartment struct {
	Name               string                               `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	I18nName           *GetDepartmentRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	ParentDepartmentID string                               `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	DepartmentID       string                               `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	OpenDepartmentID   string                               `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                               `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	ChatID             string                               `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	Order              string                               `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	UnitIDs            []string                             `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	MemberCount        int64                                `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	Status             *GetDepartmentRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
}

// GetDepartmentRespDepartmentI18nName ...
type GetDepartmentRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetDepartmentRespDepartmentStatus ...
type GetDepartmentRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDepartmentList 通过部门ID获取部门的子部门列表。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 部门ID 必填，根部门的部门ID 为0
// - 使用 user_access_token 时，返回该用户组织架构可见性范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内的所有可见部门。当进行递归查询时，只筛查最多1000个部门的可见性。
// - 使用
// tenant_access_token 则基于应用的通讯录权限范围进行权限校验与过滤。
// 如果部门ID为0，会检验应用是否有全员通讯录权限，如果是非0 部门ID，则会校验应用是否有该部门的通讯录权限。无部门权限返回无部门通讯录权限错误码，有权限则返回部门下子部门列表（根据fetch_child决定是否递归）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/children
func (r *ContactService) GetDepartmentList(ctx context.Context, request *GetDepartmentListReq, options ...MethodOptionFunc) (*GetDepartmentListResp, *Response, error) {
	if r.cli.mock.mockContactGetDepartmentList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetDepartmentList mock enable")
		return r.cli.mock.mockContactGetDepartmentList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetDepartmentList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id/children",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDepartmentListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetDepartmentList mock ContactGetDepartmentList method
func (r *Mock) MockContactGetDepartmentList(f func(ctx context.Context, request *GetDepartmentListReq, options ...MethodOptionFunc) (*GetDepartmentListResp, *Response, error)) {
	r.mockContactGetDepartmentList = f
}

// UnMockContactGetDepartmentList un-mock ContactGetDepartmentList method
func (r *Mock) UnMockContactGetDepartmentList() {
	r.mockContactGetDepartmentList = nil
}

// GetDepartmentListReq ...
type GetDepartmentListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	FetchChild       *bool             `query:"fetch_child" json:"-"`        // 是否递归获取子部门, 示例值：false
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ+G8JG6tK7+ZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	DepartmentID     string            `path:"department_id" json:"-"`       // 部门ID，根部门的部门ID 为0, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
}

// getDepartmentListResp ...
type getDepartmentListResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetDepartmentListResp `json:"data,omitempty"`
}

// GetDepartmentListResp ...
type GetDepartmentListResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetDepartmentListRespItem `json:"items,omitempty"`      // 部门列表
}

// GetDepartmentListRespItem ...
type GetDepartmentListRespItem struct {
	Name               string                             `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	I18nName           *GetDepartmentListRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	ParentDepartmentID string                             `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	DepartmentID       string                             `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	OpenDepartmentID   string                             `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                             `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	ChatID             string                             `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	Order              string                             `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	UnitIDs            []string                           `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	MemberCount        int64                              `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	Status             *GetDepartmentListRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	CreateGroupChat    bool                               `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建
}

// GetDepartmentListRespItemI18nName ...
type GetDepartmentListRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetDepartmentListRespItemStatus ...
type GetDepartmentListRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetDepartmentListOld 该接口用于获取当前部门子部门列表。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// - 使用 user_access_token 时，返回该用户组织架构可见性范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内的所有可见部门。当进行递归查询时，只筛查最多1000个部门的可见性。
// - 使用
// tenant_access_token 则基于应用的通讯录权限范围进行权限校验与过滤。由于
// parent_department_id 是非必填参数，填与不填存在<b>两种数据权限校验与返回</b>情况：
// <br> <br>1、请求设置了
// parent_department_id 为A（根部门0），会检验A是否在通讯录权限内，若在( parent_department_id=0 时会校验是否为全员权限），则返回部门下子部门列表（根据fetch_child决定是否递归），否则返回无部门通讯录权限错误码。
// <br> <br>2、请求未带
// parent_department_id 参数，如通讯录范围为全员权限，只返回根部门ID(部门ID为0)，否则返回根据通讯录范围配置的部门ID及子部门(根据
// fetch_child 决定是否递归)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/list
//
// Deprecated
func (r *ContactService) GetDepartmentListOld(ctx context.Context, request *GetDepartmentListOldReq, options ...MethodOptionFunc) (*GetDepartmentListOldResp, *Response, error) {
	if r.cli.mock.mockContactGetDepartmentListOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetDepartmentListOld mock enable")
		return r.cli.mock.mockContactGetDepartmentListOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetDepartmentListOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getDepartmentListOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetDepartmentListOld mock ContactGetDepartmentListOld method
func (r *Mock) MockContactGetDepartmentListOld(f func(ctx context.Context, request *GetDepartmentListOldReq, options ...MethodOptionFunc) (*GetDepartmentListOldResp, *Response, error)) {
	r.mockContactGetDepartmentListOld = f
}

// UnMockContactGetDepartmentListOld un-mock ContactGetDepartmentListOld method
func (r *Mock) UnMockContactGetDepartmentListOld() {
	r.mockContactGetDepartmentListOld = nil
}

// GetDepartmentListOldReq ...
type GetDepartmentListOldReq struct {
	UserIDType         *IDType           `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	ParentDepartmentID *string           `query:"parent_department_id" json:"-"` // 父部门的ID，填上获取部门下所有子部门，此处填写的 ID 必须是 department_id_type 指定的 ID。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	FetchChild         *bool             `query:"fetch_child" json:"-"`          // 是否递归获取子部门, 示例值：是否递归获取子部门，默认值：false
	PageToken          *string           `query:"page_token" json:"-"`           // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ%2BG8JG6tK7%2BZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	PageSize           *int64            `query:"page_size" json:"-"`            // 分页大小, 示例值：10, 最大值：`50`
}

// getDepartmentListOldResp ...
type getDepartmentListOldResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *GetDepartmentListOldResp `json:"data,omitempty"`
}

// GetDepartmentListOldResp ...
type GetDepartmentListOldResp struct {
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetDepartmentListOldRespItem `json:"items,omitempty"`
}

// GetDepartmentListOldRespItem ...
type GetDepartmentListOldRespItem struct {
	Name               string                                `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *GetDepartmentListOldRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                                `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                                `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                                `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                                `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                                `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                              `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                 `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *GetDepartmentListOldRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// GetDepartmentListOldRespItemI18nName ...
type GetDepartmentListOldRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetDepartmentListOldRespItemStatus ...
type GetDepartmentListOldRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetParentDepartment 该接口用来递归获取部门父部门的信息，并按照由子到父的顺序返回有权限的父部门信息列表。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 使用tenant_access_token时,该接口只返回可见性范围内的父部门信息
// 例如：A >>B>>C>>D四级部门，通讯录权限只到B，那么查询D部门的parent，会返回B和C两级部门。
// 使用user_access_token时,该接口只返回对于用户可见的父部门信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/parent
func (r *ContactService) GetParentDepartment(ctx context.Context, request *GetParentDepartmentReq, options ...MethodOptionFunc) (*GetParentDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactGetParentDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetParentDepartment mock enable")
		return r.cli.mock.mockContactGetParentDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetParentDepartment",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/parent",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getParentDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetParentDepartment mock ContactGetParentDepartment method
func (r *Mock) MockContactGetParentDepartment(f func(ctx context.Context, request *GetParentDepartmentReq, options ...MethodOptionFunc) (*GetParentDepartmentResp, *Response, error)) {
	r.mockContactGetParentDepartment = f
}

// UnMockContactGetParentDepartment un-mock ContactGetParentDepartment method
func (r *Mock) UnMockContactGetParentDepartment() {
	r.mockContactGetParentDepartment = nil
}

// GetParentDepartmentReq ...
type GetParentDepartmentReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
	DepartmentID     string            `query:"department_id" json:"-"`      // 部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ%2BG8JG6tK7%2BZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
}

// getParentDepartmentResp ...
type getParentDepartmentResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetParentDepartmentResp `json:"data,omitempty"`
}

// GetParentDepartmentResp ...
type GetParentDepartmentResp struct {
	HasMore   bool                           `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetParentDepartmentRespItem `json:"items,omitempty"`
}

// GetParentDepartmentRespItem ...
type GetParentDepartmentRespItem struct {
	Name               string                               `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *GetParentDepartmentRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                               `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                               `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                               `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                               `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                               `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                               `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                             `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *GetParentDepartmentRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// GetParentDepartmentRespItemI18nName ...
type GetParentDepartmentRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// GetParentDepartmentRespItemStatus ...
type GetParentDepartmentRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchDepartment 搜索部门，用户通过关键词查询可见的部门数据，部门可见性需要管理员在后台配置。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 部门存在，但用户搜索不到并不一定是搜索有问题，可能是管理员在后台配置了权限控制，导致用户无法搜索到该部门
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/search
func (r *ContactService) SearchDepartment(ctx context.Context, request *SearchDepartmentReq, options ...MethodOptionFunc) (*SearchDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactSearchDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#SearchDepartment mock enable")
		return r.cli.mock.mockContactSearchDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Contact",
		API:                 "SearchDepartment",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/contact/v3/departments/search",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactSearchDepartment mock ContactSearchDepartment method
func (r *Mock) MockContactSearchDepartment(f func(ctx context.Context, request *SearchDepartmentReq, options ...MethodOptionFunc) (*SearchDepartmentResp, *Response, error)) {
	r.mockContactSearchDepartment = f
}

// UnMockContactSearchDepartment un-mock ContactSearchDepartment method
func (r *Mock) UnMockContactSearchDepartment() {
	r.mockContactSearchDepartment = nil
}

// SearchDepartmentReq ...
type SearchDepartmentReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义 department_id 来标识部门, `open_department_id`：以 open_department_id 来标识部门
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RD/cIFmu77WxpxPB/2oHfQLZ+G8JG6tK7+ZnHiT7COhD2hMSICh/eBl7cpzU6JEC3J7COKNe4jrQ8ExwBCR"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
	Query            string            `json:"query,omitempty"`              // 搜索关键词，匹配字段为部门名称（不支持匹配部门国际化名称）, 示例值："DemoName"
}

// searchDepartmentResp ...
type searchDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *SearchDepartmentResp `json:"data,omitempty"`
}

// SearchDepartmentResp ...
type SearchDepartmentResp struct {
	Items     []*SearchDepartmentRespItem `json:"items,omitempty"`
	PageToken string                      `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                        `json:"has_more,omitempty"`   // 是否还有更多项
}

// SearchDepartmentRespItem ...
type SearchDepartmentRespItem struct {
	Name               string                            `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	I18nName           *SearchDepartmentRespItemI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	ParentDepartmentID string                            `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	DepartmentID       string                            `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	OpenDepartmentID   string                            `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                            `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	ChatID             string                            `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	Order              string                            `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	UnitIDs            []string                          `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	MemberCount        int64                             `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,以应用身份访问通讯录,读取通讯录
	Status             *SearchDepartmentRespItemStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,以应用身份访问通讯录,读取通讯录
	CreateGroupChat    bool                              `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建
}

// SearchDepartmentRespItemI18nName ...
type SearchDepartmentRespItemI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// SearchDepartmentRespItemStatus ...
type SearchDepartmentRespItemStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDepartment 该接口用于更新当前部门所有信息。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// - 调用该接口需要具有该部门以及更新操作涉及的部门的通讯录权限。应用商店应用无权限调用此接口。
// - 没有填写的字段会被置为空值（order字段除外）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/update
func (r *ContactService) UpdateDepartment(ctx context.Context, request *UpdateDepartmentReq, options ...MethodOptionFunc) (*UpdateDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactUpdateDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateDepartment mock enable")
		return r.cli.mock.mockContactUpdateDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateDepartment",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateDepartment mock ContactUpdateDepartment method
func (r *Mock) MockContactUpdateDepartment(f func(ctx context.Context, request *UpdateDepartmentReq, options ...MethodOptionFunc) (*UpdateDepartmentResp, *Response, error)) {
	r.mockContactUpdateDepartment = f
}

// UnMockContactUpdateDepartment un-mock ContactUpdateDepartment method
func (r *Mock) UnMockContactUpdateDepartment() {
	r.mockContactUpdateDepartment = nil
}

// UpdateDepartmentReq ...
type UpdateDepartmentReq struct {
	UserIDType         *IDType                      `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType            `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID       string                       `path:"department_id" json:"-"`         // 部门ID，需要与查询参数中传入的department_id_type类型保持一致。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
	Name               string                       `json:"name,omitempty"`                 // 部门名称, 示例值："DemoName", 最小长度：`1` 字符
	I18nName           *UpdateDepartmentReqI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称
	ParentDepartmentID string                       `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”, 示例值："D067"
	LeaderUserID       *string                      `json:"leader_user_id,omitempty"`       // 部门主管用户ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Order              *string                      `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序, 示例值："100"
	UnitIDs            []string                     `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个, 示例值：custom_unit_id
	CreateGroupChat    *bool                        `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建, 示例值：false
}

// UpdateDepartmentReqI18nName ...
type UpdateDepartmentReqI18nName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 部门的中文名, 示例值："Demo名称"
	JaJp *string `json:"ja_jp,omitempty"` // 部门的日文名, 示例值："デモ名"
	EnUs *string `json:"en_us,omitempty"` // 部门的英文名, 示例值："Demo Name"
}

// updateDepartmentResp ...
type updateDepartmentResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDepartmentResp `json:"data,omitempty"`
}

// UpdateDepartmentResp ...
type UpdateDepartmentResp struct {
	Department *UpdateDepartmentRespDepartment `json:"department,omitempty"` // 部门信息
}

// UpdateDepartmentRespDepartment ...
type UpdateDepartmentRespDepartment struct {
	Name               string                                  `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *UpdateDepartmentRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                                  `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                                  `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                                  `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                  `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                                  `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                                  `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                                `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                   `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *UpdateDepartmentRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// UpdateDepartmentRespDepartmentI18nName ...
type UpdateDepartmentRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// UpdateDepartmentRespDepartmentStatus ...
type UpdateDepartmentRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateDepartmentPatch 该接口用于更新通讯录中部门的信息中的任一个字段。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 调用该接口需要具有该部门以及更新操作涉及的部门的通讯录权限。应用商店应用无权限调用此接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/patch
func (r *ContactService) UpdateDepartmentPatch(ctx context.Context, request *UpdateDepartmentPatchReq, options ...MethodOptionFunc) (*UpdateDepartmentPatchResp, *Response, error) {
	if r.cli.mock.mockContactUpdateDepartmentPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateDepartmentPatch mock enable")
		return r.cli.mock.mockContactUpdateDepartmentPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateDepartmentPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/departments/:department_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateDepartmentPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateDepartmentPatch mock ContactUpdateDepartmentPatch method
func (r *Mock) MockContactUpdateDepartmentPatch(f func(ctx context.Context, request *UpdateDepartmentPatchReq, options ...MethodOptionFunc) (*UpdateDepartmentPatchResp, *Response, error)) {
	r.mockContactUpdateDepartmentPatch = f
}

// UnMockContactUpdateDepartmentPatch un-mock ContactUpdateDepartmentPatch method
func (r *Mock) UnMockContactUpdateDepartmentPatch() {
	r.mockContactUpdateDepartmentPatch = nil
}

// UpdateDepartmentPatchReq ...
type UpdateDepartmentPatchReq struct {
	UserIDType         *IDType                           `query:"user_id_type" json:"-"`         // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType   *DepartmentIDType                 `query:"department_id_type" json:"-"`   // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID       string                            `path:"department_id" json:"-"`         // 部门ID，需要与查询参数中传入的department_id_type类型保持一致。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141", 最大长度：`64` 字符, 正则校验：`^0|[^od][A-Za-z0-9]*`
	Name               *string                           `json:"name,omitempty"`                 // 部门名称, 示例值："DemoName", 最小长度：`1` 字符
	I18nName           *UpdateDepartmentPatchReqI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称
	ParentDepartmentID *string                           `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”, 示例值："D067"
	LeaderUserID       *string                           `json:"leader_user_id,omitempty"`       // 部门主管用户ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Order              *string                           `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序, 示例值："100"
	UnitIDs            []string                          `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个, 示例值：custom_unit_id
	CreateGroupChat    *bool                             `json:"create_group_chat,omitempty"`    // 是否创建部门群，默认不创建, 示例值：false
}

// UpdateDepartmentPatchReqI18nName ...
type UpdateDepartmentPatchReqI18nName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 部门的中文名, 示例值："Demo名称"
	JaJp *string `json:"ja_jp,omitempty"` // 部门的日文名, 示例值："デモ名"
	EnUs *string `json:"en_us,omitempty"` // 部门的英文名, 示例值："Demo Name"
}

// updateDepartmentPatchResp ...
type updateDepartmentPatchResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *UpdateDepartmentPatchResp `json:"data,omitempty"`
}

// UpdateDepartmentPatchResp ...
type UpdateDepartmentPatchResp struct {
	Department *UpdateDepartmentPatchRespDepartment `json:"department,omitempty"` // 部门信息
}

// UpdateDepartmentPatchRespDepartment ...
type UpdateDepartmentPatchRespDepartment struct {
	Name               string                                       `json:"name,omitempty"`                 // 部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	I18nName           *UpdateDepartmentPatchRespDepartmentI18nName `json:"i18n_name,omitempty"`            // 国际化的部门名称,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	ParentDepartmentID string                                       `json:"parent_department_id,omitempty"` // 父部门的ID,* 创建根部门，该参数值为 “0”,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	DepartmentID       string                                       `json:"department_id,omitempty"`        // 本部门的自定义部门ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	OpenDepartmentID   string                                       `json:"open_department_id,omitempty"`   // 部门的open_id
	LeaderUserID       string                                       `json:"leader_user_id,omitempty"`       // 部门主管用户ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	ChatID             string                                       `json:"chat_id,omitempty"`              // 部门群ID,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
	Order              string                                       `json:"order,omitempty"`                // 部门的排序，即部门在其同级部门的展示顺序,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	UnitIDs            []string                                     `json:"unit_ids,omitempty"`             // 部门单位自定义ID列表，当前只支持一个,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	MemberCount        int64                                        `json:"member_count,omitempty"`         // 部门下用户的个数,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门组织架构信息,读取通讯录,以应用身份访问通讯录
	Status             *UpdateDepartmentPatchRespDepartmentStatus   `json:"status,omitempty"`               // 部门状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取部门基础信息,读取通讯录,以应用身份访问通讯录
}

// UpdateDepartmentPatchRespDepartmentI18nName ...
type UpdateDepartmentPatchRespDepartmentI18nName struct {
	ZhCn string `json:"zh_cn,omitempty"` // 部门的中文名
	JaJp string `json:"ja_jp,omitempty"` // 部门的日文名
	EnUs string `json:"en_us,omitempty"` // 部门的英文名
}

// UpdateDepartmentPatchRespDepartmentStatus ...
type UpdateDepartmentPatchRespDepartmentStatus struct {
	IsDeleted bool `json:"is_deleted,omitempty"` // 是否被删除
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateEmployeeTypeEnum 新增自定义人员类型
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/create
func (r *ContactService) CreateEmployeeTypeEnum(ctx context.Context, request *CreateEmployeeTypeEnumReq, options ...MethodOptionFunc) (*CreateEmployeeTypeEnumResp, *Response, error) {
	if r.cli.mock.mockContactCreateEmployeeTypeEnum != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateEmployeeTypeEnum mock enable")
		return r.cli.mock.mockContactCreateEmployeeTypeEnum(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateEmployeeTypeEnum",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createEmployeeTypeEnumResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateEmployeeTypeEnum mock ContactCreateEmployeeTypeEnum method
func (r *Mock) MockContactCreateEmployeeTypeEnum(f func(ctx context.Context, request *CreateEmployeeTypeEnumReq, options ...MethodOptionFunc) (*CreateEmployeeTypeEnumResp, *Response, error)) {
	r.mockContactCreateEmployeeTypeEnum = f
}

// UnMockContactCreateEmployeeTypeEnum un-mock ContactCreateEmployeeTypeEnum method
func (r *Mock) UnMockContactCreateEmployeeTypeEnum() {
	r.mockContactCreateEmployeeTypeEnum = nil
}

// CreateEmployeeTypeEnumReq ...
type CreateEmployeeTypeEnumReq struct {
	Content     string                                `json:"content,omitempty"`      // 枚举内容, 示例值："专家", 长度范围：`1` ～ `100` 字符
	EnumType    int64                                 `json:"enum_type,omitempty"`    // 类型, 示例值：2, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                 `json:"enum_status,omitempty"`  // 使用状态, 示例值：1, 可选值有: `1`：激活, `2`：未激活
	I18nContent *CreateEmployeeTypeEnumReqI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// CreateEmployeeTypeEnumReqI18nContent ...
type CreateEmployeeTypeEnumReqI18nContent struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值："zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值："专家"
}

// createEmployeeTypeEnumResp ...
type createEmployeeTypeEnumResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *CreateEmployeeTypeEnumResp `json:"data,omitempty"`
}

// CreateEmployeeTypeEnumResp ...
type CreateEmployeeTypeEnumResp struct {
	EmployeeTypeEnum *CreateEmployeeTypeEnumRespEmployeeTypeEnum `json:"employee_type_enum,omitempty"` // 新建的人员类型信息
}

// CreateEmployeeTypeEnumRespEmployeeTypeEnum ...
type CreateEmployeeTypeEnumRespEmployeeTypeEnum struct {
	EnumID      string                                                 `json:"enum_id,omitempty"`      // 枚举值id
	EnumValue   string                                                 `json:"enum_value,omitempty"`   // 枚举的编号值，创建新的人员类型后，系统生成对应编号。对应[创建用户接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create)中用户信息的employee_type字段值
	Content     string                                                 `json:"content,omitempty"`      // 枚举内容
	EnumType    int64                                                  `json:"enum_type,omitempty"`    // 类型, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                                  `json:"enum_status,omitempty"`  // 使用状态, 可选值有: `1`：激活, `2`：未激活
	I18nContent *CreateEmployeeTypeEnumRespEmployeeTypeEnumI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// CreateEmployeeTypeEnumRespEmployeeTypeEnumI18nContent ...
type CreateEmployeeTypeEnumRespEmployeeTypeEnumI18nContent struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteEmployeeTypeEnum 删除自定义人员枚举
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/delete
func (r *ContactService) DeleteEmployeeTypeEnum(ctx context.Context, request *DeleteEmployeeTypeEnumReq, options ...MethodOptionFunc) (*DeleteEmployeeTypeEnumResp, *Response, error) {
	if r.cli.mock.mockContactDeleteEmployeeTypeEnum != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteEmployeeTypeEnum mock enable")
		return r.cli.mock.mockContactDeleteEmployeeTypeEnum(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteEmployeeTypeEnum",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums/:enum_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteEmployeeTypeEnumResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteEmployeeTypeEnum mock ContactDeleteEmployeeTypeEnum method
func (r *Mock) MockContactDeleteEmployeeTypeEnum(f func(ctx context.Context, request *DeleteEmployeeTypeEnumReq, options ...MethodOptionFunc) (*DeleteEmployeeTypeEnumResp, *Response, error)) {
	r.mockContactDeleteEmployeeTypeEnum = f
}

// UnMockContactDeleteEmployeeTypeEnum un-mock ContactDeleteEmployeeTypeEnum method
func (r *Mock) UnMockContactDeleteEmployeeTypeEnum() {
	r.mockContactDeleteEmployeeTypeEnum = nil
}

// DeleteEmployeeTypeEnumReq ...
type DeleteEmployeeTypeEnumReq struct {
	EnumID string `path:"enum_id" json:"-"` // 枚举值id, 示例值："exGeIjow7zIqWMy+ONkFxA=="
}

// deleteEmployeeTypeEnumResp ...
type deleteEmployeeTypeEnumResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *DeleteEmployeeTypeEnumResp `json:"data,omitempty"`
}

// DeleteEmployeeTypeEnumResp ...
type DeleteEmployeeTypeEnumResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetEmployeeTypeEnumList 该接口用于获取员工的人员类型
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list
func (r *ContactService) GetEmployeeTypeEnumList(ctx context.Context, request *GetEmployeeTypeEnumListReq, options ...MethodOptionFunc) (*GetEmployeeTypeEnumListResp, *Response, error) {
	if r.cli.mock.mockContactGetEmployeeTypeEnumList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetEmployeeTypeEnumList mock enable")
		return r.cli.mock.mockContactGetEmployeeTypeEnumList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetEmployeeTypeEnumList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getEmployeeTypeEnumListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetEmployeeTypeEnumList mock ContactGetEmployeeTypeEnumList method
func (r *Mock) MockContactGetEmployeeTypeEnumList(f func(ctx context.Context, request *GetEmployeeTypeEnumListReq, options ...MethodOptionFunc) (*GetEmployeeTypeEnumListResp, *Response, error)) {
	r.mockContactGetEmployeeTypeEnumList = f
}

// UnMockContactGetEmployeeTypeEnumList un-mock ContactGetEmployeeTypeEnumList method
func (r *Mock) UnMockContactGetEmployeeTypeEnumList() {
	r.mockContactGetEmployeeTypeEnumList = nil
}

// GetEmployeeTypeEnumListReq ...
type GetEmployeeTypeEnumListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："3"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
}

// getEmployeeTypeEnumListResp ...
type getEmployeeTypeEnumListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetEmployeeTypeEnumListResp `json:"data,omitempty"`
}

// GetEmployeeTypeEnumListResp ...
type GetEmployeeTypeEnumListResp struct {
	Items     []*GetEmployeeTypeEnumListRespItem `json:"items,omitempty"`      // 枚举数据
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                             `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetEmployeeTypeEnumListRespItem ...
type GetEmployeeTypeEnumListRespItem struct {
	EnumID      string                                      `json:"enum_id,omitempty"`      // 枚举值id
	EnumValue   string                                      `json:"enum_value,omitempty"`   // 枚举的编号值，创建新的人员类型后，系统生成对应编号。对应[创建用户接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create)中用户信息的employee_type字段值
	Content     string                                      `json:"content,omitempty"`      // 枚举内容
	EnumType    int64                                       `json:"enum_type,omitempty"`    // 类型, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                       `json:"enum_status,omitempty"`  // 使用状态, 可选值有: `1`：激活, `2`：未激活
	I18nContent *GetEmployeeTypeEnumListRespItemI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// GetEmployeeTypeEnumListRespItemI18nContent ...
type GetEmployeeTypeEnumListRespItemI18nContent struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateEmployeeTypeEnumPatch 更新自定义人员类型
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/update
func (r *ContactService) UpdateEmployeeTypeEnumPatch(ctx context.Context, request *UpdateEmployeeTypeEnumPatchReq, options ...MethodOptionFunc) (*UpdateEmployeeTypeEnumPatchResp, *Response, error) {
	if r.cli.mock.mockContactUpdateEmployeeTypeEnumPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateEmployeeTypeEnumPatch mock enable")
		return r.cli.mock.mockContactUpdateEmployeeTypeEnumPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateEmployeeTypeEnumPatch",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/employee_type_enums/:enum_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateEmployeeTypeEnumPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateEmployeeTypeEnumPatch mock ContactUpdateEmployeeTypeEnumPatch method
func (r *Mock) MockContactUpdateEmployeeTypeEnumPatch(f func(ctx context.Context, request *UpdateEmployeeTypeEnumPatchReq, options ...MethodOptionFunc) (*UpdateEmployeeTypeEnumPatchResp, *Response, error)) {
	r.mockContactUpdateEmployeeTypeEnumPatch = f
}

// UnMockContactUpdateEmployeeTypeEnumPatch un-mock ContactUpdateEmployeeTypeEnumPatch method
func (r *Mock) UnMockContactUpdateEmployeeTypeEnumPatch() {
	r.mockContactUpdateEmployeeTypeEnumPatch = nil
}

// UpdateEmployeeTypeEnumPatchReq ...
type UpdateEmployeeTypeEnumPatchReq struct {
	EnumID      string                                     `path:"enum_id" json:"-"`       // 枚举值id, 示例值："exGeIjow7zIqWMy+ONkFxA=="
	Content     string                                     `json:"content,omitempty"`      // 枚举内容, 示例值："专家", 长度范围：`1` ～ `100` 字符
	EnumType    int64                                      `json:"enum_type,omitempty"`    // 类型, 示例值：2, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                      `json:"enum_status,omitempty"`  // 使用状态, 示例值：1, 可选值有: `1`：激活, `2`：未激活
	I18nContent *UpdateEmployeeTypeEnumPatchReqI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// UpdateEmployeeTypeEnumPatchReqI18nContent ...
type UpdateEmployeeTypeEnumPatchReqI18nContent struct {
	Locale *string `json:"locale,omitempty"` // 语言版本, 示例值："zh_cn"
	Value  *string `json:"value,omitempty"`  // 字段名, 示例值："专家"
}

// updateEmployeeTypeEnumPatchResp ...
type updateEmployeeTypeEnumPatchResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UpdateEmployeeTypeEnumPatchResp `json:"data,omitempty"`
}

// UpdateEmployeeTypeEnumPatchResp ...
type UpdateEmployeeTypeEnumPatchResp struct {
	EmployeeTypeEnum *UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnum `json:"employee_type_enum,omitempty"` // 更新后的人员类型字段
}

// UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnum ...
type UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnum struct {
	EnumID      string                                                      `json:"enum_id,omitempty"`      // 枚举值id
	EnumValue   string                                                      `json:"enum_value,omitempty"`   // 枚举的编号值，创建新的人员类型后，系统生成对应编号。对应[创建用户接口](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create)中用户信息的employee_type字段值
	Content     string                                                      `json:"content,omitempty"`      // 枚举内容, 长度范围：`1` ～ `100` 字符
	EnumType    int64                                                       `json:"enum_type,omitempty"`    // 类型, 可选值有: `1`：内置类型, `2`：自定义
	EnumStatus  int64                                                       `json:"enum_status,omitempty"`  // 使用状态, 可选值有: `1`：激活, `2`：未激活
	I18nContent *UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnumI18nContent `json:"i18n_content,omitempty"` // i18n定义
}

// UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnumI18nContent ...
type UpdateEmployeeTypeEnumPatchRespEmployeeTypeEnumI18nContent struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteContactGroup 通过该接口可删除企业中的用户组，请注意删除用户组时应用的通讯录权限范围需为“全部员工”，否则会删除失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/delete
func (r *ContactService) DeleteContactGroup(ctx context.Context, request *DeleteContactGroupReq, options ...MethodOptionFunc) (*DeleteContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactDeleteContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteContactGroup mock enable")
		return r.cli.mock.mockContactDeleteContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteContactGroup",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteContactGroup mock ContactDeleteContactGroup method
func (r *Mock) MockContactDeleteContactGroup(f func(ctx context.Context, request *DeleteContactGroupReq, options ...MethodOptionFunc) (*DeleteContactGroupResp, *Response, error)) {
	r.mockContactDeleteContactGroup = f
}

// UnMockContactDeleteContactGroup un-mock ContactDeleteContactGroup method
func (r *Mock) UnMockContactDeleteContactGroup() {
	r.mockContactDeleteContactGroup = nil
}

// DeleteContactGroupReq ...
type DeleteContactGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 需删除的用户组ID, 示例值："g1837191"
}

// deleteContactGroupResp ...
type deleteContactGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *DeleteContactGroupResp `json:"data,omitempty"`
}

// DeleteContactGroupResp ...
type DeleteContactGroupResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactGroup 根据用户组 ID 查询某个用户组的基本信息，请确保应用的通讯录权限范围里包括该用户组或者是“全部员工”，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/get
func (r *ContactService) GetContactGroup(ctx context.Context, request *GetContactGroupReq, options ...MethodOptionFunc) (*GetContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactGetContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactGroup mock enable")
		return r.cli.mock.mockContactGetContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactGroup",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactGroup mock ContactGetContactGroup method
func (r *Mock) MockContactGetContactGroup(f func(ctx context.Context, request *GetContactGroupReq, options ...MethodOptionFunc) (*GetContactGroupResp, *Response, error)) {
	r.mockContactGetContactGroup = f
}

// UnMockContactGetContactGroup un-mock ContactGetContactGroup method
func (r *Mock) UnMockContactGetContactGroup() {
	r.mockContactGetContactGroup = nil
}

// GetContactGroupReq ...
type GetContactGroupReq struct {
	GroupID string `path:"group_id" json:"-"` // 用户组ID, 示例值："g193821"
}

// getContactGroupResp ...
type getContactGroupResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *GetContactGroupResp `json:"data,omitempty"`
}

// GetContactGroupResp ...
type GetContactGroupResp struct {
	Group *GetContactGroupRespGroup `json:"group,omitempty"` // 用户组详情
}

// GetContactGroupRespGroup ...
type GetContactGroupRespGroup struct {
	ID                    string `json:"id,omitempty"`                      // 用户组ID
	Name                  string `json:"name,omitempty"`                    // 用户组名字
	Description           string `json:"description,omitempty"`             // 用户组描述
	MemberUserCount       int64  `json:"member_user_count,omitempty"`       // 用户组成员中用户的数量
	MemberDepartmentCount int64  `json:"member_department_count,omitempty"` // 用户组成员中部门的数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateContactGroup 使用该接口创建用户组，请注意创建用户组时应用的通讯录权限范围需为“全部员工”，否则会创建失败，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/create
func (r *ContactService) CreateContactGroup(ctx context.Context, request *CreateContactGroupReq, options ...MethodOptionFunc) (*CreateContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactCreateContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateContactGroup mock enable")
		return r.cli.mock.mockContactCreateContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateContactGroup",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateContactGroup mock ContactCreateContactGroup method
func (r *Mock) MockContactCreateContactGroup(f func(ctx context.Context, request *CreateContactGroupReq, options ...MethodOptionFunc) (*CreateContactGroupResp, *Response, error)) {
	r.mockContactCreateContactGroup = f
}

// UnMockContactCreateContactGroup un-mock ContactCreateContactGroup method
func (r *Mock) UnMockContactCreateContactGroup() {
	r.mockContactCreateContactGroup = nil
}

// CreateContactGroupReq ...
type CreateContactGroupReq struct {
	GroupID     *string `json:"group_id,omitempty"`    // 自定义用户组ID，可在创建时自定义，不自定义则由系统自动生成，已创建用户组不允许修改 group_id 。,自定义group_id数据校验规则：,最大长度：64 字符,校验规则：数字、大小写字母的组合，不能包含空格, 示例值："g122817"
	Name        string  `json:"name,omitempty"`        // 用户组的名字，企业内唯一，最大长度：100 字符, 示例值："IT 外包组"
	Description *string `json:"description,omitempty"` // 用户组描述, 示例值："IT服务人员的集合"
	Type        *int64  `json:"type,omitempty"`        // 用户组的类型。默认为1表示普通用户组, 示例值：1, 可选值有: `1`：普通用户组, 默认值: `1`
}

// createContactGroupResp ...
type createContactGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateContactGroupResp `json:"data,omitempty"`
}

// CreateContactGroupResp ...
type CreateContactGroupResp struct {
	GroupID string `json:"group_id,omitempty"` // 用户组ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactGroupList 通过该接口可查询企业的用户组列表，如果应用的通讯录权限范围是“全部员工”，则可获取企业全部用户组列表。如果应用的通讯录权限范围不是“全部员工”，则仅可获取通讯录权限范围内的用户组。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/simplelist
func (r *ContactService) GetContactGroupList(ctx context.Context, request *GetContactGroupListReq, options ...MethodOptionFunc) (*GetContactGroupListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactGroupList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactGroupList mock enable")
		return r.cli.mock.mockContactGetContactGroupList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactGroupList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/simplelist",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactGroupListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactGroupList mock ContactGetContactGroupList method
func (r *Mock) MockContactGetContactGroupList(f func(ctx context.Context, request *GetContactGroupListReq, options ...MethodOptionFunc) (*GetContactGroupListResp, *Response, error)) {
	r.mockContactGetContactGroupList = f
}

// UnMockContactGetContactGroupList un-mock ContactGetContactGroupList method
func (r *Mock) UnMockContactGetContactGroupList() {
	r.mockContactGetContactGroupList = nil
}

// GetContactGroupListReq ...
type GetContactGroupListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：50, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	Type      *int64  `query:"type" json:"-"`       // 用户组类型, 示例值：1, 可选值有: `1`：普通用户组, 默认值: `1`
}

// getContactGroupListResp ...
type getContactGroupListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetContactGroupListResp `json:"data,omitempty"`
}

// GetContactGroupListResp ...
type GetContactGroupListResp struct {
	Grouplist []*GetContactGroupListRespGroup `json:"grouplist,omitempty"`  // 用户组列表
	PageToken string                          `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                            `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetContactGroupListRespGroup ...
type GetContactGroupListRespGroup struct {
	ID                    string `json:"id,omitempty"`                      // 用户组ID
	Name                  string `json:"name,omitempty"`                    // 用户组名字
	Description           string `json:"description,omitempty"`             // 用户组描述
	MemberUserCount       int64  `json:"member_user_count,omitempty"`       // 用户组成员中用户的数量
	MemberDepartmentCount int64  `json:"member_department_count,omitempty"` // 用户组成员中部门的数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddContactGroupMember 向用户组中添加成员(目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员添加到任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员添加到通讯录权限范围的用户组中，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/add
func (r *ContactService) AddContactGroupMember(ctx context.Context, request *AddContactGroupMemberReq, options ...MethodOptionFunc) (*AddContactGroupMemberResp, *Response, error) {
	if r.cli.mock.mockContactAddContactGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#AddContactGroupMember mock enable")
		return r.cli.mock.mockContactAddContactGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "AddContactGroupMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id/member/add",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(addContactGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactAddContactGroupMember mock ContactAddContactGroupMember method
func (r *Mock) MockContactAddContactGroupMember(f func(ctx context.Context, request *AddContactGroupMemberReq, options ...MethodOptionFunc) (*AddContactGroupMemberResp, *Response, error)) {
	r.mockContactAddContactGroupMember = f
}

// UnMockContactAddContactGroupMember un-mock ContactAddContactGroupMember method
func (r *Mock) UnMockContactAddContactGroupMember() {
	r.mockContactAddContactGroupMember = nil
}

// AddContactGroupMemberReq ...
type AddContactGroupMemberReq struct {
	GroupID      string `path:"group_id" json:"-"`        // 用户组ID, 示例值："g281721"
	MemberType   string `json:"member_type,omitempty"`    // 用户组成员的类型，取值为 user, 示例值："user", 可选值有: `user`：user, 默认值: `user`
	MemberIDType IDType `json:"member_id_type,omitempty"` // 当member_type =user时候，member_id_type表示user_id_type，枚举值为open_id, union_id, user_id, 示例值："open_id", 可选值有: `open_id`：member_type =user时候，表示用户的open_id, `union_id`：member_type =user时候，表示用户的union_id, `user_id`：member_type =user时候，表示用户的user_id
	MemberID     string `json:"member_id,omitempty"`      // 添加的成员ID, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// addContactGroupMemberResp ...
type addContactGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *AddContactGroupMemberResp `json:"data,omitempty"`
}

// AddContactGroupMemberResp ...
type AddContactGroupMemberResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteContactGroupMember 从用户组中移除成员 (目前成员仅支持用户，未来会支持部门)，如果应用的通讯录权限范围是“全部员工”，则可将任何成员移出任何用户组。如果应用的通讯录权限范围不是“全部员工”，则仅可将通讯录权限范围中的成员从通讯录权限范围的用户组中移除, [点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/remove
func (r *ContactService) DeleteContactGroupMember(ctx context.Context, request *DeleteContactGroupMemberReq, options ...MethodOptionFunc) (*DeleteContactGroupMemberResp, *Response, error) {
	if r.cli.mock.mockContactDeleteContactGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteContactGroupMember mock enable")
		return r.cli.mock.mockContactDeleteContactGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteContactGroupMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id/member/remove",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteContactGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteContactGroupMember mock ContactDeleteContactGroupMember method
func (r *Mock) MockContactDeleteContactGroupMember(f func(ctx context.Context, request *DeleteContactGroupMemberReq, options ...MethodOptionFunc) (*DeleteContactGroupMemberResp, *Response, error)) {
	r.mockContactDeleteContactGroupMember = f
}

// UnMockContactDeleteContactGroupMember un-mock ContactDeleteContactGroupMember method
func (r *Mock) UnMockContactDeleteContactGroupMember() {
	r.mockContactDeleteContactGroupMember = nil
}

// DeleteContactGroupMemberReq ...
type DeleteContactGroupMemberReq struct {
	GroupID      string `path:"group_id" json:"-"`        // 用户组ID, 示例值："g198123"
	MemberType   string `json:"member_type,omitempty"`    // 用户组成员的类型，取值为 user, 示例值："user", 可选值有: `user`：user, 默认值: `user`
	MemberID     string `json:"member_id,omitempty"`      // 操作移除的用户组成员ID, 示例值："xj82871k"
	MemberIDType IDType `json:"member_id_type,omitempty"` // 当member_type =user时候，member_id_type表示user_id_type，枚举值为open_id, union_id, user_id, 示例值："open_id", 可选值有: `open_id`：member_type =user时候，表示用户的open_id, `union_id`：member_type =user时候，表示用户的union_id, `user_id`：member_type =user时候，表示用户的user_id, 默认值: `open_id`
}

// deleteContactGroupMemberResp ...
type deleteContactGroupMemberResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *DeleteContactGroupMemberResp `json:"data,omitempty"`
}

// DeleteContactGroupMemberResp ...
type DeleteContactGroupMemberResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactGroupMember 通过该接口可查询某个用户组的成员(目前成员仅支持用户，未来会支持部门)列表，如果应用的通讯录权限范围是“全部员工”，则可查询企业内任何用户组的成员列表。如果应用的通讯录权限范围不是“全部员工”，则仅可查询通讯录权限范围中的用户组的成员列表，[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group-member/simplelist
func (r *ContactService) GetContactGroupMember(ctx context.Context, request *GetContactGroupMemberReq, options ...MethodOptionFunc) (*GetContactGroupMemberResp, *Response, error) {
	if r.cli.mock.mockContactGetContactGroupMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactGroupMember mock enable")
		return r.cli.mock.mockContactGetContactGroupMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactGroupMember",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id/member/simplelist",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactGroupMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactGroupMember mock ContactGetContactGroupMember method
func (r *Mock) MockContactGetContactGroupMember(f func(ctx context.Context, request *GetContactGroupMemberReq, options ...MethodOptionFunc) (*GetContactGroupMemberResp, *Response, error)) {
	r.mockContactGetContactGroupMember = f
}

// UnMockContactGetContactGroupMember un-mock ContactGetContactGroupMember method
func (r *Mock) UnMockContactGetContactGroupMember() {
	r.mockContactGetContactGroupMember = nil
}

// GetContactGroupMemberReq ...
type GetContactGroupMemberReq struct {
	PageSize     *int64  `query:"page_size" json:"-"`      // 分页大小, 示例值：50, 默认值: `50`
	PageToken    *string `query:"page_token" json:"-"`     // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	MemberIDType *IDType `query:"member_id_type" json:"-"` // 欲获取成员ID类型。当member_type =user时候，member_id_type表示user_id_type，枚举值为open_id, union_id, user_id, 示例值："open_id", 可选值有: `open_id`：member_type =user时候，表示用户的open_id, `union_id`：member_type =user时候，表示用户的union_id, `user_id`：member_type =user时候，表示用户的user_id, 默认值: `open_id`
	MemberType   *string `query:"member_type" json:"-"`    // 期待获取的用户组成员的类型，取值为 user, 示例值："user", 可选值有: `user`：user, 默认值: `user`
	GroupID      string  `path:"group_id" json:"-"`        // 用户组ID, 示例值："g128187"
}

// getContactGroupMemberResp ...
type getContactGroupMemberResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetContactGroupMemberResp `json:"data,omitempty"`
}

// GetContactGroupMemberResp ...
type GetContactGroupMemberResp struct {
	Memberlist []*GetContactGroupMemberRespMember `json:"memberlist,omitempty"` // 成员列表
	PageToken  string                             `json:"page_token,omitempty"` // 下次分页获取的page_token
	HasMore    bool                               `json:"has_more,omitempty"`   // 是否还需要分页获取
}

// GetContactGroupMemberRespMember ...
type GetContactGroupMemberRespMember struct {
	MemberID   string `json:"member_id,omitempty"`   // 成员ID
	MemberType string `json:"member_type,omitempty"` // 用户组成员的类型，目前取值为 user。未来将支持department
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateContactGroup 使用该接口更新用户组信息，请注意更新用户组时应用的通讯录权限范围需为“全部员工”，否则会更新失败。[点击了解通讯录权限范围](https://open.feishu.cn/document/ukTMukTMukTM/uETNz4SM1MjLxUzM/v3/guides/scope_authority)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/group/patch
func (r *ContactService) UpdateContactGroup(ctx context.Context, request *UpdateContactGroupReq, options ...MethodOptionFunc) (*UpdateContactGroupResp, *Response, error) {
	if r.cli.mock.mockContactUpdateContactGroup != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateContactGroup mock enable")
		return r.cli.mock.mockContactUpdateContactGroup(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateContactGroup",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/group/:group_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateContactGroupResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateContactGroup mock ContactUpdateContactGroup method
func (r *Mock) MockContactUpdateContactGroup(f func(ctx context.Context, request *UpdateContactGroupReq, options ...MethodOptionFunc) (*UpdateContactGroupResp, *Response, error)) {
	r.mockContactUpdateContactGroup = f
}

// UnMockContactUpdateContactGroup un-mock ContactUpdateContactGroup method
func (r *Mock) UnMockContactUpdateContactGroup() {
	r.mockContactUpdateContactGroup = nil
}

// UpdateContactGroupReq ...
type UpdateContactGroupReq struct {
	GroupID     string  `path:"group_id" json:"-"`     // 用户组ID, 示例值："g187131"
	Name        *string `json:"name,omitempty"`        // 用户组的名字，企业内唯一，最大长度：100 字符, 示例值："外包 IT 用户组"
	Description *string `json:"description,omitempty"` // 用户组描述信息,最大长度：500 字, 示例值："IT 外包用户组，需要进行细粒度权限管控"
}

// updateContactGroupResp ...
type updateContactGroupResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *UpdateContactGroupResp `json:"data,omitempty"`
}

// UpdateContactGroupResp ...
type UpdateContactGroupResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactScopeList 该接口用于获取应用被授权可访问的通讯录范围，包括可访问的部门列表、用户列表和用户组列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/scope/list
func (r *ContactService) GetContactScopeList(ctx context.Context, request *GetContactScopeListReq, options ...MethodOptionFunc) (*GetContactScopeListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactScopeList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactScopeList mock enable")
		return r.cli.mock.mockContactGetContactScopeList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactScopeList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/scopes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactScopeListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactScopeList mock ContactGetContactScopeList method
func (r *Mock) MockContactGetContactScopeList(f func(ctx context.Context, request *GetContactScopeListReq, options ...MethodOptionFunc) (*GetContactScopeListResp, *Response, error)) {
	r.mockContactGetContactScopeList = f
}

// UnMockContactGetContactScopeList un-mock ContactGetContactScopeList method
func (r *Mock) UnMockContactGetContactScopeList() {
	r.mockContactGetContactScopeList = nil
}

// GetContactScopeListReq ...
type GetContactScopeListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 返回值的部门ID的类型, 示例值："department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：50, 最大值：`100`
}

// getContactScopeListResp ...
type getContactScopeListResp struct {
	Code int64                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *GetContactScopeListResp `json:"data,omitempty"`
}

// GetContactScopeListResp ...
type GetContactScopeListResp struct {
	DepartmentIDs []string `json:"department_ids,omitempty"` // 已授权部门列表，授权范围为全员可见时返回的是当前企业的所有一级部门列表
	UserIDs       []string `json:"user_ids,omitempty"`       // 已授权用户列表，应用申请了获取用户user_id 权限时返回；当授权范围为全员可见时返回的是当前企业所有顶级部门用户列表
	GroupIDs      []string `json:"group_ids,omitempty"`      // 已授权的用户组，授权范围为全员可见时返回的是当前企业所有用户组
	HasMore       bool     `json:"has_more,omitempty"`       // 是否还有更多项
	PageToken     string   `json:"page_token,omitempty"`     // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BindContactUnitDepartment 通过该接口建立部门与单位的绑定关系，需更新单位的权限，需对应部门的通讯录权限。由于单位是旗舰版付费功能，企业需开通相关版本，否则会绑定失败
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/bind_department
func (r *ContactService) BindContactUnitDepartment(ctx context.Context, request *BindContactUnitDepartmentReq, options ...MethodOptionFunc) (*BindContactUnitDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactBindContactUnitDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BindContactUnitDepartment mock enable")
		return r.cli.mock.mockContactBindContactUnitDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BindContactUnitDepartment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/bind_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(bindContactUnitDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBindContactUnitDepartment mock ContactBindContactUnitDepartment method
func (r *Mock) MockContactBindContactUnitDepartment(f func(ctx context.Context, request *BindContactUnitDepartmentReq, options ...MethodOptionFunc) (*BindContactUnitDepartmentResp, *Response, error)) {
	r.mockContactBindContactUnitDepartment = f
}

// UnMockContactBindContactUnitDepartment un-mock ContactBindContactUnitDepartment method
func (r *Mock) UnMockContactBindContactUnitDepartment() {
	r.mockContactBindContactUnitDepartment = nil
}

// BindContactUnitDepartmentReq ...
type BindContactUnitDepartmentReq struct {
	UnitID           string            `json:"unit_id,omitempty"`            // 单位ID, 示例值："BU121"
	DepartmentID     string            `json:"department_id,omitempty"`      // 单位关联的部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	DepartmentIDType *DepartmentIDType `json:"department_id_type,omitempty"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
}

// bindContactUnitDepartmentResp ...
type bindContactUnitDepartmentResp struct {
	Code int64                          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 错误描述
	Data *BindContactUnitDepartmentResp `json:"data,omitempty"`
}

// BindContactUnitDepartmentResp ...
type BindContactUnitDepartmentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateContactUnit 使用该接口创建单位，需要有更新单位的权限。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以创建单位。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/create
func (r *ContactService) CreateContactUnit(ctx context.Context, request *CreateContactUnitReq, options ...MethodOptionFunc) (*CreateContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactCreateContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateContactUnit mock enable")
		return r.cli.mock.mockContactCreateContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateContactUnit",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateContactUnit mock ContactCreateContactUnit method
func (r *Mock) MockContactCreateContactUnit(f func(ctx context.Context, request *CreateContactUnitReq, options ...MethodOptionFunc) (*CreateContactUnitResp, *Response, error)) {
	r.mockContactCreateContactUnit = f
}

// UnMockContactCreateContactUnit un-mock ContactCreateContactUnit method
func (r *Mock) UnMockContactCreateContactUnit() {
	r.mockContactCreateContactUnit = nil
}

// CreateContactUnitReq ...
type CreateContactUnitReq struct {
	UnitID   *string `json:"unit_id,omitempty"`   // 单位自定义ID。不带默认自动生成。1-64字节范围大小，需为数字字母, 示例值："BU121"
	Name     string  `json:"name,omitempty"`      // 单位的名字，长度范围为1-100个字, 示例值："消费者事业部"
	UnitType string  `json:"unit_type,omitempty"` // 单位类型，长度范围为1-100个字，创建后不可修改, 示例值："事业部"
}

// createContactUnitResp ...
type createContactUnitResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateContactUnitResp `json:"data,omitempty"`
}

// CreateContactUnitResp ...
type CreateContactUnitResp struct {
	UnitID string `json:"unit_id,omitempty"` // 单位的自定义ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteContactUnit 使用该接口删除单位，需要有更新单位的权限。注意：如果单位的单位类型被其它的业务使用，不允许删除。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/delete
func (r *ContactService) DeleteContactUnit(ctx context.Context, request *DeleteContactUnitReq, options ...MethodOptionFunc) (*DeleteContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactDeleteContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteContactUnit mock enable")
		return r.cli.mock.mockContactDeleteContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteContactUnit",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/:unit_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteContactUnit mock ContactDeleteContactUnit method
func (r *Mock) MockContactDeleteContactUnit(f func(ctx context.Context, request *DeleteContactUnitReq, options ...MethodOptionFunc) (*DeleteContactUnitResp, *Response, error)) {
	r.mockContactDeleteContactUnit = f
}

// UnMockContactDeleteContactUnit un-mock ContactDeleteContactUnit method
func (r *Mock) UnMockContactDeleteContactUnit() {
	r.mockContactDeleteContactUnit = nil
}

// DeleteContactUnitReq ...
type DeleteContactUnitReq struct {
	UnitID string `path:"unit_id" json:"-"` // 单位ID, 示例值："BU121"
}

// deleteContactUnitResp ...
type deleteContactUnitResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteContactUnitResp `json:"data,omitempty"`
}

// DeleteContactUnitResp ...
type DeleteContactUnitResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactUnit 调用该接口获取单位信息，需有获取单位的权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/get
func (r *ContactService) GetContactUnit(ctx context.Context, request *GetContactUnitReq, options ...MethodOptionFunc) (*GetContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactGetContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactUnit mock enable")
		return r.cli.mock.mockContactGetContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactUnit",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/:unit_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactUnit mock ContactGetContactUnit method
func (r *Mock) MockContactGetContactUnit(f func(ctx context.Context, request *GetContactUnitReq, options ...MethodOptionFunc) (*GetContactUnitResp, *Response, error)) {
	r.mockContactGetContactUnit = f
}

// UnMockContactGetContactUnit un-mock ContactGetContactUnit method
func (r *Mock) UnMockContactGetContactUnit() {
	r.mockContactGetContactUnit = nil
}

// GetContactUnitReq ...
type GetContactUnitReq struct {
	UnitID string `path:"unit_id" json:"-"` // 单位ID, 示例值："BU121"
}

// getContactUnitResp ...
type getContactUnitResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetContactUnitResp `json:"data,omitempty"`
}

// GetContactUnitResp ...
type GetContactUnitResp struct {
	Unit *GetContactUnitRespUnit `json:"unit,omitempty"` // 单位信息
}

// GetContactUnitRespUnit ...
type GetContactUnitRespUnit struct {
	UnitID   string `json:"unit_id,omitempty"`   // 单位的自定义ID
	Name     string `json:"name,omitempty"`      // 单位的名字
	UnitType string `json:"unit_type,omitempty"` // 单位的类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactUnitList 通过该接口获取企业的单位列表，需获取单位的权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list
func (r *ContactService) GetContactUnitList(ctx context.Context, request *GetContactUnitListReq, options ...MethodOptionFunc) (*GetContactUnitListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactUnitList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactUnitList mock enable")
		return r.cli.mock.mockContactGetContactUnitList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactUnitList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactUnitListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactUnitList mock ContactGetContactUnitList method
func (r *Mock) MockContactGetContactUnitList(f func(ctx context.Context, request *GetContactUnitListReq, options ...MethodOptionFunc) (*GetContactUnitListResp, *Response, error)) {
	r.mockContactGetContactUnitList = f
}

// UnMockContactGetContactUnitList un-mock ContactGetContactUnitList method
func (r *Mock) UnMockContactGetContactUnitList() {
	r.mockContactGetContactUnitList = nil
}

// GetContactUnitListReq ...
type GetContactUnitListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小，默认50，取值范围 1-100, 示例值：50, 默认值: `50`, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
}

// getContactUnitListResp ...
type getContactUnitListResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *GetContactUnitListResp `json:"data,omitempty"`
}

// GetContactUnitListResp ...
type GetContactUnitListResp struct {
	Unitlist  []*GetContactUnitListRespUnit `json:"unitlist,omitempty"`   // 单位列表
	HasMore   bool                          `json:"has_more,omitempty"`   // 是否还有分页数据
	PageToken string                        `json:"page_token,omitempty"` // 分页下次调用的page_token值
}

// GetContactUnitListRespUnit ...
type GetContactUnitListRespUnit struct {
	UnitID   string `json:"unit_id,omitempty"`   // 单位的自定义ID
	Name     string `json:"name,omitempty"`      // 单位的名字
	UnitType string `json:"unit_type,omitempty"` // 单位的类型
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactUnitDepartmentList 通过该接口获取单位绑定的部门列表，需具有获取单位的权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/list_department
func (r *ContactService) GetContactUnitDepartmentList(ctx context.Context, request *GetContactUnitDepartmentListReq, options ...MethodOptionFunc) (*GetContactUnitDepartmentListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactUnitDepartmentList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactUnitDepartmentList mock enable")
		return r.cli.mock.mockContactGetContactUnitDepartmentList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactUnitDepartmentList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/list_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactUnitDepartmentListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactUnitDepartmentList mock ContactGetContactUnitDepartmentList method
func (r *Mock) MockContactGetContactUnitDepartmentList(f func(ctx context.Context, request *GetContactUnitDepartmentListReq, options ...MethodOptionFunc) (*GetContactUnitDepartmentListResp, *Response, error)) {
	r.mockContactGetContactUnitDepartmentList = f
}

// UnMockContactGetContactUnitDepartmentList un-mock ContactGetContactUnitDepartmentList method
func (r *Mock) UnMockContactGetContactUnitDepartmentList() {
	r.mockContactGetContactUnitDepartmentList = nil
}

// GetContactUnitDepartmentListReq ...
type GetContactUnitDepartmentListReq struct {
	UnitID           string            `query:"unit_id" json:"-"`            // 单位ID, 示例值："BU121"
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中预获取的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：50, 默认值: `50`, 最大值：`100`
}

// getContactUnitDepartmentListResp ...
type getContactUnitDepartmentListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetContactUnitDepartmentListResp `json:"data,omitempty"`
}

// GetContactUnitDepartmentListResp ...
type GetContactUnitDepartmentListResp struct {
	Departmentlist []*GetContactUnitDepartmentListRespDepartment `json:"departmentlist,omitempty"` // 单位绑定的部门列表
	HasMore        bool                                          `json:"has_more,omitempty"`       // 是否还有分页数据
	PageToken      string                                        `json:"page_token,omitempty"`     // 下次分页请求标记
}

// GetContactUnitDepartmentListRespDepartment ...
type GetContactUnitDepartmentListRespDepartment struct {
	UnitID       string `json:"unit_id,omitempty"`       // 单位ID
	DepartmentID string `json:"department_id,omitempty"` // 部门ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UnbindContactUnitDepartment 通过该接口解除部门与单位的绑定关系，需更新单位的权限，需对应部门的通讯录权限。由于单位是旗舰版付费功能，企业需开通相关功能，否则会解绑失败
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/unbind_department
func (r *ContactService) UnbindContactUnitDepartment(ctx context.Context, request *UnbindContactUnitDepartmentReq, options ...MethodOptionFunc) (*UnbindContactUnitDepartmentResp, *Response, error) {
	if r.cli.mock.mockContactUnbindContactUnitDepartment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UnbindContactUnitDepartment mock enable")
		return r.cli.mock.mockContactUnbindContactUnitDepartment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UnbindContactUnitDepartment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/unbind_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(unbindContactUnitDepartmentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUnbindContactUnitDepartment mock ContactUnbindContactUnitDepartment method
func (r *Mock) MockContactUnbindContactUnitDepartment(f func(ctx context.Context, request *UnbindContactUnitDepartmentReq, options ...MethodOptionFunc) (*UnbindContactUnitDepartmentResp, *Response, error)) {
	r.mockContactUnbindContactUnitDepartment = f
}

// UnMockContactUnbindContactUnitDepartment un-mock ContactUnbindContactUnitDepartment method
func (r *Mock) UnMockContactUnbindContactUnitDepartment() {
	r.mockContactUnbindContactUnitDepartment = nil
}

// UnbindContactUnitDepartmentReq ...
type UnbindContactUnitDepartmentReq struct {
	UnitID           string            `json:"unit_id,omitempty"`            // 单位ID, 示例值："BU121"
	DepartmentID     string            `json:"department_id,omitempty"`      // 预解除关联的部门ID, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	DepartmentIDType *DepartmentIDType `json:"department_id_type,omitempty"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
}

// unbindContactUnitDepartmentResp ...
type unbindContactUnitDepartmentResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *UnbindContactUnitDepartmentResp `json:"data,omitempty"`
}

// UnbindContactUnitDepartmentResp ...
type UnbindContactUnitDepartmentResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateContactUnit 调用该接口，需要有更新单位的权限。注意：单位功能属于旗舰版付费功能，企业需开通对应版本才可以修改单位
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/unit/patch
func (r *ContactService) UpdateContactUnit(ctx context.Context, request *UpdateContactUnitReq, options ...MethodOptionFunc) (*UpdateContactUnitResp, *Response, error) {
	if r.cli.mock.mockContactUpdateContactUnit != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateContactUnit mock enable")
		return r.cli.mock.mockContactUpdateContactUnit(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateContactUnit",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/unit/:unit_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateContactUnitResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateContactUnit mock ContactUpdateContactUnit method
func (r *Mock) MockContactUpdateContactUnit(f func(ctx context.Context, request *UpdateContactUnitReq, options ...MethodOptionFunc) (*UpdateContactUnitResp, *Response, error)) {
	r.mockContactUpdateContactUnit = f
}

// UnMockContactUpdateContactUnit un-mock ContactUpdateContactUnit method
func (r *Mock) UnMockContactUpdateContactUnit() {
	r.mockContactUpdateContactUnit = nil
}

// UpdateContactUnitReq ...
type UpdateContactUnitReq struct {
	UnitID string  `path:"unit_id" json:"-"` // 单位ID, 示例值："BU121"
	Name   *string `json:"name,omitempty"`   // 单位的名字, 示例值："消费者事业部"
}

// updateContactUnitResp ...
type updateContactUnitResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateContactUnitResp `json:"data,omitempty"`
}

// UpdateContactUnitResp ...
type UpdateContactUnitResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetUserByID 通过该接口，可使用手机号/邮箱获取用户的 ID 信息，具体获取支持的 ID 类型包括 open_id、user_id、union_id，可通过查询参数指定。
//
// 如果查询的手机号、邮箱不存在，或者无权限查看对应的用户，则返回的open_id为空。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/batch_get_id
func (r *ContactService) BatchGetUserByID(ctx context.Context, request *BatchGetUserByIDReq, options ...MethodOptionFunc) (*BatchGetUserByIDResp, *Response, error) {
	if r.cli.mock.mockContactBatchGetUserByID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BatchGetUserByID mock enable")
		return r.cli.mock.mockContactBatchGetUserByID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BatchGetUserByID",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetUserByIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBatchGetUserByID mock ContactBatchGetUserByID method
func (r *Mock) MockContactBatchGetUserByID(f func(ctx context.Context, request *BatchGetUserByIDReq, options ...MethodOptionFunc) (*BatchGetUserByIDResp, *Response, error)) {
	r.mockContactBatchGetUserByID = f
}

// UnMockContactBatchGetUserByID un-mock ContactBatchGetUserByID method
func (r *Mock) UnMockContactBatchGetUserByID() {
	r.mockContactBatchGetUserByID = nil
}

// BatchGetUserByIDReq ...
type BatchGetUserByIDReq struct {
	UserIDType *IDType  `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	Emails     []string `json:"emails,omitempty"`       // 要查询的用户邮箱，最多 50 条。, 示例值：zhangsan@a.com, 最大长度：`50`
	Mobiles    []string `json:"mobiles,omitempty"`      // 要查询的用户手机号，最多 50 条。 非中国大陆地区的手机号需要添加以 “+” 开头的国家 / 地区代码。, 示例值：13812345678, 最大长度：`50`
}

// batchGetUserByIDResp ...
type batchGetUserByIDResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *BatchGetUserByIDResp `json:"data,omitempty"`
}

// BatchGetUserByIDResp ...
type BatchGetUserByIDResp struct {
	UserList []*BatchGetUserByIDRespUser `json:"user_list,omitempty"` // 手机号或者邮箱对应的用户id信息
}

// BatchGetUserByIDRespUser ...
type BatchGetUserByIDRespUser struct {
	UserID string `json:"user_id,omitempty"` // 用户id，值为user_id_type所指定的类型。如果查询的手机号、邮箱不存在，或者无权限查看对应的用户，则此项为空。
	Mobile string `json:"mobile,omitempty"`  // 手机号，通过手机号查询时返回
	Email  string `json:"email,omitempty"`   // 邮箱，通过邮箱查询时返回
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateUser 使用该接口向通讯录创建一个用户，可以理解为员工入职。创建用户后只返回有数据权限的数据。具体的数据权限的与字段的对应关系请参照[应用权限](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// - 新增用户的所有部门必须都在当前应用的通讯录授权范围内才允许新增用户，如果想要在根部门下新增用户，必须要有全员权限。
// - 应用商店应用无权限调用此接口。
// - 创建用户后，会给用户发送邀请短信/邮件，用户在操作同意后才可访问团队。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/create
func (r *ContactService) CreateUser(ctx context.Context, request *CreateUserReq, options ...MethodOptionFunc) (*CreateUserResp, *Response, error) {
	if r.cli.mock.mockContactCreateUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#CreateUser mock enable")
		return r.cli.mock.mockContactCreateUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "CreateUser",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactCreateUser mock ContactCreateUser method
func (r *Mock) MockContactCreateUser(f func(ctx context.Context, request *CreateUserReq, options ...MethodOptionFunc) (*CreateUserResp, *Response, error)) {
	r.mockContactCreateUser = f
}

// UnMockContactCreateUser un-mock ContactCreateUser method
func (r *Mock) UnMockContactCreateUser() {
	r.mockContactCreateUser = nil
}

// CreateUserReq ...
type CreateUserReq struct {
	UserIDType       *IDType                    `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType          `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型。,不同 ID 的说明以及获取方式参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	ClientToken      *string                    `query:"client_token" json:"-"`       // 根据client_token是否一致来判断是否为同一请求, 示例值："xxxx-xxxxx-xxx"
	UserID           *string                    `json:"user_id,omitempty"`            // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："3e3cf96b"
	Name             string                     `json:"name,omitempty"`               // 用户名, 示例值："张三", 最小长度：`1` 字符
	EnName           *string                    `json:"en_name,omitempty"`            // 英文名, 示例值："San Zhang"
	Nickname         *string                    `json:"nickname,omitempty"`           // 别名, 示例值："Alex Zhang"
	Email            *string                    `json:"email,omitempty"`              // 邮箱, 示例值："zhangsan@gmail.com"
	Mobile           string                     `json:"mobile,omitempty"`             // 手机号，中国大陆手机可不填区号，境外手机需加国际电话区号前缀。, 示例值："中国大陆手机号: 13011111111 或 +8613011111111, 境外手机号:  +41446681800"
	MobileVisible    *bool                      `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码, 示例值：false
	Gender           *int64                     `json:"gender,omitempty"`             // 性别, 示例值：1, 可选值有: `0`：保密, `1`：男, `2`：女
	AvatarKey        *string                    `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key, 示例值："2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
	DepartmentIDs    []string                   `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
	LeaderUserID     *string                    `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	City             *string                    `json:"city,omitempty"`               // 城市, 示例值："杭州"
	Country          *string                    `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description), 示例值："CN"
	WorkStation      *string                    `json:"work_station,omitempty"`       // 工位, 示例值："北楼-H34"
	JoinTime         *int64                     `json:"join_time,omitempty"`          // 入职时间, 示例值：2147483647
	EmployeeNo       *string                    `json:"employee_no,omitempty"`        // 工号, 示例值："1"
	EmployeeType     int64                      `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list), 示例值：1
	Orders           []*CreateUserReqOrder      `json:"orders,omitempty"`             // 用户排序信息
	CustomAttrs      []*CreateUserReqCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。
	EnterpriseEmail  *string                    `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务, 示例值："demo@mail.com"
	JobTitle         *string                    `json:"job_title,omitempty"`          // 职务, 示例值："xxxxx"
}

// CreateUserReqOrder ...
type CreateUserReqOrder struct {
	DepartmentID    *string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	UserOrder       *int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前, 示例值：100
	DepartmentOrder *int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前, 示例值：100
}

// CreateUserReqCustomAttr ...
type CreateUserReqCustomAttr struct {
	Type  *string                       `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN), 示例值："TEXT"
	ID    *string                       `json:"id,omitempty"`    // 自定义字段ID, 示例值："DemoId"
	Value *CreateUserReqCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// CreateUserReqCustomAttrValue ...
type CreateUserReqCustomAttrValue struct {
	Text        *string                                  `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填, 示例值："DemoText"
	URL         *string                                  `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL, 示例值："http://www.feishu.cn"
	PcURL       *string                                  `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL, 示例值："http://www.feishu.cn"
	OptionID    *string                                  `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值, 示例值："edcvfrtg"
	GenericUser *CreateUserReqCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// CreateUserReqCustomAttrValueGenericUser ...
type CreateUserReqCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："9b2fabg5"
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户, 示例值：1
}

// createUserResp ...
type createUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *CreateUserResp `json:"data,omitempty"`
}

// CreateUserResp ...
type CreateUserResp struct {
	User *CreateUserRespUser `json:"user,omitempty"` // 用户信息
}

// CreateUserRespUser ...
type CreateUserRespUser struct {
	UnionID         string                          `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                          `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                          `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                          `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName          string                          `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname        string                          `json:"nickname,omitempty"`          // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email           string                          `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                          `json:"mobile,omitempty"`            // 手机号，中国大陆手机可不填区号，境外手机需加国际电话区号前缀。, 字段权限要求: 获取用户手机号
	MobileVisible   bool                            `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                           `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey       string                          `json:"avatar_key,omitempty"`        // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar          *CreateUserRespUserAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status          *CreateUserRespUserStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs   []string                        `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID    string                          `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City            string                          `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country         string                          `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation     string                          `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime        int64                           `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager bool                            `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo      string                          `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType    int64                           `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders          []*CreateUserRespUserOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs     []*CreateUserRespUserCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail string                          `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle        string                          `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen        bool                            `json:"is_frozen,omitempty"`         // 是否暂停用户
}

// CreateUserRespUserAvatar ...
type CreateUserRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// CreateUserRespUserStatus ...
type CreateUserRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// CreateUserRespUserOrder ...
type CreateUserRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// CreateUserRespUserCustomAttr ...
type CreateUserRespUserCustomAttr struct {
	Type  string                             `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                             `json:"id,omitempty"`    // 自定义字段ID
	Value *CreateUserRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// CreateUserRespUserCustomAttrValue ...
type CreateUserRespUserCustomAttrValue struct {
	Text        string                                        `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                        `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                        `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                        `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                        `json:"option_value,omitempty"` // 选项值
	Name        string                                        `json:"name,omitempty"`         // 名称
	PictureURL  string                                        `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *CreateUserRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// CreateUserRespUserCustomAttrValueGenericUser ...
type CreateUserRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteUser 该接口向通讯录删除一个用户信息，可以理解为员工离职。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 若用户归属部门A、部门B，应用的通讯录权限范围必须包括部门A和部门B才可以删除用户。应用商店应用无权限调用接口。用户可以在删除员工时设置删除员工数据的接收者，如果不设置则由其leader接收，如果该员工没有leader，则会将该员工的数据删除。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/delete
func (r *ContactService) DeleteUser(ctx context.Context, request *DeleteUserReq, options ...MethodOptionFunc) (*DeleteUserResp, *Response, error) {
	if r.cli.mock.mockContactDeleteUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#DeleteUser mock enable")
		return r.cli.mock.mockContactDeleteUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "DeleteUser",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactDeleteUser mock ContactDeleteUser method
func (r *Mock) MockContactDeleteUser(f func(ctx context.Context, request *DeleteUserReq, options ...MethodOptionFunc) (*DeleteUserResp, *Response, error)) {
	r.mockContactDeleteUser = f
}

// UnMockContactDeleteUser un-mock ContactDeleteUser method
func (r *Mock) UnMockContactDeleteUser() {
	r.mockContactDeleteUser = nil
}

// DeleteUserReq ...
type DeleteUserReq struct {
	UserIDType                   *IDType `query:"user_id_type" json:"-"`                     // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	UserID                       string  `path:"user_id" json:"-"`                           // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	DepartmentChatAcceptorUserID *string `json:"department_chat_acceptor_user_id,omitempty"` // 部门群接收者。被删除用户为部门群群主时，转让群主给指定接收者，不指定接收者则默认转让给群内第一个入群的人, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	ExternalChatAcceptorUserID   *string `json:"external_chat_acceptor_user_id,omitempty"`   // 外部群接收者。被删除用户为外部群群主时，转让群主给指定接收者，不指定接收者则默认转让给群内与被删除用户在同一组织的第一个入群的人，如果组织内只有该用户在群里，则解散外部群, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	DocsAcceptorUserID           *string `json:"docs_acceptor_user_id,omitempty"`            // 文档接收者。用户被删除时，其拥有的文档转让给接收者，不指定接收者则默认转让给直接领导，如果无直接领导则直接删除文档资源, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	CalendarAcceptorUserID       *string `json:"calendar_acceptor_user_id,omitempty"`        // 日程接收者。用户被删除时，其拥有的日程转让给接收者，不指定接收者则默认转让给直接领导，如果无直接领导则直接删除日程资源, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	ApplicationAcceptorUserID    *string `json:"application_acceptor_user_id,omitempty"`     // 应用接收者。用户被删除时，其创建的应用转让给接收者，不指定接收者则默认转让给直接领导，如果无直接领导则不会转移应用，会造成应用不可用, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	HelpdeskAcceptorUserID       *string `json:"helpdesk_acceptor_user_id,omitempty"`        // 用户超文本帮助信息接收者, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
}

// deleteUserResp ...
type deleteUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteUserResp `json:"data,omitempty"`
}

// DeleteUserResp ...
type DeleteUserResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUser 该接口用于获取通讯录中单个用户的信息。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get
func (r *ContactService) GetUser(ctx context.Context, request *GetUserReq, options ...MethodOptionFunc) (*GetUserResp, *Response, error) {
	if r.cli.mock.mockContactGetUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetUser mock enable")
		return r.cli.mock.mockContactGetUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetUser",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetUser mock ContactGetUser method
func (r *Mock) MockContactGetUser(f func(ctx context.Context, request *GetUserReq, options ...MethodOptionFunc) (*GetUserResp, *Response, error)) {
	r.mockContactGetUser = f
}

// UnMockContactGetUser un-mock ContactGetUser method
func (r *Mock) UnMockContactGetUser() {
	r.mockContactGetUser = nil
}

// GetUserReq ...
type GetUserReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	UserID           string            `path:"user_id" json:"-"`             // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："7be5fg9a"
}

// getUserResp ...
type getUserResp struct {
	Code int64        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string       `json:"msg,omitempty"`  // 错误描述
	Data *GetUserResp `json:"data,omitempty"`
}

// GetUserResp ...
type GetUserResp struct {
	User *GetUserRespUser `json:"user,omitempty"` // 用户信息
}

// GetUserRespUser ...
type GetUserRespUser struct {
	UnionID         string                       `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                       `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                       `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                       `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName          string                       `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname        string                       `json:"nickname,omitempty"`          // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email           string                       `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                       `json:"mobile,omitempty"`            // 手机号, 字段权限要求: 获取用户手机号
	MobileVisible   bool                         `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                        `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	Avatar          *GetUserRespUserAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status          *GetUserRespUserStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs   []string                     `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID    string                       `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City            string                       `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country         string                       `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation     string                       `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime        int64                        `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager bool                         `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo      string                       `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType    int64                        `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders          []*GetUserRespUserOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs     []*GetUserRespUserCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail string                       `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle        string                       `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
}

// GetUserRespUserAvatar ...
type GetUserRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// GetUserRespUserStatus ...
type GetUserRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// GetUserRespUserOrder ...
type GetUserRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// GetUserRespUserCustomAttr ...
type GetUserRespUserCustomAttr struct {
	Type  string                          `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                          `json:"id,omitempty"`    // 自定义字段ID
	Value *GetUserRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// GetUserRespUserCustomAttrValue ...
type GetUserRespUserCustomAttrValue struct {
	Text        string                                     `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                     `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                     `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionValue string                                     `json:"option_value,omitempty"` // 选项值
	Name        string                                     `json:"name,omitempty"`         // 名称
	PictureURL  string                                     `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *GetUserRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// GetUserRespUserCustomAttrValueGenericUser ...
type GetUserRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetUser
//
// 为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/get)
// 该接口用于批量获取用户详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIzNz4iM3MjLyczM
//
// Deprecated
func (r *ContactService) BatchGetUser(ctx context.Context, request *BatchGetUserReq, options ...MethodOptionFunc) (*BatchGetUserResp, *Response, error) {
	if r.cli.mock.mockContactBatchGetUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BatchGetUser mock enable")
		return r.cli.mock.mockContactBatchGetUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BatchGetUser",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v1/user/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBatchGetUser mock ContactBatchGetUser method
func (r *Mock) MockContactBatchGetUser(f func(ctx context.Context, request *BatchGetUserReq, options ...MethodOptionFunc) (*BatchGetUserResp, *Response, error)) {
	r.mockContactBatchGetUser = f
}

// UnMockContactBatchGetUser un-mock ContactBatchGetUser method
func (r *Mock) UnMockContactBatchGetUser() {
	r.mockContactBatchGetUser = nil
}

// BatchGetUserReq ...
type BatchGetUserReq struct {
	EmployeeIDs []string `query:"employee_ids" json:"-"` // 支持通过 open_id 或者 employee_id 查询用户信息，不支持混合两种 ID 进行查询，单次请求支持的最大用户数量为100
	OpenIDs     []string `query:"open_ids" json:"-"`     // 支持通过 open_id 或者 employee_id 查询用户信息，不支持混合两种 ID 进行查询，单次请求支持的最大用户数量为100
}

// batchGetUserResp ...
type batchGetUserResp struct {
	Code int64             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string            `json:"msg,omitempty"`  // 返回码的描述
	Data *BatchGetUserResp `json:"data,omitempty"` // 返回业务数据
}

// BatchGetUserResp ...
type BatchGetUserResp struct {
	UserInfos []*BatchGetUserRespUserInfo `json:"user_infos,omitempty"` // 用户信息
}

// BatchGetUserRespUserInfo ...
type BatchGetUserRespUserInfo struct {
	Name             string                 `json:"name,omitempty"`               // 用户名
	NamePy           string                 `json:"name_py,omitempty"`            // 用户名拼音
	EnName           string                 `json:"en_name,omitempty"`            // 英文名
	EmployeeID       string                 `json:"employee_id,omitempty"`        // 用户的 employee_id，申请了"获取用户 user_id"权限的应用返回该字段
	EmployeeNo       string                 `json:"employee_no,omitempty"`        // 工号
	OpenID           string                 `json:"open_id,omitempty"`            // 用户的 open_id
	UnionID          string                 `json:"union_id,omitempty"`           // 用户的 union_id
	Status           int64                  `json:"status,omitempty"`             // 用户状态，bit0(最低位): 1冻结，0未冻结；bit1:1离职，0在职；bit2:1未激活，0已激活
	EmployeeType     int64                  `json:"employee_type,omitempty"`      // 员工类型。1:正式员工；2:实习生；3:外包；4:劳务；5:顾问
	Avatar72         string                 `json:"avatar_72,omitempty"`          // 用户头像，72*72px
	Avatar240        string                 `json:"avatar_240,omitempty"`         // 用户头像，240*240px
	Avatar640        string                 `json:"avatar_640,omitempty"`         // 用户头像，640*640px
	AvatarURL        string                 `json:"avatar_url,omitempty"`         // 用户头像，原始大小
	Gender           int64                  `json:"gender,omitempty"`             // 性别，未设置不返回该字段。1:男；2:女
	Email            string                 `json:"email,omitempty"`              // 用户邮箱地址，已申请"获取用户邮箱"权限返回该字段
	Mobile           string                 `json:"mobile,omitempty"`             // 用户手机号，已申请"获取用户手机号"权限的企业自建应用返回该字段
	Description      string                 `json:"description,omitempty"`        // 用户个人签名
	Country          string                 `json:"country,omitempty"`            // 用户所在国家
	City             string                 `json:"city,omitempty"`               // 用户所在城市
	WorkStation      string                 `json:"work_station,omitempty"`       // 工位
	IsTenantManager  bool                   `json:"is_tenant_manager,omitempty"`  // 是否是企业超级管理员
	JoinTime         int64                  `json:"join_time,omitempty"`          // 入职时间，未设置不返回该字段
	UpdateTime       int64                  `json:"update_time,omitempty"`        // 更新时间
	LeaderEmployeeID string                 `json:"leader_employee_id,omitempty"` // 用户直接领导的 employee_id，企业自建应用返回，应用商店应用申请了 employee_id 权限时才返回
	LeaderOpenID     string                 `json:"leader_open_id,omitempty"`     // 用户直接领导的 open_id
	LeaderUnionID    string                 `json:"leader_union_id,omitempty"`    // 用户直接领导的 union_id
	Departments      []string               `json:"departments,omitempty"`        // 用户所在部门自定义 ID列表，用户可能同时存在于多个部门
	OpenDepartments  []string               `json:"open_departments,omitempty"`   // 用户所在部门 openID 列表，用户可能同时存在于多个部门
	CustomAttrs      map[string]interface{} `json:"custom_attrs,omitempty"`       // 用户的自定义属性信息。<br>该字段返回的每一个属性包括自定义属性 ID 和自定义属性值。 <br>企业开放了自定义用户属性且为该用户设置了自定义属性的值，才会返回该字段
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetUserByIDOld
//
// 根据用户邮箱或手机号查询用户 open_id 和 user_id，支持批量查询。<br>
// 调用该接口需要申请 `通过手机号或邮箱获取用户 ID` 权限。<br>只能查询到应用可用性范围内的用户 ID，不在范围内的用户会表现为不存在。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUzMyUjL1MjM14SNzITN
//
// Deprecated
func (r *ContactService) BatchGetUserByIDOld(ctx context.Context, request *BatchGetUserByIDOldReq, options ...MethodOptionFunc) (*BatchGetUserByIDOldResp, *Response, error) {
	if r.cli.mock.mockContactBatchGetUserByIDOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#BatchGetUserByIDOld mock enable")
		return r.cli.mock.mockContactBatchGetUserByIDOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "BatchGetUserByIDOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/user/v1/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetUserByIDOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactBatchGetUserByIDOld mock ContactBatchGetUserByIDOld method
func (r *Mock) MockContactBatchGetUserByIDOld(f func(ctx context.Context, request *BatchGetUserByIDOldReq, options ...MethodOptionFunc) (*BatchGetUserByIDOldResp, *Response, error)) {
	r.mockContactBatchGetUserByIDOld = f
}

// UnMockContactBatchGetUserByIDOld un-mock ContactBatchGetUserByIDOld method
func (r *Mock) UnMockContactBatchGetUserByIDOld() {
	r.mockContactBatchGetUserByIDOld = nil
}

// BatchGetUserByIDOldReq ...
type BatchGetUserByIDOldReq struct {
	Emails  *string `query:"emails" json:"-"`  // 要查询的用户邮箱，最多 50 条，多个邮箱以 & 隔开。
	Mobiles *string `query:"mobiles" json:"-"` // 要查询的用户手机号，最多 50 条，多个手机号以 & 隔开。<br>非中国大陆地区的手机号需要添加以 “+” 开头的国家 / 地区代码，并且需要进行 URL 转义。<br>
}

// batchGetUserByIDOldResp ...
type batchGetUserByIDOldResp struct {
	Code int64                    `json:"code,omitempty"` // 返回码，非 0 表示失败。
	Msg  string                   `json:"msg,omitempty"`  // 对返回码的文本描述。
	Data *BatchGetUserByIDOldResp `json:"data,omitempty"` // -
}

// BatchGetUserByIDOldResp ...
type BatchGetUserByIDOldResp struct {
	EmailUsers      map[string][]*BatchGetUserByIDOldRespEmailUser `json:"email_users,omitempty"`       // 根据邮箱查询到的用户，key 为邮箱，value 为查询到用户的 array。<br>目前同一个邮箱最多只能查询到一个用户。
	EmailsNotExist  []string                                       `json:"emails_not_exist,omitempty"`  // 没有匹配记录的邮箱。
	MobileUsers     map[string][]*BatchGetUserByIDOldRespEmailUser `json:"mobile_users,omitempty"`      // 根据手机号查询到的用户，key 为手机号，value 为查询到用户的 array。<br>目前同一个手机号最多只能查询到一个用户。
	MobilesNotExist []string                                       `json:"mobiles_not_exist,omitempty"` // 没有匹配记录的手机号。
}

// BatchGetUserByIDOldRespEmailUser ...
type BatchGetUserByIDOldRespEmailUser struct {
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id。[open_id描述](https://open.feishu.cn/document/home/user-identity-introduction/open-id)
	UserID string `json:"user_id,omitempty"` // 用户的 user_id。<br>只有已申请 `获取用户UserID` 权限的企业自建应用返回此字段。[user_id描述](https://open.feishu.cn/document/home/user-identity-introduction/user-id)
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserList 基于部门ID获取，获取部门直属用户列表。
//
// 部门ID 必填，根部门的部门ID为0
// - 使用 user_access_token 情况下根据个人组织架构的通讯录可见范围进行权限过滤，返回个人组织架构通讯录范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内可见的用户数据。
// - 使用tenant_access_token，会根据应用通讯录的范围进行权限过滤。 如果请求的部门ID为0，则校验应用是否具有全员通讯录权限； 如果是非0的部门ID，则会验证应用是否具有该部门的通讯录权限。 无权限返回无权限错误码，有权限则返回对应部门下的直接用户列表。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/find_by_department
func (r *ContactService) GetUserList(ctx context.Context, request *GetUserListReq, options ...MethodOptionFunc) (*GetUserListResp, *Response, error) {
	if r.cli.mock.mockContactGetUserList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetUserList mock enable")
		return r.cli.mock.mockContactGetUserList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetUserList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/find_by_department",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetUserList mock ContactGetUserList method
func (r *Mock) MockContactGetUserList(f func(ctx context.Context, request *GetUserListReq, options ...MethodOptionFunc) (*GetUserListResp, *Response, error)) {
	r.mockContactGetUserList = f
}

// UnMockContactGetUserList un-mock ContactGetUserList method
func (r *Mock) UnMockContactGetUserList() {
	r.mockContactGetUserList = nil
}

// GetUserListReq ...
type GetUserListReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     string            `query:"department_id" json:"-"`      // 填写该字段表示获取该部门下用户，必填。根部门的部门ID为0。, 示例值："od-xxxxxxxxxxxxx"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`50`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS+JKiSIkdexPw="
}

// getUserListResp ...
type getUserListResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetUserListResp `json:"data,omitempty"`
}

// GetUserListResp ...
type GetUserListResp struct {
	HasMore   bool                   `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                 `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetUserListRespItem `json:"items,omitempty"`      // 用户信息列表
}

// GetUserListRespItem ...
type GetUserListRespItem struct {
	UnionID         string                           `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                           `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                           `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                           `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName          string                           `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname        string                           `json:"nickname,omitempty"`          // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email           string                           `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                           `json:"mobile,omitempty"`            // 手机号, 字段权限要求: 获取用户手机号
	MobileVisible   bool                             `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                            `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey       string                           `json:"avatar_key,omitempty"`        // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar          *GetUserListRespItemAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status          *GetUserListRespItemStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs   []string                         `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID    string                           `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City            string                           `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country         string                           `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation     string                           `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime        int64                            `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager bool                             `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo      string                           `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType    int64                            `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders          []*GetUserListRespItemOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs     []*GetUserListRespItemCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail string                           `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle        string                           `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen        bool                             `json:"is_frozen,omitempty"`         // 是否暂停用户
}

// GetUserListRespItemAvatar ...
type GetUserListRespItemAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// GetUserListRespItemStatus ...
type GetUserListRespItemStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// GetUserListRespItemOrder ...
type GetUserListRespItemOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// GetUserListRespItemCustomAttr ...
type GetUserListRespItemCustomAttr struct {
	Type  string                              `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                              `json:"id,omitempty"`    // 自定义字段ID
	Value *GetUserListRespItemCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// GetUserListRespItemCustomAttrValue ...
type GetUserListRespItemCustomAttrValue struct {
	Text        string                                         `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                         `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                         `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                         `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                         `json:"option_value,omitempty"` // 选项值
	Name        string                                         `json:"name,omitempty"`         // 名称
	PictureURL  string                                         `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *GetUserListRespItemCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// GetUserListRespItemCustomAttrValueGenericUser ...
type GetUserListRespItemCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserListOld 基于部门ID获取部门下直属用户列表。
//
// - 使用 user_access_token 情况下根据个人组织架构的通讯录可见范围进行权限过滤，返回个人组织架构通讯录范围（[登陆企业管理后台进行权限配置](https://www.feishu.cn/admin/security/permission/visibility)）内可见的用户数据。
// -  tenant_access_token  基于应用通讯录范围进行权限鉴定。由于 department_id 是非必填参数，填与不填存在<b>两种数据权限校验与返回</b>情况：<br>1、请求设置了 department_id
// （根部门为0），会检验所带部门ID是否具有通讯录权限（如果带上
// department_id=0 会校验是否有全员权限），有则返回部门下直属的成员列表, 否则提示无部门权限的错误码返回。<br>2、请求未带
// department_id 参数，则会返回权限范围内的独立用户（权限范围直接包含了某用户，则该用户视为权限范围内的独立用户）。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/list
//
// Deprecated
func (r *ContactService) GetUserListOld(ctx context.Context, request *GetUserListOldReq, options ...MethodOptionFunc) (*GetUserListOldResp, *Response, error) {
	if r.cli.mock.mockContactGetUserListOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetUserListOld mock enable")
		return r.cli.mock.mockContactGetUserListOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetUserListOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getUserListOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetUserListOld mock ContactGetUserListOld method
func (r *Mock) MockContactGetUserListOld(f func(ctx context.Context, request *GetUserListOldReq, options ...MethodOptionFunc) (*GetUserListOldResp, *Response, error)) {
	r.mockContactGetUserListOld = f
}

// UnMockContactGetUserListOld un-mock ContactGetUserListOld method
func (r *Mock) UnMockContactGetUserListOld() {
	r.mockContactGetUserListOld = nil
}

// GetUserListOldReq ...
type GetUserListOldReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_type", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	DepartmentID     *string           `query:"department_id" json:"-"`      // 填写该字段表示获取部门下所有用户，选填。, 示例值："od-xxxxxxxxxxxxx"
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/dk53s4Ebp882DYfFaPFbz00L4CMZJrqGdzNyc8BcZtDbwVUvRmQTvyMYicnGWrde9X56TgdBuS%2BJKiSIkdexPw="
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小, 示例值：10, 最大值：`100`
}

// getUserListOldResp ...
type getUserListOldResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetUserListOldResp `json:"data,omitempty"`
}

// GetUserListOldResp ...
type GetUserListOldResp struct {
	HasMore   bool                      `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                    `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*GetUserListOldRespItem `json:"items,omitempty"`      // -
}

// GetUserListOldRespItem ...
type GetUserListOldRespItem struct {
	UnionID         string                              `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                              `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                              `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                              `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,获取用户基本信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EnName          string                              `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,获取用户基本信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Email           string                              `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                              `json:"mobile,omitempty"`            // 手机号, 字段权限要求: 获取用户手机号
	MobileVisible   bool                                `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                               `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,获取用户性别,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Avatar          *GetUserListOldRespItemAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,获取用户基本信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Status          *GetUserListOldRespItemStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	DepartmentIDs   []string                            `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,获取用户组织架构信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	LeaderUserID    string                              `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,获取用户组织架构信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	City            string                              `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Country         string                              `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	WorkStation     string                              `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	JoinTime        int64                               `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	IsTenantManager bool                                `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EmployeeNo      string                              `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EmployeeType    int64                               `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	Orders          []*GetUserListOldRespItemOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,获取用户组织架构信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	CustomAttrs     []*GetUserListOldRespItemCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	EnterpriseEmail string                              `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
	JobTitle        string                              `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,获取用户雇佣信息,以应用身份读取通讯录,读取通讯录,以应用身份访问通讯录
}

// GetUserListOldRespItemAvatar ...
type GetUserListOldRespItemAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// GetUserListOldRespItemStatus ...
type GetUserListOldRespItemStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
}

// GetUserListOldRespItemOrder ...
type GetUserListOldRespItemOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// GetUserListOldRespItemCustomAttr ...
type GetUserListOldRespItemCustomAttr struct {
	Type  string                                 `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                                 `json:"id,omitempty"`    // 自定义字段ID
	Value *GetUserListOldRespItemCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// GetUserListOldRespItemCustomAttrValue ...
type GetUserListOldRespItemCustomAttrValue struct {
	Text        string                                            `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                            `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                            `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionValue string                                            `json:"option_value,omitempty"` // 选项值
	Name        string                                            `json:"name,omitempty"`         // 名称
	PictureURL  string                                            `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *GetUserListOldRespItemCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// GetUserListOldRespItemCustomAttrValueGenericUser ...
type GetUserListOldRespItemCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchUserOld
//
// 以用户身份搜索其他用户的信息，无法搜索到外部企业或已离职的用户。<br>
// 调用该接口需要申请 `搜索用户` 权限。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTM4UjLzEDO14yMxgTN
//
// Deprecated
func (r *ContactService) SearchUserOld(ctx context.Context, request *SearchUserOldReq, options ...MethodOptionFunc) (*SearchUserOldResp, *Response, error) {
	if r.cli.mock.mockContactSearchUserOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#SearchUserOld mock enable")
		return r.cli.mock.mockContactSearchUserOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Contact",
		API:                 "SearchUserOld",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/search/v1/user",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(searchUserOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactSearchUserOld mock ContactSearchUserOld method
func (r *Mock) MockContactSearchUserOld(f func(ctx context.Context, request *SearchUserOldReq, options ...MethodOptionFunc) (*SearchUserOldResp, *Response, error)) {
	r.mockContactSearchUserOld = f
}

// UnMockContactSearchUserOld un-mock ContactSearchUserOld method
func (r *Mock) UnMockContactSearchUserOld() {
	r.mockContactSearchUserOld = nil
}

// SearchUserOldReq ...
type SearchUserOldReq struct {
	Query     string  `query:"query" json:"-"`      // 要执行搜索的字符串，一般为用户名。
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小，最小为 1，最大为 200，默认为 20。
	PageToken *string `query:"page_token" json:"-"` // 分页标识，获取首页不需要填写，获取下一页时传入上一页返回的分页标识值。<br>请注意此字段的值并没有特殊含义，请使用每次请求所返回的标识值。
}

// searchUserOldResp ...
type searchUserOldResp struct {
	Code int64              `json:"code,omitempty"` // 返回码，非 0 表示失败。
	Msg  string             `json:"msg,omitempty"`  // 对返回码的文本描述。
	Data *SearchUserOldResp `json:"data,omitempty"` // -
}

// SearchUserOldResp ...
type SearchUserOldResp struct {
	HasMore   bool                     `json:"has_more,omitempty"`   // 是否还有更多用户，值为 true 表示存在下一页。
	PageToken string                   `json:"page_token,omitempty"` // 分页标识，存在下一页的时候返回。下次请求带上此标识可以获取下一页的用户。
	Users     []*SearchUserOldRespUser `json:"users,omitempty"`      // 搜索到的用户列表。
}

// SearchUserOldRespUser ...
type SearchUserOldRespUser struct {
	Avatar        *SearchUserOldRespUserAvatar `json:"avatar,omitempty"`         // 用户的头像信息。
	DepartmentIDs []string                     `json:"department_ids,omitempty"` // 用户所在的部门 ID。
	Name          string                       `json:"name,omitempty"`           // 用户名。
	OpenID        string                       `json:"open_id,omitempty"`        // 用户的 open_id。
	UserID        string                       `json:"user_id,omitempty"`        // 用户的 user_id，只有已申请 `获取用户UserID` 权限的企业自建应用返回此字段。
}

// SearchUserOldRespUserAvatar ...
type SearchUserOldRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 用户的头像图片 URL，72×72px。
	Avatar240    string `json:"avatar_240,omitempty"`    // 用户的头像图片 URL，240×240px。
	Avatar640    string `json:"avatar_640,omitempty"`    // 用户的头像图片 URL，640×640px。
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 用户的头像图片 URL，原始大小。
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateUser 该接口用于更新通讯录中用户的字段。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// 应用需要拥有待更新用户的通讯录授权，如果涉及到用户部门变更，还需要同时拥有所有新部门的通讯录授权。应用商店应用无权限调用此接口。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/update
func (r *ContactService) UpdateUser(ctx context.Context, request *UpdateUserReq, options ...MethodOptionFunc) (*UpdateUserResp, *Response, error) {
	if r.cli.mock.mockContactUpdateUser != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateUser mock enable")
		return r.cli.mock.mockContactUpdateUser(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateUser",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateUserResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateUser mock ContactUpdateUser method
func (r *Mock) MockContactUpdateUser(f func(ctx context.Context, request *UpdateUserReq, options ...MethodOptionFunc) (*UpdateUserResp, *Response, error)) {
	r.mockContactUpdateUser = f
}

// UnMockContactUpdateUser un-mock ContactUpdateUser method
func (r *Mock) UnMockContactUpdateUser() {
	r.mockContactUpdateUser = nil
}

// UpdateUserReq ...
type UpdateUserReq struct {
	UserIDType       *IDType                    `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType          `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	UserID           string                     `path:"user_id" json:"-"`             // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Name             string                     `json:"name,omitempty"`               // 用户名, 示例值："张三", 最小长度：`1` 字符
	EnName           *string                    `json:"en_name,omitempty"`            // 英文名, 示例值："San Zhang"
	Nickname         *string                    `json:"nickname,omitempty"`           // 别名, 示例值："Alex Zhang"
	Email            *string                    `json:"email,omitempty"`              // 邮箱, 示例值："zhangsan@gmail.com"
	Mobile           string                     `json:"mobile,omitempty"`             // 手机号, 示例值："13011111111"
	MobileVisible    *bool                      `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码, 示例值：false
	Gender           *int64                     `json:"gender,omitempty"`             // 性别, 示例值：1, 可选值有: `0`：保密, `1`：男, `2`：女
	AvatarKey        *string                    `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key, 示例值："2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
	DepartmentIDs    []string                   `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
	LeaderUserID     *string                    `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	City             *string                    `json:"city,omitempty"`               // 城市, 示例值："杭州"
	Country          *string                    `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description), 示例值："CN"
	WorkStation      *string                    `json:"work_station,omitempty"`       // 工位, 示例值："北楼-H34"
	JoinTime         *int64                     `json:"join_time,omitempty"`          // 入职时间, 示例值：2147483647
	EmployeeNo       *string                    `json:"employee_no,omitempty"`        // 工号, 示例值："1"
	EmployeeType     int64                      `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list), 示例值：1
	Orders           []*UpdateUserReqOrder      `json:"orders,omitempty"`             // 用户排序信息
	CustomAttrs      []*UpdateUserReqCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。
	EnterpriseEmail  *string                    `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务, 示例值："demo@mail.com"
	JobTitle         *string                    `json:"job_title,omitempty"`          // 职务, 示例值："xxxxx"
	IsFrozen         *bool                      `json:"is_frozen,omitempty"`          // 是否暂停用户, 示例值：false
}

// UpdateUserReqOrder ...
type UpdateUserReqOrder struct {
	DepartmentID    *string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	UserOrder       *int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前, 示例值：100
	DepartmentOrder *int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前, 示例值：100
}

// UpdateUserReqCustomAttr ...
type UpdateUserReqCustomAttr struct {
	Type  *string                       `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN), 示例值："TEXT"
	ID    *string                       `json:"id,omitempty"`    // 自定义字段ID, 示例值："DemoId"
	Value *UpdateUserReqCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserReqCustomAttrValue ...
type UpdateUserReqCustomAttrValue struct {
	Text        *string                                  `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填, 示例值："DemoText"
	URL         *string                                  `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL, 示例值："http://www.feishu.cn"
	PcURL       *string                                  `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL, 示例值："http://www.feishu.cn"
	OptionID    *string                                  `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值, 示例值："edcvfrtg"
	GenericUser *UpdateUserReqCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserReqCustomAttrValueGenericUser ...
type UpdateUserReqCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id, 示例值："9b2fabg5"
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户, 示例值：1
}

// updateUserResp ...
type updateUserResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateUserResp `json:"data,omitempty"`
}

// UpdateUserResp ...
type UpdateUserResp struct {
	User *UpdateUserRespUser `json:"user,omitempty"` // 用户信息
}

// UpdateUserRespUser ...
type UpdateUserRespUser struct {
	UnionID         string                          `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                          `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                          `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                          `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName          string                          `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname        string                          `json:"nickname,omitempty"`          // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email           string                          `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                          `json:"mobile,omitempty"`            // 手机号, 字段权限要求: 获取用户手机号
	MobileVisible   bool                            `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                           `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey       string                          `json:"avatar_key,omitempty"`        // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar          *UpdateUserRespUserAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status          *UpdateUserRespUserStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs   []string                        `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID    string                          `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City            string                          `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country         string                          `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation     string                          `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime        int64                           `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager bool                            `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo      string                          `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType    int64                           `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders          []*UpdateUserRespUserOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs     []*UpdateUserRespUserCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail string                          `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle        string                          `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen        bool                            `json:"is_frozen,omitempty"`         // 是否暂停用户
}

// UpdateUserRespUserAvatar ...
type UpdateUserRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// UpdateUserRespUserStatus ...
type UpdateUserRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// UpdateUserRespUserOrder ...
type UpdateUserRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// UpdateUserRespUserCustomAttr ...
type UpdateUserRespUserCustomAttr struct {
	Type  string                             `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                             `json:"id,omitempty"`    // 自定义字段ID
	Value *UpdateUserRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserRespUserCustomAttrValue ...
type UpdateUserRespUserCustomAttrValue struct {
	Text        string                                        `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                        `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                        `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                        `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                        `json:"option_value,omitempty"` // 选项值
	Name        string                                        `json:"name,omitempty"`         // 名称
	PictureURL  string                                        `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *UpdateUserRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserRespUserCustomAttrValueGenericUser ...
type UpdateUserRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateUserPatch 该接口用于更新通讯录中用户的字段，未传递的参数不会更新。[常见问题答疑](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/patch
func (r *ContactService) UpdateUserPatch(ctx context.Context, request *UpdateUserPatchReq, options ...MethodOptionFunc) (*UpdateUserPatchResp, *Response, error) {
	if r.cli.mock.mockContactUpdateUserPatch != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#UpdateUserPatch mock enable")
		return r.cli.mock.mockContactUpdateUserPatch(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "UpdateUserPatch",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/users/:user_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateUserPatchResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactUpdateUserPatch mock ContactUpdateUserPatch method
func (r *Mock) MockContactUpdateUserPatch(f func(ctx context.Context, request *UpdateUserPatchReq, options ...MethodOptionFunc) (*UpdateUserPatchResp, *Response, error)) {
	r.mockContactUpdateUserPatch = f
}

// UnMockContactUpdateUserPatch un-mock ContactUpdateUserPatch method
func (r *Mock) UnMockContactUpdateUserPatch() {
	r.mockContactUpdateUserPatch = nil
}

// UpdateUserPatchReq ...
type UpdateUserPatchReq struct {
	UserIDType       *IDType                         `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType               `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	UserID           string                          `path:"user_id" json:"-"`             // 用户ID，需要与查询参数中的user_id_type类型保持一致。, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	Name             *string                         `json:"name,omitempty"`               // 用户名, 示例值："张三", 最小长度：`1` 字符
	EnName           *string                         `json:"en_name,omitempty"`            // 英文名, 示例值："San Zhang"
	Nickname         *string                         `json:"nickname,omitempty"`           // 别名, 示例值："Alex Zhang"
	Email            *string                         `json:"email,omitempty"`              // 邮箱, 示例值："zhangsan@gmail.com"
	Mobile           *string                         `json:"mobile,omitempty"`             // 手机号, 示例值："13011111111"
	MobileVisible    *bool                           `json:"mobile_visible,omitempty"`     // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码, 示例值：false
	Gender           *int64                          `json:"gender,omitempty"`             // 性别, 示例值：1, 可选值有: `0`：保密, `1`：男, `2`：女
	AvatarKey        *string                         `json:"avatar_key,omitempty"`         // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key, 示例值："2500c7a9-5fff-4d9a-a2de-3d59614ae28g"
	DepartmentIDs    []string                        `json:"department_ids,omitempty"`     // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0), 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
	LeaderUserID     *string                         `json:"leader_user_id,omitempty"`     // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	City             *string                         `json:"city,omitempty"`               // 城市, 示例值："杭州"
	Country          *string                         `json:"country,omitempty"`            // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description), 示例值："CN"
	WorkStation      *string                         `json:"work_station,omitempty"`       // 工位, 示例值："北楼-H34"
	JoinTime         *int64                          `json:"join_time,omitempty"`          // 入职时间, 示例值：2147483647
	EmployeeNo       *string                         `json:"employee_no,omitempty"`        // 工号, 示例值："1"
	EmployeeType     *int64                          `json:"employee_type,omitempty"`      // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list), 示例值：1
	Orders           []*UpdateUserPatchReqOrder      `json:"orders,omitempty"`             // 用户排序信息
	CustomAttrs      []*UpdateUserPatchReqCustomAttr `json:"custom_attrs,omitempty"`       // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。
	EnterpriseEmail  *string                         `json:"enterprise_email,omitempty"`   // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务, 示例值："demo@mail.com"
	JobTitle         *string                         `json:"job_title,omitempty"`          // 职务, 示例值："xxxxx"
	IsFrozen         *bool                           `json:"is_frozen,omitempty"`          // 是否暂停用户, 示例值：false
}

// UpdateUserPatchReqOrder ...
type UpdateUserPatchReqOrder struct {
	DepartmentID    *string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview), 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	UserOrder       *int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前, 示例值：100
	DepartmentOrder *int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前, 示例值：100
}

// UpdateUserPatchReqCustomAttr ...
type UpdateUserPatchReqCustomAttr struct {
	Type  *string                            `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN), 示例值："TEXT"
	ID    *string                            `json:"id,omitempty"`    // 自定义字段ID, 示例值："DemoId"
	Value *UpdateUserPatchReqCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserPatchReqCustomAttrValue ...
type UpdateUserPatchReqCustomAttrValue struct {
	Text        *string                                       `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填, 示例值："DemoText"
	URL         *string                                       `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL, 示例值："http://www.feishu.cn"
	PcURL       *string                                       `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL, 示例值："http://www.feishu.cn"
	OptionID    *string                                       `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值, 示例值："edcvfrtg"
	GenericUser *UpdateUserPatchReqCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserPatchReqCustomAttrValueGenericUser ...
type UpdateUserPatchReqCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id, 示例值："9b2fabg5"
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户, 示例值：1
}

// updateUserPatchResp ...
type updateUserPatchResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *UpdateUserPatchResp `json:"data,omitempty"`
}

// UpdateUserPatchResp ...
type UpdateUserPatchResp struct {
	User *UpdateUserPatchRespUser `json:"user,omitempty"` // 用户信息
}

// UpdateUserPatchRespUser ...
type UpdateUserPatchRespUser struct {
	UnionID         string                               `json:"union_id,omitempty"`          // 用户的union_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	UserID          string                               `json:"user_id,omitempty"`           // 租户内用户的唯一标识，用户的user_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 字段权限要求: 获取用户 user ID
	OpenID          string                               `json:"open_id,omitempty"`           // 用户的open_id，不同ID的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name            string                               `json:"name,omitempty"`              // 用户名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	EnName          string                               `json:"en_name,omitempty"`           // 英文名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Nickname        string                               `json:"nickname,omitempty"`          // 别名,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Email           string                               `json:"email,omitempty"`             // 邮箱, 字段权限要求: 获取用户邮箱信息
	Mobile          string                               `json:"mobile,omitempty"`            // 手机号, 字段权限要求: 获取用户手机号
	MobileVisible   bool                                 `json:"mobile_visible,omitempty"`    // 手机号码可见性，true 为可见，false 为不可见，目前默认为 true。不可见时，组织员工将无法查看该员工的手机号码
	Gender          int64                                `json:"gender,omitempty"`            // 性别, 可选值有: `0`：保密, `1`：男, `2`：女,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户性别,以应用身份访问通讯录,读取通讯录
	AvatarKey       string                               `json:"avatar_key,omitempty"`        // 头像的文件Key，可通过“消息与群组/消息/图片信息”中的“上传图片”接口上传并获取头像文件 Key
	Avatar          *UpdateUserPatchRespUserAvatar       `json:"avatar,omitempty"`            // 用户头像信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户基本信息,以应用身份访问通讯录,读取通讯录
	Status          *UpdateUserPatchRespUserStatus       `json:"status,omitempty"`            // 用户状态,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	DepartmentIDs   []string                             `json:"department_ids,omitempty"`    // 用户所属部门的ID列表，一个用户可属于多个部门。,ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview#23857fe0),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	LeaderUserID    string                               `json:"leader_user_id,omitempty"`    // 用户的直接主管的用户ID，ID值与查询参数中的user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	City            string                               `json:"city,omitempty"`              // 城市,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Country         string                               `json:"country,omitempty"`           // 国家或地区Code缩写，具体写入格式请参考 [国家/地区码表](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/user/country-code-description),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	WorkStation     string                               `json:"work_station,omitempty"`      // 工位,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JoinTime        int64                                `json:"join_time,omitempty"`         // 入职时间,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsTenantManager bool                                 `json:"is_tenant_manager,omitempty"` // 是否是租户超级管理员,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeNo      string                               `json:"employee_no,omitempty"`       // 工号,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EmployeeType    int64                                `json:"employee_type,omitempty"`     // 员工类型，可选值有：, `1`：正式员工, `2`：实习生, `3`：外包, `4`：劳务, `5`：顾问   ,同时可读取到自定义员工类型的 int 值，可通过下方接口获取到该租户的自定义员工类型的名称   ,[获取人员类型](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/employee_type_enum/list),**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	Orders          []*UpdateUserPatchRespUserOrder      `json:"orders,omitempty"`            // 用户排序信息,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户组织架构信息,以应用身份访问通讯录,读取通讯录
	CustomAttrs     []*UpdateUserPatchRespUserCustomAttr `json:"custom_attrs,omitempty"`      // 自定义字段，请确保你的组织管理员已在管理后台/组织架构/成员字段管理/自定义字段管理/全局设置中开启了“允许开放平台 API 调用“，否则该字段不会生效/返回。,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	EnterpriseEmail string                               `json:"enterprise_email,omitempty"`  // 企业邮箱，请先确保已在管理后台启用飞书邮箱服务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	JobTitle        string                               `json:"job_title,omitempty"`         // 职务,**字段权限要求（满足任一）**：,以应用身份读取通讯录,获取用户雇佣信息,以应用身份访问通讯录,读取通讯录
	IsFrozen        bool                                 `json:"is_frozen,omitempty"`         // 是否暂停用户
}

// UpdateUserPatchRespUserAvatar ...
type UpdateUserPatchRespUserAvatar struct {
	Avatar72     string `json:"avatar_72,omitempty"`     // 72*72像素头像链接
	Avatar240    string `json:"avatar_240,omitempty"`    // 240*240像素头像链接
	Avatar640    string `json:"avatar_640,omitempty"`    // 640*640像素头像链接
	AvatarOrigin string `json:"avatar_origin,omitempty"` // 原始头像链接
}

// UpdateUserPatchRespUserStatus ...
type UpdateUserPatchRespUserStatus struct {
	IsFrozen    bool `json:"is_frozen,omitempty"`    // 是否暂停
	IsResigned  bool `json:"is_resigned,omitempty"`  // 是否离职
	IsActivated bool `json:"is_activated,omitempty"` // 是否激活
	IsExited    bool `json:"is_exited,omitempty"`    // 是否主动退出，主动退出一段时间后用户会自动转为已离职
	IsUnjoin    bool `json:"is_unjoin,omitempty"`    // 是否未加入，需要用户自主确认才能加入团队
}

// UpdateUserPatchRespUserOrder ...
type UpdateUserPatchRespUserOrder struct {
	DepartmentID    string `json:"department_id,omitempty"`    // 排序信息对应的部门ID, ID值与查询参数中的department_id_type 对应。,不同 ID 的说明参见 [部门ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview)
	UserOrder       int64  `json:"user_order,omitempty"`       // 用户在其直属部门内的排序，数值越大，排序越靠前
	DepartmentOrder int64  `json:"department_order,omitempty"` // 用户所属的多个部门间的排序，数值越大，排序越靠前
}

// UpdateUserPatchRespUserCustomAttr ...
type UpdateUserPatchRespUserCustomAttr struct {
	Type  string                                  `json:"type,omitempty"`  // 自定义字段类型   , `TEXT`：文本, `HREF`：网页, `ENUMERATION`：枚举, `PICTURE_ENUM`：图片, `GENERIC_USER`：用户,[自定义字段相关常见问题](https://open.feishu.cn/document/ugTN1YjL4UTN24CO1UjN/uQzN1YjL0cTN24CN3UjN)
	ID    string                                  `json:"id,omitempty"`    // 自定义字段ID
	Value *UpdateUserPatchRespUserCustomAttrValue `json:"value,omitempty"` // 自定义字段取值
}

// UpdateUserPatchRespUserCustomAttrValue ...
type UpdateUserPatchRespUserCustomAttrValue struct {
	Text        string                                             `json:"text,omitempty"`         // 字段类型为`TEXT`时该参数定义字段值，必填；字段类型为`HREF`时该参数定义网页标题，必填
	URL         string                                             `json:"url,omitempty"`          // 字段类型为 HREF 时，该参数定义默认 URL
	PcURL       string                                             `json:"pc_url,omitempty"`       // 字段类型为 HREF 时，该参数定义PC端 URL
	OptionID    string                                             `json:"option_id,omitempty"`    // 字段类型为 ENUMERATION 或 PICTURE_ENUM 时，该参数定义选项值
	OptionValue string                                             `json:"option_value,omitempty"` // 选项值
	Name        string                                             `json:"name,omitempty"`         // 名称
	PictureURL  string                                             `json:"picture_url,omitempty"`  // 图片链接
	GenericUser *UpdateUserPatchRespUserCustomAttrValueGenericUser `json:"generic_user,omitempty"` // 字段类型为 GENERIC_USER 时，该参数定义引用人员
}

// UpdateUserPatchRespUserCustomAttrValueGenericUser ...
type UpdateUserPatchRespUserCustomAttrValueGenericUser struct {
	ID   string `json:"id,omitempty"`   // 用户的user_id
	Type int64  `json:"type,omitempty"` // 用户类型    1：用户
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateDriveComment 往云文档添加一条全局评论。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/drive-v1/file-comment/create
func (r *DriveService) CreateDriveComment(ctx context.Context, request *CreateDriveCommentReq, options ...MethodOptionFunc) (*CreateDriveCommentResp, *Response, error) {
	if r.cli.mock.mockDriveCreateDriveComment != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#CreateDriveComment mock enable")
		return r.cli.mock.mockDriveCreateDriveComment(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "CreateDriveComment",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/drive/v1/files/:file_token/comments",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createDriveCommentResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveCreateDriveComment mock DriveCreateDriveComment method
func (r *Mock) MockDriveCreateDriveComment(f func(ctx context.Context, request *CreateDriveCommentReq, options ...MethodOptionFunc) (*CreateDriveCommentResp, *Response, error)) {
	r.mockDriveCreateDriveComment = f
}

// UnMockDriveCreateDriveComment un-mock DriveCreateDriveComment method
func (r *Mock) UnMockDriveCreateDriveComment() {
	r.mockDriveCreateDriveComment = nil
}

// CreateDriveCommentReq ...
type CreateDriveCommentReq struct {
	FileType     FileType                        `query:"file_type" json:"-"`      // 文档类型, 示例值："doc", 可选值有: `doc`：文档, `sheet`：表格, `file`：文件
	UserIDType   *IDType                         `query:"user_id_type" json:"-"`   // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	FileToken    string                          `path:"file_token" json:"-"`      // 文档token, 示例值："doccnGp4UK1UskrOEJwBXd3****"
	CommentID    *string                         `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）, 示例值："6916106822734578184"
	UserID       *string                         `json:"user_id,omitempty"`        // 用户ID, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab*****"
	CreateTime   *int64                          `json:"create_time,omitempty"`    // 创建时间, 示例值：1610281603
	UpdateTime   *int64                          `json:"update_time,omitempty"`    // 更新时间, 示例值：1610281603
	IsSolved     *bool                           `json:"is_solved,omitempty"`      // 是否已解决, 示例值：false
	SolvedTime   *int64                          `json:"solved_time,omitempty"`    // 解决评论时间, 示例值：1610281603
	SolverUserID *string                         `json:"solver_user_id,omitempty"` // 解决评论者的用户ID, 示例值："null"
	ReplyList    *CreateDriveCommentReqReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// CreateDriveCommentReqReplyList ...
type CreateDriveCommentReqReplyList struct {
	Replies []*CreateDriveCommentReqReplyListReply `json:"replies,omitempty"` // 回复列表
}

// CreateDriveCommentReqReplyListReply ...
type CreateDriveCommentReqReplyListReply struct {
	ReplyID    *string                                     `json:"reply_id,omitempty"`    // 回复ID, 示例值："6916106822734594568"
	UserID     *string                                     `json:"user_id,omitempty"`     // 用户ID, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab2*****"
	CreateTime *int64                                      `json:"create_time,omitempty"` // 创建时间, 示例值：1610281603
	UpdateTime *int64                                      `json:"update_time,omitempty"` // 更新时间, 示例值：1610281603
	Content    *CreateDriveCommentReqReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// CreateDriveCommentReqReplyListReplyContent ...
type CreateDriveCommentReqReplyListReplyContent struct {
	Elements []*CreateDriveCommentReqReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// CreateDriveCommentReqReplyListReplyContentElement ...
type CreateDriveCommentReqReplyListReplyContentElement struct {
	Type     string                                                     `json:"type,omitempty"`      // 回复的内容元素, 示例值："text_run", 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *CreateDriveCommentReqReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *CreateDriveCommentReqReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *CreateDriveCommentReqReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// CreateDriveCommentReqReplyListReplyContentElementTextRun ...
type CreateDriveCommentReqReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本, 示例值："comment text"
}

// CreateDriveCommentReqReplyListReplyContentElementDocsLink ...
type CreateDriveCommentReqReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档, 示例值："https://bytedance.feishu.cn/docs/doccnHh7U87HOFpii5u5G*****"
}

// CreateDriveCommentReqReplyListReplyContentElementPerson ...
type CreateDriveCommentReqReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人, 示例值："ou_cc19b2bfb93f8a44db4b4d6eab*****"
}

// createDriveCommentResp ...
type createDriveCommentResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateDriveCommentResp `json:"data,omitempty"`
}

// CreateDriveCommentResp ...
type CreateDriveCommentResp struct {
	CommentID    string                           `json:"comment_id,omitempty"`     // 评论ID（创建新评论可不填；如填写，则视为回复已有评论）
	UserID       string                           `json:"user_id,omitempty"`        // 用户ID
	CreateTime   int64                            `json:"create_time,omitempty"`    // 创建时间
	UpdateTime   int64                            `json:"update_time,omitempty"`    // 更新时间
	IsSolved     bool                             `json:"is_solved,omitempty"`      // 是否已解决
	SolvedTime   int64                            `json:"solved_time,omitempty"`    // 解决评论时间
	SolverUserID string                           `json:"solver_user_id,omitempty"` // 解决评论者的用户ID
	ReplyList    *CreateDriveCommentRespReplyList `json:"reply_list,omitempty"`     // 评论里的回复列表
}

// CreateDriveCommentRespReplyList ...
type CreateDriveCommentRespReplyList struct {
	Replies []*CreateDriveCommentRespReplyListReply `json:"replies,omitempty"` // 回复列表
}

// CreateDriveCommentRespReplyListReply ...
type CreateDriveCommentRespReplyListReply struct {
	ReplyID    string                                       `json:"reply_id,omitempty"`    // 回复ID
	UserID     string                                       `json:"user_id,omitempty"`     // 用户ID
	CreateTime int64                                        `json:"create_time,omitempty"` // 创建时间
	UpdateTime int64                                        `json:"update_time,omitempty"` // 更新时间
	Content    *CreateDriveCommentRespReplyListReplyContent `json:"content,omitempty"`     // 回复内容
}

// CreateDriveCommentRespReplyListReplyContent ...
type CreateDriveCommentRespReplyListReplyContent struct {
	Elements []*CreateDriveCommentRespReplyListReplyContentElement `json:"elements,omitempty"` // 回复的内容
}

// CreateDriveCommentRespReplyListReplyContentElement ...
type CreateDriveCommentRespReplyListReplyContentElement struct {
	Type     string                                                      `json:"type,omitempty"`      // 回复的内容元素, 可选值有: `text_run`：普通文本, `docs_link`：at 云文档链接, `person`：at 联系人
	TextRun  *CreateDriveCommentRespReplyListReplyContentElementTextRun  `json:"text_run,omitempty"`  // 文本内容
	DocsLink *CreateDriveCommentRespReplyListReplyContentElementDocsLink `json:"docs_link,omitempty"` // 文本内容
	Person   *CreateDriveCommentRespReplyListReplyContentElementPerson   `json:"person,omitempty"`    // 文本内容
}

// CreateDriveCommentRespReplyListReplyContentElementTextRun ...
type CreateDriveCommentRespReplyListReplyContentElementTextRun struct {
	Text string `json:"text,omitempty"` // 回复 普通文本
}

// CreateDriveCommentRespReplyListReplyContentElementDocsLink ...
type CreateDriveCommentRespReplyListReplyContentElementDocsLink struct {
	URL string `json:"url,omitempty"` // 回复 at云文档
}

// CreateDriveCommentRespReplyListReplyContentElementPerson ...
type CreateDriveCommentRespReplyListReplyContentElementPerson struct {
	UserID string `json:"user_id,omitempty"` // 回复 at联系人
}
