// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
	"io"
)

// DownloadImage 下载图片资源，只能下载应用自己上传且图片类型为message的图片
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 只能下载机器人自己上传且图片类型为message的图片，avatar类型暂不支持下载；
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/get
func (r *FileService) DownloadImage(ctx context.Context, request *DownloadImageReq, options ...MethodOptionFunc) (*DownloadImageResp, *Response, error) {
	if r.cli.mock.mockFileDownloadImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] File#DownloadImage mock enable")
		return r.cli.mock.mockFileDownloadImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "DownloadImage",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/images/:image_key",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(downloadImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileDownloadImage mock FileDownloadImage method
func (r *Mock) MockFileDownloadImage(f func(ctx context.Context, request *DownloadImageReq, options ...MethodOptionFunc) (*DownloadImageResp, *Response, error)) {
	r.mockFileDownloadImage = f
}

// UnMockFileDownloadImage un-mock FileDownloadImage method
func (r *Mock) UnMockFileDownloadImage() {
	r.mockFileDownloadImage = nil
}

// DownloadImageReq ...
type DownloadImageReq struct {
	ImageKey string `path:"image_key" json:"-"` // 图片的key, 示例值："img_8d5181ca-0aed-40f0-b0d1-b1452132afbg"
}

// downloadImageResp ...
type downloadImageResp struct {
	IsFile bool               `json:"is_file,omitempty"`
	Code   int64              `json:"code,omitempty"`
	Msg    string             `json:"msg,omitempty"`
	Data   *DownloadImageResp `json:"data,omitempty"`
}

func (r *downloadImageResp) SetReader(file io.Reader) {
	if r.Data == nil {
		r.Data = &DownloadImageResp{}
	}
	r.Data.File = file
}

// DownloadImageResp ...
type DownloadImageResp struct {
	File io.Reader `json:"file,omitempty"`
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadFile 上传文件，可以上传视频，音频和常见的文件类型
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/file/create
func (r *FileService) UploadFile(ctx context.Context, request *UploadFileReq, options ...MethodOptionFunc) (*UploadFileResp, *Response, error) {
	if r.cli.mock.mockFileUploadFile != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] File#UploadFile mock enable")
		return r.cli.mock.mockFileUploadFile(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "UploadFile",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/files",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadFileResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileUploadFile mock FileUploadFile method
func (r *Mock) MockFileUploadFile(f func(ctx context.Context, request *UploadFileReq, options ...MethodOptionFunc) (*UploadFileResp, *Response, error)) {
	r.mockFileUploadFile = f
}

// UnMockFileUploadFile un-mock FileUploadFile method
func (r *Mock) UnMockFileUploadFile() {
	r.mockFileUploadFile = nil
}

// UploadFileReq ...
type UploadFileReq struct {
	FileType FileType  `json:"file_type,omitempty"` // 文件类型, 示例值："mp4", 可选值有: `opus`：上传opus音频文件；,其他格式的音频文件，请转为opus格式后上传，转换方式可参考：ffmpeg -i  SourceFile.mp3 -acodec libopus -ac 1 -ar 16000 TargetFile.opus, `mp4`：上传mp4视频文件, `pdf`：上传pdf格式文件, `doc`：上传doc格式文件, `xls`：上传xls格式文件, `ppt`：上传ppt格式文件, `stream`：上传stream格式文件。以上类型之外，可以使用stream格式
	FileName string    `json:"file_name,omitempty"` // 带后缀的文件名, 示例值："测试视频.mp4"
	Duration *int64    `json:"duration,omitempty"`  // 文件的时长（视频，音频），单位:毫秒。不填充时无法显示具体时长。, 示例值：3000
	File     io.Reader `json:"file,omitempty"`      // 文件内容, 示例值：二进制文件
}

// uploadFileResp ...
type uploadFileResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UploadFileResp `json:"data,omitempty"`
}

// UploadFileResp ...
type UploadFileResp struct {
	FileKey string `json:"file_key,omitempty"` // 文件的key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UploadImage 上传图片接口，可以上传 JPEG、PNG、WEBP、GIF、TIFF、BMP、ICO格式图片
//
// 注意事项:
// - 需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 上传的图片大小不能超过10MB
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create
func (r *FileService) UploadImage(ctx context.Context, request *UploadImageReq, options ...MethodOptionFunc) (*UploadImageResp, *Response, error) {
	if r.cli.mock.mockFileUploadImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] File#UploadImage mock enable")
		return r.cli.mock.mockFileUploadImage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "File",
		API:                   "UploadImage",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/images",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		IsFile:                true,
	}
	resp := new(uploadImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockFileUploadImage mock FileUploadImage method
func (r *Mock) MockFileUploadImage(f func(ctx context.Context, request *UploadImageReq, options ...MethodOptionFunc) (*UploadImageResp, *Response, error)) {
	r.mockFileUploadImage = f
}

// UnMockFileUploadImage un-mock FileUploadImage method
func (r *Mock) UnMockFileUploadImage() {
	r.mockFileUploadImage = nil
}

// UploadImageReq ...
type UploadImageReq struct {
	ImageType ImageType `json:"image_type,omitempty"` // 图片类型, 示例值："message", 可选值有: `message`：用于发送消息, `avatar`：用于设置头像
	Image     io.Reader `json:"image,omitempty"`      // 图片内容, 示例值：二进制文件
}

// uploadImageResp ...
type uploadImageResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *UploadImageResp `json:"data,omitempty"`
}

// UploadImageResp ...
type UploadImageResp struct {
	ImageKey string `json:"image_key,omitempty"` // 图片的key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetHelpdeskAgentEmail 该接口用于获取客服邮箱地址
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/agent/agent_email
func (r *HelpdeskService) GetHelpdeskAgentEmail(ctx context.Context, request *GetHelpdeskAgentEmailReq, options ...MethodOptionFunc) (*GetHelpdeskAgentEmailResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetHelpdeskAgentEmail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetHelpdeskAgentEmail mock enable")
		return r.cli.mock.mockHelpdeskGetHelpdeskAgentEmail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Helpdesk",
		API:                   "GetHelpdeskAgentEmail",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/helpdesk/v1/agent_emails",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedHelpdeskAuth:      true,
	}
	resp := new(getHelpdeskAgentEmailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockHelpdeskGetHelpdeskAgentEmail mock HelpdeskGetHelpdeskAgentEmail method
func (r *Mock) MockHelpdeskGetHelpdeskAgentEmail(f func(ctx context.Context, request *GetHelpdeskAgentEmailReq, options ...MethodOptionFunc) (*GetHelpdeskAgentEmailResp, *Response, error)) {
	r.mockHelpdeskGetHelpdeskAgentEmail = f
}

// UnMockHelpdeskGetHelpdeskAgentEmail un-mock HelpdeskGetHelpdeskAgentEmail method
func (r *Mock) UnMockHelpdeskGetHelpdeskAgentEmail() {
	r.mockHelpdeskGetHelpdeskAgentEmail = nil
}

// GetHelpdeskAgentEmailReq ...
type GetHelpdeskAgentEmailReq struct{}

// getHelpdeskAgentEmailResp ...
type getHelpdeskAgentEmailResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetHelpdeskAgentEmailResp `json:"data,omitempty"`
}

// GetHelpdeskAgentEmailResp ...
type GetHelpdeskAgentEmailResp struct {
	Agents string `json:"agents,omitempty"` // agent emails
}
