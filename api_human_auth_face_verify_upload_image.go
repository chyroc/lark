// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
	"io"
)

// UploadFaceVerifyImage
//
// ::: note
// 无源人脸比对接入需申请白名单，接入前请联系飞书开放平台工作人员，邮箱：openplatform@bytedance.com。
// :::
// 无源人脸比对流程，开发者后台通过调用此接口将基准图片上传到飞书后台，做检测时的对比使用。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/human_authentication-v1/face/upload-facial-reference-image
func (r *HumanAuthService) UploadFaceVerifyImage(ctx context.Context, request *UploadFaceVerifyImageReq, options ...MethodOptionFunc) (*UploadFaceVerifyImageResp, *Response, error) {
	if r.cli.mock.mockHumanAuthUploadFaceVerifyImage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#UploadFaceVerifyImage mock enable")
		return r.cli.mock.mockHumanAuthUploadFaceVerifyImage(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] HumanAuth#UploadFaceVerifyImage call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#UploadFaceVerifyImage request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/face_verify/v1/upload_face_image",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,

		IsFile: true,
	}
	resp := new(uploadFaceVerifyImageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] HumanAuth#UploadFaceVerifyImage POST https://open.feishu.cn/open-apis/face_verify/v1/upload_face_image failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] HumanAuth#UploadFaceVerifyImage POST https://open.feishu.cn/open-apis/face_verify/v1/upload_face_image failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("HumanAuth", "UploadFaceVerifyImage", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] HumanAuth#UploadFaceVerifyImage success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockHumanAuthUploadFaceVerifyImage(f func(ctx context.Context, request *UploadFaceVerifyImageReq, options ...MethodOptionFunc) (*UploadFaceVerifyImageResp, *Response, error)) {
	r.mockHumanAuthUploadFaceVerifyImage = f
}

func (r *Mock) UnMockHumanAuthUploadFaceVerifyImage() {
	r.mockHumanAuthUploadFaceVerifyImage = nil
}

type UploadFaceVerifyImageReq struct {
	OpenID     *string   `query:"open_id" json:"-"`     // 用户应用标识, 与employee_id二选其一
	EmployeeID *string   `query:"employee_id" json:"-"` // 用户租户标识, 与open_id二选其一
	Image      io.Reader `json:"image,omitempty"`       // 带有头像的人脸照片
}

type uploadFaceVerifyImageResp struct {
	Code int                        `json:"code,omitempty"` // 返回码，非0为失败
	Msg  string                     `json:"msg,omitempty"`  // 返回信息，返回码的描述
	Data *UploadFaceVerifyImageResp `json:"data,omitempty"` // 业务数据
}

type UploadFaceVerifyImageResp struct {
	FaceUid string `json:"face_uid,omitempty"` // 人脸图片用户Uid，需返回给应用小程序，作为小程序调起人脸识别接口的uid参数
}
