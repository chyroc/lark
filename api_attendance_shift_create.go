// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateShift
//
// 班次是描述一次考勤任务时间规则的统称，比如一天打多少次卡，每次卡的上下班时间，晚到多长时间算迟到，晚到多长时间算缺卡等。
// - 创建一个考勤组前，必须先创建一个或者多个班次。
// - 一个公司内的班次是共享的，你可以直接引用他人创建的班次，但是需要注意的是，若他人修改了班次，会影响到你的考勤组及其考勤结果。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//shift_create
func (r *AttendanceService) CreateShift(ctx context.Context, request *CreateShiftReq, options ...MethodOptionFunc) (*CreateShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceCreateShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateShift mock enable")
		return r.cli.mock.mockAttendanceCreateShift(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Attendance#CreateShift call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateShift request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/attendance/v1/shifts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#CreateShift POST https://open.feishu.cn/open-apis/attendance/v1/shifts failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#CreateShift POST https://open.feishu.cn/open-apis/attendance/v1/shifts failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Attendance", "CreateShift", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#CreateShift success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockAttendanceCreateShift(f func(ctx context.Context, request *CreateShiftReq, options ...MethodOptionFunc) (*CreateShiftResp, *Response, error)) {
	r.mockAttendanceCreateShift = f
}

func (r *Mock) UnMockAttendanceCreateShift() {
	r.mockAttendanceCreateShift = nil
}

type CreateShiftReq struct {
	ShiftName         string                           `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int                              `json:"punch_times,omitempty"`           // 打卡次数、，需小于等于 3 次
	IsFlexible        *bool                            `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   *int                             `json:"flexible_minutes,omitempty"`      // 弹性打卡时间
	NoNeedOff         *bool                            `json:"no_need_off,omitempty"`           // 是否下班免打卡
	PunchTimeRule     *CreateShiftReqPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *CreateShiftReqLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *CreateShiftReqRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息时间规则
}

type CreateShiftReqPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间，示例参数：“9:00”
	OffTime             string `json:"off_time,omitempty"`               // 下班时间，示例参数：“18:00”，说明：第二天凌晨 2 点表示为 26:00
	LateMinutesAsLate   int    `json:"late_minutes_as_late,omitempty"`   // 晚到多长时间记为迟到
	LateMinutesAsLack   int    `json:"late_minutes_as_lack,omitempty"`   // 晚到多长时间记为缺卡
	OnAdvanceMinutes    int    `json:"on_advance_minutes,omitempty"`     // 最早可提前多长时间打上班卡
	EarlyMinutesAsEarly int    `json:"early_minutes_as_early,omitempty"` // 早走多长时间记为早退
	EarlyMinutesAsLack  int    `json:"early_minutes_as_lack,omitempty"`  // 早走多长时间记为缺卡
	OffDelayMinutes     int    `json:"off_delay_minutes,omitempty"`      // 最晚可延后多长时间打下班卡
}

type CreateShiftReqLateOffLateOnRule struct {
	LateOffMinutes int `json:"late_off_minutes,omitempty"` // 晚走多长时间
	LateOnMinutes  int `json:"late_on_minutes,omitempty"`  // 晚到多长时间
}

type CreateShiftReqRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始时间，示例参数：“13:00”
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束时间，示例参数：“14:00”
}

type createShiftResp struct {
	Code int              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *CreateShiftResp `json:"data,omitempty"` // -
}

type CreateShiftResp struct {
	Shift *CreateShiftRespShift `json:"shift,omitempty"` // 班次
}

type CreateShiftRespShift struct {
	ShiftID           string                                 `json:"shift_id,omitempty"`              // 班次 ID
	ShiftName         string                                 `json:"shift_name,omitempty"`            // 班次名称
	PunchTimes        int                                    `json:"punch_times,omitempty"`           // 打卡次数
	IsFlexible        bool                                   `json:"is_flexible,omitempty"`           // 是否弹性打卡
	FlexibleMinutes   int                                    `json:"flexible_minutes,omitempty"`      // 弹性打卡时间
	NoNeedOff         bool                                   `json:"no_need_off,omitempty"`           // 是否下班免打卡
	PunchTimeRule     *CreateShiftRespShiftPunchTimeRule     `json:"punch_time_rule,omitempty"`       // 打卡规则
	LateOffLateOnRule *CreateShiftRespShiftLateOffLateOnRule `json:"late_off_late_on_rule,omitempty"` // 晚走晚到规则
	RestTimeRule      *CreateShiftRespShiftRestTimeRule      `json:"rest_time_rule,omitempty"`        // 休息时间规则
}

type CreateShiftRespShiftPunchTimeRule struct {
	OnTime              string `json:"on_time,omitempty"`                // 上班时间
	OffTime             string `json:"off_time,omitempty"`               // 下班时间
	LateMinutesAsLate   int    `json:"late_minutes_as_late,omitempty"`   // 晚到多长时间记为迟到
	LateMinutesAsLack   int    `json:"late_minutes_as_lack,omitempty"`   // 晚到多长时间记为缺卡
	OnAdvanceMinutes    int    `json:"on_advance_minutes,omitempty"`     // 最早可提前多长时间打上班卡
	EarlyMinutesAsEarly int    `json:"early_minutes_as_early,omitempty"` // 早走多长时间记为早退
	EarlyMinutesAsLack  int    `json:"early_minutes_as_lack,omitempty"`  // 早走多长时间记为缺卡
	OffDelayMinutes     int    `json:"off_delay_minutes,omitempty"`      // 最晚可延后多长时间打下班卡
}

type CreateShiftRespShiftLateOffLateOnRule struct {
	LateOffMinutes int `json:"late_off_minutes,omitempty"` // 晚走多长时间
	LateOnMinutes  int `json:"late_on_minutes,omitempty"`  // 晚到多长时间
}

type CreateShiftRespShiftRestTimeRule struct {
	RestBeginTime string `json:"rest_begin_time,omitempty"` // 休息开始时间
	RestEndTime   string `json:"rest_end_time,omitempty"`   // 休息结束时间
}
