// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// BatchDeleteTable 删除多个数据表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table/batch_delete
func (r *BitableService) BatchDeleteTable(ctx context.Context, request *BatchDeleteTableReq, options ...MethodOptionFunc) (*BatchDeleteTableResp, *Response, error) {
	if r.cli.mock.mockBitableBatchDeleteTable != nil {
		r.cli.logDebug(ctx, "[lark] Bitable#BatchDeleteTable mock enable")
		return r.cli.mock.mockBitableBatchDeleteTable(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Bitable#BatchDeleteTable call api")
	r.cli.logDebug(ctx, "[lark] Bitable#BatchDeleteTable request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:              "POST",
		URL:                 "https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/batch_delete",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(batchDeleteTableResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Bitable#BatchDeleteTable POST https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/batch_delete failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Bitable#BatchDeleteTable POST https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/batch_delete failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Bitable", "BatchDeleteTable", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Bitable#BatchDeleteTable request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockBitableBatchDeleteTable(f func(ctx context.Context, request *BatchDeleteTableReq, options ...MethodOptionFunc) (*BatchDeleteTableResp, *Response, error)) {
	r.mockBitableBatchDeleteTable = f
}

func (r *Mock) UnMockBitableBatchDeleteTable() {
	r.mockBitableBatchDeleteTable = nil
}

type BatchDeleteTableReq struct {
	AppToken string   `path:"app_token" json:"-"`  // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableIDs []string `json:"table_ids,omitempty"` // 删除的多条tableid列表
}

type batchDeleteTableResp struct {
	Code int                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *BatchDeleteTableResp `json:"data,omitempty"`
}

type BatchDeleteTableResp struct{}
