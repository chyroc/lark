// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// ImportSheet 该接口用于将本地表格导入到云空间上。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATO2YjLwkjN24CM5YjN
func (r *DriveService) ImportSheet(ctx context.Context, request *ImportSheetReq, options ...MethodOptionFunc) (*ImportSheetResp, *Response, error) {
	if r.cli.mock.mockDriveImportSheet != nil {
		r.cli.logDebug(ctx, "[lark] Drive#ImportSheet mock enable")
		return r.cli.mock.mockDriveImportSheet(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Drive#ImportSheet call api")
	r.cli.logDebug(ctx, "[lark] Drive#ImportSheet request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/sheets/v2/import",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(importSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Drive#ImportSheet POST https://open.feishu.cn/open-apis/sheets/v2/import failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Drive#ImportSheet POST https://open.feishu.cn/open-apis/sheets/v2/import failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Drive", "ImportSheet", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Drive#ImportSheet request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockDriveImportSheet(f func(ctx context.Context, request *ImportSheetReq, options ...MethodOptionFunc) (*ImportSheetResp, *Response, error)) {
	r.mockDriveImportSheet = f
}

func (r *Mock) UnMockDriveImportSheet() {
	r.mockDriveImportSheet = nil
}

type ImportSheetReq struct {
	File        []byte  `json:"file,omitempty"`        // 需要导入的文件数据，转换成字节数组的形式，支持"xlsx","csv"格式，最大不超过20M
	Name        string  `json:"name,omitempty"`        // 文件名，带上文件拓展名，如"hello.csv"、"hello.xlsx"。导入后sheet的标题将去除文件拓展名，如"hello.xlsx"导入后标题为"hello"。
	FolderToken *string `json:"folderToken,omitempty"` // 导入的文件夹token，默认导入到根目录下
}

type importSheetResp struct {
	Code int              `json:"code,omitempty"`
	Msg  string           `json:"msg,omitempty"`
	Data *ImportSheetResp `json:"data,omitempty"`
}

type ImportSheetResp struct {
	Ticket string `json:"ticket,omitempty"` // 与导入文件一一对应的凭证，用于查询文件导入的进度，详见[查询导入结果的接口](/ssl:ttdoc/ukTMukTMukTM/uETO2YjLxkjN24SM5YjN)
}
