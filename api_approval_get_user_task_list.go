// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetApprovalUserTaskList 根据用户和任务分组查询任务列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/task/query
func (r *ApprovalService) GetApprovalUserTaskList(ctx context.Context, request *GetApprovalUserTaskListReq, options ...MethodOptionFunc) (*GetApprovalUserTaskListResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApprovalUserTaskList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApprovalUserTaskList mock enable")
		return r.cli.mock.mockApprovalGetApprovalUserTaskList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApprovalUserTaskList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/tasks/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getApprovalUserTaskListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApprovalUserTaskList mock ApprovalGetApprovalUserTaskList method
func (r *Mock) MockApprovalGetApprovalUserTaskList(f func(ctx context.Context, request *GetApprovalUserTaskListReq, options ...MethodOptionFunc) (*GetApprovalUserTaskListResp, *Response, error)) {
	r.mockApprovalGetApprovalUserTaskList = f
}

// UnMockApprovalGetApprovalUserTaskList un-mock ApprovalGetApprovalUserTaskList method
func (r *Mock) UnMockApprovalGetApprovalUserTaskList() {
	r.mockApprovalGetApprovalUserTaskList = nil
}

// GetApprovalUserTaskListReq ...
type GetApprovalUserTaskListReq struct {
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 100, 默认值: `100`, 最大值: `200`
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "1"
	UserID     string  `query:"user_id" json:"-"`      // 需要查询的 User ID, 示例值: "example_user_id"
	Topic      string  `query:"topic" json:"-"`        // 需要查询的任务分组主题, 如「待办」、「已办」等, 示例值: "1", 可选值有: 1: 待办审批, 2: 已办审批, 3: 已发起审批, 17: 未读知会, 18: 已读知会
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
}

// GetApprovalUserTaskListResp ...
type GetApprovalUserTaskListResp struct {
	Tasks     []*GetApprovalUserTaskListRespTask `json:"tasks,omitempty"`      // 任务列表
	PageToken string                             `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                               `json:"has_more,omitempty"`   // 是否还有更多项
	Count     *GetApprovalUserTaskListRespCount  `json:"count,omitempty"`      // 列表计数, 只在分页第一页返回
}

// GetApprovalUserTaskListRespCount ...
type GetApprovalUserTaskListRespCount struct {
	Total   int64 `json:"total,omitempty"`    // 总数, 大于等于 1000 个项目时将返回 999
	HasMore bool  `json:"has_more,omitempty"` // 还有更多, 当大于等于 1000 时将返回 true
}

// GetApprovalUserTaskListRespTask ...
type GetApprovalUserTaskListRespTask struct {
	Topic               string                               `json:"topic,omitempty"`                 // 任务所属的任务分组, 如「待办」、「已办」等, 可选值有: 1: 待办审批, 2: 已办审批, 3: 已发起审批, 17: 未读知会, 18: 已读知会
	UserID              string                               `json:"user_id,omitempty"`               // 任务所属的用户 ID
	Title               string                               `json:"title,omitempty"`                 // 任务题目
	URLs                *GetApprovalUserTaskListRespTaskURLs `json:"urls,omitempty"`                  // 任务相关 URL
	ProcessExternalID   string                               `json:"process_external_id,omitempty"`   // 流程三方 ID, 仅第三方流程, 需要在当前租户、当前 APP 内唯一
	TaskExternalID      string                               `json:"task_external_id,omitempty"`      // 任务三方 ID, 仅第三方流程, 需要在当前流程实例内唯一
	Status              string                               `json:"status,omitempty"`                // 任务状态, 可选值有: 1: 待办, 2: 已办, 17: 未读, 18: 已读, 33: 处理中, 标记完成用, 34: 撤回
	ProcessStatus       string                               `json:"process_status,omitempty"`        // 流程实例状态, 可选值有: 0: 无流程状态, 不展示对应标签, 1: 流程实例流转中, 2: 已通过, 3: 已拒绝, 4: 已撤销, 5: 已终止
	DefinitionCode      string                               `json:"definition_code,omitempty"`       // 流程定义 Code
	Initiators          []string                             `json:"initiators,omitempty"`            // 发起人 ID 列表
	InitiatorNames      []string                             `json:"initiator_names,omitempty"`       // 发起人姓名列表
	TaskID              string                               `json:"task_id,omitempty"`               // 任务 ID, 全局唯一
	ProcessID           string                               `json:"process_id,omitempty"`            // 流程 ID, 全局唯一
	ProcessCode         string                               `json:"process_code,omitempty"`          // 流程 Code
	DefinitionGroupID   string                               `json:"definition_group_id,omitempty"`   // 流程定义分组 ID
	DefinitionGroupName string                               `json:"definition_group_name,omitempty"` // 流程定义分组名称
	DefinitionID        string                               `json:"definition_id,omitempty"`         // 流程定义 ID
	DefinitionName      string                               `json:"definition_name,omitempty"`       // 流程定义名称
}

// GetApprovalUserTaskListRespTaskURLs ...
type GetApprovalUserTaskListRespTaskURLs struct {
	Helpdesk string `json:"helpdesk,omitempty"` // 帮助服务台 URL
	Mobile   string `json:"mobile,omitempty"`   // 移动端 URL
	Pc       string `json:"pc,omitempty"`       // PC 端 URL
}

// getApprovalUserTaskListResp ...
type getApprovalUserTaskListResp struct {
	Code int64                        `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 错误描述
	Data *GetApprovalUserTaskListResp `json:"data,omitempty"`
}
