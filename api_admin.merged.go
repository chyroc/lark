// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetAdminUserStats 用于获取用户维度的用户活跃和功能使用数据，即IM（即时通讯）、日历、云文档、音视频会议功能的使用数据。
//
// - 只有企业自建应用才有权限调用此接口
// - 当天的数据会在第二天的早上八点产出（UTC+8）
// - 用户维度的数据最多查询最近31天的数据（包含31天）的数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/admin-v1/admin_user_stat/list
func (r *AdminService) GetAdminUserStats(ctx context.Context, request *GetAdminUserStatsReq, options ...MethodOptionFunc) (*GetAdminUserStatsResp, *Response, error) {
	if r.cli.mock.mockAdminGetAdminUserStats != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Admin#GetAdminUserStats mock enable")
		return r.cli.mock.mockAdminGetAdminUserStats(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Admin",
		API:                   "GetAdminUserStats",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/admin/v1/admin_user_stats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getAdminUserStatsResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAdminGetAdminUserStats mock AdminGetAdminUserStats method
func (r *Mock) MockAdminGetAdminUserStats(f func(ctx context.Context, request *GetAdminUserStatsReq, options ...MethodOptionFunc) (*GetAdminUserStatsResp, *Response, error)) {
	r.mockAdminGetAdminUserStats = f
}

// UnMockAdminGetAdminUserStats un-mock AdminGetAdminUserStats method
func (r *Mock) UnMockAdminGetAdminUserStats() {
	r.mockAdminGetAdminUserStats = nil
}

// GetAdminUserStatsReq ...
type GetAdminUserStatsReq struct {
	UserIDType       *IDType           `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 部门ID类型, 示例值："open_department_id", 可选值有: `department_id`：部门的 ID, `open_department_id`：部门的 Open ID
	StartDate        string            `query:"start_date" json:"-"`         // 起始日期（包含），格式是YYYY-mm-dd, 示例值："2020-02-15"
	EndDate          string            `query:"end_date" json:"-"`           // 终止日期（包含），格式是YYYY-mm-dd。起止日期之间相差不能超过31天（包含31天）, 示例值："2020-02-15"
	DepartmentID     *string           `query:"department_id" json:"-"`      // 部门的 ID，取决于department_id_type, 示例值："od-382e2793cfc9471f892e8a672987654c"
	UserID           *string           `query:"user_id" json:"-"`            // 用户的open_id，user_id或者union_id，取决于user_id_type, 示例值："ou_7dab8a3d3cdcc9da365777c7ad535d62"
	PageSize         *int64            `query:"page_size" json:"-"`          // 分页大小，默认是10, 示例值：10, 取值范围：`1` ～ `20`
	PageToken        *string           `query:"page_token" json:"-"`         // 分页标记，第一次请求不填，表示从头开始遍历；当返回的has_more为true时，会返回新的page_token，再次调用接口，传入这个page_token，将获得下一页数据, 示例值："2"
}

// getAdminUserStatsResp ...
type getAdminUserStatsResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetAdminUserStatsResp `json:"data,omitempty"`
}

// GetAdminUserStatsResp ...
type GetAdminUserStatsResp struct {
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否有下一页数据
	PageToken string                       `json:"page_token,omitempty"` // 下一页分页的token
	Items     []*GetAdminUserStatsRespItem `json:"items,omitempty"`      // 数据报表
}

// GetAdminUserStatsRespItem ...
type GetAdminUserStatsRespItem struct {
	Date             string `json:"date,omitempty"`               // 日期
	UserID           string `json:"user_id,omitempty"`            // 用户ID
	UserName         string `json:"user_name,omitempty"`          // 用户名
	DepartmentName   string `json:"department_name,omitempty"`    // 部门名
	DepartmentPath   string `json:"department_path,omitempty"`    // 部门路径
	CreateTime       string `json:"create_time,omitempty"`        // 账号创建时间
	UserActiveFlag   int64  `json:"user_active_flag,omitempty"`   // 用户激活状态, 可选值有: `0`：未激活, `1`：已激活
	RegisterTime     string `json:"register_time,omitempty"`      // 激活时间
	SuiteActiveFlag  int64  `json:"suite_active_flag,omitempty"`  // 用户活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	LastActiveTime   string `json:"last_active_time,omitempty"`   // 最近活跃时间
	IMActiveFlag     int64  `json:"im_active_flag,omitempty"`     // 用户消息活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	SendMessengerNum int64  `json:"send_messenger_num,omitempty"` // 发送消息数
	DocsActiveFlag   int64  `json:"docs_active_flag,omitempty"`   // 用户云文档活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	CreateDocsNum    int64  `json:"create_docs_num,omitempty"`    // 创建文件数
	CalActiveFlag    int64  `json:"cal_active_flag,omitempty"`    // 用户日历活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	CreateCalNum     int64  `json:"create_cal_num,omitempty"`     // 创建日程数
	VCActiveFlag     int64  `json:"vc_active_flag,omitempty"`     // 用户音视频会议活跃状态, 可选值有: `0`：无活跃, `1`：活跃
	VCDuration       int64  `json:"vc_duration,omitempty"`        // 会议时长
	ActiveOs         string `json:"active_os,omitempty"`          // 活跃设备
	CreateTaskNum    int64  `json:"create_task_num,omitempty"`    // 创建任务数
	VCNum            int64  `json:"vc_num,omitempty"`             // 会议数
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DetectFaceAttributes 检测图片中的人脸属性和质量等信息
//
// 注意：返回值为 -1 表示该功能还暂未实现
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/ai/face_detection-v1/image/detect_face_attributes
func (r *AIService) DetectFaceAttributes(ctx context.Context, request *DetectFaceAttributesReq, options ...MethodOptionFunc) (*DetectFaceAttributesResp, *Response, error) {
	if r.cli.mock.mockAIDetectFaceAttributes != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] AI#DetectFaceAttributes mock enable")
		return r.cli.mock.mockAIDetectFaceAttributes(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "AI",
		API:                   "DetectFaceAttributes",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/face_detection/v1/image/detect_face_attributes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(detectFaceAttributesResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAIDetectFaceAttributes mock AIDetectFaceAttributes method
func (r *Mock) MockAIDetectFaceAttributes(f func(ctx context.Context, request *DetectFaceAttributesReq, options ...MethodOptionFunc) (*DetectFaceAttributesResp, *Response, error)) {
	r.mockAIDetectFaceAttributes = f
}

// UnMockAIDetectFaceAttributes un-mock AIDetectFaceAttributes method
func (r *Mock) UnMockAIDetectFaceAttributes() {
	r.mockAIDetectFaceAttributes = nil
}

// DetectFaceAttributesReq ...
type DetectFaceAttributesReq struct {
	Image *string `json:"image,omitempty"` // 图片 base64 数据, 示例值："图片 base64 后的字符串"
}

// detectFaceAttributesResp ...
type detectFaceAttributesResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *DetectFaceAttributesResp `json:"data,omitempty"`
}

// DetectFaceAttributesResp ...
type DetectFaceAttributesResp struct {
	ImageInfo *DetectFaceAttributesRespImageInfo  `json:"image_info,omitempty"` // 图片信息
	FaceInfos []*DetectFaceAttributesRespFaceInfo `json:"face_infos,omitempty"` // 人脸信息列表
}

// DetectFaceAttributesRespImageInfo ...
type DetectFaceAttributesRespImageInfo struct {
	Width  int64 `json:"width,omitempty"`  // 图片的宽度
	Height int64 `json:"height,omitempty"` // 图片的高度
}

// DetectFaceAttributesRespFaceInfo ...
type DetectFaceAttributesRespFaceInfo struct {
	Position  *DetectFaceAttributesRespFaceInfoPosition  `json:"position,omitempty"`  // 人脸位置信息
	Attribute *DetectFaceAttributesRespFaceInfoAttribute `json:"attribute,omitempty"` // 人脸属性信息
	Quality   *DetectFaceAttributesRespFaceInfoQuality   `json:"quality,omitempty"`   // 人脸质量信息
}

// DetectFaceAttributesRespFaceInfoPosition ...
type DetectFaceAttributesRespFaceInfoPosition struct {
	UpperLeft  *DetectFaceAttributesRespFaceInfoPositionUpperLeft  `json:"upper_left,omitempty"`  // 人脸框的左上角坐标
	LowerRight *DetectFaceAttributesRespFaceInfoPositionLowerRight `json:"lower_right,omitempty"` // 人脸框的右下角坐标
}

// DetectFaceAttributesRespFaceInfoPositionUpperLeft ...
type DetectFaceAttributesRespFaceInfoPositionUpperLeft struct {
	X float64 `json:"x,omitempty"` // 横轴坐标
	Y float64 `json:"y,omitempty"` // 纵轴坐标
}

// DetectFaceAttributesRespFaceInfoPositionLowerRight ...
type DetectFaceAttributesRespFaceInfoPositionLowerRight struct {
	X float64 `json:"x,omitempty"` // 横轴坐标
	Y float64 `json:"y,omitempty"` // 纵轴坐标
}

// DetectFaceAttributesRespFaceInfoAttribute ...
type DetectFaceAttributesRespFaceInfoAttribute struct {
	Gender  *DetectFaceAttributesRespFaceInfoAttributeGender  `json:"gender,omitempty"`  // 性别信息：0 男性，1 女性
	Age     int64                                             `json:"age,omitempty"`     // 年龄大小
	Emotion *DetectFaceAttributesRespFaceInfoAttributeEmotion `json:"emotion,omitempty"` // 情绪：0 自然, 1 高兴，2 惊讶，3 害怕，4 悲伤，5 生气, 6 厌恶
	Beauty  int64                                             `json:"beauty,omitempty"`  // 颜值打分：[0, 100]
	Pose    *DetectFaceAttributesRespFaceInfoAttributePose    `json:"pose,omitempty"`    // 人脸姿态
	Hat     *DetectFaceAttributesRespFaceInfoAttributeHat     `json:"hat,omitempty"`     // 帽子：0 未戴帽子，1 戴帽子
	Glass   *DetectFaceAttributesRespFaceInfoAttributeGlass   `json:"glass,omitempty"`   // 眼镜：0 未戴眼镜，1 戴眼镜
	Mask    *DetectFaceAttributesRespFaceInfoAttributeMask    `json:"mask,omitempty"`    // 口罩：0 未戴口罩，1 戴口罩
}

// DetectFaceAttributesRespFaceInfoAttributeGender ...
type DetectFaceAttributesRespFaceInfoAttributeGender struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributeEmotion ...
type DetectFaceAttributesRespFaceInfoAttributeEmotion struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributePose ...
type DetectFaceAttributesRespFaceInfoAttributePose struct {
	Pitch int64 `json:"pitch,omitempty"` // 脸部上下偏移 [-90, 90]
	Yaw   int64 `json:"yaw,omitempty"`   // 脸部左右偏移 [-90, 90]
	Roll  int64 `json:"roll,omitempty"`  // 平面旋转 [-90, 90]
}

// DetectFaceAttributesRespFaceInfoAttributeHat ...
type DetectFaceAttributesRespFaceInfoAttributeHat struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributeGlass ...
type DetectFaceAttributesRespFaceInfoAttributeGlass struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoAttributeMask ...
type DetectFaceAttributesRespFaceInfoAttributeMask struct {
	Type        int64   `json:"type,omitempty"`        // 属性
	Probability float64 `json:"probability,omitempty"` // 识别置信度，[0, 1]，代表判断正确的概率
}

// DetectFaceAttributesRespFaceInfoQuality ...
type DetectFaceAttributesRespFaceInfoQuality struct {
	Sharpness  float64                                         `json:"sharpness,omitempty"`  // 清晰度，值越高越清晰
	Brightness float64                                         `json:"brightness,omitempty"` // 亮度
	Occlude    *DetectFaceAttributesRespFaceInfoQualityOcclude `json:"occlude,omitempty"`    // 面部遮挡属性
}

// DetectFaceAttributesRespFaceInfoQualityOcclude ...
type DetectFaceAttributesRespFaceInfoQualityOcclude struct {
	Eyebrow  float64 `json:"eyebrow,omitempty"`   // 眉毛被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Nose     float64 `json:"nose,omitempty"`      // 鼻子被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Cheek    float64 `json:"cheek,omitempty"`     // 脸颊被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Mouth    float64 `json:"mouth,omitempty"`     // 嘴被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	Chin     float64 `json:"chin,omitempty"`      // 下巴被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	LeftEye  float64 `json:"left_eye,omitempty"`  // 左眼睛被遮挡情况：[0, 1] 值越大被遮挡的概率越高
	RightEye float64 `json:"right_eye,omitempty"` // 右眼睛被遮挡情况：[0, 1] 值越大被遮挡的概率越高
}
