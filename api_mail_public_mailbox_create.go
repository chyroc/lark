// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreatePublicMailbox 创建一个公共邮箱
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/mail-v1/public_mailbox/create
func (r *MailService) CreatePublicMailbox(ctx context.Context, request *CreatePublicMailboxReq, options ...MethodOptionFunc) (*CreatePublicMailboxResp, *Response, error) {
	if r.cli.mock.mockMailCreatePublicMailbox != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreatePublicMailbox mock enable")
		return r.cli.mock.mockMailCreatePublicMailbox(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Mail#CreatePublicMailbox call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreatePublicMailbox request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/mail/v1/public_mailboxes",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createPublicMailboxResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Mail#CreatePublicMailbox POST https://open.feishu.cn/open-apis/mail/v1/public_mailboxes failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Mail#CreatePublicMailbox POST https://open.feishu.cn/open-apis/mail/v1/public_mailboxes failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Mail", "CreatePublicMailbox", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Mail#CreatePublicMailbox success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockMailCreatePublicMailbox(f func(ctx context.Context, request *CreatePublicMailboxReq, options ...MethodOptionFunc) (*CreatePublicMailboxResp, *Response, error)) {
	r.mockMailCreatePublicMailbox = f
}

func (r *Mock) UnMockMailCreatePublicMailbox() {
	r.mockMailCreatePublicMailbox = nil
}

type CreatePublicMailboxReq struct {
	Email *string `json:"email,omitempty"` // 公共邮箱地址, 示例值："test_public_mailbox@xxx.xx"
	Name  *string `json:"name,omitempty"`  // 公共邮箱名称, 示例值："test public mailbox"
}

type createPublicMailboxResp struct {
	Code int                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 错误描述
	Data *CreatePublicMailboxResp `json:"data,omitempty"` //
}

type CreatePublicMailboxResp struct {
	PublicMailboxID string `json:"public_mailbox_id,omitempty"` // 公共邮箱唯一标识
	Email           string `json:"email,omitempty"`             // 公共邮箱地址
	Name            string `json:"name,omitempty"`              // 公共邮箱名称
}
