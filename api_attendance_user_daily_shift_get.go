// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetUserDailyShift
//
// 支持查询多个用户的排班情况，查询的时间跨度不能超过 30 天。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/Attendance//task/GetScheduledShifts
func (r *AttendanceService) GetUserDailyShift(ctx context.Context, request *GetUserDailyShiftReq, options ...MethodOptionFunc) (*GetUserDailyShiftResp, *Response, error) {
	if r.cli.mock.mockAttendanceGetUserDailyShift != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetUserDailyShift mock enable")
		return r.cli.mock.mockAttendanceGetUserDailyShift(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Attendance#GetUserDailyShift call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetUserDailyShift request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/attendance/v1/user_daily_shifts/query",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getUserDailyShiftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#GetUserDailyShift POST https://open.feishu.cn/open-apis/attendance/v1/user_daily_shifts/query failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Attendance#GetUserDailyShift POST https://open.feishu.cn/open-apis/attendance/v1/user_daily_shifts/query failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Attendance", "GetUserDailyShift", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Attendance#GetUserDailyShift success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockAttendanceGetUserDailyShift(f func(ctx context.Context, request *GetUserDailyShiftReq, options ...MethodOptionFunc) (*GetUserDailyShiftResp, *Response, error)) {
	r.mockAttendanceGetUserDailyShift = f
}

func (r *Mock) UnMockAttendanceGetUserDailyShift() {
	r.mockAttendanceGetUserDailyShift = nil
}

type GetUserDailyShiftReq struct {
	EmployeeType  EmployeeType `query:"employee_type" json:"-"`   // 请求体中的 user_ids 的员工工号类型，可用值：【employee_id（员工的 employeeId），employee_no（员工工号）】，示例值：“employee_id”
	UserIDs       []string     `json:"user_ids,omitempty"`        // employee_no 或 employee_id 列表
	CheckDateFrom int          `json:"check_date_from,omitempty"` // 查询的起始工作日
	CheckDateTo   int          `json:"check_date_to,omitempty"`   // 查询的结束工作日
}

type getUserDailyShiftResp struct {
	Code int                    `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetUserDailyShiftResp `json:"data,omitempty"` // -
}

type GetUserDailyShiftResp struct {
	UserDailyShifts []*GetUserDailyShiftRespUserDailyShift `json:"user_daily_shifts,omitempty"` // 班表信息列表
}

type GetUserDailyShiftRespUserDailyShift struct {
	GroupID    string `json:"group_id,omitempty"`    // 考勤组 ID
	ShiftID    string `json:"shift_id,omitempty"`    // 班次 ID，休息为 0
	Month      int    `json:"month,omitempty"`       // 月份
	EmployeeNo string `json:"employee_no,omitempty"` // 用户
	DayNo      int    `json:"day_no,omitempty"`      // 日期
}
