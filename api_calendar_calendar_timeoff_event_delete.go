// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// DeleteCalendarTimeoffEvent 删除一个指定的请假日程，请假日程删除，用户个人签名页的请假信息也会消失。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/calendar-v4/timeoff_event/delete
func (r *CalendarService) DeleteCalendarTimeoffEvent(ctx context.Context, request *DeleteCalendarTimeoffEventReq, options ...MethodOptionFunc) (*DeleteCalendarTimeoffEventResp, *Response, error) {
	if r.cli.mock.mockCalendarDeleteCalendarTimeoffEvent != nil {
		r.cli.logDebug(ctx, "[lark] Calendar#DeleteCalendarTimeoffEvent mock enable")
		return r.cli.mock.mockCalendarDeleteCalendarTimeoffEvent(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Calendar#DeleteCalendarTimeoffEvent call api")
	r.cli.logDebug(ctx, "[lark] Calendar#DeleteCalendarTimeoffEvent request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "DELETE",
		URL:                   "https://open.feishu.cn/open-apis/calendar/v4/timeoff_events/:timeoff_event_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteCalendarTimeoffEventResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Calendar#DeleteCalendarTimeoffEvent DELETE https://open.feishu.cn/open-apis/calendar/v4/timeoff_events/:timeoff_event_id failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Calendar#DeleteCalendarTimeoffEvent DELETE https://open.feishu.cn/open-apis/calendar/v4/timeoff_events/:timeoff_event_id failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Calendar", "DeleteCalendarTimeoffEvent", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Calendar#DeleteCalendarTimeoffEvent request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockCalendarDeleteCalendarTimeoffEvent(f func(ctx context.Context, request *DeleteCalendarTimeoffEventReq, options ...MethodOptionFunc) (*DeleteCalendarTimeoffEventResp, *Response, error)) {
	r.mockCalendarDeleteCalendarTimeoffEvent = f
}

func (r *Mock) UnMockCalendarDeleteCalendarTimeoffEvent() {
	r.mockCalendarDeleteCalendarTimeoffEvent = nil
}

type DeleteCalendarTimeoffEventReq struct {
	TimeoffEventID string `path:"timeoff_event_id" json:"-"` // 休假申请的唯一标识id, 示例值："timeoff:XXXXXX-XXXX-0917-1623-aa493d591a39"
}

type deleteCalendarTimeoffEventResp struct {
	Code int                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteCalendarTimeoffEventResp `json:"data,omitempty"`
}

type DeleteCalendarTimeoffEventResp struct{}
