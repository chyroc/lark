// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// CreateBitableField 该接口用于在数据表中新增一个字段
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-field/create
func (r *BitableService) CreateBitableField(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error) {
	if r.cli.mock.mockBitableCreateBitableField != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Bitable#CreateBitableField mock enable")
		return r.cli.mock.mockBitableCreateBitableField(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Bitable",
		API:                   "CreateBitableField",
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token/tables/:table_id/fields",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBitableFieldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

func (r *Mock) MockBitableCreateBitableField(f func(ctx context.Context, request *CreateBitableFieldReq, options ...MethodOptionFunc) (*CreateBitableFieldResp, *Response, error)) {
	r.mockBitableCreateBitableField = f
}

func (r *Mock) UnMockBitableCreateBitableField() {
	r.mockBitableCreateBitableField = nil
}

type CreateBitableFieldReq struct {
	UserIDType *IDType      `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 userid
	AppToken   string       `path:"app_token" json:"-"`     // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
	TableID    string       `path:"table_id" json:"-"`      // table id, 示例值："tblsRc9GRRXKqhvW"
	FieldName  string       `json:"field_name,omitempty"`   // 多维表格字段名, 示例值："多行文本"
	Type       int64        `json:"type,omitempty"`         // 多维表格字段类型, 示例值：1
	Property   *interface{} `json:"property,omitempty"`     // 字段属性, 示例值：[,                    {,                        "name": "选项A",                    },,                    {,                        "name": "选项B",                    },                ],
}

type createBitableFieldResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *CreateBitableFieldResp `json:"data,omitempty"`
}

type CreateBitableFieldResp struct {
	Field *CreateBitableFieldRespField `json:"field,omitempty"` // 字段
}

type CreateBitableFieldRespField struct {
	FieldID   string      `json:"field_id,omitempty"`   // 多维表格字段 id
	FieldName string      `json:"field_name,omitempty"` // 多维表格字段名
	Type      int64       `json:"type,omitempty"`       // 多维表格字段类型
	Property  interface{} `json:"property,omitempty"`   // 字段属性
}
