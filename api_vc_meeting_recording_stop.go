// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// StopMeetingRecording 在会议中停止录制。
//
// 会议正在录制中，且操作者具有相应权限（如果操作者为用户，必须是会中当前主持人）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/vc-v1/meeting-recording/stop
func (r *VCService) StopMeetingRecording(ctx context.Context, request *StopMeetingRecordingReq, options ...MethodOptionFunc) (*StopMeetingRecordingResp, *Response, error) {
	if r.cli.mock.mockVCStopMeetingRecording != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] VC#StopMeetingRecording mock enable")
		return r.cli.mock.mockVCStopMeetingRecording(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] VC#StopMeetingRecording call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] VC#StopMeetingRecording request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:       "PATCH",
		URL:          "https://open.feishu.cn/open-apis/vc/v1/meetings/:meeting_id/recording/stop",
		Body:         request,
		MethodOption: newMethodOption(options),

		NeedUserAccessToken: true,
	}
	resp := new(stopMeetingRecordingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] VC#StopMeetingRecording PATCH https://open.feishu.cn/open-apis/vc/v1/meetings/:meeting_id/recording/stop failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] VC#StopMeetingRecording PATCH https://open.feishu.cn/open-apis/vc/v1/meetings/:meeting_id/recording/stop failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("VC", "StopMeetingRecording", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] VC#StopMeetingRecording success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockVCStopMeetingRecording(f func(ctx context.Context, request *StopMeetingRecordingReq, options ...MethodOptionFunc) (*StopMeetingRecordingResp, *Response, error)) {
	r.mockVCStopMeetingRecording = f
}

func (r *Mock) UnMockVCStopMeetingRecording() {
	r.mockVCStopMeetingRecording = nil
}

type StopMeetingRecordingReq struct {
	MeetingID string `path:"meeting_id" json:"-"` // 会议ID, 示例值: "6911188411932033028"
}

type stopMeetingRecordingResp struct {
	Code int                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *StopMeetingRecordingResp `json:"data,omitempty"`
}

type StopMeetingRecordingResp struct{}
