// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// BatchGetMeetingRoomBuildingID 该接口用于根据租户自定义建筑 ID 查询建筑 ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQzMxYjL0MTM24CNzEjN
func (r *MeetingRoomService) BatchGetMeetingRoomBuildingID(ctx context.Context, request *BatchGetMeetingRoomBuildingIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingIDResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuildingID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomBuildingID mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomBuildingID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomBuildingID",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomBuildingIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomBuildingID mock MeetingRoomBatchGetMeetingRoomBuildingID method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomBuildingID(f func(ctx context.Context, request *BatchGetMeetingRoomBuildingIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomBuildingIDResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomBuildingID = f
}

// UnMockMeetingRoomBatchGetMeetingRoomBuildingID un-mock MeetingRoomBatchGetMeetingRoomBuildingID method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomBuildingID() {
	r.mockMeetingRoomBatchGetMeetingRoomBuildingID = nil
}

// BatchGetMeetingRoomBuildingIDReq ...
type BatchGetMeetingRoomBuildingIDReq struct {
	CustomBuildingIDs string `query:"custom_building_ids" json:"-"` // 用于查询指定建筑物的租户自定义建筑ID
}

// batchGetMeetingRoomBuildingIDResp ...
type batchGetMeetingRoomBuildingIDResp struct {
	Code int64                              `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                             `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomBuildingIDResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomBuildingIDResp ...
type BatchGetMeetingRoomBuildingIDResp struct {
	Buildings []*BatchGetMeetingRoomBuildingIDRespBuilding `json:"buildings,omitempty"` // 建筑列表
}

// BatchGetMeetingRoomBuildingIDRespBuilding ...
type BatchGetMeetingRoomBuildingIDRespBuilding struct {
	BuildingID       string `json:"building_id,omitempty"`        // 建筑物ID
	CustomBuildingID string `json:"custom_building_id,omitempty"` // 租户自定义建筑物ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMeetingRoomBuilding 该接口对应管理后台的添加建筑，添加楼层的功能，可用于创建建筑物和建筑物的楼层信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNwYjLwUDM24CM1AjN
func (r *MeetingRoomService) CreateMeetingRoomBuilding(ctx context.Context, request *CreateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*CreateMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomCreateMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomCreateMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "CreateMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomCreateMeetingRoomBuilding mock MeetingRoomCreateMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomCreateMeetingRoomBuilding(f func(ctx context.Context, request *CreateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*CreateMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomCreateMeetingRoomBuilding = f
}

// UnMockMeetingRoomCreateMeetingRoomBuilding un-mock MeetingRoomCreateMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomCreateMeetingRoomBuilding() {
	r.mockMeetingRoomCreateMeetingRoomBuilding = nil
}

// CreateMeetingRoomBuildingReq ...
type CreateMeetingRoomBuildingReq struct {
	Name             string   `json:"name,omitempty"`               // 建筑名称
	Floors           []string `json:"floors,omitempty"`             // 楼层列表
	CountryID        string   `json:"country_id,omitempty"`         // 国家/地区ID
	DistrictID       string   `json:"district_id,omitempty"`        // 城市ID
	CustomBuildingID *string  `json:"custom_building_id,omitempty"` // 租户自定义建筑ID
}

// createMeetingRoomBuildingResp ...
type createMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *CreateMeetingRoomBuildingResp `json:"data,omitempty"` // 返回业务信息
}

// CreateMeetingRoomBuildingResp ...
type CreateMeetingRoomBuildingResp struct {
	BuildingID string `json:"building_id,omitempty"` // 成功创建的建筑ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMeetingRoomBuilding 该接口用于删除建筑物（办公大楼）。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzMxYjLzMTM24yMzEjN
func (r *MeetingRoomService) DeleteMeetingRoomBuilding(ctx context.Context, request *DeleteMeetingRoomBuildingReq, options ...MethodOptionFunc) (*DeleteMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomDeleteMeetingRoomBuilding mock MeetingRoomDeleteMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomDeleteMeetingRoomBuilding(f func(ctx context.Context, request *DeleteMeetingRoomBuildingReq, options ...MethodOptionFunc) (*DeleteMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomBuilding = f
}

// UnMockMeetingRoomDeleteMeetingRoomBuilding un-mock MeetingRoomDeleteMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomBuilding() {
	r.mockMeetingRoomDeleteMeetingRoomBuilding = nil
}

// DeleteMeetingRoomBuildingReq ...
type DeleteMeetingRoomBuildingReq struct {
	BuildingID string `json:"building_id,omitempty"` // 要删除的建筑ID
}

// deleteMeetingRoomBuildingResp ...
type deleteMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomBuildingResp `json:"data,omitempty"`
}

// DeleteMeetingRoomBuildingResp ...
type DeleteMeetingRoomBuildingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomBuildingList 该接口用于获取本企业下的建筑物（办公大楼）。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ugzNyUjL4cjM14CO3ITN
func (r *MeetingRoomService) GetMeetingRoomBuildingList(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomBuildingList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomBuildingList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomBuildingList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomBuildingListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomBuildingList mock MeetingRoomGetMeetingRoomBuildingList method
func (r *Mock) MockMeetingRoomGetMeetingRoomBuildingList(f func(ctx context.Context, request *GetMeetingRoomBuildingListReq, options ...MethodOptionFunc) (*GetMeetingRoomBuildingListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomBuildingList = f
}

// UnMockMeetingRoomGetMeetingRoomBuildingList un-mock MeetingRoomGetMeetingRoomBuildingList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomBuildingList() {
	r.mockMeetingRoomGetMeetingRoomBuildingList = nil
}

// GetMeetingRoomBuildingListReq ...
type GetMeetingRoomBuildingListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 请求期望返回的建筑物数量，不足则返回全部，该值默认为 10，最大为 100
	PageToken *string `query:"page_token" json:"-"` // 用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素
	OrderBy   *string `query:"order_by" json:"-"`   // 提供用于对名称进行升序/降序排序的方式查询，可选项有："name-asc,name-desc"，传入其他字符串不做处理，默认无序
	Fields    *string `query:"fields" json:"-"`     // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,floors"，默认返回所有字段
}

// getMeetingRoomBuildingListResp ...
type getMeetingRoomBuildingListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomBuildingListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomBuildingListResp ...
type GetMeetingRoomBuildingListResp struct {
	PageToken string                                    `json:"page_token,omitempty"` // 分页标记，存在下一页时返回
	HasMore   bool                                      `json:"has_more,omitempty"`   // 存在下一页时，该值为 true，否则为 false
	Buildings []*GetMeetingRoomBuildingListRespBuilding `json:"buildings,omitempty"`  // 建筑列表
}

// GetMeetingRoomBuildingListRespBuilding ...
type GetMeetingRoomBuildingListRespBuilding struct {
	BuildingID  string   `json:"building_id,omitempty"` // 建筑物 ID
	Description string   `json:"description,omitempty"` // 建筑物的相关描述
	Floors      []string `json:"floors,omitempty"`      // 属于当前建筑物的所有楼层列表
	Name        string   `json:"name,omitempty"`        // 建筑物名称
	CountryID   string   `json:"country_id,omitempty"`  // 所属国家 ID
	DistrictID  string   `json:"district_id,omitempty"` // 所属城市 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMeetingRoomBuilding 该接口用于编辑建筑信息，添加楼层，删除楼层，编辑楼层信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETNwYjLxUDM24SM1AjN
func (r *MeetingRoomService) UpdateMeetingRoomBuilding(ctx context.Context, request *UpdateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*UpdateMeetingRoomBuildingResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomUpdateMeetingRoomBuilding != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#UpdateMeetingRoomBuilding mock enable")
		return r.cli.mock.mockMeetingRoomUpdateMeetingRoomBuilding(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "UpdateMeetingRoomBuilding",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/building/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMeetingRoomBuildingResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomUpdateMeetingRoomBuilding mock MeetingRoomUpdateMeetingRoomBuilding method
func (r *Mock) MockMeetingRoomUpdateMeetingRoomBuilding(f func(ctx context.Context, request *UpdateMeetingRoomBuildingReq, options ...MethodOptionFunc) (*UpdateMeetingRoomBuildingResp, *Response, error)) {
	r.mockMeetingRoomUpdateMeetingRoomBuilding = f
}

// UnMockMeetingRoomUpdateMeetingRoomBuilding un-mock MeetingRoomUpdateMeetingRoomBuilding method
func (r *Mock) UnMockMeetingRoomUpdateMeetingRoomBuilding() {
	r.mockMeetingRoomUpdateMeetingRoomBuilding = nil
}

// UpdateMeetingRoomBuildingReq ...
type UpdateMeetingRoomBuildingReq struct {
	BuildingID       string   `json:"building_id,omitempty"`        // 要更新的建筑ID
	Name             *string  `json:"name,omitempty"`               // 建筑名称
	Floors           []string `json:"floors,omitempty"`             // 楼层列表
	CountryID        *string  `json:"country_id,omitempty"`         // 国家/地区ID
	DistrictID       *string  `json:"district_id,omitempty"`        // 城市ID
	CustomBuildingID *string  `json:"custom_building_id,omitempty"` // 租户自定义建筑ID
}

// updateMeetingRoomBuildingResp ...
type updateMeetingRoomBuildingResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *UpdateMeetingRoomBuildingResp `json:"data,omitempty"`
}

// UpdateMeetingRoomBuildingResp ...
type UpdateMeetingRoomBuildingResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomCountryList 新建建筑时需要标明所处国家/地区，该接口用于获得系统预先提供的可供选择的国家 /地区列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTNwYjL0UDM24CN1AjN
func (r *MeetingRoomService) GetMeetingRoomCountryList(ctx context.Context, request *GetMeetingRoomCountryListReq, options ...MethodOptionFunc) (*GetMeetingRoomCountryListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomCountryList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomCountryList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomCountryList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomCountryList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/country/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomCountryListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomCountryList mock MeetingRoomGetMeetingRoomCountryList method
func (r *Mock) MockMeetingRoomGetMeetingRoomCountryList(f func(ctx context.Context, request *GetMeetingRoomCountryListReq, options ...MethodOptionFunc) (*GetMeetingRoomCountryListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomCountryList = f
}

// UnMockMeetingRoomGetMeetingRoomCountryList un-mock MeetingRoomGetMeetingRoomCountryList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomCountryList() {
	r.mockMeetingRoomGetMeetingRoomCountryList = nil
}

// GetMeetingRoomCountryListReq ...
type GetMeetingRoomCountryListReq struct{}

// getMeetingRoomCountryListResp ...
type getMeetingRoomCountryListResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomCountryListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomCountryListResp ...
type GetMeetingRoomCountryListResp struct {
	Countries *GetMeetingRoomCountryListRespCountries `json:"countries,omitempty"` // 国家地区列表
}

// GetMeetingRoomCountryListRespCountries ...
type GetMeetingRoomCountryListRespCountries struct {
	CountryID string `json:"country_id,omitempty"` // 国家地区ID
	Name      string `json:"name,omitempty"`       // 国家地区名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomCustomization
//
// 该接口用于获取会议室个性化配置。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM5UjLyITO14iMykTN/query-meeting-room-customization-setting
func (r *MeetingRoomService) GetMeetingRoomCustomization(ctx context.Context, request *GetMeetingRoomCustomizationReq, options ...MethodOptionFunc) (*GetMeetingRoomCustomizationResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomCustomization != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomCustomization mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomCustomization(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomCustomization",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/customization",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomCustomizationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomCustomization mock MeetingRoomGetMeetingRoomCustomization method
func (r *Mock) MockMeetingRoomGetMeetingRoomCustomization(f func(ctx context.Context, request *GetMeetingRoomCustomizationReq, options ...MethodOptionFunc) (*GetMeetingRoomCustomizationResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomCustomization = f
}

// UnMockMeetingRoomGetMeetingRoomCustomization un-mock MeetingRoomGetMeetingRoomCustomization method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomCustomization() {
	r.mockMeetingRoomGetMeetingRoomCustomization = nil
}

// GetMeetingRoomCustomizationReq ...
type GetMeetingRoomCustomizationReq struct {
	RoomIDs []string `json:"room_ids,omitempty"` // 要获取的会议室ID列表
}

// getMeetingRoomCustomizationResp ...
type getMeetingRoomCustomizationResp struct {
	Code int64                            `json:"code,omitempty"`
	Msg  string                           `json:"msg,omitempty"`
	Data *GetMeetingRoomCustomizationResp `json:"data,omitempty"`
}

// GetMeetingRoomCustomizationResp ...
type GetMeetingRoomCustomizationResp struct {
	ErrorRoomIDs          *GetMeetingRoomCustomizationRespErrorRoomIDs          `json:"error_room_ids,omitempty"`           // 返回错误的入参
	RoomIDToCustomization *GetMeetingRoomCustomizationRespRoomIDToCustomization `json:"room_id_to_customization,omitempty"` // 会议室ID-个性化配置的映射
}

// GetMeetingRoomCustomizationRespErrorRoomIDs ...
type GetMeetingRoomCustomizationRespErrorRoomIDs struct {
	BuildingID *GetMeetingRoomCustomizationRespErrorRoomIDBuildingID `json:"building_id,omitempty"` // 建筑id
}

// GetMeetingRoomCustomizationRespErrorRoomIDBuildingID ...
type GetMeetingRoomCustomizationRespErrorRoomIDBuildingID struct {
	RoomID   string `json:"room_id,omitempty"`   // 会议室id
	ErrorMsg string `json:"error_msg,omitempty"` // 错误信息
}

// GetMeetingRoomCustomizationRespRoomIDToCustomization ...
type GetMeetingRoomCustomizationRespRoomIDToCustomization struct {
	RoomID *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID `json:"room_id,omitempty"` // 会议室ID
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomID struct {
	ContactIDs        []int64                                                                      `json:"contact_ids,omitempty"`        // 准备会议室个性化的相关配置的人员ID列表
	CustomizationData *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData `json:"customization_data,omitempty"` // 个性化配置数据
	PreparationTime   int64                                                                        `json:"preparation_time,omitempty"`   // 准备时间
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationData struct {
	Conditions        *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions `json:"conditions,omitempty"`         // 问卷的显示条件，当条件满足时，该问卷才会出现让用户进行选择
	CustomizationType int64                                                                                  `json:"customization_type,omitempty"` // 问卷的类型，1表示单选，2表示多选，3表示填空
	IndexKey          string                                                                                 `json:"index_key,omitempty"`          // 每个问卷的独立id
	InputContent      string                                                                                 `json:"input_content,omitempty"`      // 当type类型为填空时，该参数需要填入
	IsRequired        bool                                                                                   `json:"is_required,omitempty"`        // 当type类型为填空时，该参数需要填入
	Label             string                                                                                 `json:"label,omitempty"`              // 每个问卷的问题
	Options           *GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions    `json:"options,omitempty"`            // 每个问卷的选项
	PlaceHolder       string                                                                                 `json:"place_holder,omitempty"`       // 填空题在未填写时的填充文案
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataConditions struct {
	CustomKey  string   `json:"custom_key,omitempty"`  // 该custom_key对应的index_key选中后，问卷才会显示
	OptionKeys []string `json:"option_keys,omitempty"` // 所有的option都被选中后，问卷才会显示
}

// GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions ...
type GetMeetingRoomCustomizationRespRoomIDToCustomizationRoomIDCustomizationDataOptions struct {
	IsOthers       bool   `json:"is_others,omitempty"`        // 是否是其他选项
	IsSelected     bool   `json:"is_selected,omitempty"`      // 该选项是否勾选
	OptionImageURL string `json:"option_image_url,omitempty"` // 选项的图片
	OptionKey      string `json:"option_key,omitempty"`       // 每个选项的唯一id
	OptionLabel    string `json:"option_label,omitempty"`     // 每个问卷的选项
	OthersContent  string `json:"others_content,omitempty"`   // 其他选项的输入内容
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomDistrictList 新建建筑时需要选择所处国家/地区，该接口用于获得系统预先提供的可供选择的城市列表。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTNwYjL1UDM24SN1AjN
func (r *MeetingRoomService) GetMeetingRoomDistrictList(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomDistrictList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomDistrictList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomDistrictList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/district/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomDistrictListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomDistrictList mock MeetingRoomGetMeetingRoomDistrictList method
func (r *Mock) MockMeetingRoomGetMeetingRoomDistrictList(f func(ctx context.Context, request *GetMeetingRoomDistrictListReq, options ...MethodOptionFunc) (*GetMeetingRoomDistrictListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomDistrictList = f
}

// UnMockMeetingRoomGetMeetingRoomDistrictList un-mock MeetingRoomGetMeetingRoomDistrictList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomDistrictList() {
	r.mockMeetingRoomGetMeetingRoomDistrictList = nil
}

// GetMeetingRoomDistrictListReq ...
type GetMeetingRoomDistrictListReq struct {
	CountryID int64 `query:"country_id" json:"-"` // 国家地区ID
}

// getMeetingRoomDistrictListResp ...
type getMeetingRoomDistrictListResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomDistrictListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomDistrictListResp ...
type GetMeetingRoomDistrictListResp struct {
	Districts []*GetMeetingRoomDistrictListRespDistrict `json:"districts,omitempty"` // 城市列表
}

// GetMeetingRoomDistrictListRespDistrict ...
type GetMeetingRoomDistrictListRespDistrict struct {
	DistrictID string `json:"district_id,omitempty"` // 城市ID
	Name       string `json:"name,omitempty"`        // 城市名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomFreebusy 该接口用于获取指定会议室的忙闲日程实例列表。非重复日程只有唯一实例；重复日程可能存在多个实例，依据重复规则和时间范围扩展。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIDOyUjLygjM14iM4ITN
func (r *MeetingRoomService) BatchGetMeetingRoomFreebusy(ctx context.Context, request *BatchGetMeetingRoomFreebusyReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomFreebusyResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomFreebusy != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomFreebusy mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomFreebusy(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomFreebusy",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/freebusy/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomFreebusyResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomFreebusy mock MeetingRoomBatchGetMeetingRoomFreebusy method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomFreebusy(f func(ctx context.Context, request *BatchGetMeetingRoomFreebusyReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomFreebusyResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomFreebusy = f
}

// UnMockMeetingRoomBatchGetMeetingRoomFreebusy un-mock MeetingRoomBatchGetMeetingRoomFreebusy method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomFreebusy() {
	r.mockMeetingRoomBatchGetMeetingRoomFreebusy = nil
}

// BatchGetMeetingRoomFreebusyReq ...
type BatchGetMeetingRoomFreebusyReq struct {
	RoomIDs []string `query:"room_ids" json:"-"` // 用于查询指定会议室的 ID
	TimeMin string   `query:"time_min" json:"-"` // 查询会议室忙闲的起始时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
	TimeMax string   `query:"time_max" json:"-"` // 查询会议室忙闲的结束时间，需要遵循格式 [RFC3339](https://tools.ietf.org/html/rfc3339)，需要进行URL Encode
}

// batchGetMeetingRoomFreebusyResp ...
type batchGetMeetingRoomFreebusyResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomFreebusyResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomFreebusyResp ...
type BatchGetMeetingRoomFreebusyResp struct {
	TimeMin  string                                   `json:"time_min,omitempty"`  // 查询会议室忙闲的起始时间，与请求参数完全相同
	TimeMax  string                                   `json:"time_max,omitempty"`  // 查询会议室忙闲的结束时间，与请求参数完全相同
	FreeBusy *BatchGetMeetingRoomFreebusyRespFreeBusy `json:"free_busy,omitempty"` // 会议室忙闲列表
}

// BatchGetMeetingRoomFreebusyRespFreeBusy ...
type BatchGetMeetingRoomFreebusyRespFreeBusy struct {
	RoomID *BatchGetMeetingRoomFreebusyRespFreeBusyRoomID `json:"room_id,omitempty"` // 与请求合法参数相同，表示之后是对应会议室的忙闲状态
}

// BatchGetMeetingRoomFreebusyRespFreeBusyRoomID ...
type BatchGetMeetingRoomFreebusyRespFreeBusyRoomID struct {
	StartTime     string                                                      `json:"start_time,omitempty"`     // 忙碌起始时间
	EndTime       string                                                      `json:"end_time,omitempty"`       // 忙碌结束时间
	Uid           string                                                      `json:"uid,omitempty"`            // 日程 ID
	OriginalTime  int64                                                       `json:"original_time,omitempty"`  // 日程实例的原始时间, 非重复日程以及重复性日程的原日程为0，重复性日程的例外日程为非0
	OrganizerInfo *BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo `json:"organizer_info,omitempty"` // 组织者信息, 私密日程不返回该信息
}

// BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo ...
type BatchGetMeetingRoomFreebusyRespFreeBusyRoomIDOrganizerInfo struct {
	Name   string `json:"name,omitempty"`    // 组织者姓名
	OpenID string `json:"open_id,omitempty"` // 组织者 open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ReplyMeetingRoomInstance 该接口用于回复会议室日程实例，包括未签到释放和提前结束释放。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzN4UjL2cDO14iN3gTN
func (r *MeetingRoomService) ReplyMeetingRoomInstance(ctx context.Context, request *ReplyMeetingRoomInstanceReq, options ...MethodOptionFunc) (*ReplyMeetingRoomInstanceResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomReplyMeetingRoomInstance != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#ReplyMeetingRoomInstance mock enable")
		return r.cli.mock.mockMeetingRoomReplyMeetingRoomInstance(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "ReplyMeetingRoomInstance",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/instance/reply",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(replyMeetingRoomInstanceResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomReplyMeetingRoomInstance mock MeetingRoomReplyMeetingRoomInstance method
func (r *Mock) MockMeetingRoomReplyMeetingRoomInstance(f func(ctx context.Context, request *ReplyMeetingRoomInstanceReq, options ...MethodOptionFunc) (*ReplyMeetingRoomInstanceResp, *Response, error)) {
	r.mockMeetingRoomReplyMeetingRoomInstance = f
}

// UnMockMeetingRoomReplyMeetingRoomInstance un-mock MeetingRoomReplyMeetingRoomInstance method
func (r *Mock) UnMockMeetingRoomReplyMeetingRoomInstance() {
	r.mockMeetingRoomReplyMeetingRoomInstance = nil
}

// ReplyMeetingRoomInstanceReq ...
type ReplyMeetingRoomInstanceReq struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室的 ID
	Uid          string `json:"uid,omitempty"`           // 会议室的日程 ID
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。重复日程若为0则表示回复其所有实例，否则表示回复单个实例。
	Status       string `json:"status,omitempty"`        // 回复状态，NOT_CHECK_IN 表示未签到，ENDED_BEFORE_DUE 表示提前结束，ACCEPTED_BY_ADMIN 表示被管理员置为接受，DECLINED_BY_ADMIN 表示被管理员置为拒绝
}

// replyMeetingRoomInstanceResp ...
type replyMeetingRoomInstanceResp struct {
	Code int64                         `json:"code,omitempty"` // 返回码，非 0 表示失败。105003表示 original_time 非法，此时可能是重复日程的整个开始时间被修改，建议应用重新查询会议室日程实例列表，获取最新的 original_time。
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *ReplyMeetingRoomInstanceResp `json:"data,omitempty"`
}

// ReplyMeetingRoomInstanceResp ...
type ReplyMeetingRoomInstanceResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomRoom 该接口用于获取指定会议室的详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uEDOyUjLxgjM14SM4ITN
func (r *MeetingRoomService) BatchGetMeetingRoomRoom(ctx context.Context, request *BatchGetMeetingRoomRoomReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomRoom",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomRoom mock MeetingRoomBatchGetMeetingRoomRoom method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomRoom(f func(ctx context.Context, request *BatchGetMeetingRoomRoomReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomRoom = f
}

// UnMockMeetingRoomBatchGetMeetingRoomRoom un-mock MeetingRoomBatchGetMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomRoom() {
	r.mockMeetingRoomBatchGetMeetingRoomRoom = nil
}

// BatchGetMeetingRoomRoomReq ...
type BatchGetMeetingRoomRoomReq struct {
	RoomIDs []string `query:"room_ids" json:"-"` // 用于查询指定会议室的 ID
	Fields  *string  `query:"fields" json:"-"`   // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段
}

// batchGetMeetingRoomRoomResp ...
type batchGetMeetingRoomRoomResp struct {
	Code int64                        `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomRoomResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomRoomResp ...
type BatchGetMeetingRoomRoomResp struct {
	Rooms []*BatchGetMeetingRoomRoomRespRoom `json:"rooms,omitempty"` // 会议室列表
}

// BatchGetMeetingRoomRoomRespRoom ...
type BatchGetMeetingRoomRoomRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室 ID
	BuildingID   string `json:"building_id,omitempty"`   // 会议室所属建筑物 ID
	BuildingName string `json:"building_name,omitempty"` // 会议室所属建筑物名称
	Capacity     int64  `json:"capacity,omitempty"`      // 会议室能容纳的人数
	Description  string `json:"description,omitempty"`   // 会议室的相关描述
	DisplayID    string `json:"display_id,omitempty"`    // 会议室的展示 ID
	FloorName    string `json:"floor_name,omitempty"`    // 会议室所在楼层名称
	IsDisabled   bool   `json:"is_disabled,omitempty"`   // 会议室是否不可用，若会议室不可用，则该值为 true，否则为 false
	Name         string `json:"name,omitempty"`          // 会议室名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomRoomID 该接口用于根据租户自定义会议室ID查询会议室ID。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYzMxYjL2MTM24iNzEjN
func (r *MeetingRoomService) BatchGetMeetingRoomRoomID(ctx context.Context, request *BatchGetMeetingRoomRoomIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomIDResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoomID != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomRoomID mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomRoomID(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomRoomID",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/batch_get_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomRoomIDResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomRoomID mock MeetingRoomBatchGetMeetingRoomRoomID method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomRoomID(f func(ctx context.Context, request *BatchGetMeetingRoomRoomIDReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomRoomIDResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomRoomID = f
}

// UnMockMeetingRoomBatchGetMeetingRoomRoomID un-mock MeetingRoomBatchGetMeetingRoomRoomID method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomRoomID() {
	r.mockMeetingRoomBatchGetMeetingRoomRoomID = nil
}

// BatchGetMeetingRoomRoomIDReq ...
type BatchGetMeetingRoomRoomIDReq struct {
	CustomRoomIDs string `query:"custom_room_ids" json:"-"` // 用于查询指定会议室的租户自定义会议室ID
}

// batchGetMeetingRoomRoomIDResp ...
type batchGetMeetingRoomRoomIDResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomRoomIDResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomRoomIDResp ...
type BatchGetMeetingRoomRoomIDResp struct {
	Rooms []*BatchGetMeetingRoomRoomIDRespRoom `json:"rooms,omitempty"` // 会议室列表
}

// BatchGetMeetingRoomRoomIDRespRoom ...
type BatchGetMeetingRoomRoomIDRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`        // 会议室 ID
	CustomRoomID string `json:"custom_room_id,omitempty"` // 租户自定义会议室 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateMeetingRoomRoom 该接口用于创建会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITNwYjLyUDM24iM1AjN
func (r *MeetingRoomService) CreateMeetingRoomRoom(ctx context.Context, request *CreateMeetingRoomRoomReq, options ...MethodOptionFunc) (*CreateMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomCreateMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#CreateMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomCreateMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "CreateMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/create",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomCreateMeetingRoomRoom mock MeetingRoomCreateMeetingRoomRoom method
func (r *Mock) MockMeetingRoomCreateMeetingRoomRoom(f func(ctx context.Context, request *CreateMeetingRoomRoomReq, options ...MethodOptionFunc) (*CreateMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomCreateMeetingRoomRoom = f
}

// UnMockMeetingRoomCreateMeetingRoomRoom un-mock MeetingRoomCreateMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomCreateMeetingRoomRoom() {
	r.mockMeetingRoomCreateMeetingRoomRoom = nil
}

// CreateMeetingRoomRoomReq ...
type CreateMeetingRoomRoomReq struct {
	BuildingID   string  `json:"building_id,omitempty"`    // 会议室所在的建筑ID
	Floor        string  `json:"floor,omitempty"`          // 会议室所在的建筑楼层
	Name         string  `json:"name,omitempty"`           // 会议室名称
	Capacity     int64   `json:"capacity,omitempty"`       // 容量
	IsDisabled   bool    `json:"is_disabled,omitempty"`    // 是否禁用
	CustomRoomID *string `json:"custom_room_id,omitempty"` // 租户自定义会议室ID
}

// createMeetingRoomRoomResp ...
type createMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *CreateMeetingRoomRoomResp `json:"data,omitempty"` // 返回业务信息
}

// CreateMeetingRoomRoomResp ...
type CreateMeetingRoomRoomResp struct {
	RoomID string `json:"room_id,omitempty"` // 成功创建的会议室ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteMeetingRoomRoom 该接口用于删除会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUzMxYjL1MTM24SNzEjN
func (r *MeetingRoomService) DeleteMeetingRoomRoom(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#DeleteMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomDeleteMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "DeleteMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/delete",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(deleteMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomDeleteMeetingRoomRoom mock MeetingRoomDeleteMeetingRoomRoom method
func (r *Mock) MockMeetingRoomDeleteMeetingRoomRoom(f func(ctx context.Context, request *DeleteMeetingRoomRoomReq, options ...MethodOptionFunc) (*DeleteMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomDeleteMeetingRoomRoom = f
}

// UnMockMeetingRoomDeleteMeetingRoomRoom un-mock MeetingRoomDeleteMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomDeleteMeetingRoomRoom() {
	r.mockMeetingRoomDeleteMeetingRoomRoom = nil
}

// DeleteMeetingRoomRoomReq ...
type DeleteMeetingRoomRoomReq struct {
	RoomID string `json:"room_id,omitempty"` // 要删除的会议室ID
}

// deleteMeetingRoomRoomResp ...
type deleteMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *DeleteMeetingRoomRoomResp `json:"data,omitempty"`
}

// DeleteMeetingRoomRoomResp ...
type DeleteMeetingRoomRoomResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetMeetingRoomRoomList 该接口用于获取指定建筑下的会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADOyUjLwgjM14CM4ITN
func (r *MeetingRoomService) GetMeetingRoomRoomList(ctx context.Context, request *GetMeetingRoomRoomListReq, options ...MethodOptionFunc) (*GetMeetingRoomRoomListResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomGetMeetingRoomRoomList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#GetMeetingRoomRoomList mock enable")
		return r.cli.mock.mockMeetingRoomGetMeetingRoomRoomList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "GetMeetingRoomRoomList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getMeetingRoomRoomListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomGetMeetingRoomRoomList mock MeetingRoomGetMeetingRoomRoomList method
func (r *Mock) MockMeetingRoomGetMeetingRoomRoomList(f func(ctx context.Context, request *GetMeetingRoomRoomListReq, options ...MethodOptionFunc) (*GetMeetingRoomRoomListResp, *Response, error)) {
	r.mockMeetingRoomGetMeetingRoomRoomList = f
}

// UnMockMeetingRoomGetMeetingRoomRoomList un-mock MeetingRoomGetMeetingRoomRoomList method
func (r *Mock) UnMockMeetingRoomGetMeetingRoomRoomList() {
	r.mockMeetingRoomGetMeetingRoomRoomList = nil
}

// GetMeetingRoomRoomListReq ...
type GetMeetingRoomRoomListReq struct {
	BuildingID string  `query:"building_id" json:"-"` // 被查询的建筑物 ID
	PageSize   *int64  `query:"page_size" json:"-"`   // 请求期望返回的会议室数量，不足则返回全部，该值默认为 100，最大为 1000
	PageToken  *string `query:"page_token" json:"-"`  // 用于标记当前请求的分页标记，将返回以当前分页标记开始，往后 page_size 个元素
	OrderBy    *string `query:"order_by" json:"-"`    // 提供用于对名称/楼层进行升序/降序排序的方式查询，可选项有："name-asc,name-desc,floor_name-asc,floor_name-desc"，传入其他字符串不做处理，默认无序
	Fields     *string `query:"fields" json:"-"`      // 用于指定返回的字段名，每个字段名之间用逗号 "," 分隔，如：“id,name”，"*" 表示返回全部字段，可选字段有："id,name,description,capacity,building_id,building_name,floor_name,is_disabled,display_id"，默认返回所有字段
}

// getMeetingRoomRoomListResp ...
type getMeetingRoomRoomListResp struct {
	Code int64                       `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *GetMeetingRoomRoomListResp `json:"data,omitempty"` // 返回业务信息
}

// GetMeetingRoomRoomListResp ...
type GetMeetingRoomRoomListResp struct {
	PageToken string                            `json:"page_token,omitempty"` // 分页标记，存在下一页时返回
	HasMore   bool                              `json:"has_more,omitempty"`   // 存在下一页时，该值为 true，否则为 false
	Rooms     []*GetMeetingRoomRoomListRespRoom `json:"rooms,omitempty"`      // 会议室列表
}

// GetMeetingRoomRoomListRespRoom ...
type GetMeetingRoomRoomListRespRoom struct {
	RoomID       string `json:"room_id,omitempty"`       // 会议室 ID
	BuildingID   string `json:"building_id,omitempty"`   // 会议室所属建筑物 ID
	BuildingName string `json:"building_name,omitempty"` // 会议室所属建筑物名称
	Capacity     int64  `json:"capacity,omitempty"`      // 会议室能容纳的人数
	Description  string `json:"description,omitempty"`   // 会议室的相关描述
	DisplayID    string `json:"display_id,omitempty"`    // 会议室的展示 ID
	FloorName    string `json:"floor_name,omitempty"`    // 会议室所在楼层名称
	IsDisabled   bool   `json:"is_disabled,omitempty"`   // 会议室是否不可用，若会议室不可用，则该值为 true，否则为 false
	Name         string `json:"name,omitempty"`          // 会议室名称
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateMeetingRoomRoom 该接口用于更新会议室。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTNwYjLzUDM24yM1AjN
func (r *MeetingRoomService) UpdateMeetingRoomRoom(ctx context.Context, request *UpdateMeetingRoomRoomReq, options ...MethodOptionFunc) (*UpdateMeetingRoomRoomResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomUpdateMeetingRoomRoom != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#UpdateMeetingRoomRoom mock enable")
		return r.cli.mock.mockMeetingRoomUpdateMeetingRoomRoom(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "UpdateMeetingRoomRoom",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/room/update",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateMeetingRoomRoomResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomUpdateMeetingRoomRoom mock MeetingRoomUpdateMeetingRoomRoom method
func (r *Mock) MockMeetingRoomUpdateMeetingRoomRoom(f func(ctx context.Context, request *UpdateMeetingRoomRoomReq, options ...MethodOptionFunc) (*UpdateMeetingRoomRoomResp, *Response, error)) {
	r.mockMeetingRoomUpdateMeetingRoomRoom = f
}

// UnMockMeetingRoomUpdateMeetingRoomRoom un-mock MeetingRoomUpdateMeetingRoomRoom method
func (r *Mock) UnMockMeetingRoomUpdateMeetingRoomRoom() {
	r.mockMeetingRoomUpdateMeetingRoomRoom = nil
}

// UpdateMeetingRoomRoomReq ...
type UpdateMeetingRoomRoomReq struct {
	RoomID       string  `json:"room_id,omitempty"`        // 要更新的会议室ID
	Name         *string `json:"name,omitempty"`           // 会议室名称
	Capacity     *int64  `json:"capacity,omitempty"`       // 容量
	CustomRoomID *string `json:"custom_room_id,omitempty"` // 租户自定义会议室ID
}

// updateMeetingRoomRoomResp ...
type updateMeetingRoomRoomResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *UpdateMeetingRoomRoomResp `json:"data,omitempty"`
}

// UpdateMeetingRoomRoomResp ...
type UpdateMeetingRoomRoomResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchGetMeetingRoomSummary 通过日程的Uid和Original time，查询会议室日程主题。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM5UjLyITO14iMykTN/
func (r *MeetingRoomService) BatchGetMeetingRoomSummary(ctx context.Context, request *BatchGetMeetingRoomSummaryReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomSummaryResp, *Response, error) {
	if r.cli.mock.mockMeetingRoomBatchGetMeetingRoomSummary != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] MeetingRoom#BatchGetMeetingRoomSummary mock enable")
		return r.cli.mock.mockMeetingRoomBatchGetMeetingRoomSummary(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "MeetingRoom",
		API:                   "BatchGetMeetingRoomSummary",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/meeting_room/summary/batch_get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchGetMeetingRoomSummaryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMeetingRoomBatchGetMeetingRoomSummary mock MeetingRoomBatchGetMeetingRoomSummary method
func (r *Mock) MockMeetingRoomBatchGetMeetingRoomSummary(f func(ctx context.Context, request *BatchGetMeetingRoomSummaryReq, options ...MethodOptionFunc) (*BatchGetMeetingRoomSummaryResp, *Response, error)) {
	r.mockMeetingRoomBatchGetMeetingRoomSummary = f
}

// UnMockMeetingRoomBatchGetMeetingRoomSummary un-mock MeetingRoomBatchGetMeetingRoomSummary method
func (r *Mock) UnMockMeetingRoomBatchGetMeetingRoomSummary() {
	r.mockMeetingRoomBatchGetMeetingRoomSummary = nil
}

// BatchGetMeetingRoomSummaryReq ...
type BatchGetMeetingRoomSummaryReq struct {
	EventUids *BatchGetMeetingRoomSummaryReqEventUid `json:"EventUids,omitempty"` // 需要查询的日程Uid和Original time
}

// BatchGetMeetingRoomSummaryReqEventUid ...
type BatchGetMeetingRoomSummaryReqEventUid struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。若为0则表示回复其重复日程的名字（不包含重复日程中的单个例外），否则表示回复单个实例。
}

// batchGetMeetingRoomSummaryResp ...
type batchGetMeetingRoomSummaryResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述，"success" 表示成功，其他为错误提示信息
	Data *BatchGetMeetingRoomSummaryResp `json:"data,omitempty"` // 返回业务信息
}

// BatchGetMeetingRoomSummaryResp ...
type BatchGetMeetingRoomSummaryResp struct {
	EventInfos     *BatchGetMeetingRoomSummaryRespEventInfo     `json:"EventInfos,omitempty"`     // 成功查询到的日程信息
	ErrorEventUids *BatchGetMeetingRoomSummaryRespErrorEventUid `json:"ErrorEventUids,omitempty"` // 没有查询到的日程
}

// BatchGetMeetingRoomSummaryRespEventInfo ...
type BatchGetMeetingRoomSummaryRespEventInfo struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。重复日程若为0则表示回复其所有实例，否则表示回复单个实例。
	Summary      string `json:"summary,omitempty"`       // 日程主题
}

// BatchGetMeetingRoomSummaryRespErrorEventUid ...
type BatchGetMeetingRoomSummaryRespErrorEventUid struct {
	Uid          string `json:"uid,omitempty"`           // 日程的唯一id
	OriginalTime int64  `json:"original_time,omitempty"` // 日程实例原始时间，非重复日程必为0。若为0则表示回复其重复日程的名字（不包含重复日程中的单个例外），否则表示回复单个实例。
	ErrorMsg     string `json:"error_msg,omitempty"`     // 错误信息
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// BatchDeleteMessage 批量撤回消息
//
// 注意事项：
// - 只能撤回通过[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口产生的消息，单条消息的撤回请使用[撤回消息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/delete)接口
// - 路径参数**batch_message_id**为[批量发送消息](https://open.feishu.cn/document/ukTMukTMukTM/ucDO1EjL3gTNx4yN4UTM)接口返回值中的**message_id**字段，用于标识一次批量发送消息请求，格式为：**bm-xxx**
// - 一次调用涉及大量消息，所以为异步接口，会有一定延迟。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/batch_message/delete
func (r *MessageService) BatchDeleteMessage(ctx context.Context, request *BatchDeleteMessageReq, options ...MethodOptionFunc) (*BatchDeleteMessageResp, *Response, error) {
	if r.cli.mock.mockMessageBatchDeleteMessage != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Message#BatchDeleteMessage mock enable")
		return r.cli.mock.mockMessageBatchDeleteMessage(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Message",
		API:                   "BatchDeleteMessage",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/batch_messages/:batch_message_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(batchDeleteMessageResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockMessageBatchDeleteMessage mock MessageBatchDeleteMessage method
func (r *Mock) MockMessageBatchDeleteMessage(f func(ctx context.Context, request *BatchDeleteMessageReq, options ...MethodOptionFunc) (*BatchDeleteMessageResp, *Response, error)) {
	r.mockMessageBatchDeleteMessage = f
}

// UnMockMessageBatchDeleteMessage un-mock MessageBatchDeleteMessage method
func (r *Mock) UnMockMessageBatchDeleteMessage() {
	r.mockMessageBatchDeleteMessage = nil
}

// BatchDeleteMessageReq ...
type BatchDeleteMessageReq struct {
	BatchMessageID string `path:"batch_message_id" json:"-"` // 待撤回的批量消息的ID, 示例值："bm-dc13264520392913993dd051dba21dcf"
}

// batchDeleteMessageResp ...
type batchDeleteMessageResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *BatchDeleteMessageResp `json:"data,omitempty"`
}

// BatchDeleteMessageResp ...
type BatchDeleteMessageResp struct{}
