// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetMeta 通过 app_token 获取多维表格元数据
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app/get
func (r *BitableService) GetMeta(ctx context.Context, request *GetMetaReq, options ...MethodOptionFunc) (*GetMetaResp, *Response, error) {
	if r.cli.mock.mockBitableGetMeta != nil {
		r.cli.logDebug(ctx, "[lark] Bitable#GetMeta mock enable")
		return r.cli.mock.mockBitableGetMeta(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Bitable#GetMeta call api")
	r.cli.logDebug(ctx, "[lark] Bitable#GetMeta request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:              "GET",
		URL:                 "https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getMetaResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Bitable#GetMeta GET https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Bitable#GetMeta GET https://open.feishu.cn/open-apis/bitable/v1/apps/:app_token failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Bitable", "GetMeta", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Bitable#GetMeta request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockBitableGetMeta(f func(ctx context.Context, request *GetMetaReq, options ...MethodOptionFunc) (*GetMetaResp, *Response, error)) {
	r.mockBitableGetMeta = f
}

func (r *Mock) UnMockBitableGetMeta() {
	r.mockBitableGetMeta = nil
}

type GetMetaReq struct {
	AppToken string `path:"app_token" json:"-"` // bitable app token, 示例值："appbcbWCzen6D8dezhoCH2RpMAh"
}

type getMetaResp struct {
	Code int          `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string       `json:"msg,omitempty"`  // 错误描述
	Data *GetMetaResp `json:"data,omitempty"` //
}

type GetMetaResp struct {
	App *GetMetaRespApp `json:"app,omitempty"` // 多维表格元数据
}

type GetMetaRespApp struct {
	AppToken string `json:"app_token,omitempty"` // 多维表格的 app_token
	Revision int    `json:"revision,omitempty"`  // 多维表格的版本号
}
