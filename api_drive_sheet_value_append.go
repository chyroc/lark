// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// AppendSheetValue 该接口用于根据 spreadsheetToken 和 range 遇到空行则进行覆盖追加或新增行追加数据。 空行：默认该行第一个格子是空，则认为是空行；单次写入不超过5000行，100列，每个格子大小为0.5M。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjMzUjLzIzM14yMyMTN
func (r *DriveService) AppendSheetValue(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error) {
	if r.cli.mock.mockDriveAppendSheetValue != nil {
		r.cli.logDebug(ctx, "[lark] Drive#AppendSheetValue mock enable")
		return r.cli.mock.mockDriveAppendSheetValue(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Drive#AppendSheetValue call api")
	r.cli.logDebug(ctx, "[lark] Drive#AppendSheetValue request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "POST",
		URL:                   "https://open.feishu.cn/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(appendSheetValueResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Drive#AppendSheetValue POST https://open.feishu.cn/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Drive#AppendSheetValue POST https://open.feishu.cn/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Drive", "AppendSheetValue", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Drive#AppendSheetValue request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockDriveAppendSheetValue(f func(ctx context.Context, request *AppendSheetValueReq, options ...MethodOptionFunc) (*AppendSheetValueResp, *Response, error)) {
	r.mockDriveAppendSheetValue = f
}

func (r *Mock) UnMockDriveAppendSheetValue() {
	r.mockDriveAppendSheetValue = nil
}

type AppendSheetValueReq struct {
	InsertDataOption *string                        `query:"insertDataOption" json:"-"` // 遇到空行追加，默认 OVERWRITE, 若空行的数量小于追加数据的行数 则覆盖数据 append；可选 INSERT_ROWS ，会在插入足够数量的行后再 append
	SpreadsheetToken string                         `path:"spreadsheetToken" json:"-"`  // spreadsheet 的 token，获取方式见[ 对接前说明](/ssl:ttdoc/ukTMukTMukTM/uczNzUjL3czM14yN3MTN) 的第 4 项
	ValueRange       *AppendSheetValueReqValueRange `json:"valueRange,omitempty"`       // 值与范围
}

type AppendSheetValueReqValueRange struct {
	Range  string         `json:"range,omitempty"`  // ⁣查询范围，包含 sheetId 与单元格范围两部分，目前支持四种索引方式，详见 ⁣[对接前说明](/ssl:ttdoc/ukTMukTMukTM/uczNzUjL3czM14yN3MTN)  的第 5 项
	Values []SheetContent `json:"values,omitempty"` // 需要写入的值，如要写入公式、超链接、emial、@人等，可详看附录[sheet 支持写入数据类型](/ssl:ttdoc/ukTMukTMukTM/ugjN1UjL4YTN14CO2UTN)
}

type appendSheetValueResp struct {
	Code int                   `json:"code,omitempty"`
	Msg  string                `json:"msg,omitempty"`
	Data *AppendSheetValueResp `json:"data,omitempty"`
}

type AppendSheetValueResp struct {
	SpreadsheetToken string                       `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	TableRange       string                       `json:"tableRange,omitempty"`       // 写入的范围
	Revision         int                          `json:"revision,omitempty"`         // sheet 的版本号
	Updates          *AppendSheetValueRespUpdates `json:"updates,omitempty"`          // 插入数据的范围、行列数等
}

type AppendSheetValueRespUpdates struct {
	SpreadsheetToken string `json:"spreadsheetToken,omitempty"` // spreadsheet 的 token
	UpdatedRange     string `json:"updatedRange,omitempty"`     // 写入的范围
	UpdatedRows      int    `json:"updatedRows,omitempty"`      // 写入的行数
	UpdatedColumns   int    `json:"updatedColumns,omitempty"`   // 写入的列数
	UpdatedCells     int    `json:"updatedCells,omitempty"`     // 写入的单元格总数
	Revision         int    `json:"revision,omitempty"`         // sheet 的版本号
}
