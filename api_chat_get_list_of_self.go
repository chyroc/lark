// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetChatListOfSelf 获取用户或者机器人所在群列表。
//
// 注意事项:
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 查询参数  user_id_type 用于控制响应体中 owner_id 的类型, 如果是获取机器人所在群列表该值可以不填
// - 请注意区分本接口和[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)的请求 URL
// - 获取的群列表不包含p2p单聊群
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list
func (r *ChatService) GetChatListOfSelf(ctx context.Context, request *GetChatListOfSelfReq, options ...MethodOptionFunc) (*GetChatListOfSelfResp, *Response, error) {
	if r.cli.mock.mockChatGetChatListOfSelf != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatListOfSelf mock enable")
		return r.cli.mock.mockChatGetChatListOfSelf(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatListOfSelf",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatListOfSelfResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatListOfSelf mock ChatGetChatListOfSelf method
func (r *Mock) MockChatGetChatListOfSelf(f func(ctx context.Context, request *GetChatListOfSelfReq, options ...MethodOptionFunc) (*GetChatListOfSelfResp, *Response, error)) {
	r.mockChatGetChatListOfSelf = f
}

// UnMockChatGetChatListOfSelf un-mock ChatGetChatListOfSelf method
func (r *Mock) UnMockChatGetChatListOfSelf() {
	r.mockChatGetChatListOfSelf = nil
}

// GetChatListOfSelfReq ...
type GetChatListOfSelfReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记, 第一次请求不填, 表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token, 下次遍历可采用该 page_token 获取查询结果, 示例值: "dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ["
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 10, 默认值: `20`, 最大值: `100`
}

// GetChatListOfSelfResp ...
type GetChatListOfSelfResp struct {
	Items     []*GetChatListOfSelfRespItem `json:"items,omitempty"`      // chat 列表
	PageToken string                       `json:"page_token,omitempty"` // 分页标记, 当 has_more 为 true 时, 会同时返回新的 page_token, 否则不返回 page_token
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetChatListOfSelfRespItem ...
type GetChatListOfSelfRespItem struct {
	ChatID      string `json:"chat_id,omitempty"`       // 群组 ID, 详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar      string `json:"avatar,omitempty"`        // 群头像 URL
	Name        string `json:"name,omitempty"`          // 群名称
	Description string `json:"description,omitempty"`   // 群描述
	OwnerID     string `json:"owner_id,omitempty"`      // 群主 ID
	OwnerIDType IDType `json:"owner_id_type,omitempty"` // 群主 ID 类型
	External    bool   `json:"external,omitempty"`      // 是否是外部群
	TenantKey   string `json:"tenant_key,omitempty"`    // tenant key
}

// getChatListOfSelfResp ...
type getChatListOfSelfResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetChatListOfSelfResp `json:"data,omitempty"`
}
