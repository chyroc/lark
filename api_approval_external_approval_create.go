// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// CreateApprovalExternalApproval 审批定义是审批的描述, 包括审批名称、图标、描述等基础信息。创建好审批定义, 用户就可以在审批应用的发起页中看到审批, 如果用户点击发起, 则会跳转到配置的发起三方系统地址去发起审批。
//
// 另外, 审批定义还配置了审批操作时的回调地址: 审批人在待审批列表中进行【同意】【拒绝】操作时, 审批中心会调用回调地址通知三方系统。
// 注意, 审批中心不负责审批流程的流转, 只负责展示、操作、消息通知。因此审批定义创建时没有审批流程的信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/approval-v4/external_approval/create
func (r *ApprovalService) CreateApprovalExternalApproval(ctx context.Context, request *CreateApprovalExternalApprovalReq, options ...MethodOptionFunc) (*CreateApprovalExternalApprovalResp, *Response, error) {
	if r.cli.mock.mockApprovalCreateApprovalExternalApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#CreateApprovalExternalApproval mock enable")
		return r.cli.mock.mockApprovalCreateApprovalExternalApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "CreateApprovalExternalApproval",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/approval/v4/external_approvals",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createApprovalExternalApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalCreateApprovalExternalApproval mock ApprovalCreateApprovalExternalApproval method
func (r *Mock) MockApprovalCreateApprovalExternalApproval(f func(ctx context.Context, request *CreateApprovalExternalApprovalReq, options ...MethodOptionFunc) (*CreateApprovalExternalApprovalResp, *Response, error)) {
	r.mockApprovalCreateApprovalExternalApproval = f
}

// UnMockApprovalCreateApprovalExternalApproval un-mock ApprovalCreateApprovalExternalApproval method
func (r *Mock) UnMockApprovalCreateApprovalExternalApproval() {
	r.mockApprovalCreateApprovalExternalApproval = nil
}

// CreateApprovalExternalApprovalReq ...
type CreateApprovalExternalApprovalReq struct {
	DepartmentIDType *DepartmentIDType                                `query:"department_id_type" json:"-"` // 此次调用中使用的部门ID的类型, 示例值: "open_department_id", 可选值有: department_id: 以自定义department_id来标识部门, open_department_id: 以open_department_id来标识部门, 默认值: `open_department_id`
	UserIDType       *IDType                                          `query:"user_id_type" json:"-"`       // 用户 ID 类型, 示例值: "open_id", 可选值有: open_id: 用户的 open id, union_id: 用户的 union id, user_id: 用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ApprovalName     string                                           `json:"approval_name,omitempty"`      // 审批定义名称, 创建审批定义返回的值, 表示该实例属于哪个流程；该字段会影响到列表中该实例的标题, 标题取自对应定义的 name 字段, 示例值: "@i18n@1"
	ApprovalCode     string                                           `json:"approval_code,omitempty"`      // 审批定义 code, 用户自定义, 定义的唯一标识, 如果不存在该 code, 则创建, 否则更新, 示例值: "permission_test"
	GroupCode        string                                           `json:"group_code,omitempty"`         // 审批定义所属审批分组, 用户自定义； 如果group_code当前不存在, 则会新建审批分组； 如果group_code已经存在, 则会使用group_name更新审批分组名称, 示例值: "work_group"
	GroupName        *string                                          `json:"group_name,omitempty"`         // 分组名称, 值的格式是 i18n key, 文案放在 i18n_resource； 如果是 group_code 当前不存在, 则该 group_name 必填, 否则, 如果填写了则会更新分组名称, 不填则不更新分组名称； 审批发起页 审批定义的分组名称来自该字段, 示例值: "@i18n@2"
	Description      *string                                          `json:"description,omitempty"`        // 审批定义的说明, 值的格式是 i18n key, 文案放在 i18n_resource； 审批发起页 审批定义的说明内容来自该字段, 示例值: "@i18n@2"
	External         *CreateApprovalExternalApprovalReqExternal       `json:"external,omitempty"`           // 三方审批相关
	Viewers          []*CreateApprovalExternalApprovalReqViewer       `json:"viewers,omitempty"`            // 可见人列表, 可通知配置多个可见人, 只有在配置的范围内用户可以在审批发起也看到该审批, 默认不传, 则是任何人不可见
	I18nResources    []*CreateApprovalExternalApprovalReqI18nResource `json:"i18n_resources,omitempty"`     // 国际化文案
	Managers         []string                                         `json:"managers,omitempty"`           // 根据user_id_type填写流程管理员id, 示例值: 19a294c2
}

// CreateApprovalExternalApprovalReqExternal ...
type CreateApprovalExternalApprovalReqExternal struct {
	BizName                     *string `json:"biz_name,omitempty"`                      // 列表中用于提示审批来自哪里, i18n key, 注意不需要“来自”前缀, 审批中心会拼上前缀, 示例值: "@i18n@3"
	BizType                     *string `json:"biz_type,omitempty"`                      // 审批定义业务类别, 示例值: "permission"
	CreateLinkMobile            *string `json:"create_link_mobile,omitempty"`            // 移动端发起链接, 如果设置了该链接, 则会在移动端审批发起页展示该审批, 用户点击后会跳转到该链接进行发起； 如果不填, 则在mobile端不显示该审批, 示例值: "https://applink.feishu.cn/client/mini_program/open?appId=cli_9c90fc38e07a9101&path=pages/approval-form/index?id=9999"
	CreateLinkPc                *string `json:"create_link_pc,omitempty"`                // PC端发起链接, 如果设置了该链接, 则会在PC端审批发起页展示该审批, 用户点击后会跳转到该链接进行发起； 如果不填, 则在PC端不显示该审批；, 示例值: "https://applink.feishu.cn/client/mini_program/open?mode=appCenter&appId=cli_9c90fc38e07a9101&path=pc/pages/create-form/index?id=9999"
	SupportPc                   *bool   `json:"support_pc,omitempty"`                    // 审批实例、审批任务、审批抄送是否要在PC端展示, 如果为 true, 则PC端列表会展示该定义下的实例信息, 否则, 不展示, 示例值: true
	SupportMobile               *bool   `json:"support_mobile,omitempty"`                // 审批实例、审批任务、审批抄送是否要在移动端展示, 如果为 true, 则移动端列表会展示该定义下的实例信息, 否则, 不展示； support_pc和support_mobile不可都为false, 否则不展示, 示例值: true
	SupportBatchRead            *bool   `json:"support_batch_read,omitempty"`            // 是否支持批量已读, 示例值: true
	EnableMarkReaded            *bool   `json:"enable_mark_readed,omitempty"`            // 是否支持标注可读（该字段无效）, 示例值: true
	EnableQuickOperate          *bool   `json:"enable_quick_operate,omitempty"`          // 是否支持快速操作, 示例值: true
	ActionCallbackURL           *string `json:"action_callback_url,omitempty"`           // 三方系统的操作回调 url, 【待审批】列表的任务审批人点同意或拒绝操作后, 审批中心调用该地址通知三方系统, 回调地址相关信息可参见: [三方审批快捷审批回调](https://open.feishu.cn/document/ukTMukTMukTM/ukjNyYjL5YjM24SO2IjN/quick-approval-callback), 示例值: "http://www.feishu.cn/approval/openapi/instanceOperate"
	ActionCallbackToken         *string `json:"action_callback_token,omitempty"`         // 回调时带的 token, 用于业务系统验证请求来自审批, 具体参考 [开放平台文档](https://open.feishu.cn/document/ukTMukTMukTM/uUTNz4SN1MjL1UzM), 示例值: "sdjkljkx9lsadf110"
	ActionCallbackKey           *string `json:"action_callback_key,omitempty"`           // 请求参数加密密钥, 如果配置了该参数, 则会对请求参数进行加密, 业务需要对请求进行解密, 加解密算法参考 [关联外部选项说明](https://open.feishu.cn/document/ukTMukTMukTM/uADM4QjLwADO04CMwgDN), 示例值: "gfdqedvsadfgfsd"
	AllowBatchOperate           *bool   `json:"allow_batch_operate,omitempty"`           // 是否支持批量审批, 示例值: true
	ExcludeEfficiencyStatistics *bool   `json:"exclude_efficiency_statistics,omitempty"` // 审批流程数据是否不纳入效率统计, 示例值: true
}

// CreateApprovalExternalApprovalReqI18nResource ...
type CreateApprovalExternalApprovalReqI18nResource struct {
	Locale    string                                               `json:"locale,omitempty"`     // 语言可选值有: zh-CN: 中文 en-US: 英文 ja-JP: 日文, 示例值: "zh-CN", 可选值有: zh-CN: 中文, en-US: 英文, ja-JP: 日文
	Texts     []*CreateApprovalExternalApprovalReqI18nResourceText `json:"texts,omitempty"`      // 文案 key, value, i18n key 以 @i18n@ 开头； 该字段主要用于做国际化, 语序用户同时传多个语言的文案, 审批中心会根据用户当前的语音环境使用对应的文案, 如果没有传用户当前的语音环境文案, 则会使用默认的语言文案。
	IsDefault bool                                                 `json:"is_default,omitempty"` // 是否默认语言, 默认语言需要包含所有key, 非默认语言如果key不存在会使用默认语言代替, 示例值: true
}

// CreateApprovalExternalApprovalReqI18nResourceText ...
type CreateApprovalExternalApprovalReqI18nResourceText struct {
	Key   string `json:"key,omitempty"`   // 文案key, 示例值: "@i18n@1"
	Value string `json:"value,omitempty"` // 文案, 示例值: "people"
}

// CreateApprovalExternalApprovalReqViewer ...
type CreateApprovalExternalApprovalReqViewer struct {
	ViewerType         *string `json:"viewer_type,omitempty"`          // 可见人类型, 示例值: "USER", 可选值有: TENANT: 租户内可见, DEPARTMENT: 指定部门, USER: 指定用户, NONE: 任何人都不可见
	ViewerUserID       *string `json:"viewer_user_id,omitempty"`       // 当 view_type 是 USER, 根据user_id_type填写用户id, 示例值: "19a294c2"
	ViewerDepartmentID *string `json:"viewer_department_id,omitempty"` // 当 view_type 为DEPARTMENT, 根据department_id_type填写部门id, 示例值: "od-ac9d697abfa990b715dcc33d58a62a9d"
}

// CreateApprovalExternalApprovalResp ...
type CreateApprovalExternalApprovalResp struct {
	ApprovalCode string `json:"approval_code,omitempty"` // 审批定义 code, 用户自定义, 定义的唯一标识
}

// createApprovalExternalApprovalResp ...
type createApprovalExternalApprovalResp struct {
	Code int64                               `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 错误描述
	Data *CreateApprovalExternalApprovalResp `json:"data,omitempty"`
}
