// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// RefreshAccessToken user_access_token 具有一定的时效性，默认最长有效期为7200秒。该接口用于在 user_access_token 过期时用 refresh_token 重新获取 access_token。此时会返回新的 refresh_token，再次刷新 access_token 时需要使用新的 refresh_token。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/refresh_access_token
func (r *AuthService) RefreshAccessToken(ctx context.Context, request *RefreshAccessTokenReq, options ...MethodOptionFunc) (*RefreshAccessTokenResp, *Response, error) {
	if r.cli.mock.mockAuthRefreshAccessToken != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#RefreshAccessToken mock enable")
		return r.cli.mock.mockAuthRefreshAccessToken(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "RefreshAccessToken",
		Method:              "POST",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/refresh_access_token",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedAppAccessToken:  true,
		NeedUserAccessToken: true,
	}
	resp := new(refreshAccessTokenResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthRefreshAccessToken mock AuthRefreshAccessToken method
func (r *Mock) MockAuthRefreshAccessToken(f func(ctx context.Context, request *RefreshAccessTokenReq, options ...MethodOptionFunc) (*RefreshAccessTokenResp, *Response, error)) {
	r.mockAuthRefreshAccessToken = f
}

// UnMockAuthRefreshAccessToken un-mock AuthRefreshAccessToken method
func (r *Mock) UnMockAuthRefreshAccessToken() {
	r.mockAuthRefreshAccessToken = nil
}

// RefreshAccessTokenReq ...
type RefreshAccessTokenReq struct {
	GrantType    string `json:"grant_type,omitempty"`    // 授权类型，本流程中，此值为："refresh_token", 示例值："refresh_token"
	RefreshToken string `json:"refresh_token,omitempty"` // 来自[获取登录用户身份](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/access_token) 或 本接口返回值, 示例值："ur-oQ0mMq6MCcueAv0pwx2fQQhxqv__CbLu6G8ySFwafeKww2Def2BJdOkW3.9gCFM.LBQgFri901QaqeuL"
}

// refreshAccessTokenResp ...
type refreshAccessTokenResp struct {
	Code int64                   `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                  `json:"msg,omitempty"`  // 错误描述
	Data *RefreshAccessTokenResp `json:"data,omitempty"`
}

// RefreshAccessTokenResp ...
type RefreshAccessTokenResp struct {
	AccessToken      string `json:"access_token,omitempty"`       // user_access_token，用于获取用户资源
	TokenType        string `json:"token_type,omitempty"`         // token 类型
	ExpiresIn        int64  `json:"expires_in,omitempty"`         // access_token 的有效期，单位: 秒
	Name             string `json:"name,omitempty"`               // 用户姓名
	EnName           string `json:"en_name,omitempty"`            // 用户英文名称
	AvatarURL        string `json:"avatar_url,omitempty"`         // 用户头像
	AvatarThumb      string `json:"avatar_thumb,omitempty"`       // 用户头像 72x72
	AvatarMiddle     string `json:"avatar_middle,omitempty"`      // 用户头像 240x240
	AvatarBig        string `json:"avatar_big,omitempty"`         // 用户头像 640x640
	OpenID           string `json:"open_id,omitempty"`            // 用户在应用内的唯一标识
	UnionID          string `json:"union_id,omitempty"`           // 用户统一ID
	Email            string `json:"email,omitempty"`              // 用户邮箱, 字段权限要求: 获取用户邮箱信息
	UserID           string `json:"user_id,omitempty"`            // 用户 user_id, 字段权限要求: 获取用户 user ID
	Mobile           string `json:"mobile,omitempty"`             // 用户手机号, 字段权限要求: 获取用户手机号
	TenantKey        string `json:"tenant_key,omitempty"`         // 当前企业标识
	RefreshExpiresIn int64  `json:"refresh_expires_in,omitempty"` // refresh_token 的有效期，单位: 秒
	RefreshToken     string `json:"refresh_token,omitempty"`      // 刷新用户 access_token 时使用的 token
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// ResendAppTicket 飞书每隔 1 小时会给应用推送一次最新的 app_ticket，应用也可以主动调用此接口，触发飞书进行及时的重新推送。（该接口并不能直接获取app_ticket，而是触发事件推送）
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/auth-v3/auth/app_ticket_resend
func (r *AuthService) ResendAppTicket(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error) {
	if r.cli.mock.mockAuthResendAppTicket != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#ResendAppTicket mock enable")
		return r.cli.mock.mockAuthResendAppTicket(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:        "Auth",
		API:          "ResendAppTicket",
		Method:       "POST",
		URL:          r.cli.openBaseURL + "/open-apis/auth/v3/app_ticket/resend",
		Body:         request,
		MethodOption: newMethodOption(options),
	}
	resp := new(resendAppTicketResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthResendAppTicket mock AuthResendAppTicket method
func (r *Mock) MockAuthResendAppTicket(f func(ctx context.Context, request *ResendAppTicketReq, options ...MethodOptionFunc) (*ResendAppTicketResp, *Response, error)) {
	r.mockAuthResendAppTicket = f
}

// UnMockAuthResendAppTicket un-mock AuthResendAppTicket method
func (r *Mock) UnMockAuthResendAppTicket() {
	r.mockAuthResendAppTicket = nil
}

// ResendAppTicketReq ...
type ResendAppTicketReq struct {
	AppID     string `json:"app_id,omitempty"`     // 应用唯一标识，创建应用后获得, 示例值："cli_slkdjalasdkjasd"
	AppSecret string `json:"app_secret,omitempty"` // 应用秘钥，创建应用后获得, 示例值："dskLLdkasdjlasdKK"
}

// resendAppTicketResp ...
type resendAppTicketResp struct {
	Code int64                `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string               `json:"msg,omitempty"`  // 错误描述
	Data *ResendAppTicketResp `json:"data,omitempty"`
}

// ResendAppTicketResp ...
type ResendAppTicketResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetUserInfo 通过 user_access_token 获取登录用户的信息。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/authen-v1/authen/user_info
func (r *AuthService) GetUserInfo(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error) {
	if r.cli.mock.mockAuthGetUserInfo != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Auth#GetUserInfo mock enable")
		return r.cli.mock.mockAuthGetUserInfo(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:               "Auth",
		API:                 "GetUserInfo",
		Method:              "GET",
		URL:                 r.cli.openBaseURL + "/open-apis/authen/v1/user_info",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getUserInfoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockAuthGetUserInfo mock AuthGetUserInfo method
func (r *Mock) MockAuthGetUserInfo(f func(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error)) {
	r.mockAuthGetUserInfo = f
}

// UnMockAuthGetUserInfo un-mock AuthGetUserInfo method
func (r *Mock) UnMockAuthGetUserInfo() {
	r.mockAuthGetUserInfo = nil
}

// GetUserInfoReq ...
type GetUserInfoReq struct{}

// getUserInfoResp ...
type getUserInfoResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetUserInfoResp `json:"data,omitempty"`
}

// GetUserInfoResp ...
type GetUserInfoResp struct {
	Name         string `json:"name,omitempty"`          // 用户姓名
	EnName       string `json:"en_name,omitempty"`       // 用户英文名称
	AvatarURL    string `json:"avatar_url,omitempty"`    // 用户头像
	AvatarThumb  string `json:"avatar_thumb,omitempty"`  // 用户头像 72x72
	AvatarMiddle string `json:"avatar_middle,omitempty"` // 用户头像 240x240
	AvatarBig    string `json:"avatar_big,omitempty"`    // 用户头像 640x640
	OpenID       string `json:"open_id,omitempty"`       // 用户在应用内的唯一标识
	UnionID      string `json:"union_id,omitempty"`      // 用户对ISV的唯一标识，对于同一个ISV，用户在其名下所有应用的union_id相同
	Email        string `json:"email,omitempty"`         // 用户邮箱, 字段权限要求: 获取用户邮箱信息
	UserID       string `json:"user_id,omitempty"`       // 用户 user_id, 字段权限要求: 获取用户 user ID
	Mobile       string `json:"mobile,omitempty"`        // 用户手机号, 字段权限要求: 获取用户手机号
	TenantKey    string `json:"tenant_key,omitempty"`    // 当前企业标识
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateBaikeDraft 草稿是单独的定义，并不和实体词进行绑定，创建草稿不等于创建实体词。创建草稿可能是创建实体词或更新实体词
//
// 需百科管理员审批通过后生效。当使用 user_access_token 访问时，会有 bot 通知对应用户审批结果。tenant_access_token 则不会触发通知
// · 当 entity_id 字段不为空时表示更新该实体词<br>
// · 当 entity_id 字段为空时表示创建新的实体词<br>
// · 当 entity_id 字段为空且 outer_info 字段不为空时，会根据已有数据判断是创建还是更新实体词。原则为：当 outer_info 字段已经和已有实体词绑定，则会触发更新，若无绑定的实体词，则会创建一个新的和 outer_info 绑定的实体词
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/baike-v1/draft/create
func (r *BaikeService) CreateBaikeDraft(ctx context.Context, request *CreateBaikeDraftReq, options ...MethodOptionFunc) (*CreateBaikeDraftResp, *Response, error) {
	if r.cli.mock.mockBaikeCreateBaikeDraft != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Baike#CreateBaikeDraft mock enable")
		return r.cli.mock.mockBaikeCreateBaikeDraft(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Baike",
		API:                   "CreateBaikeDraft",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/baike/v1/drafts",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createBaikeDraftResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockBaikeCreateBaikeDraft mock BaikeCreateBaikeDraft method
func (r *Mock) MockBaikeCreateBaikeDraft(f func(ctx context.Context, request *CreateBaikeDraftReq, options ...MethodOptionFunc) (*CreateBaikeDraftResp, *Response, error)) {
	r.mockBaikeCreateBaikeDraft = f
}

// UnMockBaikeCreateBaikeDraft un-mock BaikeCreateBaikeDraft method
func (r *Mock) UnMockBaikeCreateBaikeDraft() {
	r.mockBaikeCreateBaikeDraft = nil
}

// CreateBaikeDraftReq ...
type CreateBaikeDraftReq struct {
	UserIDType  *IDType                         `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ID          *string                         `json:"id,omitempty"`           // 词条 Id, 示例值："enterprise_40217521"
	MainKeys    []*CreateBaikeDraftReqMainKey   `json:"main_keys,omitempty"`    // 主关键词, 最大长度：`1`
	Aliases     []*CreateBaikeDraftReqAliase    `json:"aliases,omitempty"`      // 别名, 最大长度：`10`
	Description string                          `json:"description,omitempty"`  // 详情信息, 示例值："企业百科是飞书提供的一款知识管理工具，通过企业百科可以帮助企业将分散的知识信息进行聚合，并通过UGC的方式，促进企业知识的保鲜和流通"
	RelatedMeta *CreateBaikeDraftReqRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	OuterInfo   *CreateBaikeDraftReqOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// CreateBaikeDraftReqMainKey ...
type CreateBaikeDraftReqMainKey struct {
	Key           string                                   `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeDraftReqMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftReqMainKeyDisplayStatus ...
type CreateBaikeDraftReqMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeDraftReqAliase ...
type CreateBaikeDraftReqAliase struct {
	Key           string                                  `json:"key,omitempty"`            // 内容, 示例值："企业百科"
	DisplayStatus *CreateBaikeDraftReqAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftReqAliaseDisplayStatus ...
type CreateBaikeDraftReqAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮, 示例值：true
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索, 示例值：true
}

// CreateBaikeDraftReqRelatedMeta ...
type CreateBaikeDraftReqRelatedMeta struct {
	Users         []*CreateBaikeDraftReqRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeDraftReqRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeDraftReqRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeDraftReqRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeDraftReqRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeDraftReqRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeDraftReqRelatedMetaUser ...
type CreateBaikeDraftReqRelatedMetaUser struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
}

// CreateBaikeDraftReqRelatedMetaChat ...
type CreateBaikeDraftReqRelatedMetaChat struct {
	ID string `json:"id,omitempty"` // 数据 id, 示例值："ou-xxxxxx"
}

// CreateBaikeDraftReqRelatedMetaDoc ...
type CreateBaikeDraftReqRelatedMetaDoc struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeDraftReqRelatedMetaOncall ...
type CreateBaikeDraftReqRelatedMetaOncall struct {
	ID string `json:"id,omitempty"` // 数据 id, 示例值："ou-xxxxxx"
}

// CreateBaikeDraftReqRelatedMetaLink ...
type CreateBaikeDraftReqRelatedMetaLink struct {
	ID    string  `json:"id,omitempty"`    // 数据 id, 示例值："ou-xxxxxx"
	Title *string `json:"title,omitempty"` // 备注信息, 示例值："飞书官网"
	URL   *string `json:"url,omitempty"`   // 链接地址, 示例值："https://www.feishu.cn/hc/zh-CN", 正则校验：`(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`
}

// CreateBaikeDraftReqRelatedMetaAbbreviation ...
type CreateBaikeDraftReqRelatedMetaAbbreviation struct {
	ID *string `json:"id,omitempty"` // 词条 id, 示例值："enterprise_51587960"
}

// CreateBaikeDraftReqOuterInfo ...
type CreateBaikeDraftReqOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）, 示例值："星云", 长度范围：`2` ～ `32` 字符
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）, 示例值："12345", 长度范围：`1` ～ `64` 字符
}

// createBaikeDraftResp ...
type createBaikeDraftResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *CreateBaikeDraftResp `json:"data,omitempty"`
}

// CreateBaikeDraftResp ...
type CreateBaikeDraftResp struct {
	Draft *CreateBaikeDraftRespDraft `json:"draft,omitempty"` // 草稿
}

// CreateBaikeDraftRespDraft ...
type CreateBaikeDraftRespDraft struct {
	DraftID string                           `json:"draft_id,omitempty"` // 草稿 Id
	Entity  *CreateBaikeDraftRespDraftEntity `json:"entity,omitempty"`   // 实体词
}

// CreateBaikeDraftRespDraftEntity ...
type CreateBaikeDraftRespDraftEntity struct {
	ID          string                                      `json:"id,omitempty"`           // 词条 Id
	MainKeys    []*CreateBaikeDraftRespDraftEntityMainKey   `json:"main_keys,omitempty"`    // 主关键词
	Aliases     []*CreateBaikeDraftRespDraftEntityAliase    `json:"aliases,omitempty"`      // 别名
	Description string                                      `json:"description,omitempty"`  // 详情信息
	CreateTime  string                                      `json:"create_time,omitempty"`  // 词条创建时间
	UpdateTime  string                                      `json:"update_time,omitempty"`  // 最近一次更新实体词时间
	RelatedMeta *CreateBaikeDraftRespDraftEntityRelatedMeta `json:"related_meta,omitempty"` // 相关数据
	Categories  []string                                    `json:"categories,omitempty"`   // 词条标签
	Statistics  *CreateBaikeDraftRespDraftEntityStatistics  `json:"statistics,omitempty"`   // 统计数据
	OuterInfo   *CreateBaikeDraftRespDraftEntityOuterInfo   `json:"outer_info,omitempty"`   // 外部 id 关联数据
}

// CreateBaikeDraftRespDraftEntityMainKey ...
type CreateBaikeDraftRespDraftEntityMainKey struct {
	Key           string                                               `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeDraftRespDraftEntityMainKeyDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftRespDraftEntityMainKeyDisplayStatus ...
type CreateBaikeDraftRespDraftEntityMainKeyDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeDraftRespDraftEntityAliase ...
type CreateBaikeDraftRespDraftEntityAliase struct {
	Key           string                                              `json:"key,omitempty"`            // 内容
	DisplayStatus *CreateBaikeDraftRespDraftEntityAliaseDisplayStatus `json:"display_status,omitempty"` // 展示状态
}

// CreateBaikeDraftRespDraftEntityAliaseDisplayStatus ...
type CreateBaikeDraftRespDraftEntityAliaseDisplayStatus struct {
	AllowHighlight bool `json:"allow_highlight,omitempty"` // 是否允许高亮
	AllowSearch    bool `json:"allow_search,omitempty"`    // 是否允许搜索
}

// CreateBaikeDraftRespDraftEntityRelatedMeta ...
type CreateBaikeDraftRespDraftEntityRelatedMeta struct {
	Users         []*CreateBaikeDraftRespDraftEntityRelatedMetaUser         `json:"users,omitempty"`         // 关联用户信息
	Chats         []*CreateBaikeDraftRespDraftEntityRelatedMetaChat         `json:"chats,omitempty"`         // 关联群组信息
	Docs          []*CreateBaikeDraftRespDraftEntityRelatedMetaDoc          `json:"docs,omitempty"`          // 关联文档信息
	Oncalls       []*CreateBaikeDraftRespDraftEntityRelatedMetaOncall       `json:"oncalls,omitempty"`       // 关联值班者信息
	Links         []*CreateBaikeDraftRespDraftEntityRelatedMetaLink         `json:"links,omitempty"`         // 关联链接信息
	Abbreviations []*CreateBaikeDraftRespDraftEntityRelatedMetaAbbreviation `json:"abbreviations,omitempty"` // 可将相似含义或具有关联性的词条设置为相关，可在词条中展示为相关词条
}

// CreateBaikeDraftRespDraftEntityRelatedMetaUser ...
type CreateBaikeDraftRespDraftEntityRelatedMetaUser struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaChat ...
type CreateBaikeDraftRespDraftEntityRelatedMetaChat struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaDoc ...
type CreateBaikeDraftRespDraftEntityRelatedMetaDoc struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaOncall ...
type CreateBaikeDraftRespDraftEntityRelatedMetaOncall struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaLink ...
type CreateBaikeDraftRespDraftEntityRelatedMetaLink struct {
	ID    string `json:"id,omitempty"`    // 数据 id
	Title string `json:"title,omitempty"` // 备注信息
	URL   string `json:"url,omitempty"`   // 链接地址
}

// CreateBaikeDraftRespDraftEntityRelatedMetaAbbreviation ...
type CreateBaikeDraftRespDraftEntityRelatedMetaAbbreviation struct {
	ID string `json:"id,omitempty"` // 词条 id
}

// CreateBaikeDraftRespDraftEntityStatistics ...
type CreateBaikeDraftRespDraftEntityStatistics struct {
	LikeCount    int64 `json:"like_count,omitempty"`    // 点赞数量
	DislikeCount int64 `json:"dislike_count,omitempty"` // 点踩数量
}

// CreateBaikeDraftRespDraftEntityOuterInfo ...
type CreateBaikeDraftRespDraftEntityOuterInfo struct {
	Provider string `json:"provider,omitempty"` // 数据提供方（不能包含中横线 "-"）
	OuterID  string `json:"outer_id,omitempty"` // 外部 id 每个词条唯一（不能包含中横线 "-"）
}
