// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetSheet 该接口用于通过工作表ID查询工作表属性信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUDN04SN0QjL1QDN/sheets-v3/spreadsheet-sheet/get
func (r *DriveService) GetSheet(ctx context.Context, request *GetSheetReq, options ...MethodOptionFunc) (*GetSheetResp, *Response, error) {
	if r.cli.mock.mockDriveGetSheet != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Drive#GetSheet mock enable")
		return r.cli.mock.mockDriveGetSheet(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Drive",
		API:                   "GetSheet",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/sheets/v3/spreadsheets/:spreadsheet_token/sheets/:sheet_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getSheetResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockDriveGetSheet mock DriveGetSheet method
func (r *Mock) MockDriveGetSheet(f func(ctx context.Context, request *GetSheetReq, options ...MethodOptionFunc) (*GetSheetResp, *Response, error)) {
	r.mockDriveGetSheet = f
}

// UnMockDriveGetSheet un-mock DriveGetSheet method
func (r *Mock) UnMockDriveGetSheet() {
	r.mockDriveGetSheet = nil
}

// GetSheetReq ...
type GetSheetReq struct {
	SpreadSheetToken string `path:"spreadsheet_token" json:"-"` // 电子表格的token, 示例值: "shtxxxxxxxxxxxxxxx"
	SheetID          string `path:"sheet_id" json:"-"`          // 工作表的id, 示例值: "giDk9k"
}

// GetSheetResp ...
type GetSheetResp struct {
	Sheet *GetSheetRespSheet `json:"sheet,omitempty"` // 工作表
}

// GetSheetRespSheet ...
type GetSheetRespSheet struct {
	SheetID        string                           `json:"sheet_id,omitempty"`        // 工作表id
	Title          string                           `json:"title,omitempty"`           // 工作表标题
	Index          int64                            `json:"index,omitempty"`           // 工作表索引位置
	Hidden         bool                             `json:"hidden,omitempty"`          // 工作表是否被隐藏
	GridProperties *GetSheetRespSheetGridProperties `json:"grid_properties,omitempty"` // 单元格属性
	ResourceType   string                           `json:"resource_type,omitempty"`   // 工作表类型
	Merges         []*GetSheetRespSheetMerge        `json:"merges,omitempty"`          // 合并单元格
}

// GetSheetRespSheetGridProperties ...
type GetSheetRespSheetGridProperties struct {
	FrozenRowCount    int64 `json:"frozen_row_count,omitempty"`    // 冻结的行数量
	FrozenColumnCount int64 `json:"frozen_column_count,omitempty"` // 冻结的列数量
	RowCount          int64 `json:"row_count,omitempty"`           // 工作表的行数
	ColumnCount       int64 `json:"column_count,omitempty"`        // 工作表的列数量
}

// GetSheetRespSheetMerge ...
type GetSheetRespSheetMerge struct {
	StartRowIndex    int64 `json:"start_row_index,omitempty"`    // 起始行
	EndRowIndex      int64 `json:"end_row_index,omitempty"`      // 结束行
	StartColumnIndex int64 `json:"start_column_index,omitempty"` // 起始列
	EndColumnIndex   int64 `json:"end_column_index,omitempty"`   // 结束列
}

// getSheetResp ...
type getSheetResp struct {
	Code int64         `json:"code,omitempty"` // 错误码, 非 0 表示失败
	Msg  string        `json:"msg,omitempty"`  // 错误描述
	Data *GetSheetResp `json:"data,omitempty"`
}
