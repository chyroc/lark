// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetCategory 该接口用于获取知识库分类。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/helpdesk-v1/category/get
func (r *HelpdeskService) GetCategory(ctx context.Context, request *GetCategoryReq, options ...MethodOptionFunc) (*GetCategoryResp, *Response, error) {
	if r.cli.mock.mockHelpdeskGetCategory != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetCategory mock enable")
		return r.cli.mock.mockHelpdeskGetCategory(ctx, request, options...)
	}

	r.cli.log(ctx, LogLevelInfo, "[lark] Helpdesk#GetCategory call api")
	r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetCategory request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:                "GET",
		URL:                   "https://open.feishu.cn/open-apis/helpdesk/v1/categories/:id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,

		NeedHelpdeskAuth: true,
	}
	resp := new(getCategoryResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	requestID, statusCode := getResponseRequestID(response)
	if err != nil {
		r.cli.log(ctx, LogLevelError, "[lark] Helpdesk#GetCategory GET https://open.feishu.cn/open-apis/helpdesk/v1/categories/:id failed, request_id: %s, status_code: %d, error: %s", requestID, statusCode, err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.log(ctx, LogLevelError, "[lark] Helpdesk#GetCategory GET https://open.feishu.cn/open-apis/helpdesk/v1/categories/:id failed, request_id: %s, status_code: %d, code: %d, msg: %s", requestID, statusCode, resp.Code, resp.Msg)
		return nil, response, NewError("Helpdesk", "GetCategory", resp.Code, resp.Msg)
	}

	r.cli.log(ctx, LogLevelDebug, "[lark] Helpdesk#GetCategory success, request_id: %s, status_code: %d, response: %s", requestID, statusCode, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockHelpdeskGetCategory(f func(ctx context.Context, request *GetCategoryReq, options ...MethodOptionFunc) (*GetCategoryResp, *Response, error)) {
	r.mockHelpdeskGetCategory = f
}

func (r *Mock) UnMockHelpdeskGetCategory() {
	r.mockHelpdeskGetCategory = nil
}

type GetCategoryReq struct {
	ID string `path:"id" json:"-"` // 知识库分类ID, 示例值："6948728206392295444"
}

type getCategoryResp struct {
	Code int              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 错误描述
	Data *GetCategoryResp `json:"data,omitempty"` //
}

type GetCategoryResp struct {
	CategoryID string `json:"category_id,omitempty"` // 知识库分类ID
	ID         string `json:"id,omitempty"`          // 知识库分类ID，（旧版，请使用category_id）
	Name       string `json:"name,omitempty"`        // 名称
	HelpdeskID string `json:"helpdesk_id,omitempty"` // 服务台ID
	Language   string `json:"language,omitempty"`    // 语言
}
