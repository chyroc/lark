// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// GetApplicationAppList
//
// 该接口用于查询企业安装的应用列表，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYDN3UjL2QzN14iN0cTN
func (r *ApplicationService) GetApplicationAppList(ctx context.Context, request *GetApplicationAppListReq, options ...MethodOptionFunc) (*GetApplicationAppListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationAppList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationAppList mock enable")
		return r.cli.mock.mockApplicationGetApplicationAppList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationAppList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v3/app/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationAppListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationAppList mock ApplicationGetApplicationAppList method
func (r *Mock) MockApplicationGetApplicationAppList(f func(ctx context.Context, request *GetApplicationAppListReq, options ...MethodOptionFunc) (*GetApplicationAppListResp, *Response, error)) {
	r.mockApplicationGetApplicationAppList = f
}

// UnMockApplicationGetApplicationAppList un-mock ApplicationGetApplicationAppList method
func (r *Mock) UnMockApplicationGetApplicationAppList() {
	r.mockApplicationGetApplicationAppList = nil
}

// GetApplicationAppListReq ...
type GetApplicationAppListReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页起始位置标示，不填表示从头开始
	PageSize  *int64  `query:"page_size" json:"-"`  // 单页需求最大个数（最大 100），0 自动最大个数
	Lang      *string `query:"lang" json:"-"`       // 优先展示的应用信息的语言版本（zh_cn：中文，en_us：英文，ja_jp：日文）
	Status    *int64  `query:"status" json:"-"`     // 要返回的应用的状态，0:停用；1:启用；-1:全部，默认为 -1
}

// getApplicationAppListResp ...
type getApplicationAppListResp struct {
	Code int64                      `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationAppListResp `json:"data,omitempty"` // 返回的业务信息，仅 code = 0 时有效
}

// GetApplicationAppListResp ...
type GetApplicationAppListResp struct {
	PageToken  string                            `json:"page_token,omitempty"`  // 下一个请求页应当给的起始位置
	PageSize   int64                             `json:"page_size,omitempty"`   // 本次请求实际返回的页大小
	TotalCount int64                             `json:"total_count,omitempty"` // 可用的应用总数
	HasMore    int64                             `json:"has_more,omitempty"`    // 是否还有更多应用
	Lang       string                            `json:"lang,omitempty"`        // 当前选择的版本语言
	AppList    *GetApplicationAppListRespAppList `json:"app_list,omitempty"`    // 应用列表
}

// GetApplicationAppListRespAppList ...
type GetApplicationAppListRespAppList struct {
	AppID                string `json:"app_id,omitempty"`                 // 应用 ID
	PrimaryLanguage      string `json:"primary_language,omitempty"`       // 应用首选语言
	AppName              string `json:"app_name,omitempty"`               // 应用名称
	Description          string `json:"description,omitempty"`            // 应用描述
	AvatarURL            string `json:"avatar_url,omitempty"`             // 应用 icon
	AppSceneType         int64  `json:"app_scene_type,omitempty"`         // 应用类型，0：企业自建应用；1：应用商店应用
	Status               int64  `json:"status,omitempty"`                 // 启停状态，0：停用；1：启用
	MobileDefaultAbility int64  `json:"mobile_default_ability,omitempty"` // 移动端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
	PcDefaultAbility     int64  `json:"pc_default_ability,omitempty"`     // PC客户端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationAppVisibility
//
// 该接口用于查询应用在该企业内可以被使用的范围，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIjM3UjLyIzN14iMycTN
func (r *ApplicationService) GetApplicationAppVisibility(ctx context.Context, request *GetApplicationAppVisibilityReq, options ...MethodOptionFunc) (*GetApplicationAppVisibilityResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationAppVisibility != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationAppVisibility mock enable")
		return r.cli.mock.mockApplicationGetApplicationAppVisibility(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationAppVisibility",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v2/app/visibility",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationAppVisibilityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationAppVisibility mock ApplicationGetApplicationAppVisibility method
func (r *Mock) MockApplicationGetApplicationAppVisibility(f func(ctx context.Context, request *GetApplicationAppVisibilityReq, options ...MethodOptionFunc) (*GetApplicationAppVisibilityResp, *Response, error)) {
	r.mockApplicationGetApplicationAppVisibility = f
}

// UnMockApplicationGetApplicationAppVisibility un-mock ApplicationGetApplicationAppVisibility method
func (r *Mock) UnMockApplicationGetApplicationAppVisibility() {
	r.mockApplicationGetApplicationAppVisibility = nil
}

// GetApplicationAppVisibilityReq ...
type GetApplicationAppVisibilityReq struct {
	AppID         string  `query:"app_id" json:"-"`          // 目标应用的 ID
	UserPageToken *string `query:"user_page_token" json:"-"` // 分页拉取用户列表起始位置标示，不填表示从头开始
	UserPageSize  *int64  `query:"user_page_size" json:"-"`  // 本次拉取用户列表最大个数(最大值 1000 ，0 自动最大个数 )
}

// getApplicationAppVisibilityResp ...
type getApplicationAppVisibilityResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationAppVisibilityResp `json:"data,omitempty"` // 返回的业务信息
}

// GetApplicationAppVisibilityResp ...
type GetApplicationAppVisibilityResp struct {
	Departments    []*GetApplicationAppVisibilityRespDepartment `json:"departments,omitempty"`       // 可用部门列表
	Users          []*GetApplicationAppVisibilityRespUser       `json:"users,omitempty"`             // 可用用户列表（仅包含单独设置的用户，可用部门、用户组中的用户未展开）
	IsVisibleToAll int64                                        `json:"is_visible_to_all,omitempty"` // 是否全员可见，1：是，0：否
	HasMoreUsers   int64                                        `json:"has_more_users,omitempty"`    // 是否还有更多可见用户，1：是，0：否
	UserPageToken  string                                       `json:"user_page_token,omitempty"`   // 拉取下一页用户列表时使用的 user_page_token
}

// GetApplicationAppVisibilityRespDepartment ...
type GetApplicationAppVisibilityRespDepartment struct {
	ID string `json:"id,omitempty"` // 自定义 department_id
}

// GetApplicationAppVisibilityRespUser ...
type GetApplicationAppVisibilityRespUser struct {
	UserID string `json:"user_id,omitempty"` // 用户的 user_id，只返回给申请了 user_id 权限的企业自建应用
	OpenID string `json:"open_id,omitempty"` // 用户的 open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApplicationAppVisibility
//
// 该接口用于增加或者删除指定应用被哪些人可用，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/ucDN3UjL3QzN14yN0cTN
func (r *ApplicationService) UpdateApplicationAppVisibility(ctx context.Context, request *UpdateApplicationAppVisibilityReq, options ...MethodOptionFunc) (*UpdateApplicationAppVisibilityResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationAppVisibility != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationAppVisibility mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationAppVisibility(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationAppVisibility",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v3/app/update_visibility",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationAppVisibilityResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplicationAppVisibility mock ApplicationUpdateApplicationAppVisibility method
func (r *Mock) MockApplicationUpdateApplicationAppVisibility(f func(ctx context.Context, request *UpdateApplicationAppVisibilityReq, options ...MethodOptionFunc) (*UpdateApplicationAppVisibilityResp, *Response, error)) {
	r.mockApplicationUpdateApplicationAppVisibility = f
}

// UnMockApplicationUpdateApplicationAppVisibility un-mock ApplicationUpdateApplicationAppVisibility method
func (r *Mock) UnMockApplicationUpdateApplicationAppVisibility() {
	r.mockApplicationUpdateApplicationAppVisibility = nil
}

// UpdateApplicationAppVisibilityReq ...
type UpdateApplicationAppVisibilityReq struct {
	AppID           string                                     `json:"app_id,omitempty"`             // 目标应用的 ID
	DelUsers        *UpdateApplicationAppVisibilityReqDelUsers `json:"del_users,omitempty"`          // 删除的用户列表，元素个数不超过 500，**先增加后删除**
	AddUsers        *UpdateApplicationAppVisibilityReqAddUsers `json:"add_users,omitempty"`          // 增加的用户列表，元素个数不超过500，**先增加后删除**
	IsVisiableToAll *int64                                     `json:"is_visiable_to_all,omitempty"` // 是否全员可见，0：否；1：是；不填：继续当前状态不改变
	AddDepartments  []string                                   `json:"add_departments,omitempty"`    // 添加的部门列表，元素个数不超过 500，**先增加后删除**
	DelDepartments  []string                                   `json:"del_departments,omitempty"`    // 删除的部门列表，元素个数不超过 500，**先增加后删除**
}

// UpdateApplicationAppVisibilityReqDelUsers ...
type UpdateApplicationAppVisibilityReqDelUsers struct {
	OpenID *string `json:"open_id,omitempty"` // 与 user_id 至少给其中之一，user_id 优先于 open_id
	UserID *string `json:"user_id,omitempty"`
}

// UpdateApplicationAppVisibilityReqAddUsers ...
type UpdateApplicationAppVisibilityReqAddUsers struct {
	OpenID *string `json:"open_id,omitempty"` // 与 user_id 至少给其中之一，user_id 优先于 open_id
	UserID *string `json:"user_id,omitempty"`
}

// updateApplicationAppVisibilityResp ...
type updateApplicationAppVisibilityResp struct {
	Code int64                               `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                              `json:"msg,omitempty"`  // 返回码的描述
	Data *UpdateApplicationAppVisibilityResp `json:"data,omitempty"` // 返回的业务信息
}

// UpdateApplicationAppVisibilityResp ...
type UpdateApplicationAppVisibilityResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplication 根据app_id获取应用的基础信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/get
func (r *ApplicationService) GetApplication(ctx context.Context, request *GetApplicationReq, options ...MethodOptionFunc) (*GetApplicationResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplication mock enable")
		return r.cli.mock.mockApplicationGetApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplication",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplication mock ApplicationGetApplication method
func (r *Mock) MockApplicationGetApplication(f func(ctx context.Context, request *GetApplicationReq, options ...MethodOptionFunc) (*GetApplicationResp, *Response, error)) {
	r.mockApplicationGetApplication = f
}

// UnMockApplicationGetApplication un-mock ApplicationGetApplication method
func (r *Mock) UnMockApplicationGetApplication() {
	r.mockApplicationGetApplication = nil
}

// GetApplicationReq ...
type GetApplicationReq struct {
	Lang       string  `query:"lang" json:"-"`         // 指定获取应用在该语言下的信息, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文, 最小长度：`1` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppID      string  `path:"app_id" json:"-"`        // 应用的 app_id，需要查询其他应用信息时，必须申请[获取应用信息](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)权限，仅查询本应用信息时，可填入 "me" 或者应用自身 app_id, 示例值："cli_9b445f5258795107"
}

// getApplicationResp ...
type getApplicationResp struct {
	Code int64               `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string              `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationResp `json:"data,omitempty"`
}

// GetApplicationResp ...
type GetApplicationResp struct {
	App *GetApplicationRespApp `json:"app,omitempty"` // 应用数据
}

// GetApplicationRespApp ...
type GetApplicationRespApp struct {
	AppID            string                        `json:"app_id,omitempty"`             // 应用的 app_id
	CreatorID        string                        `json:"creator_id,omitempty"`         // 应用创建者（所有者）
	Status           int64                         `json:"status,omitempty"`             // 应用状态, 可选值有: `0`：停用状态, `1`：启用状态, `2`：未启用状态, `3`：未知状态
	SceneType        int64                         `json:"scene_type,omitempty"`         // 应用类型, 可选值有: `0`：自建应用, `1`：应用商店应用, `2`：个人应用商店应用, `3`：未知应用类型
	RedirectURLs     []string                      `json:"redirect_urls,omitempty"`      // 安全设置中的重定向 URL
	OnlineVersionID  string                        `json:"online_version_id,omitempty"`  // 发布在线上的应用版本 ID，若没有则为空
	UnauditVersionID string                        `json:"unaudit_version_id,omitempty"` // 在审核中的版本 ID，若没有则为空
	AppName          string                        `json:"app_name,omitempty"`           // 应用名称
	AvatarURL        string                        `json:"avatar_url,omitempty"`         // 应用图标 url
	Description      string                        `json:"description,omitempty"`        // 应用默认描述
	Scopes           []*GetApplicationRespAppScope `json:"scopes,omitempty"`             // 应用权限列表
	BackHomeURL      string                        `json:"back_home_url,omitempty"`      // 后台主页地址
	I18n             *GetApplicationRespAppI18n    `json:"i18n,omitempty"`               // 应用的国际化信息列表
	PrimaryLanguage  string                        `json:"primary_language,omitempty"`   // 应用主语言, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	CommonCategories []string                      `json:"common_categories,omitempty"`  // 应用分类的国际化描述
}

// GetApplicationRespAppScope ...
type GetApplicationRespAppScope struct {
	Scope       string `json:"scope,omitempty"`       // 应用权限
	Description string `json:"description,omitempty"` // 应用权限的国际化描述
	Level       string `json:"level,omitempty"`       // 权限等级描述, 可选值有: `1`：普通权限, `2`：高级权限, `3`：超敏感权限, `0`：未知等级
}

// GetApplicationRespAppI18n ...
type GetApplicationRespAppI18n struct {
	I18nKey     string `json:"i18n_key,omitempty"`    // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name        string `json:"name,omitempty"`        // 应用国际化名称
	Description string `json:"description,omitempty"` // 应用国际化描述（副标题）
	HelpUse     string `json:"help_use,omitempty"`    // 帮助国际化文档链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// IsApplicationUserAdmin
//
// 该接口用于查询用户是否为应用管理员。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITN1EjLyUTNx4iM1UTM
func (r *ApplicationService) IsApplicationUserAdmin(ctx context.Context, request *IsApplicationUserAdminReq, options ...MethodOptionFunc) (*IsApplicationUserAdminResp, *Response, error) {
	if r.cli.mock.mockApplicationIsApplicationUserAdmin != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#IsApplicationUserAdmin mock enable")
		return r.cli.mock.mockApplicationIsApplicationUserAdmin(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "IsApplicationUserAdmin",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v3/is_user_admin",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(isApplicationUserAdminResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationIsApplicationUserAdmin mock ApplicationIsApplicationUserAdmin method
func (r *Mock) MockApplicationIsApplicationUserAdmin(f func(ctx context.Context, request *IsApplicationUserAdminReq, options ...MethodOptionFunc) (*IsApplicationUserAdminResp, *Response, error)) {
	r.mockApplicationIsApplicationUserAdmin = f
}

// UnMockApplicationIsApplicationUserAdmin un-mock ApplicationIsApplicationUserAdmin method
func (r *Mock) UnMockApplicationIsApplicationUserAdmin() {
	r.mockApplicationIsApplicationUserAdmin = nil
}

// IsApplicationUserAdminReq ...
type IsApplicationUserAdminReq struct {
	OpenID     *string `query:"open_id" json:"-"`     // 用户 open_id，open_id 和 employee_id 两个参数必须包含其一，若同时传入取 open_id
	EmployeeID *string `query:"employee_id" json:"-"` // 用户 employee_id（同通讯录 v3 版本中的 user_id），open_id 和 employee_id 两个参数必须包含其一，若同时传入取 open_id
}

// isApplicationUserAdminResp ...
type isApplicationUserAdminResp struct {
	Code int64                       `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 返回码的描述
	Data *IsApplicationUserAdminResp `json:"data,omitempty"` // 返回的业务信息
}

// IsApplicationUserAdminResp ...
type IsApplicationUserAdminResp struct {
	IsAppAdmin bool `json:"is_app_admin,omitempty"` // 用户是否为管理员，true 为是，false 为否
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationMessageDetail
//
// 查询应用在指定时间段内机器人消息详细信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uYTN0YjL2UDN24iN1QjN
func (r *ApplicationService) GetApplicationMessageDetail(ctx context.Context, request *GetApplicationMessageDetailReq, options ...MethodOptionFunc) (*GetApplicationMessageDetailResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationMessageDetail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationMessageDetail mock enable")
		return r.cli.mock.mockApplicationGetApplicationMessageDetail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationMessageDetail",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_message_detail",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationMessageDetailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationMessageDetail mock ApplicationGetApplicationMessageDetail method
func (r *Mock) MockApplicationGetApplicationMessageDetail(f func(ctx context.Context, request *GetApplicationMessageDetailReq, options ...MethodOptionFunc) (*GetApplicationMessageDetailResp, *Response, error)) {
	r.mockApplicationGetApplicationMessageDetail = f
}

// UnMockApplicationGetApplicationMessageDetail un-mock ApplicationGetApplicationMessageDetail method
func (r *Mock) UnMockApplicationGetApplicationMessageDetail() {
	r.mockApplicationGetApplicationMessageDetail = nil
}

// GetApplicationMessageDetailReq ...
type GetApplicationMessageDetailReq struct {
	AppID     string  `query:"app_id" json:"-"`     // 目标应用的 ID
	MessageID string  `query:"message_id" json:"-"` // open_message_id
	TimeStart int64   `query:"time_start" json:"-"` // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd   int64   `query:"time_end" json:"-"`   // 截止时间戳（秒），时间跨度最长支持180天
	PageToken *string `query:"page_token" json:"-"` // 分页标记，首次传空，非首次使用返回中的page_token
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小，默认为512，取值区间[1,1000]
}

// getApplicationMessageDetailResp ...
type getApplicationMessageDetailResp struct {
	Code int64                            `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                           `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationMessageDetailResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

// GetApplicationMessageDetailResp ...
type GetApplicationMessageDetailResp struct {
	MessageID   string                                    `json:"message_id,omitempty"`   // open_message_id
	ChatType    ChatType                                  `json:"chat_type,omitempty"`    // 聊天类型
	MessageType MsgType                                   `json:"message_type,omitempty"` // 消息类型
	Nsent       int64                                     `json:"nsent,omitempty"`        // 总发送数
	Target      *GetApplicationMessageDetailRespTarget    `json:"target,omitempty"`       // 发送目标用户列表，群聊为空
	Nread       int64                                     `json:"nread,omitempty"`        // 总阅读数
	UsersRead   *GetApplicationMessageDetailRespUsersRead `json:"users_read,omitempty"`   // 已读用户列表
	HasMore     bool                                      `json:"has_more,omitempty"`     // 是否还有更多分页，当 has_more 为 true 时，会同时返回新的 page_token
	PageToken   string                                    `json:"page_token,omitempty"`   // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetApplicationMessageDetailRespTarget ...
type GetApplicationMessageDetailRespTarget struct {
	OpenID string `json:"open_id,omitempty"` // open_id
}

// GetApplicationMessageDetailRespUsersRead ...
type GetApplicationMessageDetailRespUsersRead struct {
	OpenID string `json:"open_id,omitempty"` // open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationMessageOverview
//
// 查询应用在指定时间段内机器人消息概览信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uQTN0YjL0UDN24CN1QjN
func (r *ApplicationService) GetApplicationMessageOverview(ctx context.Context, request *GetApplicationMessageOverviewReq, options ...MethodOptionFunc) (*GetApplicationMessageOverviewResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationMessageOverview != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationMessageOverview mock enable")
		return r.cli.mock.mockApplicationGetApplicationMessageOverview(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationMessageOverview",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_message_overview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationMessageOverviewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationMessageOverview mock ApplicationGetApplicationMessageOverview method
func (r *Mock) MockApplicationGetApplicationMessageOverview(f func(ctx context.Context, request *GetApplicationMessageOverviewReq, options ...MethodOptionFunc) (*GetApplicationMessageOverviewResp, *Response, error)) {
	r.mockApplicationGetApplicationMessageOverview = f
}

// UnMockApplicationGetApplicationMessageOverview un-mock ApplicationGetApplicationMessageOverview method
func (r *Mock) UnMockApplicationGetApplicationMessageOverview() {
	r.mockApplicationGetApplicationMessageOverview = nil
}

// GetApplicationMessageOverviewReq ...
type GetApplicationMessageOverviewReq struct {
	AppID       string    `json:"app_id,omitempty"`       // 目标应用的 ID
	TimeStart   int64     `json:"time_start,omitempty"`   // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd     int64     `json:"time_end,omitempty"`     // 截止时间戳（秒），时间跨度最长支持180天
	ChatType    *ChatType `json:"chat_type,omitempty"`    // 聊天类型，大小写不敏感，p2p：私聊；group：群聊
	MessageType *MsgType  `json:"message_type,omitempty"` // 消息类型，大小写不敏感，text：文本消息；image：图片消息；card：卡片消息；post：富文本消息；share_chat：群名片
}

// getApplicationMessageOverviewResp ...
type getApplicationMessageOverviewResp struct {
	Code int64                              `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                             `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationMessageOverviewResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

// GetApplicationMessageOverviewResp ...
type GetApplicationMessageOverviewResp struct {
	P2pSent       *GetApplicationMessageOverviewRespP2pSent       `json:"p2p_sent,omitempty"`       // 单聊发送
	P2pReceived   *GetApplicationMessageOverviewRespP2pReceived   `json:"p2p_received,omitempty"`   // 单聊接收
	P2pRead       *GetApplicationMessageOverviewRespP2pRead       `json:"p2p_read,omitempty"`       // 单聊已读
	GroupSent     *GetApplicationMessageOverviewRespGroupSent     `json:"group_sent,omitempty"`     // 群聊发送
	GroupReceived *GetApplicationMessageOverviewRespGroupReceived `json:"group_received,omitempty"` // 群聊接收
	GroupRead     *GetApplicationMessageOverviewRespGroupRead     `json:"group_read,omitempty"`     // 群聊已读
}

// GetApplicationMessageOverviewRespP2pSent ...
type GetApplicationMessageOverviewRespP2pSent struct {
	Pv *GetApplicationMessageOverviewRespP2pSentPv `json:"pv,omitempty"` // 消息接收用户数量
}

// GetApplicationMessageOverviewRespP2pSentPv ...
type GetApplicationMessageOverviewRespP2pSentPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

// GetApplicationMessageOverviewRespP2pReceived ...
type GetApplicationMessageOverviewRespP2pReceived struct {
	Pv *GetApplicationMessageOverviewRespP2pReceivedPv `json:"pv,omitempty"` // 消息接收用户数量
}

// GetApplicationMessageOverviewRespP2pReceivedPv ...
type GetApplicationMessageOverviewRespP2pReceivedPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

// GetApplicationMessageOverviewRespP2pRead ...
type GetApplicationMessageOverviewRespP2pRead struct {
	Pv *GetApplicationMessageOverviewRespP2pReadPv `json:"pv,omitempty"` // 消息已读用户数量
}

// GetApplicationMessageOverviewRespP2pReadPv ...
type GetApplicationMessageOverviewRespP2pReadPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}

// GetApplicationMessageOverviewRespGroupSent ...
type GetApplicationMessageOverviewRespGroupSent struct {
	Pv *GetApplicationMessageOverviewRespGroupSentPv `json:"pv,omitempty"` // 消息接收群聊数量
}

// GetApplicationMessageOverviewRespGroupSentPv ...
type GetApplicationMessageOverviewRespGroupSentPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

// GetApplicationMessageOverviewRespGroupReceived ...
type GetApplicationMessageOverviewRespGroupReceived struct {
	Pv *GetApplicationMessageOverviewRespGroupReceivedPv `json:"pv,omitempty"` // 消息接收群聊数量
}

// GetApplicationMessageOverviewRespGroupReceivedPv ...
type GetApplicationMessageOverviewRespGroupReceivedPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

// GetApplicationMessageOverviewRespGroupRead ...
type GetApplicationMessageOverviewRespGroupRead struct {
	Pv *GetApplicationMessageOverviewRespGroupReadPv `json:"pv,omitempty"` // 消息已读用户数量
}

// GetApplicationMessageOverviewRespGroupReadPv ...
type GetApplicationMessageOverviewRespGroupReadPv struct {
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationMessageTrend
//
// 查询应用在指定时间段内机器人消息趋势信息。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uUTN0YjL1UDN24SN1QjN
func (r *ApplicationService) GetApplicationMessageTrend(ctx context.Context, request *GetApplicationMessageTrendReq, options ...MethodOptionFunc) (*GetApplicationMessageTrendResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationMessageTrend != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationMessageTrend mock enable")
		return r.cli.mock.mockApplicationGetApplicationMessageTrend(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationMessageTrend",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_message_trend",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationMessageTrendResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationMessageTrend mock ApplicationGetApplicationMessageTrend method
func (r *Mock) MockApplicationGetApplicationMessageTrend(f func(ctx context.Context, request *GetApplicationMessageTrendReq, options ...MethodOptionFunc) (*GetApplicationMessageTrendResp, *Response, error)) {
	r.mockApplicationGetApplicationMessageTrend = f
}

// UnMockApplicationGetApplicationMessageTrend un-mock ApplicationGetApplicationMessageTrend method
func (r *Mock) UnMockApplicationGetApplicationMessageTrend() {
	r.mockApplicationGetApplicationMessageTrend = nil
}

// GetApplicationMessageTrendReq ...
type GetApplicationMessageTrendReq struct {
	AppID        string    `json:"app_id,omitempty"`        // 目标应用的 ID
	TimeStart    int64     `json:"time_start,omitempty"`    // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd      int64     `json:"time_end,omitempty"`      // 截止时间戳（秒），时间跨度最长支持180天
	TimeInterval int64     `json:"time_interval,omitempty"` // 步长（秒），最小步长为60秒，需满足(${time_end} - ${time_start}) / ${time_interval} <= 2*24*60
	ChatType     *ChatType `json:"chat_type,omitempty"`     // 聊天类型，大小写不敏感，p2p：私聊；group：群聊
	MessageType  *MsgType  `json:"message_type,omitempty"`  // 消息类型，大小写不敏感，text：文本消息；image：图片消息；card：卡片消息；post：富文本消息；share_chat：群名片
}

// getApplicationMessageTrendResp ...
type getApplicationMessageTrendResp struct {
	Code int64                           `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                          `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationMessageTrendResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

// GetApplicationMessageTrendResp ...
type GetApplicationMessageTrendResp struct {
	P2pSent       *GetApplicationMessageTrendRespP2pSent       `json:"p2p_sent,omitempty"`       // 单聊发送
	P2pReceived   *GetApplicationMessageTrendRespP2pReceived   `json:"p2p_received,omitempty"`   // 单聊接收
	P2pRead       *GetApplicationMessageTrendRespP2pRead       `json:"p2p_read,omitempty"`       // 单聊已读
	GroupSent     *GetApplicationMessageTrendRespGroupSent     `json:"group_sent,omitempty"`     // 群聊发送
	GroupReceived *GetApplicationMessageTrendRespGroupReceived `json:"group_received,omitempty"` // 群聊接收
	GroupRead     *GetApplicationMessageTrendRespGroupRead     `json:"group_read,omitempty"`     // 群聊已读
}

// GetApplicationMessageTrendRespP2pSent ...
type GetApplicationMessageTrendRespP2pSent struct {
	Timestamp *GetApplicationMessageTrendRespP2pSentTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

// GetApplicationMessageTrendRespP2pSentTimestamp ...
type GetApplicationMessageTrendRespP2pSentTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

// GetApplicationMessageTrendRespP2pReceived ...
type GetApplicationMessageTrendRespP2pReceived struct {
	Timestamp *GetApplicationMessageTrendRespP2pReceivedTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

// GetApplicationMessageTrendRespP2pReceivedTimestamp ...
type GetApplicationMessageTrendRespP2pReceivedTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收用户数量
}

// GetApplicationMessageTrendRespP2pRead ...
type GetApplicationMessageTrendRespP2pRead struct {
	Timestamp *GetApplicationMessageTrendRespP2pReadTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

// GetApplicationMessageTrendRespP2pReadTimestamp ...
type GetApplicationMessageTrendRespP2pReadTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息已读用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}

// GetApplicationMessageTrendRespGroupSent ...
type GetApplicationMessageTrendRespGroupSent struct {
	Timestamp *GetApplicationMessageTrendRespGroupSentTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

// GetApplicationMessageTrendRespGroupSentTimestamp ...
type GetApplicationMessageTrendRespGroupSentTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收群聊数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

// GetApplicationMessageTrendRespGroupReceived ...
type GetApplicationMessageTrendRespGroupReceived struct {
	Timestamp *GetApplicationMessageTrendRespGroupReceivedTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

// GetApplicationMessageTrendRespGroupReceivedTimestamp ...
type GetApplicationMessageTrendRespGroupReceivedTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息接收群聊数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息接收群聊数量
}

// GetApplicationMessageTrendRespGroupRead ...
type GetApplicationMessageTrendRespGroupRead struct {
	Timestamp *GetApplicationMessageTrendRespGroupReadTimestamp `json:"timestamp,omitempty"` // 时间戳（秒）
}

// GetApplicationMessageTrendRespGroupReadTimestamp ...
type GetApplicationMessageTrendRespGroupReadTimestamp struct {
	Pv int64 `json:"pv,omitempty"` // 消息已读用户数量
	Uv int64 `json:"uv,omitempty"` // 去重的消息已读用户数量
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationOrder
//
// 该接口用于查询某个订单的具体信息
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITNwUjLyUDM14iM1ATN
func (r *ApplicationService) GetApplicationOrder(ctx context.Context, request *GetApplicationOrderReq, options ...MethodOptionFunc) (*GetApplicationOrderResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationOrder != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationOrder mock enable")
		return r.cli.mock.mockApplicationGetApplicationOrder(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationOrder",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/pay/v1/order/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationOrderResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationOrder mock ApplicationGetApplicationOrder method
func (r *Mock) MockApplicationGetApplicationOrder(f func(ctx context.Context, request *GetApplicationOrderReq, options ...MethodOptionFunc) (*GetApplicationOrderResp, *Response, error)) {
	r.mockApplicationGetApplicationOrder = f
}

// UnMockApplicationGetApplicationOrder un-mock ApplicationGetApplicationOrder method
func (r *Mock) UnMockApplicationGetApplicationOrder() {
	r.mockApplicationGetApplicationOrder = nil
}

// GetApplicationOrderReq ...
type GetApplicationOrderReq struct {
	OrderID string `query:"order_id" json:"-"` // 订单ID
}

// getApplicationOrderResp ...
type getApplicationOrderResp struct {
	Code int64                    `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                   `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationOrderResp `json:"data,omitempty"` // 返回的业务信息
}

// GetApplicationOrderResp ...
type GetApplicationOrderResp struct {
	Order *GetApplicationOrderRespOrder `json:"order,omitempty"` // 订单信息
}

// GetApplicationOrderRespOrder ...
type GetApplicationOrderRespOrder struct {
	OrderID       string `json:"order_id,omitempty"`        // 订单ID，唯一标识
	PricePlanID   string `json:"price_plan_id,omitempty"`   // 价格方案ID，唯一标识
	PricePlanType string `json:"price_plan_type,omitempty"` // 价格方案类型 "trial" -试用；"permanent"-一次性付费；"per_year"-企业年付费；"per_month"-企业月付费；"per_seat_per_year"-按人按年付费；"per_seat_per_month"-按人按月付费；"permanent_count"-按次付费；
	Seats         int64  `json:"seats,omitempty"`           // 实际购买人数 仅对price_plan_type为per_seat_per_year和per_seat_per_month 有效
	BuyCount      int64  `json:"buy_count,omitempty"`       // 购买数量 总是为1
	CreateTime    string `json:"create_time,omitempty"`     // 订单创建时间戳
	PayTime       string `json:"pay_time,omitempty"`        // 订单支付时间戳
	Status        string `json:"status,omitempty"`          // 订单当前状态，"normal" -正常；"refund"-已退款；
	BuyType       string `json:"buy_type,omitempty"`        // 购买类型，"buy" - 普通购买;"upgrade"-为升级购买(仅price_plan_type 为per_year，per_month，per_seat_per_year，per_seat_per_month时可升级购买);"renew" - 续费购买；
	SrcOrderID    string `json:"src_order_id,omitempty"`    // 源订单ID，当前订单为升级购买时，即buy_type为upgrade时，此字段记录源订单等ID
	DstOrderID    string `json:"dst_order_id,omitempty"`    // 升级后的新订单ID，当前订单如果做过升级购买，此字段记录升级购买后生成的新订单ID，当前订单仍然有效
	OrderPayPrice int64  `json:"order_pay_price,omitempty"` // 订单实际支付金额, 单位分
	TenantKey     string `json:"tenant_key,omitempty"`      // 租户唯一标识
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationOrderList
//
// 该接口用于分页查询应用租户下的已付费订单，每次购买对应一个唯一的订单，订单会记录购买的套餐的相关信息，业务方需要自行处理套餐的有效期和付费方案的升级。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uETNwUjLxUDM14SM1ATN
func (r *ApplicationService) GetApplicationOrderList(ctx context.Context, request *GetApplicationOrderListReq, options ...MethodOptionFunc) (*GetApplicationOrderListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationOrderList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationOrderList mock enable")
		return r.cli.mock.mockApplicationGetApplicationOrderList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationOrderList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/pay/v1/order/list",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationOrderListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationOrderList mock ApplicationGetApplicationOrderList method
func (r *Mock) MockApplicationGetApplicationOrderList(f func(ctx context.Context, request *GetApplicationOrderListReq, options ...MethodOptionFunc) (*GetApplicationOrderListResp, *Response, error)) {
	r.mockApplicationGetApplicationOrderList = f
}

// UnMockApplicationGetApplicationOrderList un-mock ApplicationGetApplicationOrderList method
func (r *Mock) UnMockApplicationGetApplicationOrderList() {
	r.mockApplicationGetApplicationOrderList = nil
}

// GetApplicationOrderListReq ...
type GetApplicationOrderListReq struct {
	Status    *string `query:"status" json:"-"`     // 获取用户购买套餐信息设置的过滤条件, normal为正常状态，refunded为已退款，该字段为空或者all表示所有，未支付的订单无法查到
	PageSize  int64   `query:"page_size" json:"-"`  // `每页显示的订单数量`
	PageToken *string `query:"page_token" json:"-"` // 翻页标识，可以从上次请求的响应中获取，不填或者为空时表示从开头获取
	TenantKey *string `query:"tenant_key" json:"-"` // 购买应用的租户唯一标识，为空表示获取应用下所有订单，有值表示获取应用下该租户购买的订单
}

// getApplicationOrderListResp ...
type getApplicationOrderListResp struct {
	Code int64                        `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                       `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationOrderListResp `json:"data,omitempty"` // 返回的业务信息
}

// GetApplicationOrderListResp ...
type GetApplicationOrderListResp struct {
	Total     int64                                 `json:"total,omitempty"`      // 总订单数
	HasMore   bool                                  `json:"has_more,omitempty"`   // 是否还有数据，true还有数据，false没有数据
	PageToken string                                `json:"page_token,omitempty"` // 下一页数据的标识，可作为请求下一页数据的参数，当has_more为false时该字段为空
	OrderList *GetApplicationOrderListRespOrderList `json:"order_list,omitempty"` // 订单信息列表
}

// GetApplicationOrderListRespOrderList ...
type GetApplicationOrderListRespOrderList struct {
	OrderID       string `json:"order_id,omitempty"`        // 订单ID，唯一标识
	PricePlanID   string `json:"price_plan_id,omitempty"`   // 价格方案ID，唯一标识
	PricePlanType string `json:"price_plan_type,omitempty"` // 价格方案类型 "trial" -试用；"permanent"-一次性付费；"per_year"-企业年付费；"per_month"-企业月付费；"per_seat_per_year"-按人按年付费；"per_seat_per_month"-按人按月付费；"permanent_count"-按次付费；
	Seats         int64  `json:"seats,omitempty"`           // 实际购买人数 仅对price_plan_type为per_seat_per_year和per_seat_per_month 有效
	BuyCount      int64  `json:"buy_count,omitempty"`       // 购买数量 总是为1
	CreateTime    string `json:"create_time,omitempty"`     // 订单创建时间戳
	PayTime       string `json:"pay_time,omitempty"`        // 订单支付时间戳
	Status        string `json:"status,omitempty"`          // 订单当前状态，"normal" -正常；"refund"-已退款；
	BuyType       string `json:"buy_type,omitempty"`        // 购买类型，"buy" - 普通购买;"upgrade"-为升级购买(仅price_plan_type 为per_year，per_month，per_seat_per_year，per_seat_per_month时可升级购买);"renew" - 续费购买；
	SrcOrderID    string `json:"src_order_id,omitempty"`    // 源订单ID，当前订单为升级购买时，即buy_type为upgrade时，此字段记录源订单等ID
	DstOrderID    string `json:"dst_order_id,omitempty"`    // 升级后的新订单ID，当前订单如果做过升级购买，此字段记录升级购买后生成的新订单ID，当前订单仍然有效
	OrderPayPrice int64  `json:"order_pay_price,omitempty"` // 订单实际支付金额, 单位分
	TenantKey     string `json:"tenant_key,omitempty"`      // 租户唯一标识
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CheckUserIsInApplicationPaidScope
//
// 当付费套餐是按人数收费 或者 限制最大使用人数时，开放平台会引导企业管理员设置“付费功能开通范围”。  但是受开通范围限制，部分用户就无法使用对应的付费功能。  可以通过此接口，在付费功能点入口判断是否允许某个用户进入使用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uATNwUjLwUDM14CM1ATN
func (r *ApplicationService) CheckUserIsInApplicationPaidScope(ctx context.Context, request *CheckUserIsInApplicationPaidScopeReq, options ...MethodOptionFunc) (*CheckUserIsInApplicationPaidScopeResp, *Response, error) {
	if r.cli.mock.mockApplicationCheckUserIsInApplicationPaidScope != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#CheckUserIsInApplicationPaidScope mock enable")
		return r.cli.mock.mockApplicationCheckUserIsInApplicationPaidScope(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "CheckUserIsInApplicationPaidScope",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/pay/v1/paid_scope/check_user",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(checkUserIsInApplicationPaidScopeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationCheckUserIsInApplicationPaidScope mock ApplicationCheckUserIsInApplicationPaidScope method
func (r *Mock) MockApplicationCheckUserIsInApplicationPaidScope(f func(ctx context.Context, request *CheckUserIsInApplicationPaidScopeReq, options ...MethodOptionFunc) (*CheckUserIsInApplicationPaidScopeResp, *Response, error)) {
	r.mockApplicationCheckUserIsInApplicationPaidScope = f
}

// UnMockApplicationCheckUserIsInApplicationPaidScope un-mock ApplicationCheckUserIsInApplicationPaidScope method
func (r *Mock) UnMockApplicationCheckUserIsInApplicationPaidScope() {
	r.mockApplicationCheckUserIsInApplicationPaidScope = nil
}

// CheckUserIsInApplicationPaidScopeReq ...
type CheckUserIsInApplicationPaidScopeReq struct {
	OpenID *string `query:"open_id" json:"-"` // 用户 open_id，open_id 和 user_id 两个参数必须包含其一，若同时传入取 open_id
	UserID *string `query:"user_id" json:"-"` // 用户 user_id，user_id 和 open_id 两个参数必须包含其一，若同时传入取 open_id
}

// checkUserIsInApplicationPaidScopeResp ...
type checkUserIsInApplicationPaidScopeResp struct {
	Code int64                                  `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                                 `json:"msg,omitempty"`  // 返回码的描述
	Data *CheckUserIsInApplicationPaidScopeResp `json:"data,omitempty"` // 返回的业务信息
}

// CheckUserIsInApplicationPaidScopeResp ...
type CheckUserIsInApplicationPaidScopeResp struct {
	Status          string `json:"status,omitempty"`            // 用户是否在开通范围中，"valid" -该用户在开通范围中，"not_in_scope"-该用户不在开通范围中，"no_active_license"-企业未购买任何价格方案或价格方案已过期，"exceeds_maximum_limit"-企业当前配置的付费功能开通范围人数超出限制，需提醒管理员调整
	PricePlanID     string `json:"price_plan_id,omitempty"`     // 租户当前使用的「价格方案ID」，对应开发者后台中「价格方案配置」中的「价格方案」
	IsTrial         bool   `json:"is_trial,omitempty"`          // 是否为试用版本，true-是试用版本；false-非试用版本
	ServiceStopTime string `json:"service_stop_time,omitempty"` // 租户当前有生效价格方案时表示价格方案的到期时间，为时间unix时间戳
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUnderAuditList 查看本企业下所有待审核的自建应用列表
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/underauditlist
func (r *ApplicationService) GetApplicationUnderAuditList(ctx context.Context, request *GetApplicationUnderAuditListReq, options ...MethodOptionFunc) (*GetApplicationUnderAuditListResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUnderAuditList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUnderAuditList mock enable")
		return r.cli.mock.mockApplicationGetApplicationUnderAuditList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUnderAuditList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/underauditlist",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUnderAuditListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUnderAuditList mock ApplicationGetApplicationUnderAuditList method
func (r *Mock) MockApplicationGetApplicationUnderAuditList(f func(ctx context.Context, request *GetApplicationUnderAuditListReq, options ...MethodOptionFunc) (*GetApplicationUnderAuditListResp, *Response, error)) {
	r.mockApplicationGetApplicationUnderAuditList = f
}

// UnMockApplicationGetApplicationUnderAuditList un-mock ApplicationGetApplicationUnderAuditList method
func (r *Mock) UnMockApplicationGetApplicationUnderAuditList() {
	r.mockApplicationGetApplicationUnderAuditList = nil
}

// GetApplicationUnderAuditListReq ...
type GetApplicationUnderAuditListReq struct {
	Lang      string  `query:"lang" json:"-"`       // 指定返回的语言, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文, 最小长度：`1` 字符
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："new-e3c5a0627cdf0c2e057da7257b90376a"
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`50`
}

// getApplicationUnderAuditListResp ...
type getApplicationUnderAuditListResp struct {
	Code int64                             `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationUnderAuditListResp `json:"data,omitempty"`
}

// GetApplicationUnderAuditListResp ...
type GetApplicationUnderAuditListResp struct {
	Items     []*GetApplicationUnderAuditListRespItem `json:"items,omitempty"`      // 待审核应用列表
	HasMore   bool                                    `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken string                                  `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
}

// GetApplicationUnderAuditListRespItem ...
type GetApplicationUnderAuditListRespItem struct {
	AppID            string                                       `json:"app_id,omitempty"`             // 应用的 app_id
	CreatorID        string                                       `json:"creator_id,omitempty"`         // 应用创建者（所有者）
	Status           int64                                        `json:"status,omitempty"`             // 应用状态, 可选值有: `0`：停用状态, `1`：启用状态, `2`：未启用状态, `3`：未知状态
	SceneType        int64                                        `json:"scene_type,omitempty"`         // 应用类型, 可选值有: `0`：自建应用, `1`：应用商店应用, `2`：个人应用商店应用, `3`：未知应用类型
	RedirectURLs     []string                                     `json:"redirect_urls,omitempty"`      // 安全设置中的重定向 URL
	OnlineVersionID  string                                       `json:"online_version_id,omitempty"`  // 发布在线上的应用版本 ID，若没有则为空
	UnauditVersionID string                                       `json:"unaudit_version_id,omitempty"` // 在审核中的版本 ID，若没有则为空
	AppName          string                                       `json:"app_name,omitempty"`           // 应用名称, 最小长度：`1` 字符
	AvatarURL        string                                       `json:"avatar_url,omitempty"`         // 应用图标 url
	Description      string                                       `json:"description,omitempty"`        // 应用默认描述, 最小长度：`1` 字符
	Scopes           []*GetApplicationUnderAuditListRespItemScope `json:"scopes,omitempty"`             // 应用权限列表
	BackHomeURL      string                                       `json:"back_home_url,omitempty"`      // 后台主页地址
	I18n             *GetApplicationUnderAuditListRespItemI18n    `json:"i18n,omitempty"`               // 应用的国际化信息列表, 最小长度：`1`
	PrimaryLanguage  string                                       `json:"primary_language,omitempty"`   // 应用主语言, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	CommonCategories []string                                     `json:"common_categories,omitempty"`  // 应用分类的国际化描述, 最大长度：`3`
}

// GetApplicationUnderAuditListRespItemScope ...
type GetApplicationUnderAuditListRespItemScope struct {
	Scope       string `json:"scope,omitempty"`       // 应用权限
	Description string `json:"description,omitempty"` // 应用权限的国际化描述
	Level       string `json:"level,omitempty"`       // 权限等级描述, 可选值有: `1`：普通权限, `2`：高级权限, `3`：超敏感权限, `0`：未知等级
}

// GetApplicationUnderAuditListRespItemI18n ...
type GetApplicationUnderAuditListRespItemI18n struct {
	I18nKey     string `json:"i18n_key,omitempty"`    // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name        string `json:"name,omitempty"`        // 应用国际化名称, 最小长度：`1` 字符
	Description string `json:"description,omitempty"` // 应用国际化描述（副标题）, 最小长度：`1` 字符
	HelpUse     string `json:"help_use,omitempty"`    // 帮助国际化文档链接
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApplication 更新应用的分组信息（分组会影响应用在工作台中的分类情况，请谨慎更新）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application/patch
func (r *ApplicationService) UpdateApplication(ctx context.Context, request *UpdateApplicationReq, options ...MethodOptionFunc) (*UpdateApplicationResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplication != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplication mock enable")
		return r.cli.mock.mockApplicationUpdateApplication(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplication",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplication mock ApplicationUpdateApplication method
func (r *Mock) MockApplicationUpdateApplication(f func(ctx context.Context, request *UpdateApplicationReq, options ...MethodOptionFunc) (*UpdateApplicationResp, *Response, error)) {
	r.mockApplicationUpdateApplication = f
}

// UnMockApplicationUpdateApplication un-mock ApplicationUpdateApplication method
func (r *Mock) UnMockApplicationUpdateApplication() {
	r.mockApplicationUpdateApplication = nil
}

// UpdateApplicationReq ...
type UpdateApplicationReq struct {
	Lang             string   `query:"lang" json:"-"`              // 指定返回的语言, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	AppID            string   `path:"app_id" json:"-"`             // 应用的 id, 示例值："cli_9b445f5258795107"
	CommonCategories []string `json:"common_categories,omitempty"` // 应用分类的国际化描述, 长度范围：`1` ～ `3`
}

// updateApplicationResp ...
type updateApplicationResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *UpdateApplicationResp `json:"data,omitempty"`
}

// UpdateApplicationResp ...
type UpdateApplicationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUsageDetail
//
// 查询应用在指定时间段内企业员工的使用详细信息。
// :::warning
// 此接口目前仅支持小程序的使用情况查询，不支持网页应用和机器人应用的使用情况查询;仅支持查询自建应用，不支持查询商店应用
// :::
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTN0YjLzUDN24yM1QjN
func (r *ApplicationService) GetApplicationUsageDetail(ctx context.Context, request *GetApplicationUsageDetailReq, options ...MethodOptionFunc) (*GetApplicationUsageDetailResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUsageDetail != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUsageDetail mock enable")
		return r.cli.mock.mockApplicationGetApplicationUsageDetail(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUsageDetail",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_usage_detail",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUsageDetailResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUsageDetail mock ApplicationGetApplicationUsageDetail method
func (r *Mock) MockApplicationGetApplicationUsageDetail(f func(ctx context.Context, request *GetApplicationUsageDetailReq, options ...MethodOptionFunc) (*GetApplicationUsageDetailResp, *Response, error)) {
	r.mockApplicationGetApplicationUsageDetail = f
}

// UnMockApplicationGetApplicationUsageDetail un-mock ApplicationGetApplicationUsageDetail method
func (r *Mock) UnMockApplicationGetApplicationUsageDetail() {
	r.mockApplicationGetApplicationUsageDetail = nil
}

// GetApplicationUsageDetailReq ...
type GetApplicationUsageDetailReq struct {
	AppID     string                                `json:"app_id,omitempty"`     // 目标应用的 ID，支持自建应用
	Ability   string                                `json:"ability,omitempty"`    // 应用能力，mp：小程序
	TimeStart int64                                 `json:"time_start,omitempty"` // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd   int64                                 `json:"time_end,omitempty"`   // 截止时间戳（秒），时间跨度最长支持180天
	Filters   []*GetApplicationUsageDetailReqFilter `json:"filters,omitempty"`    // 过滤条件
	OrderBy   *string                               `json:"order_by,omitempty"`   // 排序字段，大小写不敏感，支持open_id、timestamp，默认为open_id
	Order     *string                               `json:"order,omitempty"`      // 排序方式，大小写不敏感，desc：降序；asc：升序，默认值
	PageToken *string                               `json:"page_token,omitempty"` // 分页标记，首次传空，非首次使用返回中的page_token
	PageSize  *int64                                `json:"page_size,omitempty"`  // 分页大小，默认为512，取值区间[1,1000]
}

// GetApplicationUsageDetailReqFilter ...
type GetApplicationUsageDetailReqFilter struct {
	Key   string `json:"key,omitempty"`   // 过滤字段，支持`department_id`
	Op    string `json:"op,omitempty"`    // 过滤操作，支持`in`、`=`
	Value string `json:"value,omitempty"` // 过滤字段值，多个使用英文逗号分隔
}

// getApplicationUsageDetailResp ...
type getApplicationUsageDetailResp struct {
	Code int64                          `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                         `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUsageDetailResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

// GetApplicationUsageDetailResp ...
type GetApplicationUsageDetailResp struct {
	HasMore   bool                                 `json:"has_more,omitempty"`   // 是否还有更多分页，当 has_more 为 true 时，会同时返回新的 page_token
	PageToken string                               `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Users     []*GetApplicationUsageDetailRespUser `json:"users,omitempty"`      // 用户列表
}

// GetApplicationUsageDetailRespUser ...
type GetApplicationUsageDetailRespUser struct {
	OpenID string `json:"open_id,omitempty"` // open_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUsageOverview 查看应用在某一天/某一周/某一个月的使用数据，可以查看租户整体对应用的使用情况，也可以分部门查看。
//
// 1. 仅支持企业版/旗舰版租户使用
// 2. 一般每天早上10点产出前一天的数据
// 3. 已经支持的指标包括：应用的活跃用户数、累计用户数、新增用户数
// 4. 数据从飞书3.46版本开始统计，使用飞书版本3.45及以下版本的用户数据不会被统计到
// 5. 按照部门查看数据时，会展示当前部门以及其子部门的整体使用情况
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_usage/overview
func (r *ApplicationService) GetApplicationUsageOverview(ctx context.Context, request *GetApplicationUsageOverviewReq, options ...MethodOptionFunc) (*GetApplicationUsageOverviewResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUsageOverview != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUsageOverview mock enable")
		return r.cli.mock.mockApplicationGetApplicationUsageOverview(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUsageOverview",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/app_usage/overview",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUsageOverviewResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUsageOverview mock ApplicationGetApplicationUsageOverview method
func (r *Mock) MockApplicationGetApplicationUsageOverview(f func(ctx context.Context, request *GetApplicationUsageOverviewReq, options ...MethodOptionFunc) (*GetApplicationUsageOverviewResp, *Response, error)) {
	r.mockApplicationGetApplicationUsageOverview = f
}

// UnMockApplicationGetApplicationUsageOverview un-mock ApplicationGetApplicationUsageOverview method
func (r *Mock) UnMockApplicationGetApplicationUsageOverview() {
	r.mockApplicationGetApplicationUsageOverview = nil
}

// GetApplicationUsageOverviewReq ...
type GetApplicationUsageOverviewReq struct {
	DepartmentIDType *DepartmentIDType `query:"department_id_type" json:"-"` // 调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门, 默认值: `open_department_id`
	AppID            string            `path:"app_id" json:"-"`              // 目标应用 ID, 示例值："cli_9f115af860f7901b"
	Date             string            `json:"date,omitempty"`               // 查询日期，格式为yyyy-mm-dd，若cycle_type为1，date可以为任何自然日；若cycle_type为2，则输入的date必须为周一； 若cycle_type为3，则输入的date必须为每月1号, 示例值："2021-07-08"
	CycleType        int64             `json:"cycle_type,omitempty"`         // 活跃周期的统计类型, 示例值：1, 可选值有: `1`：日活，指自然日，返回当前日期所在日的数据, `2`：周活，指自然周，返回当前日期所在周的数据。若到查询时当周还没结束，则返回周一到当前日期的数值。例如在2021/7/15 查询2021/7/5 这一周的数据，则代表的是2021/7/5 ~ 2021/7/11。但若是在2021/7/8 查询2021/7/5 这一周的数据，则返回的是2021/7/5 ~ 2021/7/7 的数据, `3`：月活，指自然月，返回当前日期所在月的数据。若不满一个月则返回当月1日到截止日期前的数据。例如在2021/8/15 查询 7月的数据，则代表2021/7/1~2021/7/31。 若在2021/8/15 查询8月的数据，则代表2021/8/1~2021/8/14的数据
	DepartmentID     *string           `json:"department_id,omitempty"`      // 查询的部门id，获取方法可参考[部门ID概述](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/department/field-overview),  若部门id为空，则返回当前租户的使用数据；若填写部门id，则返回当前部门的使用数据（包含子部门的用户）； ,  若路径参数中department_id_type为空或者为open_department_id，则此处应该填写部门的 open_department_id；若路径参数中department_id_type为department_id，则此处应该填写部门的 department_id。, 示例值："od-4e6ac4d14bcd5071a37a39de902c7141"
	Ability          string            `json:"ability,omitempty"`            // 能力类型，按能力类型进行筛选，返回对应能力的活跃数据, 示例值："app", 可选值有: `app`：返回应用整体的数据, `mp`：返回小程序能力的数据, `h5`：返回网页能力的数据, `bot`：返回机器人能力的数据
}

// getApplicationUsageOverviewResp ...
type getApplicationUsageOverviewResp struct {
	Code int64                            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                           `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationUsageOverviewResp `json:"data,omitempty"`
}

// GetApplicationUsageOverviewResp ...
type GetApplicationUsageOverviewResp struct {
	Items []*GetApplicationUsageOverviewRespItem `json:"items,omitempty"` // 员工使用应用概览数据
}

// GetApplicationUsageOverviewRespItem ...
type GetApplicationUsageOverviewRespItem struct {
	MetricName  string `json:"metric_name,omitempty"`  // 指标名称，uv：活跃用户数，total_users：累计用户数，new_users：新增用户数
	MetricValue int64  `json:"metric_value,omitempty"` // 指标值
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUsageTrend
//
// 查询应用在指定时间段内企业员工的使用趋势信息。
// 此接口目前仅支持小程序的使用情况查询，不支持网页应用和机器人应用的使用情况查询;仅支持查询自建应用，不支持查询商店应用
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uITN0YjLyUDN24iM1QjN
func (r *ApplicationService) GetApplicationUsageTrend(ctx context.Context, request *GetApplicationUsageTrendReq, options ...MethodOptionFunc) (*GetApplicationUsageTrendResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUsageTrend != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUsageTrend mock enable")
		return r.cli.mock.mockApplicationGetApplicationUsageTrend(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUsageTrend",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/app_usage_trend",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUsageTrendResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUsageTrend mock ApplicationGetApplicationUsageTrend method
func (r *Mock) MockApplicationGetApplicationUsageTrend(f func(ctx context.Context, request *GetApplicationUsageTrendReq, options ...MethodOptionFunc) (*GetApplicationUsageTrendResp, *Response, error)) {
	r.mockApplicationGetApplicationUsageTrend = f
}

// UnMockApplicationGetApplicationUsageTrend un-mock ApplicationGetApplicationUsageTrend method
func (r *Mock) UnMockApplicationGetApplicationUsageTrend() {
	r.mockApplicationGetApplicationUsageTrend = nil
}

// GetApplicationUsageTrendReq ...
type GetApplicationUsageTrendReq struct {
	AppID        string                               `json:"app_id,omitempty"`        // 目标应用的 ID，支持自建应用
	Ability      string                               `json:"ability,omitempty"`       // 应用能力，mp：小程序
	TimeStart    int64                                `json:"time_start,omitempty"`    // 起始时间戳（秒），时间跨度最长支持180天
	TimeEnd      int64                                `json:"time_end,omitempty"`      // 截止时间戳（秒），时间跨度最长支持180天
	TimeInterval int64                                `json:"time_interval,omitempty"` // 步长（秒），最小步长为60秒，需满足(${time_end} - ${time_start}) / ${time_interval} <= 2*24*60
	Filters      []*GetApplicationUsageTrendReqFilter `json:"filters,omitempty"`       // 过滤条件
}

// GetApplicationUsageTrendReqFilter ...
type GetApplicationUsageTrendReqFilter struct {
	Key   string `json:"key,omitempty"`   // 过滤字段，支持`department_id`
	Op    string `json:"op,omitempty"`    // 过滤操作，支持`in`、`=`
	Value string `json:"value,omitempty"` // 过滤字段值，多个使用英文逗号分隔
}

// getApplicationUsageTrendResp ...
type getApplicationUsageTrendResp struct {
	Code int64                         `json:"code,omitempty"` // 返回码，非0表示失败
	Msg  string                        `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUsageTrendResp `json:"data,omitempty"` // 返回的业务信息，仅code = 0时有效
}

// GetApplicationUsageTrendResp ...
type GetApplicationUsageTrendResp struct {
	Item map[string]*GetApplicationUsageTrendRespItem `json:"item,omitempty"` // 返回项
}

// GetApplicationUsageTrendRespItem ...
type GetApplicationUsageTrendRespItem struct {
	Trends []*GetApplicationUsageTrendRespItemTrend `json:"trends,omitempty"` // 趋势数据
}

// GetApplicationUsageTrendRespItemTrend ...
type GetApplicationUsageTrendRespItemTrend struct {
	Timestamp int64 `json:"timestamp,omitempty"` // 时间戳
	Pv        int64 `json:"pv,omitempty"`        // 应用使用pv
	Uv        int64 `json:"uv,omitempty"`        // 应用使用uv
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUserAdminScope
//
// 该接口用于获取应用管理员的管理范围，即该应用管理员能够管理哪些部门。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMzN3QjLzczN04yM3cDN
func (r *ApplicationService) GetApplicationUserAdminScope(ctx context.Context, request *GetApplicationUserAdminScopeReq, options ...MethodOptionFunc) (*GetApplicationUserAdminScopeResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUserAdminScope != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUserAdminScope mock enable")
		return r.cli.mock.mockApplicationGetApplicationUserAdminScope(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUserAdminScope",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v1/user/admin_scope/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUserAdminScopeResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUserAdminScope mock ApplicationGetApplicationUserAdminScope method
func (r *Mock) MockApplicationGetApplicationUserAdminScope(f func(ctx context.Context, request *GetApplicationUserAdminScopeReq, options ...MethodOptionFunc) (*GetApplicationUserAdminScopeResp, *Response, error)) {
	r.mockApplicationGetApplicationUserAdminScope = f
}

// UnMockApplicationGetApplicationUserAdminScope un-mock ApplicationGetApplicationUserAdminScope method
func (r *Mock) UnMockApplicationGetApplicationUserAdminScope() {
	r.mockApplicationGetApplicationUserAdminScope = nil
}

// GetApplicationUserAdminScopeReq ...
type GetApplicationUserAdminScopeReq struct {
	EmployeeID string `query:"employee_id" json:"-"` // 支持通过 open_id 或者 employee_id 查询，不支持混合两种 ID 进行查询，其中 employee_id 同通讯录 v3 版本中的 user_id
	OpenID     string `query:"open_id" json:"-"`     // 支持通过 open_id 或者 employee_id 查询，不支持混合两种 ID 进行查询，其中 employee_id 同通讯录 v3 版本中的 user_id
}

// getApplicationUserAdminScopeResp ...
type getApplicationUserAdminScopeResp struct {
	Code int64                             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUserAdminScopeResp `json:"data,omitempty"` // 返回业务数据
}

// GetApplicationUserAdminScopeResp ...
type GetApplicationUserAdminScopeResp struct {
	IsAll          bool     `json:"is_all,omitempty"`          // 是否管理所有部门
	DepartmentList []string `json:"department_list,omitempty"` // 管理的部门列表，当 is_all 为 true 时，不返回该字段
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationUserVisibleApp
//
// 该接口用于查询用户可用的应用列表，只能被企业自建应用调用。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMjM3UjLzIzN14yMycTN
func (r *ApplicationService) GetApplicationUserVisibleApp(ctx context.Context, request *GetApplicationUserVisibleAppReq, options ...MethodOptionFunc) (*GetApplicationUserVisibleAppResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationUserVisibleApp != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationUserVisibleApp mock enable")
		return r.cli.mock.mockApplicationGetApplicationUserVisibleApp(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationUserVisibleApp",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v1/user/visible_apps",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationUserVisibleAppResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationUserVisibleApp mock ApplicationGetApplicationUserVisibleApp method
func (r *Mock) MockApplicationGetApplicationUserVisibleApp(f func(ctx context.Context, request *GetApplicationUserVisibleAppReq, options ...MethodOptionFunc) (*GetApplicationUserVisibleAppResp, *Response, error)) {
	r.mockApplicationGetApplicationUserVisibleApp = f
}

// UnMockApplicationGetApplicationUserVisibleApp un-mock ApplicationGetApplicationUserVisibleApp method
func (r *Mock) UnMockApplicationGetApplicationUserVisibleApp() {
	r.mockApplicationGetApplicationUserVisibleApp = nil
}

// GetApplicationUserVisibleAppReq ...
type GetApplicationUserVisibleAppReq struct {
	PageToken *string `query:"page_token" json:"-"` // 分页起始位置标示，不填表示从头开始
	PageSize  *int64  `query:"page_size" json:"-"`  // 单页需求最大个数（最大 100），0 自动最大个数
	Lang      *string `query:"lang" json:"-"`       // 优先展示的应用信息的语言版本（zh_cn：中文，en_us：英文，ja_jp：日文）
	OpenID    *string `query:"open_id" json:"-"`    // 目标用户 open_id
	UserID    *string `query:"user_id" json:"-"`    // 目标用户 user_id，与 open_id 至少给其中之一，user_id 优先于 open_id
}

// getApplicationUserVisibleAppResp ...
type getApplicationUserVisibleAppResp struct {
	Code int64                             `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string                            `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApplicationUserVisibleAppResp `json:"data,omitempty"` // 返回的业务信息，仅 code = 0 时有效
}

// GetApplicationUserVisibleAppResp ...
type GetApplicationUserVisibleAppResp struct {
	PageToken  string                                   `json:"page_token,omitempty"`  // 下一个请求页应当给的起始位置
	PageSize   int64                                    `json:"page_size,omitempty"`   // 本次请求实际返回的页大小
	TotalCount int64                                    `json:"total_count,omitempty"` // 可用的应用总数
	HasMore    int64                                    `json:"has_more,omitempty"`    // 是否还有更多应用
	Lang       string                                   `json:"lang,omitempty"`        // 当前选择的版本语言
	AppList    *GetApplicationUserVisibleAppRespAppList `json:"app_list,omitempty"`    // 应用列表
}

// GetApplicationUserVisibleAppRespAppList ...
type GetApplicationUserVisibleAppRespAppList struct {
	AppID                string `json:"app_id,omitempty"`                 // 应用 ID
	PrimaryLanguage      string `json:"primary_language,omitempty"`       // 应用首选语言
	AppName              string `json:"app_name,omitempty"`               // 应用名称
	Description          string `json:"description,omitempty"`            // 应用描述
	AvatarURL            string `json:"avatar_url,omitempty"`             // 应用 icon
	AppSceneType         int64  `json:"app_scene_type,omitempty"`         // 应用类型，0：企业自建应用；1：应用商店应用
	Status               int64  `json:"status,omitempty"`                 // 启停状态，0：停用；1：启用
	MobileDefaultAbility int64  `json:"mobile_default_ability,omitempty"` // 移动端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
	PcDefaultAbility     int64  `json:"pc_default_ability,omitempty"`     // PC客户端默认的应用功能，0：未开启；1：小程序；2：H5；8：机器人
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApplicationVersion 根据 app_id，version_id 获取对应应用版本的信息
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/get
func (r *ApplicationService) GetApplicationVersion(ctx context.Context, request *GetApplicationVersionReq, options ...MethodOptionFunc) (*GetApplicationVersionResp, *Response, error) {
	if r.cli.mock.mockApplicationGetApplicationVersion != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#GetApplicationVersion mock enable")
		return r.cli.mock.mockApplicationGetApplicationVersion(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "GetApplicationVersion",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/app_versions/:version_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApplicationVersionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationGetApplicationVersion mock ApplicationGetApplicationVersion method
func (r *Mock) MockApplicationGetApplicationVersion(f func(ctx context.Context, request *GetApplicationVersionReq, options ...MethodOptionFunc) (*GetApplicationVersionResp, *Response, error)) {
	r.mockApplicationGetApplicationVersion = f
}

// UnMockApplicationGetApplicationVersion un-mock ApplicationGetApplicationVersion method
func (r *Mock) UnMockApplicationGetApplicationVersion() {
	r.mockApplicationGetApplicationVersion = nil
}

// GetApplicationVersionReq ...
type GetApplicationVersionReq struct {
	Lang       string  `query:"lang" json:"-"`         // 应用信息的语言版本, 示例值："zh_cn", 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文, 最小长度：`1` 字符
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	AppID      string  `path:"app_id" json:"-"`        // 应用的 app_id，需要查询其他应用版本信息时，必须申请[获取应用版本信息](https://open.feishu.cn/document/ukTMukTMukTM/uQjN3QjL0YzN04CN2cDN)权限，仅查询本应用版本信息时，可填入 "me" 或者应用自身 app_id, 示例值："cli_9f3ca975326b501b"
	VersionID  string  `path:"version_id" json:"-"`    // 唯一标识应用版本的 ID, 示例值："oav_d317f090b7258ad0372aa53963cda70d"
}

// getApplicationVersionResp ...
type getApplicationVersionResp struct {
	Code int64                      `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                     `json:"msg,omitempty"`  // 错误描述
	Data *GetApplicationVersionResp `json:"data,omitempty"`
}

// GetApplicationVersionResp ...
type GetApplicationVersionResp struct {
	AppVersion *GetApplicationVersionRespAppVersion `json:"app_version,omitempty"` // 应用版本信息
}

// GetApplicationVersionRespAppVersion ...
type GetApplicationVersionRespAppVersion struct {
	AppID            string                                      `json:"app_id,omitempty"`            // 应用 id
	Version          string                                      `json:"version,omitempty"`           // 在开发者后台填入的应用版本号
	VersionID        string                                      `json:"version_id,omitempty"`        // 唯一标识应用版本的 ID
	AppName          string                                      `json:"app_name,omitempty"`          // 应用默认名称
	AvatarURL        string                                      `json:"avatar_url,omitempty"`        // 应用头像 url
	Description      string                                      `json:"description,omitempty"`       // 应用默认描述
	Scopes           []*GetApplicationVersionRespAppVersionScope `json:"scopes,omitempty"`            // 应用权限列表
	BackHomeURL      string                                      `json:"back_home_url,omitempty"`     // 后台主页地址
	I18n             *GetApplicationVersionRespAppVersionI18n    `json:"i18n,omitempty"`              // 应用的国际化信息列表
	CommonCategories []string                                    `json:"common_categories,omitempty"` // 应用分类的国际化描述
	Events           []string                                    `json:"events,omitempty"`            // 应用已订阅开放平台事件列表
	Status           int64                                       `json:"status,omitempty"`            // 版本状态, 可选值有: `0`：未知状态, `1`：审核通过, `2`：审核拒绝, `3`：审核中, `4`：未提交审核
	CreateTime       string                                      `json:"create_time,omitempty"`       // 版本创建时间（单位：s）
	PublishTime      string                                      `json:"publish_time,omitempty"`      // 版本发布时间（单位：s）
	Ability          *GetApplicationVersionRespAppVersionAbility `json:"ability,omitempty"`           // 当前版本下应用开启的能力
	Remark           *GetApplicationVersionRespAppVersionRemark  `json:"remark,omitempty"`            // 跟随应用版本的信息
}

// GetApplicationVersionRespAppVersionScope ...
type GetApplicationVersionRespAppVersionScope struct {
	Scope       string `json:"scope,omitempty"`       // 应用权限
	Description string `json:"description,omitempty"` // 应用权限的国际化描述
	Level       string `json:"level,omitempty"`       // 权限等级描述, 可选值有: `1`：普通权限, `2`：高级权限, `3`：超敏感权限, `0`：未知等级
}

// GetApplicationVersionRespAppVersionI18n ...
type GetApplicationVersionRespAppVersionI18n struct {
	I18nKey     string `json:"i18n_key,omitempty"`    // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name        string `json:"name,omitempty"`        // 应用国际化名称
	Description string `json:"description,omitempty"` // 应用国际化描述（副标题）
	HelpUse     string `json:"help_use,omitempty"`    // 帮助国际化文档链接
}

// GetApplicationVersionRespAppVersionAbility ...
type GetApplicationVersionRespAppVersionAbility struct {
	Gadget           *GetApplicationVersionRespAppVersionAbilityGadget            `json:"gadget,omitempty"`            // 小程序能力
	WebApp           *GetApplicationVersionRespAppVersionAbilityWebApp            `json:"web_app,omitempty"`           // 网页能力
	Bot              *GetApplicationVersionRespAppVersionAbilityBot               `json:"bot,omitempty"`               // 机器人能力
	WorkplaceWidgets []*GetApplicationVersionRespAppVersionAbilityWorkplaceWidget `json:"workplace_widgets,omitempty"` // 小组件能力
	Navigate         *GetApplicationVersionRespAppVersionAbilityNavigate          `json:"navigate,omitempty"`          // 主导航小程序
	CloudDoc         *GetApplicationVersionRespAppVersionAbilityCloudDoc          `json:"cloud_doc,omitempty"`         // 云文档应用
	DocsBlocks       []*GetApplicationVersionRespAppVersionAbilityDocsBlock       `json:"docs_blocks,omitempty"`       // 云文档小组件
	MessageAction    *GetApplicationVersionRespAppVersionAbilityMessageAction     `json:"message_action,omitempty"`    // 消息快捷操作
	PlusMenu         *GetApplicationVersionRespAppVersionAbilityPlusMenu          `json:"plus_menu,omitempty"`         // 加号菜单
}

// GetApplicationVersionRespAppVersionAbilityGadget ...
type GetApplicationVersionRespAppVersionAbilityGadget struct {
	EnablePcMode         int64    `json:"enable_pc_mode,omitempty"`          // pc 支持的小程序模式，bit 位表示, 可选值有: `1`：sidebar 模式, `2`：pc 模式, `4`：主导航模式
	SchemaURLs           []string `json:"schema_urls,omitempty"`             // schema url 列表
	PcUseMobilePkg       bool     `json:"pc_use_mobile_pkg,omitempty"`       // pc 端是否使用小程序版本
	PcVersion            string   `json:"pc_version,omitempty"`              // pc 的小程序版本号
	MobileVersion        string   `json:"mobile_version,omitempty"`          // 移动端小程序版本号
	MobileMinLarkVersion string   `json:"mobile_min_lark_version,omitempty"` // 移动端兼容的最低飞书版本
	PcMinLarkVersion     string   `json:"pc_min_lark_version,omitempty"`     // pc 端兼容的最低飞书版本
}

// GetApplicationVersionRespAppVersionAbilityWebApp ...
type GetApplicationVersionRespAppVersionAbilityWebApp struct {
	PcURL     string `json:"pc_url,omitempty"`     // pc 端 url
	MobileURL string `json:"mobile_url,omitempty"` // 移动端 url
}

// GetApplicationVersionRespAppVersionAbilityBot ...
type GetApplicationVersionRespAppVersionAbilityBot struct {
	CardRequestURL string `json:"card_request_url,omitempty"` // 消息卡片回调地址
}

// GetApplicationVersionRespAppVersionAbilityWorkplaceWidget ...
type GetApplicationVersionRespAppVersionAbilityWorkplaceWidget struct {
	MinLarkVersion string `json:"min_lark_version,omitempty"` // 最低兼容 lark 版本号
}

// GetApplicationVersionRespAppVersionAbilityNavigate ...
type GetApplicationVersionRespAppVersionAbilityNavigate struct {
	Pc     *GetApplicationVersionRespAppVersionAbilityNavigatePc     `json:"pc,omitempty"`     // pc 端主导航信息
	Mobile *GetApplicationVersionRespAppVersionAbilityNavigateMobile `json:"mobile,omitempty"` // 移动端主导航信息
}

// GetApplicationVersionRespAppVersionAbilityNavigatePc ...
type GetApplicationVersionRespAppVersionAbilityNavigatePc struct {
	Version       string `json:"version,omitempty"`         // 主导航小程序版本号
	ImageURL      string `json:"image_url,omitempty"`       // 默认图片 url
	HoverImageURL string `json:"hover_image_url,omitempty"` // 选中态图片 url
}

// GetApplicationVersionRespAppVersionAbilityNavigateMobile ...
type GetApplicationVersionRespAppVersionAbilityNavigateMobile struct {
	Version       string `json:"version,omitempty"`         // 主导航小程序版本号
	ImageURL      string `json:"image_url,omitempty"`       // 默认图片 url
	HoverImageURL string `json:"hover_image_url,omitempty"` // 选中态图片 url
}

// GetApplicationVersionRespAppVersionAbilityCloudDoc ...
type GetApplicationVersionRespAppVersionAbilityCloudDoc struct {
	SpaceURL string                                                  `json:"space_url,omitempty"` // 云空间重定向 url
	I18n     *GetApplicationVersionRespAppVersionAbilityCloudDocI18n `json:"i18n,omitempty"`      // 国际化信息
	IconURL  string                                                  `json:"icon_url,omitempty"`  // 图标链接
	Mode     int64                                                   `json:"mode,omitempty"`      // 云文档支持模式, 可选值有: `0`：未知, `1`：移动端
}

// GetApplicationVersionRespAppVersionAbilityCloudDocI18n ...
type GetApplicationVersionRespAppVersionAbilityCloudDocI18n struct {
	I18nKey          string `json:"i18n_key,omitempty"`          // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name             string `json:"name,omitempty"`              // 云文档国际化名称
	ReadDescription  string `json:"read_description,omitempty"`  // 云文档国际化读权限说明
	WriteDescription string `json:"write_description,omitempty"` // 云文档国际化写权限说明
}

// GetApplicationVersionRespAppVersionAbilityDocsBlock ...
type GetApplicationVersionRespAppVersionAbilityDocsBlock struct {
	BlockTypeID   string                                                   `json:"block_type_id,omitempty"`   // BlockTypeID
	I18n          *GetApplicationVersionRespAppVersionAbilityDocsBlockI18n `json:"i18n,omitempty"`            // block 的国际化信息
	MobileIconURL string                                                   `json:"mobile_icon_url,omitempty"` // 移动端 icon 链接
	PcIconURL     string                                                   `json:"pc_icon_url,omitempty"`     // pc 端口 icon 链接
}

// GetApplicationVersionRespAppVersionAbilityDocsBlockI18n ...
type GetApplicationVersionRespAppVersionAbilityDocsBlockI18n struct {
	I18nKey string `json:"i18n_key,omitempty"` // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name    string `json:"name,omitempty"`     // 名称
}

// GetApplicationVersionRespAppVersionAbilityMessageAction ...
type GetApplicationVersionRespAppVersionAbilityMessageAction struct {
	PcAppLink     string                                                       `json:"pc_app_link,omitempty"`     // pc 端链接
	MobileAppLink string                                                       `json:"mobile_app_link,omitempty"` // 移动端链接
	I18n          *GetApplicationVersionRespAppVersionAbilityMessageActionI18n `json:"i18n,omitempty"`            // 国际化信息
}

// GetApplicationVersionRespAppVersionAbilityMessageActionI18n ...
type GetApplicationVersionRespAppVersionAbilityMessageActionI18n struct {
	I18nKey string `json:"i18n_key,omitempty"` // 国际化语言的 key, 可选值有: `zh_cn`：中文, `en_us`：英文, `ja_jp`：日文
	Name    string `json:"name,omitempty"`     // 国际化名称
}

// GetApplicationVersionRespAppVersionAbilityPlusMenu ...
type GetApplicationVersionRespAppVersionAbilityPlusMenu struct {
	PcAppLink     string `json:"pc_app_link,omitempty"`     // pc 端链接
	MobileAppLink string `json:"mobile_app_link,omitempty"` // 移动端链接
}

// GetApplicationVersionRespAppVersionRemark ...
type GetApplicationVersionRespAppVersionRemark struct {
	Remark       string                                               `json:"remark,omitempty"`        // 备注说明
	UpdateRemark string                                               `json:"update_remark,omitempty"` // 更新说明
	Visibility   *GetApplicationVersionRespAppVersionRemarkVisibility `json:"visibility,omitempty"`    // 应用当前版本开发者编辑的可见性建议，若开发者未编辑可见性建议，则该字段无内容
}

// GetApplicationVersionRespAppVersionRemarkVisibility ...
type GetApplicationVersionRespAppVersionRemarkVisibility struct {
	IsAll         bool                                                              `json:"is_all,omitempty"`         // 是否全员可见
	VisibleList   *GetApplicationVersionRespAppVersionRemarkVisibilityVisibleList   `json:"visible_list,omitempty"`   // 可见名单
	InvisibleList *GetApplicationVersionRespAppVersionRemarkVisibilityInvisibleList `json:"invisible_list,omitempty"` // 不可见名单
}

// GetApplicationVersionRespAppVersionRemarkVisibilityVisibleList ...
type GetApplicationVersionRespAppVersionRemarkVisibilityVisibleList struct {
	OpenIDs       []string `json:"open_ids,omitempty"`       // 可见性成员 open_id 列表
	DepartmentIDs []string `json:"department_ids,omitempty"` // 可见性部门的 id 列表
}

// GetApplicationVersionRespAppVersionRemarkVisibilityInvisibleList ...
type GetApplicationVersionRespAppVersionRemarkVisibilityInvisibleList struct {
	OpenIDs       []string `json:"open_ids,omitempty"`       // 可见性成员 open_id 列表
	DepartmentIDs []string `json:"department_ids,omitempty"` // 可见性部门的 id 列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateApplicationVersion 通过接口来更新应用版本的审核结果：通过后应用可以直接上架；拒绝后则开发者可以看到拒绝理由，并在修改后再次申请发布。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/application-v6/application-app_version/patch
func (r *ApplicationService) UpdateApplicationVersion(ctx context.Context, request *UpdateApplicationVersionReq, options ...MethodOptionFunc) (*UpdateApplicationVersionResp, *Response, error) {
	if r.cli.mock.mockApplicationUpdateApplicationVersion != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Application#UpdateApplicationVersion mock enable")
		return r.cli.mock.mockApplicationUpdateApplicationVersion(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Application",
		API:                   "UpdateApplicationVersion",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/application/v6/applications/:app_id/app_versions/:version_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(updateApplicationVersionResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApplicationUpdateApplicationVersion mock ApplicationUpdateApplicationVersion method
func (r *Mock) MockApplicationUpdateApplicationVersion(f func(ctx context.Context, request *UpdateApplicationVersionReq, options ...MethodOptionFunc) (*UpdateApplicationVersionResp, *Response, error)) {
	r.mockApplicationUpdateApplicationVersion = f
}

// UnMockApplicationUpdateApplicationVersion un-mock ApplicationUpdateApplicationVersion method
func (r *Mock) UnMockApplicationUpdateApplicationVersion() {
	r.mockApplicationUpdateApplicationVersion = nil
}

// UpdateApplicationVersionReq ...
type UpdateApplicationVersionReq struct {
	UserIDType   IDType  `query:"user_id_type" json:"-"`  // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	OperatorID   string  `query:"operator_id" json:"-"`   // 操作者的 open_id, 示例值："ou_4065981088f8ef67a504ba8bd6b24d85"
	RejectReason *string `query:"reject_reason" json:"-"` // 当修改版本状态为被驳回时，这一项必填, 示例值："拒绝理由"
	AppID        string  `path:"app_id" json:"-"`         // 应用 id, 示例值："cli_9f3ca975326b501b"
	VersionID    string  `path:"version_id" json:"-"`     // 唯一标识应用版本的 ID, 示例值："oav_d317f090b7258ad0372aa53963cda70d"
	Status       *int64  `json:"status,omitempty"`        // 版本状态, 示例值：1, 可选值有: `0`：未知状态, `1`：审核通过, `2`：审核拒绝, `3`：审核中, `4`：未提交审核
}

// updateApplicationVersionResp ...
type updateApplicationVersionResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *UpdateApplicationVersionResp `json:"data,omitempty"`
}

// UpdateApplicationVersionResp ...
type UpdateApplicationVersionResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetApproval
//
// 根据 Approval Code 获取某个审批定义的详情，用于构造创建审批实例的请求。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uADNyUjLwQjM14CM0ITN
func (r *ApprovalService) GetApproval(ctx context.Context, request *GetApprovalReq, options ...MethodOptionFunc) (*GetApprovalResp, *Response, error) {
	if r.cli.mock.mockApprovalGetApproval != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Approval#GetApproval mock enable")
		return r.cli.mock.mockApprovalGetApproval(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Approval",
		API:                   "GetApproval",
		Method:                "POST",
		URL:                   r.cli.wwwBaseURL + "/approval/openapi/v2/approval/get",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getApprovalResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockApprovalGetApproval mock ApprovalGetApproval method
func (r *Mock) MockApprovalGetApproval(f func(ctx context.Context, request *GetApprovalReq, options ...MethodOptionFunc) (*GetApprovalResp, *Response, error)) {
	r.mockApprovalGetApproval = f
}

// UnMockApprovalGetApproval un-mock ApprovalGetApproval method
func (r *Mock) UnMockApprovalGetApproval() {
	r.mockApprovalGetApproval = nil
}

// GetApprovalReq ...
type GetApprovalReq struct {
	ApprovalCode string  `json:"approval_code,omitempty"` // 审批定义 Code
	Locale       *string `json:"locale,omitempty"`        // zh-CN - 中文<br>en-US - 英文  <br>ja-JP - 日文
}

// getApprovalResp ...
type getApprovalResp struct {
	Code int64            `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string           `json:"msg,omitempty"`  // 返回码的描述
	Data *GetApprovalResp `json:"data,omitempty"` // 返回业务信息
}

// GetApprovalResp ...
type GetApprovalResp struct {
	ApprovalName string                   `json:"approval_name,omitempty"` // 审批名称
	Status       string                   `json:"status,omitempty"`        // 审批定义状态<br>ACTIVE -已启用<br>INACTIVE -已停用<br>DELETED -已删除<br>UNKNOWN -未知
	Form         ApprovalWidgetList       `json:"form,omitempty"`          // json 数组，**控件信息**
	NodeList     []*GetApprovalRespNode   `json:"node_list,omitempty"`     // 节点信息
	Viewers      []*GetApprovalRespViewer `json:"viewers,omitempty"`       // 可见人列表
}

// GetApprovalRespNode ...
type GetApprovalRespNode struct {
	Name         string  `json:"name,omitempty"`           // 节点名称
	NeedApprover bool    `json:"need_approver,omitempty"`  // 是否发起人自选节点<br>true - 发起审批时需要提交审批人
	NodeID       string  `json:"node_id,omitempty"`        // 节点 ID
	CustomNodeID *string `json:"custom_node_id,omitempty"` // 节点自定义 ID，如果没有设置则不返回
	NodeType     string  `json:"node_type,omitempty"`      // 审批方式<br>AND -会签<br>OR - 或签<br>CC_NODE -抄送节点
}

// GetApprovalRespViewer ...
type GetApprovalRespViewer struct {
	Type   string  `json:"type,omitempty"`    // 可见人类型，分别有：<br>TENANT：租户内可见<br>DEPARTMENT：指定部门<br> USER：指定用户<br>NONE：任何人都不可见
	OpenID *string `json:"open_id,omitempty"` // 在可见人类型为DEPARTMENT时，open_id为部门的open_id<br>在可见人类型为USER时，open_id为用户的open_id
	UserID *string `json:"user_id,omitempty"` // 在可见人类型为USER时，表示可见人用户id
}
