// Code generated by lark_sdk_gen. DO NOT EDIT.

package lark

import (
	"context"
)

// GetUserInfo 此接口仅用于获取登录用户的信息。调用此接口需要在 Header 中带上 user_access_token。
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uIDO4UjLygDO14iM4gTN
func (r *AuthService) GetUserInfo(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error) {
	if r.cli.mock.mockAuthGetUserInfo != nil {
		r.cli.logDebug(ctx, "[lark] Auth#GetUserInfo mock enable")
		return r.cli.mock.mockAuthGetUserInfo(ctx, request, options...)
	}

	r.cli.logInfo(ctx, "[lark] Auth#GetUserInfo call api")
	r.cli.logDebug(ctx, "[lark] Auth#GetUserInfo request: %s", jsonString(request))

	req := &RawRequestReq{
		Method:              "GET",
		URL:                 "https://open.feishu.cn/open-apis/authen/v1/user_info",
		Body:                request,
		MethodOption:        newMethodOption(options),
		NeedUserAccessToken: true,
	}
	resp := new(getUserInfoResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	if err != nil {
		r.cli.logError(ctx, "[lark] Auth#GetUserInfo GET https://open.feishu.cn/open-apis/authen/v1/user_info failed: %s", err)
		return nil, response, err
	} else if resp.Code != 0 {
		r.cli.logError(ctx, "[lark] Auth#GetUserInfo GET https://open.feishu.cn/open-apis/authen/v1/user_info failed, code: %d, msg: %s", resp.Code, resp.Msg)
		return nil, response, NewError("Auth", "GetUserInfo", resp.Code, resp.Msg)
	}

	r.cli.logDebug(ctx, "[lark] Auth#GetUserInfo request_id: %s, response: %s", response.RequestID, jsonString(resp.Data))

	return resp.Data, response, nil
}

func (r *Mock) MockAuthGetUserInfo(f func(ctx context.Context, request *GetUserInfoReq, options ...MethodOptionFunc) (*GetUserInfoResp, *Response, error)) {
	r.mockAuthGetUserInfo = f
}

func (r *Mock) UnMockAuthGetUserInfo() {
	r.mockAuthGetUserInfo = nil
}

type GetUserInfoReq struct{}

type getUserInfoResp struct {
	Code int              `json:"code,omitempty"` // 返回码，0表示请求成功，其他表示请求失败
	Msg  string           `json:"msg,omitempty"`  // 返回信息
	Data *GetUserInfoResp `json:"data,omitempty"` // 返回业务数据
}

type GetUserInfoResp struct {
	Name         string `json:"name,omitempty"`          // 用户姓名
	EnName       string `json:"en_name,omitempty"`       // 用户英文名称
	AvatarURL    string `json:"avatar_url,omitempty"`    // 用户头像
	AvatarThumb  string `json:"avatar_thumb,omitempty"`  // 用户头像 72x72
	AvatarMiddle string `json:"avatar_middle,omitempty"` // 用户头像 240x240
	AvatarBig    string `json:"avatar_big,omitempty"`    // 用户头像 640x640
	Email        string `json:"email,omitempty"`         // 用户邮箱，拥有"获取用户邮箱"权限时返回
	UserID       string `json:"user_id,omitempty"`       // 用户的 user_id，申请了"获取用户user_id"权限的应用返回该字段
	Mobile       string `json:"mobile,omitempty"`        // 用户手机号，申请了"获取用户手机号"权限的应用返回该字段
	OpenID       string `json:"open_id,omitempty"`       // 用户在应用内的唯一标识
	UnionID      string `json:"union_id,omitempty"`      // 用户对ISV的唯一标识，对于同一个ISV，用户在其名下所有应用的union_id相同
	TenantKey    string `json:"tenant_key,omitempty"`    // 用于企业标识
}
