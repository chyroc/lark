// Code generated by lark_sdk_gen. DO NOT EDIT.
/**
 * Copyright 2022 chyroc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package lark

import (
	"context"
)

// UpdateChatAnnouncement 更新会话中的群公告信息，更新公告信息的格式和更新[云文档](https://open.feishu.cn/document/ukTMukTMukTM/uAzM5YjLwMTO24CMzkjN)格式相同。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 若群开启了 [仅群主和群管理员可编辑群信息] 配置，群主/群管理员 或 创建群组且具备 [更新应用所创建群的群信息] 权限的机器人，可更新群公告
// - 若群未开启 [仅群主和群管理员可编辑群信息] 配置，所有成员可以更新群公告
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-announcement/patch
func (r *ChatService) UpdateChatAnnouncement(ctx context.Context, request *UpdateChatAnnouncementReq, options ...MethodOptionFunc) (*UpdateChatAnnouncementResp, *Response, error) {
	if r.cli.mock.mockChatUpdateChatAnnouncement != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#UpdateChatAnnouncement mock enable")
		return r.cli.mock.mockChatUpdateChatAnnouncement(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "UpdateChatAnnouncement",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/announcement",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateChatAnnouncementResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatUpdateChatAnnouncement mock ChatUpdateChatAnnouncement method
func (r *Mock) MockChatUpdateChatAnnouncement(f func(ctx context.Context, request *UpdateChatAnnouncementReq, options ...MethodOptionFunc) (*UpdateChatAnnouncementResp, *Response, error)) {
	r.mockChatUpdateChatAnnouncement = f
}

// UnMockChatUpdateChatAnnouncement un-mock ChatUpdateChatAnnouncement method
func (r *Mock) UnMockChatUpdateChatAnnouncement() {
	r.mockChatUpdateChatAnnouncement = nil
}

// UpdateChatAnnouncementReq ...
type UpdateChatAnnouncementReq struct {
	ChatID   string   `path:"chat_id" json:"-"`   // 待修改公告的群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_5ad11d72b830411d72b836c20"
	Revision string   `json:"revision,omitempty"` // 文档当前版本号 int64 类型，get 接口会返回, 示例值："12"
	Requests []string `json:"requests,omitempty"` // 修改文档请求的序列化字段, 示例值：xxx
}

// updateChatAnnouncementResp ...
type updateChatAnnouncementResp struct {
	Code int64                       `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                      `json:"msg,omitempty"`  // 错误描述
	Data *UpdateChatAnnouncementResp `json:"data,omitempty"`
}

// UpdateChatAnnouncementResp ...
type UpdateChatAnnouncementResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateChat 创建群并设置群头像、群名、群描述等。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 本接口只支持创建群，如果需要拉用户或者机器人入群参考 [将用户或机器人拉入群聊](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create)接口
// - 每次请求，最多拉 50 个用户或者 5 个机器人，并且群组最多容纳 15 个机器人
// - 拉机器人入群请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/create
func (r *ChatService) CreateChat(ctx context.Context, request *CreateChatReq, options ...MethodOptionFunc) (*CreateChatResp, *Response, error) {
	if r.cli.mock.mockChatCreateChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#CreateChat mock enable")
		return r.cli.mock.mockChatCreateChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "CreateChat",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(createChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatCreateChat mock ChatCreateChat method
func (r *Mock) MockChatCreateChat(f func(ctx context.Context, request *CreateChatReq, options ...MethodOptionFunc) (*CreateChatResp, *Response, error)) {
	r.mockChatCreateChat = f
}

// UnMockChatCreateChat un-mock ChatCreateChat method
func (r *Mock) UnMockChatCreateChat() {
	r.mockChatCreateChat = nil
}

// CreateChatReq ...
type CreateChatReq struct {
	UserIDType             *IDType             `query:"user_id_type" json:"-"`             // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	SetBotManager          *bool               `query:"set_bot_manager" json:"-"`          // 如果选择了设置群主为指定用户，可以选择是否同时设置创建此群的机器人为管理员，此标志位用于标记是否设置创建群的机器人为管理员, 示例值：false
	Avatar                 *string             `json:"avatar,omitempty"`                   // 群头像对应的 Image Key，可通过[上传图片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)获取（注意：上传图片的 [image_type] 需要指定为 [avatar]）, 示例值："default-avatar_44ae0ca3-e140-494b-956f-78091e348435"
	Name                   *string             `json:"name,omitempty"`                     // 群名称, 示例值："测试群名称"
	Description            *string             `json:"description,omitempty"`              // 群描述, 示例值："测试群描述"
	I18nNames              *I18nNames          `json:"i18n_names,omitempty"`               // 群国际化名称
	OwnerID                *string             `json:"owner_id,omitempty"`                 // 创建群时指定的群主，不填时指定建群的机器人为群主。,群主 ID，ID值与查询参数中的 user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："4d7a3c6g"
	UserIDList             []string            `json:"user_id_list,omitempty"`             // 创建群时邀请的群成员，id 类型为 user_id_type, 示例值：["4d7a3c6g"], 最大长度：`50`
	BotIDList              []string            `json:"bot_id_list,omitempty"`              // 创建群时邀请的群机器人, 示例值：["cli_a10fbf7e94b8d01d"], 最大长度：`5`
	ChatMode               *ChatMode           `json:"chat_mode,omitempty"`                // 群模式, 可选值有: `group`：群组, 示例值："group"
	ChatType               *ChatType           `json:"chat_type,omitempty"`                // 群类型, 可选值有: `private`：私有群, `public`：公开群, 示例值："private"
	External               *bool               `json:"external,omitempty"`                 // 是否是外部群, 示例值：false
	JoinMessageVisibility  *MessageVisibility  `json:"join_message_visibility,omitempty"`  // 入群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见, 示例值："all_members"
	LeaveMessageVisibility *MessageVisibility  `json:"leave_message_visibility,omitempty"` // 出群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见, 示例值："all_members"
	MembershipApproval     *MembershipApproval `json:"membership_approval,omitempty"`      // 加群审批, 可选值有: `no_approval_required`：无需审批, `approval_required`：需要审批, 示例值："no_approval_required"
}

// createChatResp ...
type createChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *CreateChatResp `json:"data,omitempty"`
}

// CreateChatResp ...
type CreateChatResp struct {
	ChatID                 string               `json:"chat_id,omitempty"`                  // 群 ID，详情参见：[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar                 string               `json:"avatar,omitempty"`                   // 群头像 URL
	Name                   string               `json:"name,omitempty"`                     // 群名称
	Description            string               `json:"description,omitempty"`              // 群描述
	I18nNames              *I18nNames           `json:"i18n_names,omitempty"`               // 群国际化名称
	OwnerID                string               `json:"owner_id,omitempty"`                 // 群主 ID，ID值与查询参数中的 user_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction),当群主是机器人时，该字段不返回
	OwnerIDType            IDType               `json:"owner_id_type,omitempty"`            // 群主 ID 对应的ID类型，与查询参数中的 user_id_type 相同。取值为：`open_id`、`user_id`、`union_id`其中之一。,当群主是机器人时，该字段不返回
	AddMemberPermission    AddMemberPermission  `json:"add_member_permission,omitempty"`    // 拉 用户或机器人 入群权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员
	ShareCardPermission    ShareCardPermission  `json:"share_card_permission,omitempty"`    // 群分享权限, 可选值有: `allowed`：允许, `not_allowed`：不允许
	AtAllPermission        AtAllPermission      `json:"at_all_permission,omitempty"`        // at 所有人权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员
	EditPermission         EditPermission       `json:"edit_permission,omitempty"`          // 群编辑权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员
	ChatMode               ChatMode             `json:"chat_mode,omitempty"`                // 群模式, 可选值有: `group`：群组
	ChatType               ChatType             `json:"chat_type,omitempty"`                // 群类型, 可选值有: `private`：私有群, `public`：公开群
	ChatTag                string               `json:"chat_tag,omitempty"`                 // 群标签，如有多个，则按照下列顺序返回第一个, 可选值有: `inner`：内部群, `tenant`：公司群, `department`：部门群, `edu`：教育群, `meeting`：会议群, `customer_service`：客服群
	External               bool                 `json:"external,omitempty"`                 // 是否是外部群
	TenantKey              string               `json:"tenant_key,omitempty"`               // 租户在飞书上的唯一标识，用来换取对应的tenant_access_token，也可以用作租户在应用里面的唯一标识
	JoinMessageVisibility  MessageVisibility    `json:"join_message_visibility,omitempty"`  // 入群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见
	LeaveMessageVisibility MessageVisibility    `json:"leave_message_visibility,omitempty"` // 出群消息可见性, 可选值有: `only_owner`：仅群主和管理员可见, `all_members`：所有成员可见, `not_anyone`：任何人均不可见
	MembershipApproval     MembershipApproval   `json:"membership_approval,omitempty"`      // 加群审批, 可选值有: `no_approval_required`：无需审批, `approval_required`：需要审批
	ModerationPermission   ModerationPermission `json:"moderation_permission,omitempty"`    // 发言权限, 可选值有: `only_owner`：仅群主和管理员, `all_members`：所有成员, `moderator_list`：指定群成员
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteChat 解散群组
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 如果使用tenant_access_token，需要机器人是群的创建者且具备[更新应用所创建群的群信息]权限才可解散群
// - 如果使用user_access_token，需要对应的用户是群主才可解散群
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/delete
func (r *ChatService) DeleteChat(ctx context.Context, request *DeleteChatReq, options ...MethodOptionFunc) (*DeleteChatResp, *Response, error) {
	if r.cli.mock.mockChatDeleteChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#DeleteChat mock enable")
		return r.cli.mock.mockChatDeleteChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "DeleteChat",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatDeleteChat mock ChatDeleteChat method
func (r *Mock) MockChatDeleteChat(f func(ctx context.Context, request *DeleteChatReq, options ...MethodOptionFunc) (*DeleteChatResp, *Response, error)) {
	r.mockChatDeleteChat = f
}

// UnMockChatDeleteChat un-mock ChatDeleteChat method
func (r *Mock) UnMockChatDeleteChat() {
	r.mockChatDeleteChat = nil
}

// DeleteChatReq ...
type DeleteChatReq struct {
	ChatID string `path:"chat_id" json:"-"` // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// deleteChatResp ...
type deleteChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *DeleteChatResp `json:"data,omitempty"`
}

// DeleteChatResp ...
type DeleteChatResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChat 获取群名称、群描述、群头像、群主 ID 等群基本信息。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 机器人或授权用户必须在群里（否则只会返回群名称、群头像等基本信息）
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get
func (r *ChatService) GetChat(ctx context.Context, request *GetChatReq, options ...MethodOptionFunc) (*GetChatResp, *Response, error) {
	if r.cli.mock.mockChatGetChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChat mock enable")
		return r.cli.mock.mockChatGetChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChat mock ChatGetChat method
func (r *Mock) MockChatGetChat(f func(ctx context.Context, request *GetChatReq, options ...MethodOptionFunc) (*GetChatResp, *Response, error)) {
	r.mockChatGetChat = f
}

// UnMockChatGetChat un-mock ChatGetChat method
func (r *Mock) UnMockChatGetChat() {
	r.mockChatGetChat = nil
}

// GetChatReq ...
type GetChatReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	ChatID     string  `path:"chat_id" json:"-"`       // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// getChatResp ...
type getChatResp struct {
	Code int64        `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string       `json:"msg,omitempty"`  // 错误描述
	Data *GetChatResp `json:"data,omitempty"`
}

// GetChatResp ...
type GetChatResp struct {
	Avatar                 string               `json:"avatar,omitempty"`                   // 群头像 URL
	Name                   string               `json:"name,omitempty"`                     // 群名称
	Description            string               `json:"description,omitempty"`              // 群描述
	I18nNames              *I18nNames           `json:"i18n_names,omitempty"`               // 群国际化名称
	AddMemberPermission    AddMemberPermission  `json:"add_member_permission,omitempty"`    // 群成员添加权限(all_members/only_owner)
	ShareCardPermission    ShareCardPermission  `json:"share_card_permission,omitempty"`    // 群分享权限(allowed/not_allowed)
	AtAllPermission        AtAllPermission      `json:"at_all_permission,omitempty"`        // at 所有人权限(all_members/only_owner)
	EditPermission         EditPermission       `json:"edit_permission,omitempty"`          // 群编辑权限(all_members/only_owner)
	OwnerIDType            IDType               `json:"owner_id_type,omitempty"`            // 群主 ID 的类型(open_id/user_id/union_id)，群主是机器人时，不返回该字段。
	OwnerID                string               `json:"owner_id,omitempty"`                 // 群主 ID，群主是机器人时，不返回该字段。
	ChatMode               ChatMode             `json:"chat_mode,omitempty"`                // 群模式(group/topic/p2p)
	ChatType               ChatType             `json:"chat_type,omitempty"`                // 群类型(private/public)
	ChatTag                string               `json:"chat_tag,omitempty"`                 // 优先级最高的一个群tag(inner/tenant/department/edu/meeting/customer_service)
	JoinMessageVisibility  MessageVisibility    `json:"join_message_visibility,omitempty"`  // 入群消息可见性(only_owner/all_members/not_anyone)
	LeaveMessageVisibility MessageVisibility    `json:"leave_message_visibility,omitempty"` // 出群消息可见性(only_owner/all_members/not_anyone)
	MembershipApproval     MembershipApproval   `json:"membership_approval,omitempty"`      // 加群审批(no_approval_required/approval_required)
	ModerationPermission   ModerationPermission `json:"moderation_permission,omitempty"`    // 发言权限(all_members/only_owner/moderator_list)
	External               bool                 `json:"external,omitempty"`                 // 是否是外部群
	TenantKey              string               `json:"tenant_key,omitempty"`               // tenant key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatListOfSelf 获取用户或者机器人所在群列表。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 查询参数  **user_id_type** 用于控制响应体中 owner_id 的类型，如果是获取机器人所在群列表该值可以不填
// - 请注意区分本接口和[获取群信息](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)的请求 URL
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/list
func (r *ChatService) GetChatListOfSelf(ctx context.Context, request *GetChatListOfSelfReq, options ...MethodOptionFunc) (*GetChatListOfSelfResp, *Response, error) {
	if r.cli.mock.mockChatGetChatListOfSelf != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatListOfSelf mock enable")
		return r.cli.mock.mockChatGetChatListOfSelf(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatListOfSelf",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatListOfSelfResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatListOfSelf mock ChatGetChatListOfSelf method
func (r *Mock) MockChatGetChatListOfSelf(f func(ctx context.Context, request *GetChatListOfSelfReq, options ...MethodOptionFunc) (*GetChatListOfSelfResp, *Response, error)) {
	r.mockChatGetChatListOfSelf = f
}

// UnMockChatGetChatListOfSelf un-mock ChatGetChatListOfSelf method
func (r *Mock) UnMockChatGetChatListOfSelf() {
	r.mockChatGetChatListOfSelf = nil
}

// GetChatListOfSelfReq ...
type GetChatListOfSelfReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
}

// getChatListOfSelfResp ...
type getChatListOfSelfResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetChatListOfSelfResp `json:"data,omitempty"`
}

// GetChatListOfSelfResp ...
type GetChatListOfSelfResp struct {
	Items     []*GetChatListOfSelfRespItem `json:"items,omitempty"`      // chat 列表
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetChatListOfSelfRespItem ...
type GetChatListOfSelfRespItem struct {
	ChatID      string `json:"chat_id,omitempty"`       // 群组 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar      string `json:"avatar,omitempty"`        // 群头像 URL
	Name        string `json:"name,omitempty"`          // 群名称
	Description string `json:"description,omitempty"`   // 群描述
	OwnerID     string `json:"owner_id,omitempty"`      // 群主 ID
	OwnerIDType IDType `json:"owner_id_type,omitempty"` // 群主 ID 类型
	External    bool   `json:"external,omitempty"`      // 是否是外部群
	TenantKey   string `json:"tenant_key,omitempty"`    // tenant key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatOld
//
// 为了更好地提升该接口的安全性，我们对其进行了升级，请尽快迁移至[新版本>>](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/get)
// 获取群名称、群主 ID、成员列表 ID 等群基本信息。
// - 需要启用机器人能力；机器人必须在群里
//
// doc: https://open.feishu.cn/document/ukTMukTMukTM/uMTO5QjLzkTO04yM5kDN
//
// Deprecated
func (r *ChatService) GetChatOld(ctx context.Context, request *GetChatOldReq, options ...MethodOptionFunc) (*GetChatOldResp, *Response, error) {
	if r.cli.mock.mockChatGetChatOld != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatOld mock enable")
		return r.cli.mock.mockChatGetChatOld(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatOld",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/chat/v4/info",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getChatOldResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatOld mock ChatGetChatOld method
func (r *Mock) MockChatGetChatOld(f func(ctx context.Context, request *GetChatOldReq, options ...MethodOptionFunc) (*GetChatOldResp, *Response, error)) {
	r.mockChatGetChatOld = f
}

// UnMockChatGetChatOld un-mock ChatGetChatOld method
func (r *Mock) UnMockChatGetChatOld() {
	r.mockChatGetChatOld = nil
}

// GetChatOldReq ...
type GetChatOldReq struct {
	ChatID string `query:"chat_id" json:"-"` // 群 ID
}

// getChatOldResp ...
type getChatOldResp struct {
	Code int64           `json:"code,omitempty"` // 返回码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 返回码描述
	Data *GetChatOldResp `json:"data,omitempty"` // -
}

// GetChatOldResp ...
type GetChatOldResp struct {
	Avatar                   string                  `json:"avatar,omitempty"`                      // 群头像
	Description              string                  `json:"description,omitempty"`                 // 群描述
	I18nNames                map[string]string       `json:"i18n_names,omitempty"`                  // 群国际化名称（设置了国际化名称才会有这个字段）
	ChatID                   string                  `json:"chat_id,omitempty"`                     // 群 ID
	Members                  []*GetChatOldRespMember `json:"members,omitempty"`                     // 成员列表
	Name                     string                  `json:"name,omitempty"`                        // 群名称，类型为group时有效
	Type                     string                  `json:"type,omitempty"`                        // 群类型，group表示群聊，p2p表示单聊
	OwnerUserID              string                  `json:"owner_user_id,omitempty"`               // 群主的 user_id（机器人是群主的时候没有这个字段）
	OwnerOpenID              string                  `json:"owner_open_id,omitempty"`               // 群主的 open_id （机器人是群主的时候没有这个字段）
	OnlyOwnerEdit            bool                    `json:"only_owner_edit,omitempty"`             // 是否仅群主可编辑群信息，群信息包括头像、名称、描述、公告
	OnlyOwnerAdd             bool                    `json:"only_owner_add,omitempty"`              // 是否仅群主可以添加人
	ShareAllowed             bool                    `json:"share_allowed,omitempty"`               // 是否允许分享群
	AddMemberVerify          bool                    `json:"add_member_verify,omitempty"`           // 是否开启入群验证
	OnlyOwnerAtAll           bool                    `json:"only_owner_at_all,omitempty"`           // 是否仅群主@all
	SendMessagePermission    string                  `json:"send_message_permission,omitempty"`     // 允许谁发送消息<br>all: 所有人<br>  owner： 仅群主<br>selected_member: 指定成员
	JoinMessageVisibility    MessageVisibility       `json:"join_message_visibility,omitempty"`     // 成员入群通知<br>all：所有人 <br>owner：仅群主 <br>not_anyone：不通知任何人"
	LeaveMessageVisibility   MessageVisibility       `json:"leave_message_visibility,omitempty"`    // 成员退群通知<br>all：所有人 <br>owner：仅群主 <br>not_anyone：不通知任何人
	GroupEmailEnabled        bool                    `json:"group_email_enabled,omitempty"`         // 是否开启群邮件
	SendGroupEmailPermission string                  `json:"send_group_email_permission,omitempty"` // 发送群邮件的权限<br>owner：仅群主  <br>group_member：群组内成员<br>tenant_member：团队成员 <br>all：所有人
}

// GetChatOldRespMember ...
type GetChatOldRespMember struct {
	OpenID string `json:"open_id,omitempty"` // 某成员的open_id
	UserID string `json:"user_id,omitempty"` // 某成员的user_id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// JoinChat 用户或机器人主动加入群聊。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 目前仅支持加入公开群
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/me_join
func (r *ChatService) JoinChat(ctx context.Context, request *JoinChatReq, options ...MethodOptionFunc) (*JoinChatResp, *Response, error) {
	if r.cli.mock.mockChatJoinChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#JoinChat mock enable")
		return r.cli.mock.mockChatJoinChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "JoinChat",
		Method:                "PATCH",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members/me_join",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(joinChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatJoinChat mock ChatJoinChat method
func (r *Mock) MockChatJoinChat(f func(ctx context.Context, request *JoinChatReq, options ...MethodOptionFunc) (*JoinChatResp, *Response, error)) {
	r.mockChatJoinChat = f
}

// UnMockChatJoinChat un-mock ChatJoinChat method
func (r *Mock) UnMockChatJoinChat() {
	r.mockChatJoinChat = nil
}

// JoinChatReq ...
type JoinChatReq struct {
	ChatID string `path:"chat_id" json:"-"` // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// joinChatResp ...
type joinChatResp struct {
	Code int64         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string        `json:"msg,omitempty"`  // 错误描述
	Data *JoinChatResp `json:"data,omitempty"`
}

// JoinChatResp ...
type JoinChatResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// CreateChatManager 将用户或机器人指定为群管理员。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 仅有群主可以指定群管理员
// - 对于普通群，最多指定 10 个管理员
// - 对于超大群，最多指定 20 个管理员
// - 每次请求最多指定 50 个用户或者 5 个机器人
// - 指定机器人类型的管理员请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/add_managers
func (r *ChatService) CreateChatManager(ctx context.Context, request *CreateChatManagerReq, options ...MethodOptionFunc) (*CreateChatManagerResp, *Response, error) {
	if r.cli.mock.mockChatCreateChatManager != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#CreateChatManager mock enable")
		return r.cli.mock.mockChatCreateChatManager(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "CreateChatManager",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/managers/add_managers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(createChatManagerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatCreateChatManager mock ChatCreateChatManager method
func (r *Mock) MockChatCreateChatManager(f func(ctx context.Context, request *CreateChatManagerReq, options ...MethodOptionFunc) (*CreateChatManagerResp, *Response, error)) {
	r.mockChatCreateChatManager = f
}

// UnMockChatCreateChatManager un-mock ChatCreateChatManager method
func (r *Mock) UnMockChatCreateChatManager() {
	r.mockChatCreateChatManager = nil
}

// CreateChatManagerReq ...
type CreateChatManagerReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员，需要有获取用户 UserID 的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), `union_id`：以 union_id 来识别成员([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), `open_id`：以 open_id 来识别成员([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), `app_id`：以 app_id 来识别成员([获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g))
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	ManagerIDs   []string `json:"manager_ids,omitempty"`    // 要增加的 manager_id, 示例值：["ou_9204a37300b3700d61effaa439f34295"], 最大长度：`50`
}

// createChatManagerResp ...
type createChatManagerResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *CreateChatManagerResp `json:"data,omitempty"`
}

// CreateChatManagerResp ...
type CreateChatManagerResp struct {
	ChatManagers    []string `json:"chat_managers,omitempty"`     // 群目前用户类型的管理员 id
	ChatBotManagers []string `json:"chat_bot_managers,omitempty"` // 群目前机器人类型的管理员 id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteChatManager 删除指定的群管理员（用户或机器人）
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 仅有群主可以删除群管理员
// - 每次请求最多指定 50 个用户或者 5 个机器人
// - 删除机器人类型的管理员请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-managers/delete_managers
func (r *ChatService) DeleteChatManager(ctx context.Context, request *DeleteChatManagerReq, options ...MethodOptionFunc) (*DeleteChatManagerResp, *Response, error) {
	if r.cli.mock.mockChatDeleteChatManager != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#DeleteChatManager mock enable")
		return r.cli.mock.mockChatDeleteChatManager(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "DeleteChatManager",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/managers/delete_managers",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteChatManagerResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatDeleteChatManager mock ChatDeleteChatManager method
func (r *Mock) MockChatDeleteChatManager(f func(ctx context.Context, request *DeleteChatManagerReq, options ...MethodOptionFunc) (*DeleteChatManagerResp, *Response, error)) {
	r.mockChatDeleteChatManager = f
}

// UnMockChatDeleteChatManager un-mock ChatDeleteChatManager method
func (r *Mock) UnMockChatDeleteChatManager() {
	r.mockChatDeleteChatManager = nil
}

// DeleteChatManagerReq ...
type DeleteChatManagerReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员，需要有获取用户 UserID 的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), `union_id`：以 union_id 来识别成员([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), `open_id`：以 open_id 来识别成员([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), `app_id`：以 app_id 来识别成员([获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g))
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	ManagerIDs   []string `json:"manager_ids,omitempty"`    // 要删除的 manager_id, 示例值：["ou_9204a37300b3700d61effaa439f34295"], 最大长度：`50`
}

// deleteChatManagerResp ...
type deleteChatManagerResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *DeleteChatManagerResp `json:"data,omitempty"`
}

// DeleteChatManagerResp ...
type DeleteChatManagerResp struct {
	ChatManagers    []string `json:"chat_managers,omitempty"`     // 群目前用户类型的管理员 id
	ChatBotManagers []string `json:"chat_bot_managers,omitempty"` // 群目前机器人类型的管理员 id
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// AddChatMember 将用户或机器人拉入群聊。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 如需拉用户进群，需要机器人对用户有可见性
// - 在开启 [仅群主和群管理员可添加群成员] 的设置时，仅有群主/管理员 或 创建群组且具备 [更新应用所创建群的群信息] 权限的机器人，可以拉用户或者机器人进群
// - 在未开启 [仅群主和群管理员可添加群成员] 的设置时，所有群成员都可以拉用户或机器人进群
// - 每次请求，最多拉50个用户或者5个机器人，并且群组最多容纳15个机器人
// - 拉机器人入群请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/create
func (r *ChatService) AddChatMember(ctx context.Context, request *AddChatMemberReq, options ...MethodOptionFunc) (*AddChatMemberResp, *Response, error) {
	if r.cli.mock.mockChatAddChatMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#AddChatMember mock enable")
		return r.cli.mock.mockChatAddChatMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "AddChatMember",
		Method:                "POST",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(addChatMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatAddChatMember mock ChatAddChatMember method
func (r *Mock) MockChatAddChatMember(f func(ctx context.Context, request *AddChatMemberReq, options ...MethodOptionFunc) (*AddChatMemberResp, *Response, error)) {
	r.mockChatAddChatMember = f
}

// UnMockChatAddChatMember un-mock ChatAddChatMember method
func (r *Mock) UnMockChatAddChatMember() {
	r.mockChatAddChatMember = nil
}

// AddChatMemberReq ...
type AddChatMemberReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 进群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员，需要有获取用户UserID的权限 ([什么是 User ID？](https://open.feishu.cn/document/home/user-identity-introduction/user-id)), `union_id`：以 union_id 来识别成员([什么是 Union ID？](https://open.feishu.cn/document/home/user-identity-introduction/union-id)), `open_id`：以 open_id 来识别成员([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id)), `app_id`：以 app_id 来识别成员([获取应用身份访问凭证](https://open.feishu.cn/document/ukTMukTMukTM/ukDNz4SO0MjL5QzM/g))
	SucceedType  *int64   `query:"succeed_type" json:"-"`   // 出现不可用ID后的处理方式 0/1/2, 示例值：0, 可选值有: `0`：兼容之前的策略，不存在/不可见的 ID 会拉群失败，并返回错误响应。存在已离职 ID 时，会将其他可用 ID 拉入群聊，返回拉群成功的响应。, `1`：将参数中可用的 ID 全部拉入群聊，返回拉群成功的响应，并展示剩余不可用的 ID 及原因。, `2`：参数中只要存在任一不可用的 ID ，就会拉群失败，返回错误响应，并展示出不可用的 ID。
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	IDList       []string `json:"id_list,omitempty"`        // 成员列表, 示例值：["ou_9204a37300b3700d61effaa439f34295"]
}

// addChatMemberResp ...
type addChatMemberResp struct {
	Code int64              `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string             `json:"msg,omitempty"`  // 错误描述
	Data *AddChatMemberResp `json:"data,omitempty"`
}

// AddChatMemberResp ...
type AddChatMemberResp struct {
	InvalidIDList    []string `json:"invalid_id_list,omitempty"`     // 无效成员列表
	NotExistedIDList []string `json:"not_existed_id_list,omitempty"` // ID不存在的成员列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// DeleteChatMember 将用户或机器人移出群聊。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 用户或机器人在任何条件下均可移除自己出群（即主动退群）
// - 仅有群主/管理员 或 创建群组并且具备 [更新应用所创建群的群信息] 权限的机器人，可以移除其他用户或者机器人
// - 每次请求，最多移除50个用户或者5个机器人
// - 移除机器人请使用 [app_id]
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/delete
func (r *ChatService) DeleteChatMember(ctx context.Context, request *DeleteChatMemberReq, options ...MethodOptionFunc) (*DeleteChatMemberResp, *Response, error) {
	if r.cli.mock.mockChatDeleteChatMember != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#DeleteChatMember mock enable")
		return r.cli.mock.mockChatDeleteChatMember(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "DeleteChatMember",
		Method:                "DELETE",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(deleteChatMemberResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatDeleteChatMember mock ChatDeleteChatMember method
func (r *Mock) MockChatDeleteChatMember(f func(ctx context.Context, request *DeleteChatMemberReq, options ...MethodOptionFunc) (*DeleteChatMemberResp, *Response, error)) {
	r.mockChatDeleteChatMember = f
}

// UnMockChatDeleteChatMember un-mock ChatDeleteChatMember method
func (r *Mock) UnMockChatDeleteChatMember() {
	r.mockChatDeleteChatMember = nil
}

// DeleteChatMemberReq ...
type DeleteChatMemberReq struct {
	MemberIDType *IDType  `query:"member_id_type" json:"-"` // 出群成员 id 类型 open_id/user_id/union_id/app_id, 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员, `union_id`：以 union_id 来识别成员, `open_id`：以 open_id 来识别成员, `app_id`：以 app_id 来识别成员
	ChatID       string   `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	IDList       []string `json:"id_list,omitempty"`        // 成员列表, 示例值：["ou_9204a37300b3700d61effaa439f34295"]
}

// deleteChatMemberResp ...
type deleteChatMemberResp struct {
	Code int64                 `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                `json:"msg,omitempty"`  // 错误描述
	Data *DeleteChatMemberResp `json:"data,omitempty"`
}

// DeleteChatMemberResp ...
type DeleteChatMemberResp struct {
	InvalidIDList []string `json:"invalid_id_list,omitempty"` // 无效成员列表
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatMemberList 如果用户在群中，则返回该群的成员列表。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 该接口不会返回群内的机器人成员
// - 由于返回的群成员列表会过滤掉机器人成员，因此返回的群成员个数可能会小于指定的page_size
// - 如果有同一时间加入群的群成员，会一次性返回，这会导致返回的群成员个数可能会大于指定的page_size
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/get
func (r *ChatService) GetChatMemberList(ctx context.Context, request *GetChatMemberListReq, options ...MethodOptionFunc) (*GetChatMemberListResp, *Response, error) {
	if r.cli.mock.mockChatGetChatMemberList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatMemberList mock enable")
		return r.cli.mock.mockChatGetChatMemberList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatMemberList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatMemberListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatMemberList mock ChatGetChatMemberList method
func (r *Mock) MockChatGetChatMemberList(f func(ctx context.Context, request *GetChatMemberListReq, options ...MethodOptionFunc) (*GetChatMemberListResp, *Response, error)) {
	r.mockChatGetChatMemberList = f
}

// UnMockChatGetChatMemberList un-mock ChatGetChatMemberList method
func (r *Mock) UnMockChatGetChatMemberList() {
	r.mockChatGetChatMemberList = nil
}

// GetChatMemberListReq ...
type GetChatMemberListReq struct {
	MemberIDType *IDType `query:"member_id_type" json:"-"` // 群成员 用户 ID 类型，详情参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction), 示例值："open_id", 可选值有: `user_id`：以 user_id 来识别成员, `union_id`：以 union_id 来识别成员, `open_id`：以 open_id 来识别成员
	PageToken    *string `query:"page_token" json:"-"`     // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize     *int64  `query:"page_size" json:"-"`      // 分页大小, 示例值：10, 最大值：`100`
	ChatID       string  `path:"chat_id" json:"-"`         // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// getChatMemberListResp ...
type getChatMemberListResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetChatMemberListResp `json:"data,omitempty"`
}

// GetChatMemberListResp ...
type GetChatMemberListResp struct {
	Items     []*GetChatMemberListRespItem `json:"items,omitempty"`      // 成员列表
	PageToken string                       `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                         `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetChatMemberListRespItem ...
type GetChatMemberListRespItem struct {
	MemberIDType IDType `json:"member_id_type,omitempty"` // 成员的用户 ID 类型，与查询参数中的 member_id_type 相同。取值为：`open_id`、`user_id`、`union_id`其中之一。
	MemberID     string `json:"member_id,omitempty"`      // 成员的用户ID，ID值与查询参数中的 member_id_type 对应。,不同 ID 的说明参见 [用户相关的 ID 概念](https://open.feishu.cn/document/home/user-identity-introduction/introduction)
	Name         string `json:"name,omitempty"`           // 名字
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// IsInChat 根据使用的access_token判断对应的用户或者机器人是否在群里。
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-members/is_in_chat
func (r *ChatService) IsInChat(ctx context.Context, request *IsInChatReq, options ...MethodOptionFunc) (*IsInChatResp, *Response, error) {
	if r.cli.mock.mockChatIsInChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#IsInChat mock enable")
		return r.cli.mock.mockChatIsInChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "IsInChat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/members/is_in_chat",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(isInChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatIsInChat mock ChatIsInChat method
func (r *Mock) MockChatIsInChat(f func(ctx context.Context, request *IsInChatReq, options ...MethodOptionFunc) (*IsInChatResp, *Response, error)) {
	r.mockChatIsInChat = f
}

// UnMockChatIsInChat un-mock ChatIsInChat method
func (r *Mock) UnMockChatIsInChat() {
	r.mockChatIsInChat = nil
}

// IsInChatReq ...
type IsInChatReq struct {
	ChatID string `path:"chat_id" json:"-"` // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
}

// isInChatResp ...
type isInChatResp struct {
	Code int64         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string        `json:"msg,omitempty"`  // 错误描述
	Data *IsInChatResp `json:"data,omitempty"`
}

// IsInChatResp ...
type IsInChatResp struct {
	IsInChat bool `json:"is_in_chat,omitempty"` // 用户或者机器人是否在群中
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetChatModeration 获取群发言模式、可发言用户名单等
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/uQjL04CN/uYTMuYTMuYTM)
// - 机器人 或 授权用户 必须在群里
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/get
func (r *ChatService) GetChatModeration(ctx context.Context, request *GetChatModerationReq, options ...MethodOptionFunc) (*GetChatModerationResp, *Response, error) {
	if r.cli.mock.mockChatGetChatModeration != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#GetChatModeration mock enable")
		return r.cli.mock.mockChatGetChatModeration(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "GetChatModeration",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/moderation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(getChatModerationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatGetChatModeration mock ChatGetChatModeration method
func (r *Mock) MockChatGetChatModeration(f func(ctx context.Context, request *GetChatModerationReq, options ...MethodOptionFunc) (*GetChatModerationResp, *Response, error)) {
	r.mockChatGetChatModeration = f
}

// UnMockChatGetChatModeration un-mock ChatGetChatModeration method
func (r *Mock) UnMockChatGetChatModeration() {
	r.mockChatGetChatModeration = nil
}

// GetChatModerationReq ...
type GetChatModerationReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`，字段权限要求: 获取用户 user ID
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值: "dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值: 10, 最大值：`100`
	ChatID     string  `path:"chat_id" json:"-"`       // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值: "oc_a0553eda9014c201e6969b478895c230"
}

// getChatModerationResp ...
type getChatModerationResp struct {
	Code int64                  `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                 `json:"msg,omitempty"`  // 错误描述
	Data *GetChatModerationResp `json:"data,omitempty"`
}

// GetChatModerationResp ...
type GetChatModerationResp struct {
	ModerationSetting string                       `json:"moderation_setting,omitempty"` // 群发言模式（all_members/only_owner/moderator_list，其中 moderator_list 表示部分用户可发言的模式）
	PageToken         string                       `json:"page_token,omitempty"`         // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore           bool                         `json:"has_more,omitempty"`           // 是否还有更多项
	Items             []*GetChatModerationRespItem `json:"items,omitempty"`              // 可发言用户列表
}

// GetChatModerationRespItem ...
type GetChatModerationRespItem struct {
	UserIDType IDType `json:"user_id_type,omitempty"` // 可发言用户 ID 类型
	UserID     string `json:"user_id,omitempty"`      // 可发言用户 ID
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateChatModeration 更新群组的发言权限设置，可设置为全员可发言、仅管理员可发言  或 指定用户可发言。
//
// 注意事项：
// - 需要开启[机器人能力](https://open.feishu.cn/document/uQjL04CN/uYTMuYTMuYTM)
// - 若以用户授权调用接口，**当授权用户是群主**时，可更新群发言权限
// - 若以租户授权调用接口(即以机器人身份调用接口)，当**机器人是群主** 或者 **机器人是创建群组、具备[更新应用所创建群的群信息]权限且仍在群内**时，可更新群发言权限
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-moderation/update
func (r *ChatService) UpdateChatModeration(ctx context.Context, request *UpdateChatModerationReq, options ...MethodOptionFunc) (*UpdateChatModerationResp, *Response, error) {
	if r.cli.mock.mockChatUpdateChatModeration != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#UpdateChatModeration mock enable")
		return r.cli.mock.mockChatUpdateChatModeration(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "UpdateChatModeration",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id/moderation",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateChatModerationResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatUpdateChatModeration mock ChatUpdateChatModeration method
func (r *Mock) MockChatUpdateChatModeration(f func(ctx context.Context, request *UpdateChatModerationReq, options ...MethodOptionFunc) (*UpdateChatModerationResp, *Response, error)) {
	r.mockChatUpdateChatModeration = f
}

// UnMockChatUpdateChatModeration un-mock ChatUpdateChatModeration method
func (r *Mock) UnMockChatUpdateChatModeration() {
	r.mockChatUpdateChatModeration = nil
}

// UpdateChatModerationReq ...
type UpdateChatModerationReq struct {
	UserIDType           *IDType  `query:"user_id_type" json:"-"`           // 用户 ID 类型, 示例值: "open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`，字段权限要求: 获取用户 user ID
	ChatID               string   `path:"chat_id" json:"-"`                 // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值: "oc_a0553eda9014c201e6969b478895c230"
	ModerationSetting    *string  `json:"moderation_setting,omitempty"`     // 群发言模式（all_members/only_owner/moderator_list，其中 moderator_list 表示部分用户可发言的模式）, 示例值: "moderator_list"
	ModeratorAddedList   []string `json:"moderator_added_list,omitempty"`   // 选择部分用户可发言模式时，添加的可发言用户列表（自动过滤不在群内的用户）
	ModeratorRemovedList []string `json:"moderator_removed_list,omitempty"` // 选择部分用户可发言模式时，移除的可发言用户列表（自动过滤不在群内的用户）
}

// updateChatModerationResp ...
type updateChatModerationResp struct {
	Code int64                     `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                    `json:"msg,omitempty"`  // 错误描述
	Data *UpdateChatModerationResp `json:"data,omitempty"`
}

// UpdateChatModerationResp ...
type UpdateChatModerationResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// SearchChat 搜索对用户或机器人可见的群列表，包括：用户或机器人所在的群、对用户或机器人公开的群。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/search
func (r *ChatService) SearchChat(ctx context.Context, request *SearchChatReq, options ...MethodOptionFunc) (*SearchChatResp, *Response, error) {
	if r.cli.mock.mockChatSearchChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#SearchChat mock enable")
		return r.cli.mock.mockChatSearchChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "SearchChat",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/search",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(searchChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatSearchChat mock ChatSearchChat method
func (r *Mock) MockChatSearchChat(f func(ctx context.Context, request *SearchChatReq, options ...MethodOptionFunc) (*SearchChatResp, *Response, error)) {
	r.mockChatSearchChat = f
}

// UnMockChatSearchChat un-mock ChatSearchChat method
func (r *Mock) UnMockChatSearchChat() {
	r.mockChatSearchChat = nil
}

// SearchChatReq ...
type SearchChatReq struct {
	UserIDType *IDType `query:"user_id_type" json:"-"` // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求:  获取用户 user ID
	Query      *string `query:"query" json:"-"`        // 关键词。注意：如果query为空值将返回空的结果, 示例值："abc"
	PageToken  *string `query:"page_token" json:"-"`   // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："dmJCRHhpd3JRbGV1VEVNRFFyTitRWDY5ZFkybmYrMEUwMUFYT0VMMWdENEtuYUhsNUxGMDIwemtvdE5ORjBNQQ=="
	PageSize   *int64  `query:"page_size" json:"-"`    // 分页大小, 示例值：10, 最大值：`100`
}

// searchChatResp ...
type searchChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *SearchChatResp `json:"data,omitempty"`
}

// SearchChatResp ...
type SearchChatResp struct {
	Items     []*SearchChatRespItem `json:"items,omitempty"`      // chat 列表
	PageToken string                `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                  `json:"has_more,omitempty"`   // 是否还有更多项
}

// SearchChatRespItem ...
type SearchChatRespItem struct {
	ChatID      string `json:"chat_id,omitempty"`       // 群组 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description)
	Avatar      string `json:"avatar,omitempty"`        // 群头像 URL
	Name        string `json:"name,omitempty"`          // 群名称
	Description string `json:"description,omitempty"`   // 群描述
	OwnerID     string `json:"owner_id,omitempty"`      // 群主 ID
	OwnerIDType IDType `json:"owner_id_type,omitempty"` // 群主 ID 类型
	External    bool   `json:"external,omitempty"`      // 是否是外部群
	TenantKey   string `json:"tenant_key,omitempty"`    // tenant key
}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// UpdateChat 更新群头像、群名称、群描述、群配置、转让群主等。
//
// 注意事项：
// - 应用需要开启[机器人能力](https://open.feishu.cn/document/home/develop-a-bot-in-5-minutes/create-an-app)
// - 若群未开启 [仅群主和群管理员可编辑群信息] 配置：
// - 群主/群管理员 或 创建群组且具备[更新应用所创建群的群信息]权限的机器人，可更新所有信息
// - 不满足上述条件的群成员或机器人，仅可更新群头像、群名称、群描述、群国际化名称信息
// - 若群开启了[仅群主和群管理员可编辑群信息]配置：
// - 群主/群管理员 或 创建群组且具备[更新应用所创建群的群信息]权限的机器人，可更新所有信息
// - 不满足上述条件的群成员或者机器人，任何群信息都不能修改
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat/update
func (r *ChatService) UpdateChat(ctx context.Context, request *UpdateChatReq, options ...MethodOptionFunc) (*UpdateChatResp, *Response, error) {
	if r.cli.mock.mockChatUpdateChat != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Chat#UpdateChat mock enable")
		return r.cli.mock.mockChatUpdateChat(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Chat",
		API:                   "UpdateChat",
		Method:                "PUT",
		URL:                   r.cli.openBaseURL + "/open-apis/im/v1/chats/:chat_id",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
		NeedUserAccessToken:   true,
	}
	resp := new(updateChatResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockChatUpdateChat mock ChatUpdateChat method
func (r *Mock) MockChatUpdateChat(f func(ctx context.Context, request *UpdateChatReq, options ...MethodOptionFunc) (*UpdateChatResp, *Response, error)) {
	r.mockChatUpdateChat = f
}

// UnMockChatUpdateChat un-mock ChatUpdateChat method
func (r *Mock) UnMockChatUpdateChat() {
	r.mockChatUpdateChat = nil
}

// UpdateChatReq ...
type UpdateChatReq struct {
	UserIDType             *IDType              `query:"user_id_type" json:"-"`             // 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
	ChatID                 string               `path:"chat_id" json:"-"`                   // 群 ID，详情参见[群ID 说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/chat-id-description), 示例值："oc_a0553eda9014c201e6969b478895c230"
	Avatar                 *string              `json:"avatar,omitempty"`                   // 群头像对应的 Image Key，可通过[上传图片](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/image/create)获取（注意：上传图片的 [image_type] 需要指定为 [avatar]）, 示例值："default-avatar_44ae0ca3-e140-494b-956f-78091e348435"
	Name                   *string              `json:"name,omitempty"`                     // 群名称, 示例值："群聊"
	Description            *string              `json:"description,omitempty"`              // 群描述, 示例值："测试群描述"
	I18nNames              *I18nNames           `json:"i18n_names,omitempty"`               // 群国际化名称
	AddMemberPermission    *AddMemberPermission `json:"add_member_permission,omitempty"`    // 加 user/bot 入群权限(all_members/only_owner), 示例值："all_members"
	ShareCardPermission    *ShareCardPermission `json:"share_card_permission,omitempty"`    // 群分享权限(allowed/not_allowed), 示例值："allowed"
	AtAllPermission        *AtAllPermission     `json:"at_all_permission,omitempty"`        // at 所有人权限(all_members/only_owner), 示例值："all_members"
	EditPermission         *EditPermission      `json:"edit_permission,omitempty"`          // 群编辑权限(all_members/only_owner), 示例值："all_members"
	OwnerID                *string              `json:"owner_id,omitempty"`                 // 新群主 ID, 示例值："4d7a3c6g"
	JoinMessageVisibility  *MessageVisibility   `json:"join_message_visibility,omitempty"`  // 入群消息可见性(only_owner/all_members/not_anyone), 示例值："only_owner"
	LeaveMessageVisibility *MessageVisibility   `json:"leave_message_visibility,omitempty"` // 出群消息可见性(only_owner/all_members/not_anyone), 示例值："only_owner"
	MembershipApproval     *MembershipApproval  `json:"membership_approval,omitempty"`      // 加群审批(no_approval_required/approval_required), 示例值："no_approval_required"
}

// updateChatResp ...
type updateChatResp struct {
	Code int64           `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string          `json:"msg,omitempty"`  // 错误描述
	Data *UpdateChatResp `json:"data,omitempty"`
}

// UpdateChatResp ...
type UpdateChatResp struct{}

// Code generated by lark_sdk_gen. DO NOT EDIT.

// GetContactCustomAttrList 获取企业自定义的用户字段配置信息
//
// 调用该接口前，需要先确认[企业管理员](https://www.feishu.cn/hc/zh-CN/articles/360049067822)在[企业管理后台 - 组织架构 - 成员字段管理](http://www.feishu.cn/admin/contacts/employee-field-new/custom) 自定义字段管理栏开启了“允许开放平台API调用“。
// ![通讯录.gif](//sf3-cn.feishucdn.com/obj/open-platform-opendoc/544738c94f13ef0b9ebaff53a5133cc7_E9EGMkXyzX.gif)
//
// doc: https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/contact-v3/custom_attr/list
func (r *ContactService) GetContactCustomAttrList(ctx context.Context, request *GetContactCustomAttrListReq, options ...MethodOptionFunc) (*GetContactCustomAttrListResp, *Response, error) {
	if r.cli.mock.mockContactGetContactCustomAttrList != nil {
		r.cli.log(ctx, LogLevelDebug, "[lark] Contact#GetContactCustomAttrList mock enable")
		return r.cli.mock.mockContactGetContactCustomAttrList(ctx, request, options...)
	}

	req := &RawRequestReq{
		Scope:                 "Contact",
		API:                   "GetContactCustomAttrList",
		Method:                "GET",
		URL:                   r.cli.openBaseURL + "/open-apis/contact/v3/custom_attrs",
		Body:                  request,
		MethodOption:          newMethodOption(options),
		NeedTenantAccessToken: true,
	}
	resp := new(getContactCustomAttrListResp)

	response, err := r.cli.RawRequest(ctx, req, resp)
	return resp.Data, response, err
}

// MockContactGetContactCustomAttrList mock ContactGetContactCustomAttrList method
func (r *Mock) MockContactGetContactCustomAttrList(f func(ctx context.Context, request *GetContactCustomAttrListReq, options ...MethodOptionFunc) (*GetContactCustomAttrListResp, *Response, error)) {
	r.mockContactGetContactCustomAttrList = f
}

// UnMockContactGetContactCustomAttrList un-mock ContactGetContactCustomAttrList method
func (r *Mock) UnMockContactGetContactCustomAttrList() {
	r.mockContactGetContactCustomAttrList = nil
}

// GetContactCustomAttrListReq ...
type GetContactCustomAttrListReq struct {
	PageSize  *int64  `query:"page_size" json:"-"`  // 分页大小, 示例值：10, 最大值：`100`
	PageToken *string `query:"page_token" json:"-"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："AQD9/Rn9eij9Pm39ED40/RYU5lvOM4s6zgbeeNNaWd%2BVKwAsoreeRWk0J2noGvJy"
}

// getContactCustomAttrListResp ...
type getContactCustomAttrListResp struct {
	Code int64                         `json:"code,omitempty"` // 错误码，非 0 表示失败
	Msg  string                        `json:"msg,omitempty"`  // 错误描述
	Data *GetContactCustomAttrListResp `json:"data,omitempty"`
}

// GetContactCustomAttrListResp ...
type GetContactCustomAttrListResp struct {
	Items     []*GetContactCustomAttrListRespItem `json:"items,omitempty"`      // 自定义字段定义
	PageToken string                              `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	HasMore   bool                                `json:"has_more,omitempty"`   // 是否还有更多项
}

// GetContactCustomAttrListRespItem ...
type GetContactCustomAttrListRespItem struct {
	ID       string                                    `json:"id,omitempty"`        // 自定义字段id
	Type     string                                    `json:"type,omitempty"`      // 自定义字段类型，可选值有:, `TEXT`：纯文本，用于纯文本描述人员，如备注, `HREF`：静态 URL，用于人员 Profile 跳转链接, `ENUMERATION`：枚举，用于结构化描述人员，如民族, `GENERIC_USER`：用户，用于描述人和人关系，如 HRBP, `PICTURE_ENUM`：枚举图片，以结构化的图片描述人员，如在人员 Profile 展示荣誉徽章
	Options  *GetContactCustomAttrListRespItemOptions  `json:"options,omitempty"`   // 选项定义，当type为`ENUMERATION`或者`PICTURE_ENUM`时此项有值，列举所有可选项
	I18nName *GetContactCustomAttrListRespItemI18nName `json:"i18n_name,omitempty"` // 自定义字段的字段名称
}

// GetContactCustomAttrListRespItemOptions ...
type GetContactCustomAttrListRespItemOptions struct {
	DefaultOptionID string                                           `json:"default_option_id,omitempty"` // 默认选项id
	OptionType      string                                           `json:"option_type,omitempty"`       // 选项类型, 可选值有: `TEXT`：文本选项, `PICTURE`：图片选项
	Options         []*GetContactCustomAttrListRespItemOptionsOption `json:"options,omitempty"`           // 选项列表
}

// GetContactCustomAttrListRespItemOptionsOption ...
type GetContactCustomAttrListRespItemOptionsOption struct {
	ID    string `json:"id,omitempty"`    // 枚举类型选项id
	Value string `json:"value,omitempty"` // 枚举选项值，当option_type为`TEXT`为文本值，当option_type为`PICTURE`时为图片链接
	Name  string `json:"name,omitempty"`  // 名称，仅option_type为PICTURE时有效
}

// GetContactCustomAttrListRespItemI18nName ...
type GetContactCustomAttrListRespItemI18nName struct {
	Locale string `json:"locale,omitempty"` // 语言版本
	Value  string `json:"value,omitempty"`  // 字段名
}
